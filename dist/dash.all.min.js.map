{"version":3,"sources":["..\\node_modules\\browser-pack\\_prelude.js","..\\externals\\base64.js","..\\externals\\cea608-parser.js","..\\externals\\xml2json.js","..\\index.js","..\\index_mediaplayerOnly.js","..\\node_modules\\base64-js\\index.js","..\\node_modules\\buffer\\index.js","..\\node_modules\\codem-isoboxer\\dist\\iso_boxer.js","..\\node_modules\\events\\events.js","..\\node_modules\\fast-deep-equal\\index.js","..\\node_modules\\ieee754\\index.js","..\\node_modules\\imsc\\src\\main\\js\\doc.js","..\\node_modules\\imsc\\src\\main\\js\\html.js","..\\node_modules\\imsc\\src\\main\\js\\isd.js","..\\node_modules\\imsc\\src\\main\\js\\main.js","..\\node_modules\\imsc\\src\\main\\js\\names.js","..\\node_modules\\imsc\\src\\main\\js\\styles.js","..\\node_modules\\imsc\\src\\main\\js\\utils.js","..\\node_modules\\is-buffer\\index.js","..\\node_modules\\isarray\\index.js","..\\node_modules\\process-nextick-args\\index.js","..\\node_modules\\process\\browser.js","..\\node_modules\\readable-stream\\duplex-browser.js","..\\node_modules\\readable-stream\\lib\\_stream_duplex.js","..\\node_modules\\readable-stream\\lib\\_stream_passthrough.js","..\\node_modules\\readable-stream\\lib\\_stream_readable.js","..\\node_modules\\readable-stream\\lib\\_stream_transform.js","..\\node_modules\\readable-stream\\lib\\_stream_writable.js","..\\node_modules\\readable-stream\\lib\\internal\\streams\\BufferList.js","..\\node_modules\\readable-stream\\lib\\internal\\streams\\destroy.js","..\\node_modules\\readable-stream\\lib\\internal\\streams\\stream-browser.js","..\\node_modules\\readable-stream\\node_modules\\core-util-is\\lib\\util.js","..\\node_modules\\readable-stream\\node_modules\\inherits\\inherits_browser.js","..\\node_modules\\readable-stream\\node_modules\\string_decoder\\lib\\string_decoder.js","..\\node_modules\\readable-stream\\passthrough.js","..\\node_modules\\readable-stream\\readable-browser.js","..\\node_modules\\readable-stream\\transform.js","..\\node_modules\\readable-stream\\writable-browser.js","..\\node_modules\\safe-buffer\\index.js","..\\node_modules\\sax\\lib\\sax.js","..\\node_modules\\stream-browserify\\index.js","..\\node_modules\\timers-browserify\\main.js","..\\node_modules\\util-deprecate\\browser.js","core\\Debug.js","core\\EventBus.js","core\\FactoryMaker.js","core\\Settings.js","core\\Utils.js","core\\Version.js","core\\errors\\Errors.js","core\\errors\\ErrorsBase.js","core\\events\\CoreEvents.js","core\\events\\Events.js","core\\events\\EventsBase.js","dash\\DashAdapter.js","dash\\DashHandler.js","dash\\DashMetrics.js","dash\\SegmentBaseLoader.js","dash\\WebmSegmentBaseLoader.js","dash\\constants\\DashConstants.js","dash\\controllers\\RepresentationController.js","dash\\controllers\\SegmentBaseController.js","dash\\controllers\\SegmentsController.js","dash\\models\\DashManifestModel.js","dash\\parser\\DashParser.js","dash\\parser\\maps\\CommonProperty.js","dash\\parser\\maps\\MapNode.js","dash\\parser\\maps\\RepresentationBaseValuesMap.js","dash\\parser\\maps\\SegmentValuesMap.js","dash\\parser\\matchers\\BaseMatcher.js","dash\\parser\\matchers\\DateTimeMatcher.js","dash\\parser\\matchers\\DurationMatcher.js","dash\\parser\\matchers\\NumericMatcher.js","dash\\parser\\matchers\\StringMatcher.js","dash\\parser\\objectiron.js","dash\\utils\\ListSegmentsGetter.js","dash\\utils\\Round10.js","dash\\utils\\SegmentBaseGetter.js","dash\\utils\\SegmentsUtils.js","dash\\utils\\TemplateSegmentsGetter.js","dash\\utils\\TimelineConverter.js","dash\\utils\\TimelineSegmentsGetter.js","dash\\vo\\AdaptationSet.js","dash\\vo\\BaseURL.js","dash\\vo\\Event.js","dash\\vo\\EventStream.js","dash\\vo\\ManifestInfo.js","dash\\vo\\MediaInfo.js","dash\\vo\\Mpd.js","dash\\vo\\Period.js","dash\\vo\\Representation.js","dash\\vo\\RepresentationInfo.js","dash\\vo\\Segment.js","dash\\vo\\StreamInfo.js","dash\\vo\\UTCTiming.js","streaming\\FragmentLoader.js","streaming\\ManifestLoader.js","streaming\\ManifestUpdater.js","streaming\\MediaPlayer.js","streaming\\MediaPlayerEvents.js","streaming\\MediaPlayerFactory.js","streaming\\PreBufferSink.js","streaming\\SourceBufferSink.js","streaming\\Stream.js","streaming\\StreamProcessor.js","streaming\\XlinkLoader.js","streaming\\constants\\Constants.js","streaming\\constants\\MetricsConstants.js","streaming\\constants\\ProtectionConstants.js","streaming\\controllers\\AbrController.js","streaming\\controllers\\BaseURLController.js","streaming\\controllers\\BlacklistController.js","streaming\\controllers\\BufferController.js","streaming\\controllers\\EventController.js","streaming\\controllers\\FragmentController.js","streaming\\controllers\\GapController.js","streaming\\controllers\\MediaController.js","streaming\\controllers\\MediaSourceController.js","streaming\\controllers\\PlaybackController.js","streaming\\controllers\\ScheduleController.js","streaming\\controllers\\StreamController.js","streaming\\controllers\\TimeSyncController.js","streaming\\controllers\\XlinkController.js","streaming\\metrics\\MetricsReporting.js","streaming\\metrics\\MetricsReportingEvents.js","streaming\\metrics\\controllers\\MetricsCollectionController.js","streaming\\metrics\\controllers\\MetricsController.js","streaming\\metrics\\controllers\\MetricsHandlersController.js","streaming\\metrics\\controllers\\RangeController.js","streaming\\metrics\\controllers\\ReportingController.js","streaming\\metrics\\metrics\\MetricsHandlerFactory.js","streaming\\metrics\\metrics\\handlers\\BufferLevelHandler.js","streaming\\metrics\\metrics\\handlers\\DVBErrorsHandler.js","streaming\\metrics\\metrics\\handlers\\GenericMetricHandler.js","streaming\\metrics\\metrics\\handlers\\HttpListHandler.js","streaming\\metrics\\reporting\\ReportingFactory.js","streaming\\metrics\\reporting\\reporters\\DVBReporting.js","streaming\\metrics\\utils\\DVBErrorsTranslator.js","streaming\\metrics\\utils\\HandlerHelpers.js","streaming\\metrics\\utils\\ManifestParsing.js","streaming\\metrics\\utils\\MetricSerialiser.js","streaming\\metrics\\utils\\RNG.js","streaming\\metrics\\vo\\DVBErrors.js","streaming\\metrics\\vo\\Metrics.js","streaming\\metrics\\vo\\Range.js","streaming\\metrics\\vo\\Reporting.js","streaming\\models\\BaseURLTreeModel.js","streaming\\models\\CmcdModel.js","streaming\\models\\FragmentModel.js","streaming\\models\\ManifestModel.js","streaming\\models\\MediaPlayerModel.js","streaming\\models\\MetricsModel.js","streaming\\models\\URIFragmentModel.js","streaming\\models\\VideoModel.js","streaming\\net\\FetchLoader.js","streaming\\net\\HTTPLoader.js","streaming\\net\\SchemeLoaderFactory.js","streaming\\net\\URLLoader.js","streaming\\net\\XHRLoader.js","streaming\\protection\\CommonEncryption.js","streaming\\protection\\Protection.js","streaming\\protection\\ProtectionEvents.js","streaming\\protection\\controllers\\ProtectionController.js","streaming\\protection\\controllers\\ProtectionKeyController.js","streaming\\protection\\drm\\KeySystemClearKey.js","streaming\\protection\\drm\\KeySystemPlayReady.js","streaming\\protection\\drm\\KeySystemW3CClearKey.js","streaming\\protection\\drm\\KeySystemWidevine.js","streaming\\protection\\errors\\ProtectionErrors.js","streaming\\protection\\models\\ProtectionModel_01b.js","streaming\\protection\\models\\ProtectionModel_21Jan2015.js","streaming\\protection\\models\\ProtectionModel_3Feb2014.js","streaming\\protection\\servers\\ClearKey.js","streaming\\protection\\servers\\DRMToday.js","streaming\\protection\\servers\\PlayReady.js","streaming\\protection\\servers\\Widevine.js","streaming\\protection\\vo\\ClearKeyKeySet.js","streaming\\protection\\vo\\KeyMessage.js","streaming\\protection\\vo\\KeyPair.js","streaming\\protection\\vo\\KeySystemAccess.js","streaming\\protection\\vo\\KeySystemConfiguration.js","streaming\\protection\\vo\\MediaCapability.js","streaming\\protection\\vo\\NeedKey.js","streaming\\rules\\DroppedFramesHistory.js","streaming\\rules\\RulesContext.js","streaming\\rules\\SwitchRequest.js","streaming\\rules\\SwitchRequestHistory.js","streaming\\rules\\ThroughputHistory.js","streaming\\rules\\abr\\ABRRulesCollection.js","streaming\\rules\\abr\\AbandonRequestsRule.js","streaming\\rules\\abr\\BolaRule.js","streaming\\rules\\abr\\DroppedFramesRule.js","streaming\\rules\\abr\\InsufficientBufferRule.js","streaming\\rules\\abr\\L2ARule.js","streaming\\rules\\abr\\SwitchHistoryRule.js","streaming\\rules\\abr\\ThroughputRule.js","streaming\\rules\\abr\\lolp\\LearningAbrController.js","streaming\\rules\\abr\\lolp\\LoLpQoEEvaluator.js","streaming\\rules\\abr\\lolp\\LoLpRule.js","streaming\\rules\\abr\\lolp\\LoLpWeightSelector.js","streaming\\rules\\abr\\lolp\\QoeInfo.js","streaming\\rules\\scheduling\\BufferLevelRule.js","streaming\\text\\EmbeddedTextHtmlRender.js","streaming\\text\\NotFragmentedTextBufferController.js","streaming\\text\\TextBufferController.js","streaming\\text\\TextController.js","streaming\\text\\TextSourceBuffer.js","streaming\\text\\TextTracks.js","streaming\\thumbnail\\ThumbnailController.js","streaming\\thumbnail\\ThumbnailTracks.js","streaming\\utils\\BaseURLSelector.js","streaming\\utils\\BoxParser.js","streaming\\utils\\Capabilities.js","streaming\\utils\\CustomTimeRanges.js","streaming\\utils\\DOMStorage.js","streaming\\utils\\DefaultURLUtils.js","streaming\\utils\\EBMLParser.js","streaming\\utils\\ErrorHandler.js","streaming\\utils\\InitCache.js","streaming\\utils\\IsoFile.js","streaming\\utils\\LiveEdgeFinder.js","streaming\\utils\\ObjectUtils.js","streaming\\utils\\RequestModifier.js","streaming\\utils\\SupervisorTools.js","streaming\\utils\\TTMLParser.js","streaming\\utils\\URLUtils.js","streaming\\utils\\VTTParser.js","streaming\\utils\\baseUrlResolution\\BasicSelector.js","streaming\\utils\\baseUrlResolution\\DVBSelector.js","streaming\\vo\\BitrateInfo.js","streaming\\vo\\DashJSError.js","streaming\\vo\\DataChunk.js","streaming\\vo\\FragmentRequest.js","streaming\\vo\\HeadRequest.js","streaming\\vo\\IsoBox.js","streaming\\vo\\IsoBoxSearchInfo.js","streaming\\vo\\MetricsList.js","streaming\\vo\\TextRequest.js","streaming\\vo\\TextTrackInfo.js","streaming\\vo\\Thumbnail.js","streaming\\vo\\ThumbnailTrackInfo.js","streaming\\vo\\URIFragmentData.js","streaming\\vo\\metrics\\BufferLevel.js","streaming\\vo\\metrics\\BufferState.js","streaming\\vo\\metrics\\DVRInfo.js","streaming\\vo\\metrics\\DroppedFrames.js","streaming\\vo\\metrics\\HTTPRequest.js","streaming\\vo\\metrics\\ManifestUpdate.js","streaming\\vo\\metrics\\PlayList.js","streaming\\vo\\metrics\\RepresentationSwitch.js","streaming\\vo\\metrics\\RequestsQueue.js","streaming\\vo\\metrics\\SchedulingInfo.js"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","_dereq_","module","T","R","ASCII","UTF8","encode","s","charCodeAt","push","decode","v","String","fromCharCode","join","BASE64","encodeArray","charAt","decodeArray","pop","Uint8Array","encodeASCII","decodeASCII","getCharForByte","byte","charCode","specialCea608CharsCodes","hasOwnProperty","numArrayToHexArray","numArray","hexArray","j","toString","PenState","foreground","underline","italics","background","flash","this","42","92","94","95","96","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","rowsLowCh1","17","18","21","22","23","16","19","20","rowsHighCh1","rowsLowCh2","25","26","29","30","31","24","27","28","rowsHighCh2","backgroundColors","logger","verboseFilter","DATA","DEBUG","INFO","WARNING","TEXT","ERROR","time","verboseLevel","setTime","newTime","log","severity","msg","minLevel","console","prototype","reset","setStyles","styles","attribs","style","isDefault","equals","other","copy","newPenState","StyledUnicodeChar","uchar","penState","setChar","setPenState","newChar","isEmpty","Row","chars","pos","currPenState","equal","empty","setCursor","absPos","moveCursor","relPos","newPos","backSpace","insertChar","char","clearFromPos","startPos","clear","clearToEndOfRow","getTextString","setPenStyles","CaptionScreen","rows","currRow","NR_ROWS","nrRollUpRows","setPen","setPAC","pacData","JSON","stringify","newRow","row","indent","prevPos","Math","max","color","setBkgData","bkgData","setRollUpRows","nrRows","rollUp","getDisplayText","topRowIndex","topRow","splice","asOneRow","displayText","text","rowNr","rowText","trim","getTextAndFormat","Cea608Channel","channelNumber","outputFilter","chNr","mode","verbose","displayedMemory","nonDisplayedMemory","lastOutputScreen","currRollUpRow","writeScreen","cueStartTime","modes","lastCueEndTime","getHandler","setHandler","newHandler","setMode","newMode","insertChars","screen","outputDataUpdate","cc_RCL","cc_BS","cc_AOF","cc_AON","cc_DER","cc_RU","cc_FON","cc_RDC","cc_TR","cc_RTD","cc_EDM","cc_CR","cc_ENM","cc_EOC","tmp","cc_TO","nrCols","cc_MIDROW","secondByte","colorIndex","floor","updateData","newCue","cueSplitAtTime","Cea608Parser","field","out1","out2","outputs","channels","currChNr","lastCmdA","lastCmdB","bufferedData","startTime","lastTime","dataCounters","padding","cmd","index","addData","byteList","cmdFound","b","charsFound","parseCmd","parseMidrow","parsePAC","parseBackgroundAttributes","parseChars","channel","interpretPAC","pacIndex","channelNr","charCodes","charCode1","oneCode","hexCodes","findCea608Nalus","raw","size","nalSize","cursor","cea608NaluRanges","isCEA608SEI","payloadType","payloadSize","countryCode","getUint8","providerCode","getUint16","userIdentifier","getUint32","userDataTypeCode","extractCea608DataFromRange","cea608Range","fieldData","ccCount","ccValid","ccType","ccData1","ccData2","undefined","cea608parser","config","escapeMode","attributePrefix","arrayAccessForm","emptyNodeForm","enableToStringFunc","arrayAccessFormPaths","skipEmptyTextNodesForObj","stripWhitespaces","datetimeAccessFormPaths","useDoubleQuotes","xmlElementsFilter","jsonPropertiesFilter","keepCData","ignoreRoot","initConfigDefaults","DOMNodeTypes","ELEMENT_NODE","TEXT_NODE","CDATA_SECTION_NODE","COMMENT_NODE","DOCUMENT_NODE","getNodeLocalName","node","nodeLocalName","localName","baseName","nodeName","escapeXmlChars","str","replace","checkInStdFiltersArrayForm","stdFiltersArrayForm","obj","name","path","idx","filterPath","RegExp","test","toArrayAccessForm","childName","Array","fromXmlDateTime","prop","bits","split","d","Date","secondBits","setHours","setMilliseconds","offsetMinutes","Number","setMinutes","getMinutes","getTimezoneOffset","indexOf","UTC","getFullYear","getMonth","getDate","getHours","getSeconds","getMilliseconds","parseDOMChildren","nodeType","result","Object","nodeChildren","childNodes","cidx","child","__cnt","children","childPath","childType","__children","aidx","attributes","attr","value2","value","m","ml","matchers","matchobj","converter","nodePrefix","prefix","getNodePrefix","__prefix","__text","fullPath","checkFromXmlDateTimePaths","__cdata","nodeValue","startTag","jsonObj","element","attrList","closed","resultStr","attrName","attrVal","substr","endTag","elementName","jsonXmlSpecialElem","jsonObjField","suffix","endsWith","Function","jsonXmlElemCount","elementsCnt","it","parseJSONAttributes","ait","parseJSONTextObject","jsonTxtObj","parseJSONTextAttrs","getJsonPropertyPath","jsonObjPath","jsonPropName","parseJSONArray","jsonArrRoot","jsonArrObj","arIdx","parseJSONObject","propertyName","subObj","toISOString","parseXmlString","xmlDocStr","xmlDoc","window","ActiveXObject","DOMParser","parser","parseFromString","getElementsByTagNameNS","err","async","loadXML","asArray","toXmlDateTime","dt","asDateTime","xml2json","xml_str2json","json2xml_str","json2xml","getVersion","dashjs","Protection","_srcStreamingProtectionProtection2","MetricsReporting","_srcStreamingMetricsMetricsReporting2","MediaPlayerFactory","_srcStreamingMediaPlayerFactory2","Debug","_srcCoreDebug2","MediaPlayer","_index_mediaplayerOnly","context","global","_srcStreamingMediaPlayer2","FactoryMaker","_srcCoreFactoryMaker2","Version","_srcCoreVersion","getVersionString","byteLength","b64","lens","getLens","validLen","placeHoldersLen","toByteArray","arr","Arr","_byteLength","curByte","len","revLookup","fromByteArray","uint8","extraBytes","parts","len2","encodeChunk","lookup","start","end","num","output","base64","ieee754","Buffer","SlowBuffer","alloc","INSPECT_MAX_BYTES","K_MAX_LENGTH","createBuffer","RangeError","buf","__proto__","arg","encodingOrOffset","from","TypeError","allocUnsafe","string","encoding","isEncoding","actual","write","slice","fromString","ArrayBuffer","isView","fromArrayLike","isInstance","buffer","array","byteOffset","fromArrayBuffer","valueOf","isBuffer","checked","numberIsNaN","type","isArray","data","fromObject","Symbol","toPrimitive","assertSize","mustMatch","arguments","loweredCase","utf8ToBytes","base64ToBytes","toLowerCase","swap","bidirectionalIndexOf","val","dir","arrayIndexOf","lastIndexOf","indexSize","arrLength","valLength","read","readUInt16BE","foundIndex","found","hexWrite","offset","remaining","strLen","parsed","parseInt","asciiWrite","blitBuffer","byteArray","asciiToBytes","base64Slice","utf8Slice","min","res","thirdByte","fourthByte","tempCodePoint","firstByte","codePoint","bytesPerSequence","codePoints","MAX_ARGUMENTS_LENGTH","apply","decodeCodePointsArray","kMaxLength","TYPED_ARRAY_SUPPORT","foo","typedArraySupport","error","defineProperty","enumerable","get","species","configurable","writable","poolSize","fill","allocUnsafeSlow","_isBuffer","compare","x","y","concat","list","swap16","swap32","swap64","toLocaleString","hexSlice","asciiSlice","latin1Slice","utf16leSlice","inspect","target","thisStart","thisEnd","thisCopy","targetCopy","includes","isFinite","units","hi","lo","utf16leToBytes","toJSON","_arr","ret","out","toHex","bytes","checkOffset","ext","checkInt","checkIEEE754","writeFloat","littleEndian","noAssert","writeDouble","newBuf","subarray","readUIntLE","mul","readUIntBE","readUInt8","readUInt16LE","readUInt32LE","readUInt32BE","readIntLE","pow","readIntBE","readInt8","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readFloatLE","readFloatBE","readDoubleLE","readDoubleBE","writeUIntLE","writeUIntBE","writeUInt8","writeUInt16LE","writeUInt16BE","writeUInt32LE","writeUInt32BE","writeIntLE","limit","sub","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","targetStart","copyWithin","set","INVALID_BASE64_RE","Infinity","leadSurrogate","base64clean","src","dst","constructor","ISOBoxer","parseBuffer","arrayBuffer","ISOFile","parse","addBoxProcessor","ISOBox","_boxProcessors","createFile","createBox","parent","newBox","create","append","createFullBox","version","flags","Utils","dataViewToString","dataView","impliedEncoding","TextDecoder","utf8ToByteArray","TextEncoder","appendBox","box","_offset","_cursor","_root","_raw","_parent","boxes","Cursor","initialOffset","DataView","fetch","fetchAll","returnEarly","_sweep","getLength","_rawo","_parseBox","_boxContainers","_procField","_parsing","_readField","_writeField","_procFieldArray","_procFullBox","_procEntries","fn","_procSubEntries","entry","_procEntryField","_procSubBoxes","_readUint","_readInt","_readTemplate","_readTerminatedString","_readString","_readData","_readUTF8String","getInt8","getInt16","getInt32","s1","s2","_incomplete","largesize","_parseContainerBox","_data","_parseFullBox","_writeData","_writeInt","setInt8","setInt16","setInt32","setUint32","_writeUint","setUint8","setUint16","_writeString","_writeTerminatedString","_writeTemplate","pre","post","_writeUTF8String","entry_count","nbCompatibleBrands","language","DataSize","sample_count","reference_count","reference","reference_type","referenced_size","sap","starts_with_SAP","SAP_type","SAP_delta_time","subsegment_count","subsegment","ranges_count","range","subsample_count","subsample","reserved","length_size_of_traf_num","length_size_of_trun_num","length_size_of_sample_num","number_of_entry","sample","objectCreate","proto","F","objectKeys","keys","k","bind","EventEmitter","_events","_eventsCount","_maxListeners","hasDefineProperty","defaultMaxListeners","$getMaxListeners","that","_addListener","listener","prepend","events","existing","newListener","emit","unshift","warned","w","emitter","count","warn","message","onceWrapper","fired","removeListener","wrapFn","args","_onceWrap","state","wrapped","_listeners","unwrap","evlistener","unwrapListeners","arrayClone","listenerCount","setMaxListeners","isNaN","getMaxListeners","er","handler","doError","isFn","self","listeners","emitNone","arg1","emitOne","arg2","emitTwo","arg3","emitThree","emitMany","on","addListener","prependListener","once","prependOnceListener","position","originalListener","shift","spliceOne","removeAllListeners","key","rawListeners","eventNames","Reflect","ownKeys","keyList","hasProp","arrA","arrB","dateA","dateB","getTime","regexpA","regexpB","isLE","mLen","nBytes","eLen","eMax","eBias","nBits","NaN","rt","abs","LN2","resolveTiming","doc","prev_sibling","isinseq","timeContainer","implicit_begin","begin","explicit_begin","implicit_end","set_i","sets","content_i","contents","POSITIVE_INFINITY","explicit_end","explicit_dur","_registerEvent","ForeignElement","TT","head","body","Head","styling","layout","Styling","Style","id","styleAttrs","styleRefs","Layout","regions","ContentElement","kind","IdentifiedElement","LayoutElement","regionID","StyledElement","AnimatedElement","ContainerElement","TimedElement","Body","Div","P","Span","AnonymousSpan","Br","Region","Set","elementGetXMLID","elementGetStyleRefs","elementGetStyles","errorHandler","qname","uri","local","sa","imscStyles","byQName","byName","zIndex","reportWarning","reportError","findAttribute","ns","parseTimeExpression","tickRate","effectiveFrameRate","exec","parseFloat","mergeChainedStyles","sref","mergeStylesIfNotPresent","mergeReferencedStyles","stylerefs","styleattrs","from_styles","into_styles","sname","reportFatal","fatal","searchval","cur","curval","imscDoc","sax","imscNames","imscUtils","fromXML","xmlstring","metadataHandler","xmlns","estack","xmllangstack","xmlspacestack","metadata_depth","onclosetag","sid","cs","ns_tt","onCloseTag","ontext","initFromText","onText","onopentag","xmlspace","xmllang","line","column","initFromNode","nb","st","attrs","onOpenTag","close","hasRegions","dr","createDefaultRegion","region_i","cellResolution","cr","ns_ttp","h","extractCellResolution","frtr","fps_attr","fps","frm_attr","frm","efps","tr","trattr","extractFrameAndTickRate","aspectRatio","ar","ns_ittp","rslt","extractAspectRatio","ns_tts","parseLength","extractExtent","pxDimensions","unit","elem","b_i","e_i","getMediaTimeRange","getMediaTimeEvents","region","elementGetRegionID","dur","processTiming","tc","elementGetTimeContainer","space","imscHTML","processElement","dom_parent","isd_element","document","createElement","margin","STYLING_MAP_DEFS","sm","map","proc_e","wdir","writingMode","ipd","bpd","lp","linePadding","padmeasure","ceil","paddingLeft","paddingRight","paddingTop","paddingBottom","mra","multiRowAlign","display","textAlign","appendChild","fillLineGap","flg","cbuf","cc","span","textContent","linelist","constructLineList","lineList","l","elements","br","lastnode","parentElement","insertBefore","nextSibling","applyMultiRowAlign","se","start_elem","ee","end_elem","pospadpxlen","negpadpxlen","borderLeftColor","bgcolor","borderLeftStyle","borderLeftWidth","marginLeft","borderRightColor","borderRightStyle","borderRightWidth","marginRight","borderTopColor","borderTopStyle","borderTopWidth","marginTop","borderBottomColor","borderBottomStyle","borderBottomWidth","marginBottom","applyLinePadding","par_edges","rect2edges","getBoundingClientRect","par_before","par_after","sign","frontier","pad","before","after","backgroundColor","applyFillLineGap","enableRollUp","displayAlign","rb","RegionPBuffer","currentISDState","previousISDState","plist","body_elem","firstElementChild","bottom","transition","transform","rect","edges","top","left","right","llist","curbgcolor","childElementCount","height","width","before1","after1","before2","after2","isSameLine","bpd_dir","ipd_dir","firstChild","Node","HTMLStylingMapDefintion","qName","mapFunc","render","isd","imgResolver","eheight","ewidth","displayForcedOnlyMode","clientHeight","clientWidth","twidth","round","rootcontainer","regionH","regionW","dom_element","direction","flexDirection","justifyContent","hdelta","wdelta","fontFamily","fontSize","fontStyle","fontWeight","lineHeight","opacity","overflow","ta","textDecoration","textShadow","thickness","ub","unicodeBidi","visibility","whiteSpace","img","STYLMAP_BY_QNAME","isdProcessContentElement","inherited_region_id","associated_region_id","ISDContentElement","spec_attr","wm","all","ps","es","outs","inherit","ivs","initial","z","compute","cstyle","qnameb","applies","trimmedspan","elist","constructSpanList","br_pos","pruneEmptySpans","backgroundImage","showBackground","region_id","ISD","tt","ttelem","imscISD","generateISD","renderHTML","ns_xml","ns_itts","ns_smpte","ns_ebutts","StylingAttributeDefinition","initialValue","appliesTo","isInherit","isAnimatable","parseFunc","computeFunc","animatable","parseColor","ffs","fs","lh","extent","HEX_COLOR_RE","DEC_COLOR_RE","DEC_COLORA_RE","NAMED_COLOR","transparent","black","silver","gray","white","maroon","red","purple","fuchsia","magenta","green","lime","olive","yellow","navy","blue","teal","aqua","cyan","nc","LENGTH_RE","isSlowBuffer","process","nextTick","cachedSetTimeout","cachedClearTimeout","defaultSetTimout","defaultClearTimeout","runTimeout","fun","setTimeout","clearTimeout","currentQueue","queue","draining","queueIndex","cleanUpNextTick","drainQueue","timeout","run","marker","runClearTimeout","Item","noop","title","browser","env","argv","versions","off","binding","cwd","chdir","umask","pna","Duplex","util","inherits","Readable","Writable","method","options","readable","allowHalfOpen","onend","_writableState","ended","onEndNT","highWaterMark","_readableState","destroyed","_destroy","cb","PassThrough","Transform","_transform","chunk","ReadableState","EElistenerCount","Stream","OurUint8Array","debugUtil","debug","debuglog","StringDecoder","BufferList","destroyImpl","kProxyEvents","stream","isDuplex","objectMode","readableObjectMode","hwm","readableHwm","readableHighWaterMark","defaultHwm","pipes","pipesCount","flowing","endEmitted","reading","sync","needReadable","emittedReadable","readableListening","resumeScheduled","defaultEncoding","awaitDrain","readingMore","decoder","_read","destroy","readableAddChunk","addToFront","skipChunkCheck","emitReadable","onEofChunk","_isUint8Array","chunkInvalid","getPrototypeOf","_uint8ArrayToBuffer","addChunk","maybeReadMore","needMoreData","_undestroy","undestroy","isPaused","setEncoding","enc","MAX_HWM","howMuchToRead","computeNewHighWaterMark","emitReadable_","flow","maybeReadMore_","nReadingNextTick","resume_","fromList","hasStrings","next","tail","copyFromBufferString","copyFromBuffer","fromListPartial","endReadable","endReadableNT","xs","nOrig","doRead","pipe","dest","pipeOpts","endFn","stdout","stderr","unpipe","onunpipe","unpipeInfo","hasUnpiped","onclose","onfinish","ondrain","onerror","ondata","cleanedUp","needDrain","pipeOnDrain","increasedAwaitDrain","pause","event","resume","dests","ev","wrap","_this","paused","_fromList","_transformState","afterTransform","ts","transforming","writecb","writechunk","rs","needTransform","writeencoding","flush","_flush","prefinish","done","_write","_this2","err2","CorkedRequest","finish","corkReq","callback","pendingcb","corkedRequestsFree","onCorkedFinish","asyncWrite","setImmediate","WritableState","internalUtil","deprecate","realHasInstance","nop","writableObjectMode","writableHwm","writableHighWaterMark","finalCalled","ending","finished","noDecode","decodeStrings","writing","corked","bufferProcessing","onwrite","writelen","onwriteStateUpdate","finishMaybe","errorEmitted","onwriteError","needFinish","bufferedRequest","clearBuffer","afterWrite","lastBufferedRequest","prefinished","bufferedRequestCount","writev","_writev","final","_final","doWrite","onwriteDrain","holder","allBuffers","isBuf","callFinal","need","getBuffer","current","_","hasInstance","object","writeAfterEnd","valid","validChunk","newChunk","decodeChunk","last","writeOrBuffer","cork","uncork","setDefaultEncoding","endWritable","instance","Constructor","_classCallCheck","custom","emitErrorNT","readableDestroyed","writableDestroyed","objectToString","isBoolean","isNull","isNullOrUndefined","isNumber","isString","isSymbol","isUndefined","isRegExp","re","isObject","isDate","isError","isFunction","isPrimitive","ctor","superCtor","super_","TempCtor","nenc","retried","_normalizeEncoding","normalizeEncoding","utf16Text","utf16End","fillLast","utf8FillLast","base64Text","base64End","simpleWrite","simpleEnd","lastNeed","lastTotal","lastChar","utf8CheckByte","utf8CheckExtraBytes","total","utf8CheckIncomplete","copyProps","SafeBuffer","strict","opt","SAXParser","SAXStream","createStream","MAX_BUFFER_LENGTH","buffers","clearBuffers","q","bufferCheckPosition","lowercase","lowercasetags","looseCase","tags","closedRoot","sawRoot","tag","noscript","S","BEGIN","strictEntities","ENTITIES","XML_ENTITIES","attribList","rootNS","trackPosition","EVENTS","BEGIN_WHITESPACE","beginWhiteSpace","starti","textNode","substring","not","whitespace","strictFail","TEXT_ENTITY","OPEN_WAKA","startTagPosition","SCRIPT","SCRIPT_ENDING","script","CLOSE_TAG","SGML_DECL","sgmlDecl","is","nameStart","OPEN_TAG","tagName","PROC_INST","procInstName","procInstBody","toUpperCase","CDATA","emitNode","cdata","COMMENT","comment","DOCTYPE","doctype","quote","SGML_DECL_QUOTED","DOCTYPE_DTD","DOCTYPE_QUOTED","DOCTYPE_DTD_QUOTED","COMMENT_ENDING","COMMENT_ENDED","textopts","CDATA_ENDING","CDATA_ENDING_2","PROC_INST_ENDING","PROC_INST_BODY","nameBody","newTag","openTag","OPEN_TAG_SLASH","ATTRIB","closeTag","attribName","attribValue","ATTRIB_NAME","ATTRIB_VALUE","attrib","ATTRIB_NAME_SAW_WHITE","ATTRIB_VALUE_QUOTED","ATTRIB_VALUE_UNQUOTED","ATTRIB_VALUE_ENTITY_Q","ATTRIB_VALUE_CLOSED","attribEnd","ATTRIB_VALUE_ENTITY_U","CLOSE_TAG_SAW_WHITE","returnState","parseEntity","entity","entityBody","entityStart","maxAllowed","maxActual","closeText","checkBufferLength","flushBuffers","ex","streamWraps","filter","_parser","me","_decoder","forEach","SD","number","letter","XML_NAMESPACE","XMLNS_NAMESPACE","xml","charClass","reduce","charclass","match","stringFromCharCode","STATE","COMMENT_STARTING","amp","gt","lt","quot","apos","AElig","Aacute","Acirc","Agrave","Aring","Atilde","Auml","Ccedil","ETH","Eacute","Ecirc","Egrave","Euml","Iacute","Icirc","Igrave","Iuml","Ntilde","Oacute","Ocirc","Ograve","Oslash","Otilde","Ouml","THORN","Uacute","Ucirc","Ugrave","Uuml","Yacute","aacute","acirc","aelig","agrave","aring","atilde","auml","ccedil","eacute","ecirc","egrave","eth","euml","iacute","icirc","igrave","iuml","ntilde","oacute","ocirc","ograve","oslash","otilde","ouml","szlig","thorn","uacute","ucirc","ugrave","uuml","yacute","yuml","reg","nbsp","iexcl","cent","pound","curren","yen","brvbar","sect","uml","ordf","laquo","shy","macr","deg","plusmn","sup1","sup2","sup3","acute","micro","para","middot","cedil","ordm","raquo","frac14","frac12","frac34","iquest","times","divide","OElig","oelig","Scaron","scaron","Yuml","fnof","circ","tilde","Alpha","Beta","Gamma","Delta","Epsilon","Zeta","Eta","Theta","Iota","Kappa","Lambda","Mu","Nu","Xi","Omicron","Pi","Rho","Sigma","Tau","Upsilon","Phi","Chi","Psi","Omega","alpha","beta","gamma","delta","epsilon","zeta","eta","theta","iota","kappa","lambda","mu","nu","xi","omicron","pi","rho","sigmaf","sigma","tau","upsilon","phi","chi","psi","omega","thetasym","upsih","piv","ensp","emsp","thinsp","zwnj","zwj","lrm","rlm","ndash","mdash","lsquo","rsquo","sbquo","ldquo","rdquo","bdquo","dagger","Dagger","bull","hellip","permil","prime","Prime","lsaquo","rsaquo","oline","frasl","euro","image","weierp","real","trade","alefsym","larr","uarr","rarr","darr","harr","crarr","lArr","uArr","rArr","dArr","hArr","forall","part","exist","nabla","isin","notin","ni","prod","sum","minus","lowast","radic","infin","ang","and","or","cap","cup","int","there4","sim","cong","asymp","ne","equiv","le","ge","sup","nsub","sube","supe","oplus","otimes","perp","sdot","lceil","rceil","lfloor","rfloor","lang","rang","loz","spades","clubs","hearts","diams","normalize","attribute","qualName","qn","selfClosing","nv","isSelfClosing","closeTo","entityLC","numStr","fromCodePoint","highSurrogate","lowSurrogate","codeUnits","EE","source","_isStdio","didOnEnd","cleanup","immediateIds","nextImmediateId","Timeout","clearFn","_id","_clearFn","setInterval","clearInterval","unref","ref","enroll","item","msecs","_idleTimeoutId","_idleTimeout","unenroll","_unrefActive","active","_onTimeout","clearImmediate","localStorage","trace","LOG_LEVEL_FATAL","LOG_LEVEL_ERROR","LOG_LEVEL_WARNING","LOG_LEVEL_INFO","LOG_LEVEL_DEBUG","eventBus","_EventBus2","getInstance","settings","logFn","showLogTimestamp","showCalleeName","getLogFn","doLog","level","logTime","getClassName","getType","params","_len6","_key6","logLevel","dispatchEvent","trigger","_eventsEvents2","LOG","getLogger","_len","_key","_len2","_key2","_len3","_key3","info","_len4","_key4","_len5","_key5","setLogTimestampVisible","setCalleeNameVisible","__dashjs_factory_name","factory","_FactoryMaker2","getSingletonFactory","LOG_LEVEL_NONE","updateSingletonFactory","EventBus","handlers","getHandlerIdx","scope","some","priority","getStreamId","streamId","mediaType","payload","filters","_streamingMediaPlayerEvents","EVENT_MODE_ON_RECEIVE","EVENT_PRIORITY_LOW","EVENT_PRIORITY_HIGH","singletonContexts","singletonFactories","classFactories","extend","childInstance","override","getSingletonInstance","setSingletonInstance","className","deleteSingletonInstances","classConstructor","getFactoryByName","merge","getSingletonFactoryByName","updateFactory","getClassFactory","getClassFactoryByName","updateClassFactory","factoriesArray","classInstance","extensionObject","extension","Settings","defaultSettings","_coreDebug2","streaming","metricsMaxListDepth","abandonLoadTimeout","liveDelayFragmentCount","liveDelay","scheduleWhilePaused","fastSwitchEnabled","flushBufferAtTrackSwitch","calcSegmentAvailabilityRangeFromTimeline","reuseExistingSourceBuffers","bufferPruningInterval","bufferToKeep","jumpGaps","jumpLargeGaps","smallGapLimit","stableBufferTime","bufferTimeAtTopQuality","bufferTimeAtTopQualityLongForm","longFormContentDurationThreshold","wallclockTimeUpdateInterval","lowLatencyEnabled","keepProtectionMediaKeys","useManifestDateHeaderTimeSource","useSuggestedPresentationDelay","useAppendWindow","manifestUpdateRetryInterval","stallThreshold","liveCatchup","minDrift","maxDrift","playbackRate","latencyThreshold","playbackBufferMin","enabled","_streamingConstantsConstants2","LIVE_CATCHUP_MODE_DEFAULT","lastBitrateCachingInfo","ttl","lastMediaSettingsCachingInfo","cacheLoadThresholds","video","audio","trackSwitchMode","TRACK_SWITCH_MODE_ALWAYS_REPLACE","TRACK_SWITCH_MODE_NEVER_REPLACE","selectionModeForInitialTrack","TRACK_SELECTION_MODE_HIGHEST_BITRATE","fragmentRequestTimeout","retryIntervals","_retryIntervals","_defineProperty","_streamingVoMetricsHTTPRequest","HTTPRequest","MPD_TYPE","XLINK_EXPANSION_TYPE","MEDIA_SEGMENT_TYPE","INIT_SEGMENT_TYPE","BITSTREAM_SWITCHING_SEGMENT_TYPE","INDEX_SEGMENT_TYPE","OTHER_TYPE","retryAttempts","_retryAttempts","abr","movingAverageMethod","MOVING_AVERAGE_SLIDING_WINDOW","ABRStrategy","ABR_STRATEGY_DYNAMIC","bandwidthSafetyFactor","useDefaultABRRules","useDeadTimeLatency","limitBitrateByPortal","usePixelRatioInLimitBitrateByPortal","maxBitrate","minBitrate","maxRepresentationRatio","initialBitrate","initialRepresentationRatio","autoSwitchBitrate","fetchThroughputCalculationMode","ABR_FETCH_THROUGHPUT_CALCULATION_DOWNLOADED_DATA","cmcd","cid","_UtilsJs2","clone","update","settingsObj","mixinSettings","_name","mixin","url","modifiedUrl","URL","param","searchParams","href","random","hash","VERSION","Errors","_get","MANIFEST_LOADER_PARSING_FAILURE_ERROR_CODE","MANIFEST_LOADER_LOADING_FAILURE_ERROR_CODE","XLINK_LOADER_LOADING_FAILURE_ERROR_CODE","SEGMENTS_UPDATE_FAILED_ERROR_CODE","SEGMENTS_UNAVAILABLE_ERROR_CODE","SEGMENT_BASE_LOADER_ERROR_CODE","TIME_SYNC_FAILED_ERROR_CODE","FRAGMENT_LOADER_LOADING_FAILURE_ERROR_CODE","FRAGMENT_LOADER_NULL_REQUEST_ERROR_CODE","URL_RESOLUTION_FAILED_GENERIC_ERROR_CODE","APPEND_ERROR_CODE","REMOVE_ERROR_CODE","DATA_UPDATE_FAILED_ERROR_CODE","CAPABILITY_MEDIASOURCE_ERROR_CODE","CAPABILITY_MEDIAKEYS_ERROR_CODE","DOWNLOAD_ERROR_ID_MANIFEST_CODE","DOWNLOAD_ERROR_ID_SIDX_CODE","DOWNLOAD_ERROR_ID_CONTENT_CODE","DOWNLOAD_ERROR_ID_INITIALIZATION_CODE","DOWNLOAD_ERROR_ID_XLINK_CODE","MANIFEST_ERROR_ID_CODEC_CODE","MANIFEST_ERROR_ID_PARSE_CODE","MANIFEST_ERROR_ID_NOSTREAMS_CODE","TIMED_TEXT_ERROR_ID_PARSE_CODE","MANIFEST_ERROR_ID_MULTIPLEXED_CODE","MEDIASOURCE_TYPE_UNSUPPORTED_CODE","MANIFEST_LOADER_PARSING_FAILURE_ERROR_MESSAGE","MANIFEST_LOADER_LOADING_FAILURE_ERROR_MESSAGE","XLINK_LOADER_LOADING_FAILURE_ERROR_MESSAGE","SEGMENTS_UPDATE_FAILED_ERROR_MESSAGE","SEGMENTS_UNAVAILABLE_ERROR_MESSAGE","SEGMENT_BASE_LOADER_ERROR_MESSAGE","TIME_SYNC_FAILED_ERROR_MESSAGE","FRAGMENT_LOADER_NULL_REQUEST_ERROR_MESSAGE","URL_RESOLUTION_FAILED_GENERIC_ERROR_MESSAGE","APPEND_ERROR_MESSAGE","REMOVE_ERROR_MESSAGE","DATA_UPDATE_FAILED_ERROR_MESSAGE","CAPABILITY_MEDIASOURCE_ERROR_MESSAGE","CAPABILITY_MEDIAKEYS_ERROR_MESSAGE","TIMED_TEXT_ERROR_MESSAGE_PARSE","MEDIASOURCE_TYPE_UNSUPPORTED_MESSAGE","errors","ErrorsBase","publicOnly","CoreEvents","BUFFERING_COMPLETED","BUFFER_CLEARED","BUFFER_LEVEL_UPDATED","BYTES_APPENDED","BYTES_APPENDED_END_FRAGMENT","CHECK_FOR_EXISTENCE_COMPLETED","CURRENT_TRACK_CHANGED","DATA_UPDATE_COMPLETED","DATA_UPDATE_STARTED","INBAND_EVENTS","INITIALIZATION_LOADED","INIT_FRAGMENT_LOADED","INIT_FRAGMENT_NEEDED","INTERNAL_MANIFEST_LOADED","ORIGINAL_MANIFEST_LOADED","LIVE_EDGE_SEARCH_COMPLETED","LOADING_COMPLETED","LOADING_PROGRESS","LOADING_DATA_PROGRESS","LOADING_ABANDONED","MANIFEST_UPDATED","MEDIA_FRAGMENT_LOADED","MEDIA_FRAGMENT_NEEDED","QUOTA_EXCEEDED","REPRESENTATION_UPDATE_STARTED","REPRESENTATION_UPDATE_COMPLETED","SEGMENTS_LOADED","SERVICE_LOCATION_BLACKLIST_ADD","SERVICE_LOCATION_BLACKLIST_CHANGED","SOURCEBUFFER_REMOVE_COMPLETED","STREAMS_COMPOSED","STREAM_BUFFERING_COMPLETED","STREAM_COMPLETED","TEXT_TRACKS_QUEUE_INITIALIZED","TIME_SYNCHRONIZATION_COMPLETED","URL_RESOLUTION_FAILED","VIDEO_CHUNK_RECEIVED","WALLCLOCK_TIME_UPDATED","XLINK_ELEMENT_LOADED","XLINK_READY","SEGMENTBASE_INIT_REQUEST_NEEDED","SEGMENTBASE_SEGMENTSLIST_REQUEST_NEEDED","SEEK_TARGET","Events","EventsBase","evt","DashAdapter","dashManifestModel","voPeriods","voAdaptations","currentMediaInfo","constants","getAdaptationForType","periodIndex","streamInfo","adaptation","adaptations","getAdaptationsForType","mpd","manifest","allMediaInfoForType","getAllMediaInfoForType","ln","areMediaInfosEqual","getRolesForAdaptation","role","_constantsDashConstants2","MAIN","mInfoOne","mInfoTwo","sameId","sameViewpoint","viewpoint","sameLang","sameRoles","roles","sameAccessibility","accessibility","sameAudioChannelConfiguration","audioChannelConfiguration","externalManifest","voLocalPeriods","mediaArr","media","periodId","checkConfig","getRegularPeriods","selectedVoPeriod","getPeriodForStreamInfo","adaptationsForType","EMBEDDED_TEXT","VIDEO","getAdaptationsForPeriod","getIndexForAdaptation","convertAdaptationToMediaInfo","accessibilityLength","convertVideoInfoToEmbeddedTextInfo","CC1","IMAGE","getMpd","getManifest","getAdaptationForMediaInfo","mediaInfo","voPeriodsArray","voPeriod","_voMediaInfo2","realAdaptation","period","Period_asArray","AdaptationSet_asArray","convertPeriodToStreamInfo","representationCount","getRepresentationCount","labels","getLabelsForAdaptation","getLanguageForAdaptation","getViewpointForAdaptation","getAccessibilityForAdaptation","accessibilityValue","accessibilityData","schemeIdUri","search","embeddedCaptions","getAudioChannelConfigurationForAdaptation","Representation_asArray","getAudioChannelConfigurationForRepresentation","codec","getCodec","mimeType","getMimeType","contentProtection","getContentProtectionData","bitrateList","getBitrateListForAdaptation","KID","getKID","isText","getIsTextTrack","supplementalProperties","getSupplementalPropperties","isEmbedded","_voStreamInfo2","duration","manifestInfo","_voManifestInfo2","DVRWindowSize","timeShiftBufferDepth","loadedTime","availableFrom","availabilityStartTime","minBufferTime","maxFragmentDuration","maxSegmentDuration","getDuration","isDynamic","getIsDynamic","serviceDescriptions","getServiceDescriptions","protocol","convertMpdToManifestInfo","isLast","getPeriod","periodIdx","findRepresentation","representationId","returnIndex","adaptationSetArray","representation","representationArray","adaptationSetArrayIndex","representationArrayIndex","getBandwidthForRepresentation","bandwidth","getIndexForRepresentation","findRepresentationIndex","getMaxIndexForBufferType","bufferType","adaptationSet","getIsTypeOf","findMaxBufferIndex","convertDataToRepresentationInfo","voRepresentation","representationInfo","_voRepresentationInfo2","realRepresentation","getRepresentationFor","quality","getBandwidth","DVRWindow","segmentAvailabilityRange","fragmentDuration","segmentDuration","segments","MSETimeOffset","getDataForMedia","getStreamsInfo","maxStreamsInfo","streams","getMediaInfoForType","getRealAdaptation","getAdaptationForId","getAdaptationForIndex","getVoRepresentations","voAdaptation","getRepresentationsForAdaptation","getEventsFor","getEventsForPeriod","getEventStreamForAdaptationSet","getEventStreamForRepresentation","getEvent","eventBox","eventStreams","mediaStartTime","_event","_voEvent2","scheme_id_uri","timescale","presentationTimeOffset","periodStart","presentationTimeDelta","presentation_time_delta","calculatedPresentationTime","event_duration","messageData","message_data","eventStream","setConfig","errHandler","updatePeriods","newManifest","getUTCTimingSources","getSuggestedPresentationDelay","getAvailabilityStartTime","getLocation","getManifestUpdatePeriod","latencyOfLastUpdate","getIsDVB","hasProfile","getBaseURLsFromElement","getRepresentationSortFunction","addResolutionInfo","getVoAdaptations","getVoPeriods","getPeriodById","periods","setCurrentMediaInfo","_modelsDashManifestModel2","_coreFactoryMaker2","DashHandler","dashConstants","urlUtils","timelineConverter","dashMetrics","baseURLController","segmentIndex","lastSegment","requestedTime","isDynamicManifest","dynamicStreamCompleted","selectedMimeType","segmentsController","resetIndex","resetInitialSettings","setRequestUrl","request","destination","baseURL","resolve","serviceLocation","isRelative","onRepresentationUpdateStarted","hasInitialization","hasSegments","processRepresentation","getRequestForSegment","segment","_streamingVoFragmentRequest2","_utilsSegmentsUtils","replaceTokenForTemplate","replacementNumber","replacementTime","replaceIDForTemplate","unescapeDollarsInTemplate","mediaRange","presentationStartTime","availabilityEndTime","wallStartTime","availabilityIdx","adaptationIndex","isMediaFinished","isFinished","toFixed","endTime","availableSegmentsNumber","onInitializationLoaded","onSegmentsLoaded","fragments","seg","getTimeBasedSegment","liveEdge","setExpectedLiveEdge","updateManifestUpdateInfo","onDynamicToStatic","initialize","getStreamInfo","getInitRequest","calcAvailabilityStartTimeFromPresentationTime","calcAvailabilityEndTimeFromPresentationTime","initialization","generateInitRequest","getSegmentRequestForTime","segmentInfoType","keepIdx","ignoreIsFinished","getSegmentByTime","action","ACTION_COMPLETE","SEGMENT_TIMELINE","getNextSegmentRequest","indexToRequest","getSegmentByIndex","isEndlessMedia","setCurrentIndex","getCurrentIndex","DYNAMIC_TO_STATIC","setMimeType","newMimeType","_controllersSegmentsController2","DashMetrics","playListTraceMetricsClosed","playListTraceMetrics","playListMetrics","metricsModel","getCurrentHttpRequest","metrics","getMetricsFor","httpList","HttpList","currentHttpList","httpListLastIndex","responsecode","getHttpRequests","getCurrent","metricName","parseResponseHeaders","headerStr","headers","headerPairs","ilen","headerPair","getCurrentRepresentationSwitch","_streamingConstantsMetricsConstants2","TRACK_SWITCH","getCurrentBufferState","BUFFER_STATE","getCurrentBufferLevel","metric","BUFFER_LEVEL","_utilsRound102","round10","getCurrentDroppedFrames","DROPPED_FRAMES","getCurrentSchedulingInfo","SCHEDULING_INFO","getCurrentDVRInfo","AUDIO","DVR_INFO","getCurrentManifestUpdate","STREAM","MANIFEST_UPDATE","getLatestFragmentRequestHeaderValueByID","httpRequest","_responseHeaders","getLatestMPDRequestHeaderValueByID","httpRequestList","addRepresentationSwitch","mt","to","lto","addDVRInfo","currentTime","updatedFields","manifestUpdate","addManifestUpdateStreamInfo","addManifestUpdateRepresentationInfo","manifestUpdateInfo","streamIndex","startNumber","fragmentInfoType","addManifestUpdate","requestStartDate","requestEndDate","addHttpRequest","responseURL","responseStatus","responseHeaders","traces","firstByteDate","addSchedulingInfo","addRequestsQueue","loadingRequests","executedRequests","addBufferLevel","addBufferState","addDroppedFrames","addPlayList","addDVBErrors","createPlaylistMetrics","startReason","_streamingVoMetricsPlayList","PlayList","mstart","starttype","createPlaylistTraceMetrics","speed","PlayListTrace","representationid","playbackspeed","updatePlayListTraceMetrics","traceToUpdate","pushPlayListTraceMetrics","reason","stopreason","clearAllCurrentMetrics","_streamingModelsMetricsModel2","SegmentBaseLoader","boxParser","requestModifier","mediaPlayerModel","urlLoader","getFragmentRequest","setInfo","onLoaded","_streamingVoDashJSError2","_streamingNetURLLoader2","useFetch","loadInitialization","loadingInfo","initRange","baseUrl","init","searching","bytesLoaded","bytesToLoad","load","success","response","findInitRange","loadSegments","isoFile","sidx","hasRange","loadedLength","getBox","isComplete","references","loadMultiSidx","tmpCallback","segs","sort","ss","refs","earliest_presentation_time","first_offset","subsegment_duration","_voSegment2","getSegmentsForSidx","lastBox","getLastBox","abort","WebmSegmentBaseLoader","WebM","parseSegments","segmentStart","segmentEnd","ab","cues","ebmlParser","_streamingUtilsEBMLParser2","cue","cueTrack","consumeTagAndSize","Segment","Cues","moreData","CuePoint","CueTime","parseTag","CueTracks","consumeTag","CueTrackPositions","cueTrackPositionSize","getMatroskaCodedNum","getPos","Track","CueTrack","ClusterPosition","CueClusterPosition","setPos","parseCues","MISSING_CONFIG_ERROR","theRange","skipOverElement","EBML","Info","SeekHead","Tracks","Void","infoTag","infoElementSize","Duration","parseEbmlHeader","required","TimecodeScale","DashConstants","BASE_URL","SEGMENT_BASE","SEGMENT_TEMPLATE","SEGMENT_LIST","SEGMENT_URL","SEGMENT_PROFILES","ADAPTATION_SET","REPRESENTATION","REPRESENTATION_INDEX","SUB_REPRESENTATION","INITIALIZATION","INITIALIZATION_MINUS","MPD","PERIOD","ASSET_IDENTIFIER","EVENT_STREAM","ID","PROFILES","SERVICE_LOCATION","RANGE","INDEX","MEDIA","BYTE_RANGE","INDEX_RANGE","MEDIA_RANGE","VALUE","CONTENT_TYPE","MIME_TYPE","BITSTREAM_SWITCHING","BITSTREAM_SWITCHING_MINUS","CODECS","DEPENDENCY_ID","MEDIA_STREAM_STRUCTURE_ID","METRICS","METRICS_MINUS","REPORTING","WIDTH","HEIGHT","SAR","FRAMERATE","AUDIO_SAMPLING_RATE","MAXIMUM_SAP_PERIOD","START_WITH_SAP","MAX_PLAYOUT_RATE","CODING_DEPENDENCY","SCAN_TYPE","FRAME_PACKING","AUDIO_CHANNEL_CONFIGURATION","CONTENT_PROTECTION","ESSENTIAL_PROPERTY","SUPPLEMENTAL_PROPERTY","INBAND_EVENT_STREAM","ACCESSIBILITY","ROLE","RATING","CONTENT_COMPONENT","SUBSET","LANG","VIEWPOINT","ROLE_ASARRAY","ACCESSIBILITY_ASARRAY","AUDIOCHANNELCONFIGURATION_ASARRAY","CONTENTPROTECTION_ASARRAY","DYNAMIC","STATIC","MEDIA_PRESENTATION_DURATION","MINIMUM_UPDATE_PERIOD","CODEC_PRIVATE_DATA","BANDWITH","SOURCE_URL","TIMESCALE","DURATION","START_NUMBER","PRESENTATION_TIME_OFFSET","AVAILABILITY_START_TIME","AVAILABILITY_END_TIME","TIMESHIFT_BUFFER_DEPTH","MAX_SEGMENT_DURATION","PRESENTATION_TIME","MIN_BUFFER_TIME","MAX_SUBSEGMENT_DURATION","START","AVAILABILITY_TIME_OFFSET","AVAILABILITY_TIME_COMPLETE","CENC_DEFAULT_KID","DVB_PRIORITY","DVB_WEIGHT","SUGGESTED_PRESENTATION_DELAY","SERVICE_DESCRIPTION","SERVICE_DESCRIPTION_SCOPE","SERVICE_DESCRIPTION_LATENCY","SERVICE_DESCRIPTION_PLAYBACK_RATE","RepresentationController","abrController","playbackController","updating","voAvailableRepresentations","currentVoRepresentation","isUpdating","getCurrentRepresentation","now","currentRepresentation","currentVideoTimeMs","getRepresentationForQuality","updateRepresentation","calcSegmentAvailabilityRange","endDataUpdate","availabilityDelay","updateAvailabilityWindow","notifyUpdate","startDataUpdate","postponeUpdate","postponeTimePeriod","delay","AST_IN_FUTURE","rep","onRepresentationUpdated","alreadyAdded","repInfo","ignorePostponeTimePeriod","getStreamController","getStreams","activeStreamInfo","getActiveStreamInfo","startTimeAnchor","segmentAvailabilityTimePeriod","getLiveDelay","getRepresentationUpdatePostponeTimePeriod","isAllRepresentationsUpdated","setPlaybackQuality","getQualityForRepresentation","latency","onWallclockTimeUpdated","onQualityChanged","newQuality","onManifestValidityChanged","newDuration","getData","newRealAdaptation","availableRepresentations","FRAGMENTED_TEXT","QUALITY_CHANGE_REQUESTED","MANIFEST_VALIDITY_CHANGED","SegmentBaseController","segmentBaseLoader","webmSegmentBaseLoader","isWebM","onInitSegmentBaseNeeded","onSegmentsListSegmentBaseNeeded","indexRange","_SegmentBaseLoader2","_WebmSegmentBaseLoader2","SegmentsController","getters","getSegmentsGetter","_utilsTimelineSegmentsGetter2","_utilsTemplateSegmentsGetter2","_utilsListSegmentsGetter2","_utilsSegmentBaseGetter2","lastSegmentTime","getter","DashManifestModel","_streamingUtilsURLUtils2","isInteger","col","mimeTypeRegEx","codecs","ContentComponent_asArray","essentialProperties","getEssentialPropertiesForRepresentation","_streamingThumbnailThumbnailTracks","THUMBNAILS_SCHEME_ID_URIS","STPP","WVTT","MUXED","contentType","processAdaptation","getRealAdaptations","EssentialProperty_asArray","getPeriodId","realPeriod","_voPeriod2","DEFAULT_ID","getEventStreams","inbandStreams","_voEventStream2","SCHEME_ID_URI","baseUrls","entries","BaseURL_asArray","baseUri","earlyReturn","_voBaseURL2","dvb_priority","dvb_weight","availabilityTimeOffset","availabilityTimeComplete","Viewpoint","Role_asArray","Accessibility_asArray","AudioChannelConfiguration_asArray","realAdaptations","_streamingUtilsObjectUtils2","areEqual","Label_asArray","labelArray","ContentProtection_asArray","profile","has","profiles","mediaPresentationDuration","MAX_SAFE_INTEGER","MAX_VALUE","minimumUpdatePeriod","processedRealAdaptation","scanType","presentationOffset","segmentTimeline","s0","voRepresentations","periodArray","getRealAdaptationFor","segmentInfo","_voRepresentation2","codecPrivateData","maxPlayoutRate","SegmentBase","SegmentList","SegmentTemplate","Initialization","sourceURL","SegmentTimeline","S_asArray","voAdaptationSet","realAdaptationSet","_voAdaptationSet2","realPreviousPeriod","voPreviousPeriod","periodEnd","_coreErrorsErrors2","getEndTimeForLastPeriod","_voMpd2","suggestedPresentationDelay","EventStream_asArray","Event_asArray","currentMpdEvent","presentationTime","Signal","Binary","adaptationArray","InbandEventStream_asArray","hasAST","utcTimingsArray","UTCTiming_asArray","utcTimingEntries","utcTiming","_voUTCTiming2","LOCATION","Location","Location_asArray","_step","_iterator","ServiceDescription_asArray","iterator","_iteratorNormalCompletion","sd","SERVICE_DESCRIPTION_LL_SCHEME","_step2","_iterator2","SupplementalProperty_asArray","_iteratorNormalCompletion2","sp","DashParser","objectIron","performance","jsonTime","ironedTime","toPrecision","getMatchers","getIron","_matchersDurationMatcher2","_matchersDateTimeMatcher2","_matchersNumericMatcher2","_matchersStringMatcher2","_externalsXml2json2","_objectiron2","adaptationset","_mapsRepresentationBaseValuesMap2","_mapsSegmentValuesMap2","CommonProperty","_merge","MapNode","_children","_properties","properties","_CommonProperty2","RepresentationBaseValuesMap","commonProperties","_MapNode3","SegmentValuesMap","BaseMatcher","_test","_converter","datetimeRegex","DateTimeMatcher","utcDate","timezoneOffset","durationRegex","DurationMatcher","attributeList","START_TIME","numericRegex","NumericMatcher","StringMatcher","stringAttrsInElements","_stringAttrsInElements","attrNames","ObjectIron","mappers","mergeValues","parentItem","childItem","mapProperties","property","parentValue","childValue","mapItem","childNode","periodMapper","adaptationSets","adaptationSetMapper","_i","ListSegmentsGetter","SegmentURL_asArray","offsetToSubtract","_SegmentsUtils","getIndexBasedSegment","periodTime","calcPeriodRelativeTimeFromMpdRelativeTime","Round10","exp","_decimalAdjust","SegmentBaseGetter","frag","ft","fd","getIndexByTime","presentationEndTime","getSegment","calcMediaTimeFromPresentationTime","isSegmentAvailable","fTimescale","tManifest","scaledTime","scaledDuration","calcPresentationTimeFromMediaTime","zeroPadToLength","minStrLength","token","endPos","formatTagPos","specifier","paddedValue","tokenLen","formatTagLen","calcWallTimeForSegment","getNumberForSegment","getPeriodEnd","TemplateSegmentsGetter","template","availabilityWindow","TimelineConverter","_coreEventBus2","_coreSettings2","clientServerTimeShift","isClientServerTimeSyncCompleted","expectedLiveEdge","setClientTimeOffset","calcAvailabilityTimeFromPresentationTime","calculateEnd","calcPresentationTimeFromWallTime","wallTime","mediaTime","onTimeSyncComplete","_coreEventsEvents2","isTimeSyncCompleted","setTimeSyncCompleted","getClientTimeOffset","getExpectedLiveEdge","mpdRelativeTime","timeline","repeat","endOffset","displayStartTime","TimelineSegmentsGetter","iterateSegments","iterFunc","base","repeatEndTime","nextFrag","breakIterator","availabilityEnd","requiredMediaTime","AdaptationSet","BaseURL","weight","DEFAULT_DVB_PRIORITY","DEFAULT_DVB_WEIGHT","Event","EventStream","adaptionSet","ManifestInfo","MediaInfo","Mpd","Period","Representation","RepresentationInfo","StreamInfo","UTCTiming","FragmentLoader","checkForExistence","report","exists","headRequest","_voHeadRequest2","sender","progress","statusText","errorText","_voDashJSError2","_netURLLoader2","_constantsConstants2","requestTimeout","ManifestLoader","_utilsURLUtils2","xlinkController","mssHandler","onXlinkReady","_voTextRequest2","_voMetricsHTTPRequest","textStatus","actualUrl","parseBaseUrl","location","createMssParser","registerEvents","_dashParserDashParser2","createParser","setMatchers","setIron","originalUrl","resolveManifestOnLoad","originalManifest","_dashConstantsDashConstants2","_controllersXlinkController2","ManifestUpdater","refreshDelay","refreshTimer","isStopped","manifestLoader","manifestModel","adapter","stopManifestRefreshTimer","startManifestRefreshTimer","onRefreshTimer","refreshManifest","getValue","setValue","date","onManifestLoaded","onPlaybackStarted","onPlaybackPaused","onStreamsComposed","PLAYBACK_STARTED","PLAYBACK_PAUSED","setManifest","STREAMING_NOT_INITIALIZED_ERROR","PLAYBACK_NOT_INITIALIZED_ERROR","ELEMENT_NOT_ATTACHED_ERROR","SOURCE_NOT_ATTACHED_ERROR","MEDIA_PLAYER_NOT_INITIALIZED_ERROR","protectionData","mediaPlayerInitialized","streamingInitialized","playbackInitialized","autoPlay","schemeLoaderFactory","mediaController","protectionController","metricsReportingController","offlineController","capabilities","streamController","gapController","cmcdModel","videoModel","textController","uriFragmentModel","domStorage","segmentBaseController","attachSource","attachView","isReady","getElement","_coreVersion","getDVRSeekOffset","getVideoElement","getTimeRelativeToStreamId","setAutoPlay","_utilsSupervisorTools","checkParameterType","restoreDefaultUTCTimingSources","getDashMetrics","setElement","detectProtection","metricsReporting","createMetricsReporting","mediaElement","metricsConstants","_constantsMetricsConstants2","detectMetricsReporting","MssHandler","initSegmentType","_externalsBase642","_codemIsoboxer2","detectMss","switchToVideoElement","resetPlaybackControllers","initializePlayback","getTracksFor","urlOrManifest","getActiveStream","getStreamById","stop","createManifestLoader","_ManifestLoader2","_utilsRequestModifier2","protection","_MediaPlayerEvents2","_utilsCapabilities2","createProtectionSystem","detectOffline","OfflineController","manifestUpdater","_ManifestUpdater2","getAsUTC","valToConvert","resetRecords","_controllersStreamController2","createPlaybackControllers","loadWithManifest","view","AutoPlay","_utilsErrorHandler2","supportsMediaSource","_dashUtilsTimelineConverter2","_controllersAbrController2","_netSchemeLoaderFactory2","_controllersPlaybackController2","_controllersMediaController2","_controllersGapController2","_dashDashAdapter2","_modelsManifestModel2","_modelsCmcdModel2","_dashDashMetrics2","_textTextController2","_utilsDOMStorage2","_externalsCea608Parser2","_controllersBaseURLController2","_dashControllersSegmentBaseController2","_utilsBoxParser2","parentNameString","preload","play","isSeeking","seek","BAD_ARGUMENT_ERROR","setPlaybackRate","getPlaybackRate","setMute","muted","isMuted","setVolume","volume","getVolume","timeAsUTC","durationAsUTC","getDVRWindowSize","convertToTimeCode","formatUTC","locales","hour12","withDate","toLocaleDateString","toLocaleTimeString","getDebug","getBufferLength","types","getTTMLRenderingDiv","getSource","getCurrentLiveLatency","getTopBitrateInfoFor","getAutoPlay","getQualityFor","activeStream","thumbnailController","getThumbnailController","getCurrentTrackIndex","setQualityFor","setTrackByIndex","updatePortalSize","setElementSize","setWindowResizeEventCalled","setTextDefaultLanguage","getTextDefaultLanguage","setTextDefaultEnabled","enable","getTextDefaultEnabled","enableText","enableForcedTextStreaming","isTextEnabled","setTextTrack","getBitrateInfoListFor","getBitrateListFor","getStreamsFromManifest","getTracksForTypeFromManifest","getCurrentTrackFor","setInitialMediaSettingsFor","setInitialSettings","getInitialMediaSettingsFor","getInitialSettings","setCurrentTrack","track","setTrack","getTrackSwitchModeFor","getSwitchMode","setTrackSwitchModeFor","setSwitchMode","setSelectionModeForInitialTrack","getSelectionModeForInitialTrack","addABRCustomRule","rulename","rule","removeABRCustomRule","removeAllABRCustomRule","getAverageThroughput","throughputHistory","getThroughputHistory","retrieveManifest","addUTCTimingSource","removeUTCTimingSource","clearDefaultUTCTimingSources","setXHRWithCredentialsForType","getXHRWithCredentialsForType","getProtectionController","attachProtectionController","setProtectionData","displayCaptionsOnTop","textTracks","_textTextTracks2","setDisplayCConTop","attachTTMLRenderingDiv","div","setTTMLRenderingDiv","getCurrentTextTrackIndex","getCurrentTrackIdx","provideThumbnail","getStreamForTime","timeInPeriod","getId","provide","getDashAdapter","getOfflineController","getSettings","updateSettings","resetSettings","_modelsMediaPlayerModel2","_modelsVideoModel2","_modelsURIFragmentModel2","MediaPlayerEvents","BUFFER_EMPTY","BUFFER_LOADED","BUFFER_LEVEL_STATE_CHANGED","FRAGMENT_LOADING_COMPLETED","FRAGMENT_LOADING_PROGRESS","FRAGMENT_LOADING_STARTED","FRAGMENT_LOADING_ABANDONED","MANIFEST_LOADED","METRICS_CHANGED","METRIC_CHANGED","METRIC_ADDED","METRIC_UPDATED","PERIOD_SWITCH_COMPLETED","PERIOD_SWITCH_STARTED","QUALITY_CHANGE_RENDERED","TRACK_CHANGE_RENDERED","SOURCE_INITIALIZED","STREAM_INITIALIZING","STREAM_UPDATED","STREAM_INITIALIZED","STREAM_TEARDOWN_COMPLETE","TEXT_TRACKS_ADDED","TEXT_TRACK_ADDED","TTML_PARSED","TTML_TO_PARSE","CAPTION_RENDERED","CAPTION_CONTAINER_RESIZE","CAN_PLAY","PLAYBACK_ENDED","PLAYBACK_ERROR","PLAYBACK_NOT_ALLOWED","PLAYBACK_METADATA_LOADED","PLAYBACK_PLAYING","PLAYBACK_PROGRESS","PLAYBACK_RATE_CHANGED","PLAYBACK_SEEKED","PLAYBACK_SEEKING","PLAYBACK_SEEK_ASKED","PLAYBACK_STALLED","PLAYBACK_TIME_UPDATED","PLAYBACK_WAITING","GAP_CAUSED_SEEK_TO_PERIOD_END","GAP_CAUSED_INTERNAL_SEEK","EVENT_MODE_ON_START","mediaPlayerEvents","SUPPORTED_MIME_TYPE","createAll","selector","aPlayers","videos","querySelectorAll","player","sources","findVideo","_dashjs_player","videoID","_MediaPlayer2","autoplay","_x","el","parentNode","loadInterval","skipAutoCreate","addEventListener","readyState","loadHandler","removeEventListener","PreBufferSink","onAppendedCallback","outstandingInit","chunks","onAppended","remove","getAllBufferRanges","ranges","timeranges","segmentType","discharge","getChunksAt","updateTimestampOffset","hasDiscontinuitiesAfter","waitForUpdateEnd","SourceBufferSink","mediaSource","oldBuffer","isAppendingInProgress","intervalId","callbacks","appendQueue","buffered","updateAppendWindow","sInfo","appendWindowEnd","appendWindowStart","checkBufferGapsAfterAppend","oldRanges","newRanges","isChunkAlignedWithRange","unintended","executeCallback","checkIsUpdateEnded","updateEndHandler","appendNextInQueue","sourceBufferSink","nextChunk","afterSuccess","appendBuffer","forceRemoval","keepBuffer","removeSourceBuffer","timestampOffset","addSourceBuffer","changeType","getTextSourceBuffer","setup","eventController","streamProcessors","isStreamInitialized","isStreamActivated","isMediaInitialized","hasVideoTrack","hasAudioTrack","updateError","fragmentController","preloaded","preloadingScheduled","isEndedEventSignaled","trackChangedEvent","codecCompatibilityTable","compatibleCodecs","deactivate","keepBuffers","getFragmentModel","removeExecutedRequestsBeforeTime","getStartTime","setPreloaded","onCurrentTrackChanged","onDataUpdateCompleted","onBufferingCompleted","onInbandEvents","KEY_ERROR","onProtectionError","SERVER_CERTIFICATE_UPDATED","LICENSE_REQUEST_COMPLETE","KEY_SYSTEM_SELECTED","KEY_SESSION_CREATED","KEY_STATUSES_CHANGED","isMediaSupported","supportsEncryptedMedia","supportsCodec","newMediaInfo","processor","getProcessorForMediaInfo","refreshManifestOnSwitchTrack","selectMediaInfo","updateTopQualityIndex","switchTrackAsked","abortRequests","getScheduleController","setSeekTarget","setBufferingTime","resetIndexHandler","initializeMediaForType","initialMediaInfo","allMediaForType","addEmbeddedTrack","addTrack","checkInitialMediaSettingsForType","optionalSettings","fragmentModel","getModel","streamProcessor","_StreamProcessor2","setBuffer","replaceIdx","ignoreMediaInfo","addMediaInfo","createStreamProcessor","_thumbnailThumbnailController2","addInlineEvents","filterCodecs","checkIfInitializationCompleted","getMediaInfo","initializeForMedia","liveStartTime","getLiveStartTime","createBuffers","previousBuffers","processors","getProcessors","isBufferingCompleted","addInbandEvents","compareProtectionConfig","previousStream","newStreamInfo","currentStreamInfo","newAdaptation","currentAdaptation","isAdaptationDrmProtected","ContentProtection","compareCodecs","newStream","sameMimeType","oldCodecs","newCodecs","codecMatch","newCodec","partialCodecMatch","oldCodec","codec1","codec2","codecRoot","rootCompatible","compatTableCodec","compatibleCodec","codecRootCompatibleWithCodec","getPreloaded","activate","initializeAfterPreload","initializeMedia","isActive","getHasAudioTrack","getHasVideoTrack","getBitrateList","updatedStreamInfo","updateStreamInfo","oldMediaInfo","setMediaSource","dischargePreBuffer","isMediaCodecCompatible","isProtectionCompatible","getPreloadingScheduled","setPreloadingScheduled","getIsEndedEventSignaled","setIsEndedEventSignaled","_controllersFragmentController2","StreamProcessor","mediaInfoArr","bufferController","scheduleController","representationController","liveEdgeFinder","indexHandler","bufferingTime","bufferPruned","setCurrentRepresentation","addDVRMetric","getRepresentationInfo","_voMetricsPlayList","REPRESENTATION_SWITCH_STOP_REASON","onBufferLevelUpdated","bufferLevel","activeStreamId","doNotUpdateDVRWindowOnBufferUpdated","onBufferLevelStateChanged","getBufferTarget","REBUFFERING_REASON","onBufferCleared","syncExecutedRequestsWithBufferedRange","getMediaInfoArr","checkInteger","onInitFragmentNeeded","appendInitSegment","processInitRequest","onMediaFragmentNeeded","getIsPruningInProgress","seekTarget","requestToReplace","hasSeekTarget","getNormalizedTime","bufferIsDivided","getRangeAt","playingRange","removeExecutedRequestsAfterTime","timeThreshold","useTime","_voFragmentRequest2","isFragmentLoaded","findNextRequest","replacement","delayLoadingTime","getTimeToLoadDelay","setTimeToLoadDelay","processMediaRequest","onMediaFragmentLoaded","eventStreamMedia","eventStreamTrack","mediaInbandEvents","trackInbandEvents","inbandEvents","eventBoxes","getBoxes","mediaAnchorTime","fragmentMediaStartTime","handleInbandEvents","getRequests","_modelsFragmentModel2","FRAGMENT_MODEL_EXECUTED","onSeekTarget","fragRequest","_dashDashHandler2","_utilsLiveEdgeFinder2","registerStreamType","_dashControllersRepresentationController2","controller","_controllersBufferController2","_textTextBufferController2","createBufferControllerForType","_controllersScheduleController2","getBufferController","getRepresentationController","getBufferLevel","getIsBufferingCompleted","maxQuality","getTopQualityIndexFor","minIdx","getMinAllowedIndexFor","bitrate","getInitialBitrateFor","getQualityForBitrate","selectNewMediaInfo","currentRepresentationInfo","getLiveEdge","dvrWindowSize","dvrWindowSafetyMargin","setLiveDelay","findRequestForLiveEdge","getMediaSource","finalisePlayList","errored","unRegisterStreamType","XlinkLoader","RESOLVE_TO_ZERO","resolveObject","content","resolveToZero","resolved","resolvedContent","Constants","TTML","VTT","ABR_STRATEGY_BOLA","ABR_STRATEGY_L2A","ABR_STRATEGY_LoLP","ABR_STRATEGY_THROUGHPUT","ABR_FETCH_THROUGHPUT_CALCULATION_MOOF_PARSING","LIVE_CATCHUP_MODE_LOLP","MOVING_AVERAGE_EWMA","TRACK_SELECTION_MODE_WIDEST_RANGE","INITIALIZE","TEXT_SHOWING","TEXT_HIDDEN","CC3","SUPPLEMENTAL_PROPERTY_LL_SCHEME","XML","ARRAY_BUFFER","DVB_REPORTING_URL","DVB_PROBABILITY","MetricsConstants","TCP_CONNECTION","HTTP_REQUEST","ABANDON_LOAD","ALLOW_LOAD","REQUESTS_QUEUE","MANIFEST_UPDATE_STREAM_INFO","MANIFEST_UPDATE_TRACK_INFO","PLAY_LIST","DVB_ERRORS","ProtectionConstants","CLEARKEY_KEYSTEM_STRING","WIDEVINE_KEYSTEM_STRING","PLAYREADY_KEYSTEM_STRING","AbrController","abrRulesCollection","topQualities","qualityDict","streamProcessorDict","abandonmentStateDict","abandonmentTimeout","windowResizeEventCalled","elementWidth","elementHeight","playbackIndex","switchHistoryDict","droppedFramesHistory","isUsingBufferOccupancyABRDict","isUsingL2AABRDict","isUsingLoLPBRDict","createAbrRulesCollection","_rulesAbrABRRulesCollection2","onQualityChangeRendered","oldQuality","getPlaybackQuality","onMetricAdded","strategy","getStableBufferTime","switchOnThreshold","switchOffThreshold","useBufferABR","newUseBufferABR","_updateDynamicAbrStrategy","_updateAbrStrategy","newIdx","checkPortalSize","maxIdx","checkMaxRepresentationRatio","getMaxAllowedIndexFor","checkMaxBitrate","getMaxAllowedBitrateFor","getMinAllowedBitrateFor","topQualityIdx","changeQuality","setSavedBitrateSettings","setAbandonmentStateFor","infoList","bitrateInfo","_voBitrateInfo2","qualityIndex","useBufferOccupancyABR","useL2AABR","useLoLPABR","pixelRatio","devicePixelRatio","getClientWidth","getClientHeight","onFragmentLoadProgress","rulesContext","_rulesRulesContext2","currentRequest","switchRequest","shouldAbandonFragment","_rulesSwitchRequest2","NO_CHANGE","FRAGMENT_MODEL_LOADING","oldValue","newValue","confidence","isPlayingAtTopQuality","audioQuality","videoQuality","setTopQualityIndex","bitrates","savedBitrate","getSavedBitrateSettings","configBitrate","configRatio","getAbandonmentStateFor","checkPlaybackQuality","currentValue","switchHistory","playbackQuality","getMaxQuality","_rulesSwitchRequestHistory2","_rulesDroppedFramesHistory2","_rulesThroughputHistory2","QUALITY_DEFAULT","BaseURLController","baseURLTreeModel","baseURLSelector","onBlackListChanged","invalidateSelectedIndexes","chooseSelector","getForPath","select","_dashVoBaseURL2","_modelsBaseURLTreeModel2","_utilsBaseURLSelector2","BlackListController","blacklist","updateEventName","addBlacklistEventName","add","onAddBlackList","contains","query","BUFFER_CONTROLLER_TYPE","BufferController","requiredQuality","criticalBufferLevel","maxAppendedIndex","lastIndex","dischargeBuffer","bufferState","appendedBytesInfo","wallclockTicked","isPruningInProgress","isQuotaExceeded","initCache","seekClearedBufferingCompleted","pendingPruningRanges","replacingBuffer","mediaChunk","oldBuffers","_SourceBufferSink2","_PreBufferSink2","updateBufferTimestampOffset","onInitFragmentLoaded","save","appendToBuffer","getTimeToStreamEnd","force","triggerEvent","showBufferRanges","getTotalBufferedTime","bufferAhead","hasEnoughSpaceToAppend","getClearRanges","checkIfBufferingCompleted","onPlaybackProgression","adjustSeekTarget","endFragment","bufferedRanges","onPlaybackSeeking","seekTime","clearRanges","endOfBuffer","currentTimeRequest","threshold","behindRange","prevReq","aheadRange","nextReq","getAllRangesWithSafetyFactor","onPlaybackSeeked","updateBufferLevel","onPlaybackStalled","checkIfSufficientBuffer","onPlaybackPlaying","tolerance","firstStart","lastEnd","gap","toler","notifyBufferStateChanged","startRangeToKeep","clearNextRange","sourceBuffer","onRemoved","quotaExceeded","onStreamCompleted","onPlaybackRateChanged","totalBufferedTime","eventType","_AbrController2","Source","getBufferControllerType","rangeStr","lastInit","initChunk","extract","newBuffer","replaceBuffer","_utilsInitCache2","EventController","MPD_RELOAD_SCHEME","MPD_RELOAD_VALUE","MPD_CALLBACK_SCHEME","MPD_CALLBACK_VALUE","REFRESH_DELAY","REMAINING_EVENTS_THRESHOLD","inlineEvents","activeEvents","eventInterval","lastEventTimerCall","eventHandlingInProgress","isStarted","_resetInitialSettings","_stop","_triggerRemainingEvents","_onStopEventController","_handleManifestReloadEvent","validUntil","_streamingMediaPlayerEvents2","newManifestValidAfter","_onEventTimer","currentVideoTime","presentationTimeThreshold","_triggerEvents","eventIds","eventId","_event3","_removeEvents","_event4","_startEvent","_eventHasExpired","_eventIsInvalid","calculatedPresentationTimeInSeconds","periodEndTime","periodDuration","_refreshManifest","_netXHRLoader2","responseType","_sendCallbackRequest","values","_event2","FragmentController","fragmentModels","model","onFragmentLoadingCompleted","isInit","isInitializationRequest","strInfo","_voDataChunk2","createDataChunk","fragmentLoader","_FragmentLoader2","GapController","lastPlaybackTime","gapHandlerInterval","lastGapJumpPosition","jumpTimeoutHandler","_onWallclockTimeUpdated","_onPlaybackSeeking","onBytesAppended","unregisterEvents","_shouldCheckForGaps","jumpGap","startGapHandler","getActiveStreamProcessors","hasStreamFinishedBuffering","getIsStreamSwitchInProgress","getHasMediaOrIntialisationError","nextRangeIndex","playbackStalled","getBufferRange","seekToPosition","jumpToStreamEnd","rangeEnd","getNextRangeIndex","timeToWait","timeUntilGapEnd","timeToStreamEnd","getStreamEndTime","MediaController","tracks","initialSettings","validTrackSwitchModes","validTrackSelectionModes","noSettingsSave","isTracksEqual","switchMode","_settings","extractSettings","storeLastSettings","setSavedMediaSettings","isMultiTrackSupportedByType","t1","t2","fragmentedText","matchSettings","matchLang","matchViewPoint","matchRole","matchAccessibility","matchAudioChannelConfiguration","selectInitialTrack","getTracksWithHighestBitrate","trackArr","getTracksWithWidestRange","tmpArr","tracksForType","getSavedMediaSettings","mediaTracks","initSettings","isCurrentTrack","saveTextSettingsDisabled","MediaSourceController","createMediaSource","hasWebKit","MediaSource","WebKitMediaSource","attachMediaSource","objectURL","createObjectURL","setSource","detachMediaSource","setDuration","setSeekable","setLiveSeekableRange","clearLiveSeekableRange","signalEndOfStream","sourceBuffers","endOfStream","PlaybackController","streamSwitch","streamSeekTime","wallclockTimeIntervalId","playOnceInitialized","lastLivePlaybackTime","isLowLatencySeekingInProgress","minPlaybackRateChange","onStreamInitialized","dvrInfo","dvrWindow","startTimeFromUri","getStartTimeFromUriParameters","stickToBuffered","internalSeek","setCurrentTime","timeOffset","getEnded","onPlaybackEnded","onStreamInitializing","stopUpdatingWallclockTime","onCanPlay","onPlaybackStart","onPlaybackWaiting","onPlaybackError","onPlaybackTimeUpdated","onPlaybackProgress","onPlaybackMetaDataLoaded","onNativePlaybackEnded","fragData","getURIFragmentData","refStreamStartTime","posix","startUpdatingWallclockTime","updateLivePlaybackTime","updateCurrentTime","getReadyState","actualTime","DVRMetrics","getActualPresentationTime","playingTime","timeToEnd","rate","srcElement","_isCatchupEnabled","catchupMode","_getCatchupMode","currentLiveLatency","_liveDelay","liveCatchupLatencyThreshold","getLiveCatchupLatencyThreshold","liveCatchUpMinDrift","latencyDrift","_defaultNeedToCatchUp","currentBuffer","_lolpNeedToCatchUpCustom","_needToCatchUp","results","currentPlaybackRate","liveCatchupPlaybackRate","_liveDelay2","liveCatchUpPlaybackRate","cpr","newRate","E","_calculateNewPlaybackRateLolP","deltaLatency","_calculateNewPlaybackRateDefault","seekToLive","startPlaybackCatchUp","stopPlaybackCatchUp","bl","minDelay","setStallState","llsd","applyServiceDescription","periodSwitch","ua","navigator","userAgent","isSafari","getPlayedRanges","computeAndSetLiveDelay","adjustedFragmentDuration","targetDelayCapping","ScheduleController","isFragmentProcessingInProgress","timeToLoadDelay","scheduleTimeout","bufferLevelRule","lastFragmentRequest","topQualityIndex","lastInitQuality","replaceRequestArray","switchTrack","mediaRequest","isReplacementRequest","startScheduleTimer","schedule","safeBufferLevel","schedulingInfo","fastSwitchModeEnabled","abandonmentState","trackChanged","qualityChanged","replaceRequest","validateExecutedFragmentRequest","isReplacement","newTopQualityIndex","hasTopQualityChanged","execute","setFragmentProcessState","getNextFragment","completeQualityChange","addExecutedRequest","fragEndTime","onFragmentLoadingAbandoned","onDataUpdateStarted","onQuotaExceeded","onURLResolutionFailed","_hasVideoTrack","_rulesSchedulingBufferLevelRule2","executeRequest","getPlaybackController","StreamController","mediaSourceController","timeSyncController","isStreamSwitchingInProgress","hasMediaError","hasInitialisationError","initialPlayback","playbackEndedTimerInterval","prebufferingCanStartInterval","preloadingStreams","supportsChangeType","seekingStream","flushPlaylistMetrics","END_OF_PERIOD_STOP_REASON","switchStream","USER_REQUEST_STOP_REASON","SEEK_START_REASON","onGapCausedPlaybackSeek","nextStream","getNextStream","INITIAL_PLAYOUT_START_REASON","RESUME_FROM_PAUSE_START_REASON","stopPlaybackEndedTimerInterval","startCheckIfPrebufferingCanStartInterval","upcomingStreams","mediaTypes","segmentAvailabilityRangeIsOk","voRep","canSourceBuffersBeReused","onStreamCanLoadNext","refStream","getNextStreams","checkIfPrebufferingCanStart","unfinishedStreamProcessors","onStreamBufferingCompleted","as","hasCriticalTexttracks","streamDuration","onEnded","END_OF_CONTENT_STOP_REASON","streamEnd","targetIndex","lastDiff","diff","fromStreamInfo","toStreamInfo","seamlessPeriodSwitch","openMediaSource","activateStream","sourceInitialized","streamActivated","sourceUrl","onMediaSourceOpen","revokeObjectURL","setMediaDuration","manifestDuration","mediaDuration","getComposedStream","composeStreams","streamsInfo","clientTimeOffset","shouldKeepStream","_Stream2","streamInfos","fragmentDurations","acc","_toConsumableArray","getFragmentDurationForLiveDelayCalculation","initialStream","targetDelay","getInitialStream","onTimeSyncCompleted","PROTECTION_CREATED","setMediaElement","onManifestUpdated","manifestUTCTimingSources","allUTCTimingSources","isHTTPS","getDefaultUtcTimingSource","msExtendedCode","FAILURE_STOP_REASON","PROTECTION_DESTROYED","targetMediaType","autoPl","protData","_EventController2","baseStart","streamStart","streamDur","checkInitialize","_TimeSyncController2","_MediaSourceController2","TimeSyncController","offsetToDeviceTimeMs","isSynchronizing","setIsSynchronizing","setOffsetMs","xsdatetimeDecoder","xsdatetimeStr","parsedDate","alternateXsdatetimeDecoder","iso8601Decoder","isoStr","rfc1123Decoder","dateStr","notSupportedHandler","onSuccessCB","onFailureCB","directHandler","httpHandler","isHeadRequest","oncomplete","onload","complete","req","XMLHttpRequest","verb","HEAD","GET","urls","status","getResponseHeader","open","onloadend","send","httpHeadHandler","checkForDateHeader","dateHeaderValue","dateHeaderTime","completeTimeSyncSequence","failed","timingSources","useManifestDateHeader","urn:mpeg:dash:utc:http-head:2014","urn:mpeg:dash:utc:http-xsdate:2014","urn:mpeg:dash:utc:http-iso:2014","urn:mpeg:dash:utc:direct:2014","urn:mpeg:dash:utc:http-head:2012","urn:mpeg:dash:utc:http-xsdate:2012","urn:mpeg:dash:utc:http-iso:2012","urn:mpeg:dash:utc:direct:2012","urn:mpeg:dash:utc:http-ntp:2014","urn:mpeg:dash:utc:ntp:2014","urn:mpeg:dash:utc:sntp:2014","attemptSync","sourceIndex","onComplete","serverTime","deviceTime","getOffsetToDeviceTimeMs","HTTP_TIMEOUT_MS","RESOLVE_TYPE_ONLOAD","XlinkController","iron","xlinkLoader","resolveType","onXlinkAllElementsLoaded","isHTTPURL","originalContent","onXlinkElementLoaded","mergedContent","elementsToResolve","isResolvingFinished","resolvedElements","mergeElementsBack","getElementsToResolve","toResolve","xlinkObject","_XlinkLoader2","_utilsDVBErrorsTranslator2","_controllersMetricsCollectionController2","getReportingFactory","_reportingReportingFactory2","getMetricsHandlerFactory","_metricsMetricsHandlerFactory2","_MetricsReportingEvents2","MetricsReportingEvents","METRICS_INITIALISATION_COMPLETE","BECAME_REPORTING_PLAYER","CMCD_DATA_GENERATED","metricsReportingEvents","MetricsCollectionController","metricsControllers","controllersToRemove","_utilsManifestParsing2","getMetrics","_MetricsController2","resetMetricsControllers","MetricsController","metricsHandlersController","reportingController","rangeController","metricsEntry","_RangeController2","Range","_ReportingController2","Reporting","_MetricsHandlersController2","MetricsHandlersController","metricsHandlerFactory","handle","handleNewMetric","midx","ms","nextm","RangeController","useWallClockTime","starttime","_useWallClockTime","isEnabled","numRanges","_utilsCustomTimeRanges2","ReportingController","reporters","reportingFactory","reporting","reporter","vos","MetricsHandlerFactory","keyRegex","knownFactoryProducts","BufferLevel","_handlersBufferLevelHandler2","DVBErrors","_handlersDVBErrorsHandler2","_handlersHttpListHandler2","_handlersGenericMetricHandler2","RepSwitchList","TcpList","listType","matches","register","unregister","BufferLevelHandler","interval","lastReportedTime","handlerHelpers","_utilsHandlerHelpers2","storedVOs","intervalCallback","vo","getLowestBufferLevelVO","basename","rc","n_ms","validateN","reconstructFullMetricName","onInitialisationComplete","unused","GenericMetricHandler","HttpListHandler","storedVos","requestType","ReportingFactory","knownReportingSchemeIdUris","urn:dvb:dash:reporting:2014","_reportersDVBReporting2","moduleName","DVBReporting","metricSerialiser","randomNumberGenerator","reportingPlayerStatusDecided","isReportingPlayer","reportingUrl","pendingRequests","serialise","successCB","failureCB","reqIndex","doGetRequest","probability","dvb_reportingUrl","dvb_probability","_utilsMetricSerialiser2","_utilsRNG2","DVBErrorsTranslator","_voDVBErrors2","mpdurl","terror","onManifestUpdate","onServiceLocationChanged","errorcode","BASE_URL_CHANGED","servicelocation","onBecameReporter","BECAME_REPORTER","onMetricEvent","CONNECTION_ERROR","tresponse","_serviceLocation","handleHttpMetric","MediaError","MEDIA_ERR_NETWORK","MEDIA_ERR_DECODE","CORRUPT_MEDIA_OTHER","initialise","HandlerHelpers","mn","ManifestParsing","Metrics_asArray","metricEntry","_voMetrics2","Range_asArray","rangeEntry","_voRange2","dynamic","reportingStartTime","getMetricsRangeStartTime","Reporting_asArray","reportingEntry","_voReporting2","MetricSerialiser","pairs","isBuiltIn","encodeURIComponent","RNG","crypto","msCrypto","ArrayType","Uint32Array","BYTES_PER_ELEMENT","NUM_RANDOM_NUMBERS","randomNumbers","getRandomValues","ipaddress","SSL_CONNECTION_FAILED_PREFIX","DNS_RESOLUTION_FAILED","HOST_UNREACHABLE","CONNECTION_REFUSED","CORRUPT_MEDIA_ISOBMFF","Metrics","_baseUrls","_selectedIdx","selectedIdx","BaseURLTreeModel","root","objectUtils","_utilsObjectUtils2","updateChildData","getBaseURLCollectionsFromManifest","ai","ri","nodes","walk","OBJECT_TYPES","STREAMING_FORMATS","STREAM_TYPES","CmcdModel","internalData","_isStartup","_bufferLevelStarved","_initialMediaRequestsDone","pr","nor","sf","_coreUtils2","generateUuid","_getGenericCmcdData","_onPlaybackRateChanged","_onManifestLoaded","_onBufferLevelStateChanged","_onPlaybackSeeked","getQueryParameter","cmcdData","ot","_getCmcdDataForMpd","_initForMediaType","encodedBitrate","_getBitrateByRequest","_getObjectDurationByRequest","mtp","getSafeAverageThroughput","_getMeasuredThroughputByType","dl","_getDeadlineByType","_getBufferLevelByType","tb","_getTopBitrateByType","bs","su","_getCmcdDataForMediaSegment","_getCmcdDataForInitSegment","_getCmcdDataForOther","_getCmcdData","finalPayloadString","localeCompare","cmcdString","_buildFinalString","_metricsMetricsReportingEvents2","_dashModelsDashManifestModel2","FragmentModel","isLoaded","req1","req2","isEqualMedia","isEqualInit","isEqualComplete","getRequestThreshold","removeExecutedRequestsInTimeRange","addSchedulingInfoMetrics","onLoadingCompleted","onLoadingInProgress","onLoadingAborted","states","filteredRequests","requests","getRequestsForState","getRequestForTime","filterRequests","isFragmentLoadedOrPending","ACTION_DOWNLOAD","loadCurrentFragment","FRAGMENT_MODEL_CANCELED","FRAGMENT_MODEL_FAILED","ManifestModel","MediaPlayerModel","UTCTimingSources","xhrWithCredentials","customABRRule","DEFAULT_UTC_TIMING_SOURCE","scheme","findABRCustomRuleIndex","_dashVoUTCTiming2","getABRCustomRules","ABANDON_FRAGMENT_RULES","QUALITY_SWITCH_RULES","getRetryAttemptsForType","lowLatencyMultiplyFactor","getRetryIntervalsForType","lowLatencyReductionFactor","liveCatchupMinDrift","maximumLiveDelay","useCreds","default","MetricsModel","streamMetrics","metricsChanged","metricChanged","metricUpdated","metricType","metricAdded","readOnly","_voMetricsList2","pushMetrics","pushAndNotify","metricObject","clearCurrentMetricsForType","tcpid","actualurl","trequest","tfinish","mediaduration","_tfinish","_stream","_mediaduration","_quality","HTTPRequestTrace","appendHttpTrace","_voMetricsRepresentationSwitch2","_voMetricsBufferLevel2","_voMetricsBufferState2","_voMetricsDVRInfo2","_voMetricsDroppedFrames2","DroppedFrames","creationTime","droppedFrames","droppedVideoFrames","_voMetricsSchedulingInfo2","_voMetricsRequestsQueue2","RequestsQueue","requestTime","fetchTime","_voMetricsManifestUpdate","ManifestUpdate","ManifestUpdateStreamInfo","ManifestUpdateRepresentationInfo","subreplevel","URIFragmentModel","URIFragmentDataVO","_voURIFragmentData2","hashIndex","fragment","equalIndex","VideoModel","TTMLRenderingDiv","previousPlaybackRate","VIDEO_MODEL_WRONG_ELEMENT_TYPE","stalledStreams","onPlaybackCanPlay","isStalled","onPlaying","createEvent","initEvent","getTextTrack","label","isTTML","closestTime","closestDistance","distanceToStart","distanceToEnd","stickTimeToBuffered","INVALID_STATE_ERR","Promise","seeking","played","addStalledStream","removeStalledStream","stallStream","removeAttribute","pointerEvents","getVideoPlaybackQuality","webkitDroppedFrameCount","totalVideoFrames","webkitDecodedFrameCount","eventName","eventCallBack","getTextTracks","addTextTrack","childElement","removeChild","getVideoWidth","videoWidth","getVideoHeight","videoHeight","getVideoRelativeOffsetTop","host","getVideoRelativeOffsetLeft","FetchLoader","cfg","processResult","reader","then","calculateDownloadedTime","calculationMode","startTimeData","endTimeData","downloadedData","bytesReceived","datum","datumE","dataE","segDownloadTime","chunkDownladTime","_calculateDownloadedTimeByMoofParsing","_calculateDownloadedTimeByBytesReceived","avgTimeDistance","distance","requestStartTime","Headers","modifyRequestHeader","setRequestHeader","header","abortController","AbortController","signal","onabort","reqOptions","credentials","withCredentials","ok","loaded","totalBytes","signaledFirstByte","getReader","lastChunkWasFinished","_ref","lengthComputable","concatTypedArray","findLastTopIsoBoxCompleted","boxesInfo","lastCompletedOffset","noTrace","cancel","HTTPLoader","delayedRequests","retryRequests","downloadErrorToRequestTypeMap","internalLoad","remainingAttempts","firstProgress","needFailureReport","lastTraceTime","lastTraceReceivedCount","handleLoaded","checkExistenceOnly","getAllResponseHeaders","retryRequest","loader","_FetchLoader2","_XHRLoader2","modifyRequestURL","additionalQueryParameter","cmcdQueryParameter","_getAdditionalQueryParameter","addAditionalQueryParameterToUrl","bytesTotal","ontimeout","timeoutMessage","percentageComplete","delayedRequest","delayTimeout","onprogress","_downloadErrorToRequestTypeMap","SchemeLoaderFactory","schemeLoaderMap","unregisterAllLoader","getLoader","startsWith","_streamingNetHTTPLoader2","registerLoader","unregisterLoader","URLLoader","_streamingNetSchemeLoaderFactory2","loaderFactory","XHRLoader","xhr","CommonEncryption","cpArray","retVal","cp","pssh","keySystem","initData","psshList","parsePSSHList","uuid","cpData","dv","byteCursor","nextBox","systemID","boxStart","APIS_ProtectionModel_01b","generateKeyRequest","addKey","cancelKeyRequest","needkey","keyerror","keyadded","keymessage","APIS_ProtectionModel_3Feb2014","setMediaKeys","MediaKeys","release","ready","getAPI","videoElement","apis","api","protectionKeyController","_controllersProtectionKeyController2","protectionModel","onencrypted","mediaKeys","_modelsProtectionModel_3Feb20142","_modelsProtectionModel_01b2","_modelsProtectionModel_21Jan20152","getProtectionModel","_controllersProtectionController2","setEncryptedMediaSupported","_ProtectionEvents2","_errorsProtectionErrors2","ProtectionEvents","INTERNAL_KEY_MESSAGE","INTERNAL_KEY_SYSTEM_SELECTED","INTERNAL_KEY_STATUS_CHANGED","KEY_ADDED","KEY_MESSAGE","KEY_SESSION_CLOSED","KEY_SESSION_REMOVED","KEY_SYSTEM_ACCESS_COMPLETE","LICENSE_REQUEST_SENDING","NEED_KEY","TEARDOWN_COMPLETE","VIDEO_ELEMENT_SELECTED","protectionEvents","ProtectionController","needkeyRetries","pendingNeedKeyData","protDataSet","sessionType","robustnessLevel","createKeySession","cdmData","initDataForKS","_CommonEncryption2","getPSSHForKeySystem","getProtData","currentInitData","getAllInitData","initDataEquals","getSessionType","KEY_SESSION_CREATED_ERROR_CODE","KEY_SESSION_CREATED_ERROR_MESSAGE","systemString","loadKeySession","sessionID","onNeedKey","keySystemString","getKeySystemConfiguration","audioCapabilities","videoCapabilities","audioRobustness","videoRobustness","ksSessionType","distinctiveIdentifier","persistentState","_voMediaCapability2","_voKeySystemConfiguration2","selectKeySystem","supportedKS","fromManifest","requestedKeySystems","ksA","ksB","ks","ksIdx","configs","onKeySystemAccessComplete","KEY_SYSTEM_ACCESS_DENIED_ERROR_CODE","KEY_SYSTEM_ACCESS_DENIED_ERROR_MESSAGE","isClearKey","kids","clearkeys","sessionId","requestKeySystemAccess","onKeySystemSelected","keySystemAccess","getKeySystem","serverCertificate","setServerCertificate","sendLicenseRequestCompleteEvent","onKeyStatusChanged","onKeyMessage","keyMessage","messageType","sessionToken","licenseServerData","getLicenseServer","eventData","getSessionID","processClearKeyLicenseRequest","updateKeySession","serverURL","laURL","getLicenseServerUrlFromMediaInfo","psshData","getPSSHData","getLicenseServerURLFromInitData","getServerURLFromMessage","reqHeaders","updateHeaders","httpRequestHeaders","getRequestHeadersFromMessage","errorMsg","getErrorResponse","MEDIA_KEY_MESSAGE_LICENSER_ERROR_CODE","MEDIA_KEY_MESSAGE_LICENSER_ERROR_MESSAGE","reqPayload","getLicenseRequestFromMessage","reqMethod","getHTTPMethod","getResponseType","httpTimeout","doLicenseRequest","retriesCount","onLoad","onAbort","onError","licenseMessage","getLicenseMessage","MEDIA_KEY_MESSAGE_NO_LICENSE_SERVER_URL_ERROR_CODE","MEDIA_KEY_MESSAGE_NO_LICENSE_SERVER_URL_ERROR_MESSAGE","MEDIA_KEY_MESSAGE_NO_CHALLENGE_ERROR_CODE","MEDIA_KEY_MESSAGE_NO_CHALLENGE_ERROR_MESSAGE","retry","initDataType","abInitData","getSupportedKeySystems","getSupportedKeySystemsFromContentProtection","removeKeySession","closeKeySession","setSessionType","setRobustnessLevel","cps","getKeySystems","setKeySystems","keySystems","retryTimeout","ProtectionKeyController","clearkeyKeySystem","clearkeyW3CKeySystem","_drmKeySystemPlayReady2","_drmKeySystemWidevine2","_drmKeySystemClearKey2","_drmKeySystemW3CClearKey2","protectionDataSet","initData1","initData2","data1","data2","newKeySystems","getKeySystemBySystemString","cpIdx","cencContentProtection","findCencContentProtection","schemeIdURI","getInitData","getCDMData","getSessionId","shouldNotFilterOutKeySystem","_serversDRMToday2","_constantsProtectionConstants2","_serversWidevine2","_serversPlayReady2","_serversClearKey2","getClearKeysFromProtectionData","KeySystemClearKey","LICENSE_SERVER_MANIFEST_CONFIGURATIONS","prefixes","parseInitDataFromContentProtection","cencDefaultKid","kid","btoa","cencDefaultKidToBase64Representation","Content-Type","licenseServer","clearkeyProtData","ckData","clearkeySet","jsonMsg","keyPairs","clearkeyID","clearkey","_voKeyPair2","_voClearKeyKeySet2","KeySystemPlayReady","messageFormat","PROSize","PSSHSize","PSSHBoxBuffer","PSSHBoxType","playreadySystemID","uint8arraydecodedPROHeader","PSSHBox","PSSHData","pro","prheader","dataview","Uint16Array","headerNameList","getElementsByTagName","headerValueList","Content","licenseRequest","Challenge","numRecords","recordType","recordLength","recordData","record","laurl","luiurl","customData","cdmDataBytes","setPlayReadyMessageFormat","format","KeySystemW3CClearKey","KeySystemWidevine","ProtectionErrors","MEDIA_KEYERR_CODE","MEDIA_KEYERR_UNKNOWN_CODE","MEDIA_KEYERR_CLIENT_CODE","MEDIA_KEYERR_SERVICE_CODE","MEDIA_KEYERR_OUTPUT_CODE","MEDIA_KEYERR_HARDWARECHANGE_CODE","MEDIA_KEYERR_DOMAIN_CODE","MEDIA_KEY_MESSAGE_ERROR_CODE","SERVER_CERTIFICATE_UPDATED_ERROR_CODE","KEY_STATUS_CHANGED_EXPIRED_ERROR_CODE","MEDIA_KEYERR_UNKNOWN_MESSAGE","MEDIA_KEYERR_CLIENT_MESSAGE","MEDIA_KEYERR_SERVICE_MESSAGE","MEDIA_KEYERR_OUTPUT_MESSAGE","MEDIA_KEYERR_HARDWARECHANGE_MESSAGE","MEDIA_KEYERR_DOMAIN_MESSAGE","MEDIA_KEY_MESSAGE_ERROR_MESSAGE","SERVER_CERTIFICATE_UPDATED_ERROR_MESSAGE","KEY_STATUS_CHANGED_EXPIRED_ERROR_MESSAGE","protectionErrors","ProtectionModel_01b","pendingSessions","sessions","moreSessionsAllowed","eventHandler","removeEventListeners","findSessionByID","sessionArray","ksConfigurations","ve","supportedVideo","configIdx","videoIdx","canPlayType","ksConfig","_voKeySystemAccess2","newSession","getExpirationTime","keyID","handleEvent","_voNeedKey2","errorCode","systemCode","_voKeyMessage2","defaultURL","ProtectionModel_21Jan2015","closeKeySessionInternal","session","removeSession","parseKeyStatus","keyId","createSessionToken","keyStatuses","keyStatus","expiration","getKeyStatuses","getUsable","usable","requestKeySystemAccessInternal","requestMediaKeySystemAccess","mediaKeySystemAccess","configuration","getConfiguration","mksa","createMediaKeys","mkeys","createSession","dataType","generateRequest","toJWK","numSessions","ProtectionModel_3Feb2014","doSetKeys","boundDoSetKeys","supportedAudio","audios","audioIdx","isTypeSupported","ksAccess","ksConfiguration","keySession","destinationURL","ClearKey","serverResponse","keypair","keyid","DRMToday","license","keySystemStr","PlayReady","soap","uintToString","encodedString","decodeURIComponent","escape","stringResponse","envelope","faultstring","statusCode","idStart","idEnd","fault","detail","exception","errorString","Widevine","ClearKeyKeySet","numKeys","jwk","kty","alg","jwkString","bView","KeyMessage","KeyPair","KeySystemAccess","KeySystemConfiguration","sessionTypes","initDataTypes","MediaCapability","robustness","NeedKey","DroppedFramesHistory","lastDroppedFrames","lastTotalFrames","intervalDroppedFrames","intervalTotalFrames","getFrameHistory","RulesContext","bufferOccupancyABR","l2AABR","loLP","getMediaType","getDroppedFramesHistory","getCurrentRequest","getSwitchHistory","getAbrController","getVideoModel","PRIORITY","DEFAULT","STRONG","WEAK","SwitchRequest","SwitchRequestHistory","switchRequests","srHistory","_SwitchRequest2","noDrops","drops","dropSize","indexDiff","drop","noDrop","srHistoryFirst","getSwitchRequests","ThroughputHistory","AVERAGE_THROUGHPUT_SAMPLE_AMOUNT_LIVE","AVERAGE_THROUGHPUT_SAMPLE_AMOUNT_VOD","AVERAGE_LATENCY_SAMPLE_AMOUNT","THROUGHPUT_DECREASE_SCALE","THROUGHPUT_INCREASE_SCALE","throughputDict","latencyDict","ewmaThroughputDict","ewmaLatencyDict","ewmaHalfLife","updateEwmaEstimate","ewmaObj","halfLife","fastAlpha","fast","fastEstimate","slowAlpha","slow","slowEstimate","totalWeight","getAverage","isThroughput","throughputHalfLife","latencyHalfLife","getAverageEwma","sampleSize","isLive","ratio","getSampleSize","getAverageSlidingWindow","checkSettingsForMediaType","latencyTimeInMilliseconds","downloadTimeInMilliseconds","downloadBytes","throughputMeasureTime","throughput","latencyMs","downloadTimeMs","isCachedResponse","hasCachedEntries","clearSettingsForMediaType","average","getAverageLatency","ABRRulesCollection","qualitySwitchRules","abandonFragmentRules","getActiveRules","srArray","sr","getMinSwitchRequest","_L2ARuleJs2","_lolpLoLpRuleJs2","_BolaRule2","_ThroughputRule2","_InsufficientBufferRule2","_SwitchHistoryRule2","_DroppedFramesRule2","_AbandonRequestsRule2","rules","getMaxIndex","shouldAbandon","getQualitySwitchRules","AbandonRequestsRule","fragmentDict","abandonDict","throughputArray","setFragmentRequestDict","fragmentInfo","firstByteTime","elapsedTime","storeLastRequestThroughputByType","totalSampledValue","measuredBandwidthInKbps","estimatedTimeOfDownload","bytesRemaining","minQuality","fragmentID","BolaRule","bolaStateDict","calculateBolaParameters","utilities","highestUtilityIndex","highestIndex","uIndex","bufferTime","gp","Vp","getInitialBolaState","initialState","utilitiesFromBitrates","lastQuality","clearBolaStateOnSeek","bolaState","placeholderBuffer","mostAdvancedSegmentStart","lastSegmentWasReplacement","lastSegmentStart","lastSegmentDurationS","lastSegmentRequestTimeMs","lastSegmentFinishTimeMs","checkBolaStateStableBufferTime","effectiveBufferLevel","maxBufferLevelForQuality","minBufferLevelForQuality","qBitrate","qUtility","iBitrate","iUtility","onBufferEmpty","checkNewSegment","bufferAtLastSegmentRequest","maxEffectiveBufferForLastSegment","maxPlaceholderBuffer","onQualityChangeRequested","abrQuality","wantEffectiveBufferLevel","getBolaState","safeThroughput","nowMs","lastCallTimeMs","updatePlaceholderBuffer","bitrateCount","score","getQualityFromBufferLevel","qualityForThroughput","delayS","DroppedFramesRule","dfh","totalFrames","maxIndex","InsufficientBufferRule","INSUFFICIENT_BUFFER_SAFETY_FACTOR","SEGMENT_IGNORE_COUNT","bufferStateDict","ignoreCount","onEndFragment","currentBufferState","shouldIgnore","L2ARule","l2AStateDict","l2AParameterDict","_getInitialL2AState","prev_w","Q","segment_request_start_s","segment_download_finish_s","B_target","_initializeL2AParameters","_clearL2AStateOnSeek","l2AState","l2aState","_onMediaFragmentLoaded","l2AParameters","_checkNewSegment","_onMetricAdded","L2AState","_onQualityChangeRequested","_dotmultiplication","arr1","arr2","sumdot","vl","sqrt","_getL2AState","l2AParameter","diff1","lastthroughput","V","bget","ii","tmpsum","tmax","euclideanProjection","temp","SwitchHistoryRule","switchRequestHistory","ThroughputRule","WEIGHT_SELECTION_MODES","LearningAbrController","somBitrateNeurons","bitrateNormalizationFactor","latencyNormalizationFactor","weights","sortedCenters","weightSelectionMode","_getMaxThroughput","maxThroughput","neuron","_getDistance","_updateNeurons","winnerNeuron","somElements","somNeuron","neuronDistance","rebuffer","_updateNeuronState","neighbourHood","_dynamicWeightSelection","dynamicWeightsSelector","currentLatency","currentThroughput","weightVector","findWeightVector","getNextQuality","bufferSize","currentQualityIndex","bitrateVector","magnitude","_getMagnitude","switch","centers","randomDataSet","dataArray","_getRandomData","distanceWeights","nextPoint","_maxDistance","currentPoint","minDistance","maxDistance","leastSimilarIndex","minIndex","_getInitialKmeansPlusPlusCenters","_getSomBitrateNeurons","throughputNormalized","currentNeuron","downloadTime","getSegmentDuration","getMinBuffer","maxSuitableBitrate","_getDownShiftNeuron","neuronCount","weightCount","W","upperBound","_getXavierWeights","_randomWeightSelection","somNeuronState","somData","nextBuffer","getNextBufferWithBitrate","isBufferLow","bitrateSwitch","LoLpQoeEvaluator","voPerSegmentQoeInfo","maxBitrateKbps","minBitrateKbps","_createQoeInfo","fragmentType","qoeInfo","_QoeInfo2","bitrateReward","bitrateSwitchPenalty","rebufferPenalty","latencyPenalty","penalty","playbackSpeedPenalty","_logMetricsInQoeInfo","rebufferTime","playbackSpeed","bitrateWSum","lastBitrate","bitrateSwitchWSum","rebufferWSum","latencyRange","latencyWSum","playbackSpeedWSum","totalQoe","setupPerSegmentQoe","sDuration","maxBrKbps","minBrKbps","logSegmentMetrics","segmentBitrate","segmentRebufferTime","currentPlaybackSpeed","getPerSegmentQoe","calculateSingleUseQoe","singleUseQoeInfo","LoLPRule","learningController","qoeEvaluator","currentQuality","bufferStateVO","currentBufferLevel","currentBitrateKbps","lastFragmentDownloadTime","_LoLpWeightSelector2","targetLatency","bufferMin","_LearningAbrController2","_LoLpQoEEvaluator2","LoLpWeightSelector","weightOptions","previousLatency","getNextBuffer","bitrateToDownload","neurons","currentRebuffer","maxQoE","winnerWeights","winnerBitrate","weightsObj","weightedRebuffer","weightedLatency","totalQoE","nextLatency","_checkConstraints","_x2","_x3","perm","currLen","currPerm","generate","QoeInfo","BufferLevelRule","bufferTarget","videoBufferLevel","EmbeddedTextHtmlRender","captionId","checkIndent","createRGB","getStyle","createHTMLCaptionsFromScreen","captionScreen","currRegion","lastRowHasText","lastRowIndentL","currP","spans","currentStyle","seenRegions","styleStates","prevPenState","rowIndent","y1","y2","contat","uc","currPenStateString","captionsArray","cueID","finalDiv","cueRegionProperties","cssText","bodyDiv","cueUniWrapper","ptag","lastSpanRow","brElement","sameRow","spanStyle","spanElement","bodyStyle","_s","cueHTMLElement","isFromCEA608","NotFragmentedTextBufferController","_streamingTextTextController2","initialized","textBuffer","TextBufferController","_BufferControllerImpl","_NotFragmentedTextBufferController2","TextController","textSourceBuffer","vttParser","ttmlParser","initialSettingsSet","lastEnabledIndex","textDefaultEnabled","allTracksAreDisabled","forceTextStreaming","textTracksAdded","disableTextBeforeTextTracksAdded","previousPeriodSelectedTrack","onPeriodSwitchStarted","onPeriodSwitchCompleted","onTextTracksAdded","getAllTracksAreDisabled","getConfig","fragmentedTracks","mediaInfosArr","oldTrackIdx","setModeForTrackIdx","setCurrentTrackIdx","currentTrackInfo","getCurrentTrackInfo","isFragmented","deleteCuesFromTrackIdx","setCurrentFragmentedTrackIdx","resetEmbedded","_TextTracks2","_utilsVTTParser2","_utilsTTMLParser2","_TextSourceBuffer2","TextSourceBuffer","embeddedInitialized","mediaInfos","fragmentedFragmentModel","initializationSegmentReceived","firstFragmentedSubtitleStart","currFragmentedTrackIdx","embeddedTracks","embeddedTimescale","embeddedLastSequenceNumber","embeddedCea608FieldParsers","embeddedTextHtmlRender","mseTimeOffset","resetFragmented","onVideoChunkReceived","initEmbedded","_EmbeddedTextHtmlRender2","onVideoBufferCleared","createTextTrackFromMediaInfo","captionData","ttml","textTrackInfo","_voTextTrackInfo2","trackKindMap","subtitle","caption","defaultTrack","getIsDefault","totalNrTracks","sampleList","samplesInfo","ccContent","codecType","getSamplesInfo","cts","getParser","sampleStart","sampleRelStart","subSizes","images","subOffset","inData","offsetTime","ttmlTimeIsRelative","addCaptions","captionArray","sampleData","sampleBoxes","box1","box2","cue_text","start_time","end_time","getMediaTimescaleFromMoov","makeCueAdderForIndex","trackIndex","sequenceNumber","lastSequenceNumber","trackIdx","getTrackIdxForId","numSequences","allCcData","samples","splits","fields","cea608Ranges","lastSampleTime","ccData","extractCea608Data","fieldNr","fieldParser","currFragTrack","addMediaInfos","deleteAllTextTracks","TextTracks","Cue","textTrackQueue","trackElementArr","currentTrackIdx","actualVideoLeft","actualVideoTop","actualVideoWidth","actualVideoHeight","captionContainer","videoSizeCheckInterval","fullscreenAttribute","displayCCOnTop","topZIndex","resizeObserver","createTrackForUserAgent","checkVideoSize","forceDrawing","videoOffsetTop","videoOffsetLeft","use80Percent","realVideoSize","viewWidth","viewHeight","videoPictureWidth","videoPictureHeight","videoPictureXAspect","videoPictureYAspect","videoPictureWidthAspect","videoPictureHeightAspect","newVideoWidth","newVideoHeight","newVideoLeft","newVideoTop","containerStyle","activeCues","scaleCue","activeCue","replaceValue","valueFontSize","valueLineHeight","cellUnit","elementsSpan","getElementsByClassName","htmlCaptionDiv","getElementById","renderCaption","finalCue","_imsc","imsc1ImgUrnTester","smpteImgUrnTester","imageId","embeddedImages","captionDiv","getTrackByIdx","clearCaptionContainer","renderingType","styleElement","stylesheet","sheet","insertRule","classList","removeNativeCueStyle","ResizeObserver","observe","deleteTrackCues","removeCue","VTTCue","TextTrackCue","fullscreenElement","webkitIsFullScreen","msFullscreenElement","mozFullScreen","textTrackInfoVO","totalTextTracks","defaultIndex","textTrack","onMetadataLoaded","videoTextTrack","currentItem","onenter","onexit","divs","align","addCue","trackId","unobserve","deleteTextTrack","ThumbnailController","thumbnailTracks","getCurrentTrack","getThumbnailRequestForTime","thumbIndex","tilesHor","tilesVert","thumbnail","_voThumbnail2","widthPerTile","heightPerTile","readThumbnail","seq","seqIdx","_dashUtilsSegmentsUtils","templateUrl","buildUrlFromTemplate","getTracks","_ThumbnailTracks2","ThumbnailTracks","currentTrackIndex","_streamingNetXHRLoader2","_streamingUtilsBoxParser2","voReps","createTrack","addTracks","useSegmentBase","_voThumbnailTrackInfo2","vars","cache","normalizeSegments","cached","blob","Blob","imageUrl","buildTemplateUrl","currentVoRep","BaseURLSelector","serviceLocationBlacklistController","basicSelector","dvbSelector","isDVB","selectedBaseUrl","_controllersBlacklistController2","_baseUrlResolutionBasicSelector2","blacklistController","_baseUrlResolutionDVBSelector2","BoxParser","fileStart","parsedFile","dashIsoFile","_IsoFile2","setData","parseUint32","parseIsoBoxType","_voIsoBoxSearchInfo2","boxInfo","boxSize","boxType","mdhdBox","totalDuration","moofBoxes","mfhdBoxes","sampleDuration","sampleCount","sampleDts","dataOffset","sequence_number","subsIndex","nextSubsSample","moofBox","trafBoxes","getChildBoxes","trafBox","tfhdBox","getChildBox","tfdtBox","baseMediaDecodeTime","trunBoxes","subsBoxes","trunBox","base_data_offset","data_offset","sample_duration","default_sample_duration","sample_size","default_sample_size","dts","sample_composition_time_offset","subsBox","sample_delta","subsamples","subsample_size","ftyp","moov","parsePayload","Capabilities","encryptedMediaSupported","hasMediaSource","CustomTimeRanges","customTimeRangeArray","mergeRanges","rangeIndex1","rangeIndex2","range1","range2","legacyKeysAndReplacements","oldKey","newKey","LOCAL_STORAGE_BITRATE_KEY_TEMPLATE","LOCAL_STORAGE_SETTINGS_KEY_TEMPLATE","STORAGE_TYPE_LOCAL","LAST_BITRATE","LAST_MEDIA_SETTINGS","DOMStorage","supported","isSupported","storage","setItem","removeItem","getTimestamp","canStore","storageType","getItem","isExpired","timestamp","mediaSettings","DefaultURLUtils","nativeURLResolver","dumbURLResolver","baseUrlParseFunc","isPathAbsolute","parseOrigin","isSchemeRelative","parseScheme","joinChar","resolveFunction","schemeRegex","httpUrlRegex","httpsUrlRegex","originRegex","slashIndex","lastSlashIndex","removeHostname","EBMLParser","bytesConsumed","retainMSB","bytesUsed","mask","ch","headerSize","getMatroskaFloat","outFloat","getFloat32","getFloat64","getMatroskaUint","ErrorHandler","InitCache","IsoFile","parsedIsoFile","boxData","convertToDashIsoBox","_voIsoBox2","LiveEdgeFinder","ObjectUtils","obj1","obj2","_fastDeepEqual2","RequestModifier","parameter","TTMLParser","cueCounter","startTimeSegment","endTimeSegment","currentImageId","accumulated_image_data","imsc1doc","ttmlString","ttmlDoc","mediaTimeEvents","topLevelContents","URLUtils","defaultURLUtils","regexUtils","internalCall","functionName","utils","regex","getUtils","_DefaultURLUtils2","registerUrlRegex","VTTParser","regExNewLine","regExToken","regExWhiteSpace","regExWhiteSpaceWordBoundary","convertCuePointTimes","timeArray","parseItemAttributes","vttCuePoints","cuePoints","styleObject","getCaptionStyles","getSublines","lineCount","subline","lineData","lastStartTime","BasicSelector","DVBSelector","availableUrls","cumulWeights","rn","every","selectByWeight","removedPriorities","getNonBlacklistedBaseUrls","BitrateInfo","DashJSError","DataChunk","FragmentRequest","HeadRequest","checkForExistenceOnly","IsoBox","presentation_time","sample_description_index","default_sample_flags","first_sample_flags","IsoBoxSearchInfo","MetricsList","BufferState","SchedulingInfo","DVRInfo","TextRequest","TextTrackInfo","Thumbnail","ThumbnailTrackInfo","URIFragmentData","xywh","METRICS_COLLECTION_START_REASON","METRICS_COLLECTION_STOP_REASON","RepresentationSwitch"],"mappings":"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AAA,IACAC,KAAA,IACAC,MAAA,IACAC,MAAA,IACAC,KAAA,IACAC,OAAA,IACAC,MAAA,IACAC,KAAA,IACAC,MAAA,IACAC,OAAA,IACAC,OAAA,IACAC,OAAA,IACAC,OAAA,IACAC,MAAA,IACAC,OAAA,IACAC,MAAA,IACAC,MAAA,IACAC,OAAA,IACAC,OAAA,IACAC,KAAA,IACAC,KAAA,IACAC,KAAA,IACAC,MAAA,IACAC,MAAA,IACAC,KAAA,IACAC,MAAA,IACAC,MAAA,IACAC,QAAA,IACAC,KAAA,IACAC,IAAA,IACAC,MAAA,IACAC,KAAA,IACAC,MAAA,IACAC,OAAA,IACAC,GAAA,IACAC,GAAA,IACAC,GAAA,IACAC,QAAA,IACAC,GAAA,IACAC,IAAA,IACAC,MAAA,IACAC,IAAA,IACAC,QAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,MAAA,IACAC,MAAA,IACAC,KAAA,IACAC,MAAA,IACAC,MAAA,IACAC,QAAA,IACAC,KAAA,IACAC,IAAA,IACAC,MAAA,IACAC,KAAA,IACAC,MAAA,IACAC,OAAA,IACAC,GAAA,IACAC,GAAA,IACAC,GAAA,IACAC,QAAA,IACAC,GAAA,IACAC,IAAA,IACAC,OAAA,IACAC,MAAA,IACAC,IAAA,IACAC,QAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,MAAA,IACAC,SAAA,IACAC,MAAA,IACAC,IAAA,IACAC,KAAA,KACAC,KAAA,KACAC,OAAA,KACAC,KAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,MAAA,KACAC,MAAA,KACAC,MAAA,KACAC,MAAA,KACAC,MAAA,KACAC,MAAA,KACAC,MAAA,KACAC,MAAA,KACAC,OAAA,KACAC,OAAA,KACAC,KAAA,KACAC,OAAA,KACAC,OAAA,KACAC,MAAA,KACAC,MAAA,KACAC,OAAA,KACAC,OAAA,KACAC,MAAA,KACAC,MAAA,KACAC,KAAA,KACAC,MAAA,KACAC,OAAA,KACAC,KAAA,KACAC,MAAA,KACAC,QAAA,KACAC,KAAA,KACAC,KAAA,KACAC,KA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","file":"dash.all.min.js","sourceRoot":"./src/","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","/* $Date: 2007-06-12 18:02:31 $ */\r\n\r\n// from: http://bannister.us/weblog/2007/06/09/simple-base64-encodedecode-javascript/\r\n// Handles encode/decode of ASCII and Unicode strings.\r\n\r\nvar UTF8 = {};\r\nUTF8.encode = function(s) {\r\n    var u = [];\r\n    for (var i = 0; i < s.length; ++i) {\r\n        var c = s.charCodeAt(i);\r\n        if (c < 0x80) {\r\n            u.push(c);\r\n        } else if (c < 0x800) {\r\n            u.push(0xC0 | (c >> 6));\r\n            u.push(0x80 | (63 & c));\r\n        } else if (c < 0x10000) {\r\n            u.push(0xE0 | (c >> 12));\r\n            u.push(0x80 | (63 & (c >> 6)));\r\n            u.push(0x80 | (63 & c));\r\n        } else {\r\n            u.push(0xF0 | (c >> 18));\r\n            u.push(0x80 | (63 & (c >> 12)));\r\n            u.push(0x80 | (63 & (c >> 6)));\r\n            u.push(0x80 | (63 & c));\r\n        }\r\n    }\r\n    return u;\r\n};\r\nUTF8.decode = function(u) {\r\n    var a = [];\r\n    var i = 0;\r\n    while (i < u.length) {\r\n        var v = u[i++];\r\n        if (v < 0x80) {\r\n            // no need to mask byte\r\n        } else if (v < 0xE0) {\r\n            v = (31 & v) << 6;\r\n            v |= (63 & u[i++]);\r\n        } else if (v < 0xF0) {\r\n            v = (15 & v) << 12;\r\n            v |= (63 & u[i++]) << 6;\r\n            v |= (63 & u[i++]);\r\n        } else {\r\n            v = (7 & v) << 18;\r\n            v |= (63 & u[i++]) << 12;\r\n            v |= (63 & u[i++]) << 6;\r\n            v |= (63 & u[i++]);\r\n        }\r\n        a.push(String.fromCharCode(v));\r\n    }\r\n    return a.join('');\r\n};\r\n\r\nvar BASE64 = {};\r\n(function(T){\r\n    var encodeArray = function(u) {\r\n        var i = 0;\r\n        var a = [];\r\n        var n = 0 | (u.length / 3);\r\n        while (0 < n--) {\r\n            var v = (u[i] << 16) + (u[i+1] << 8) + u[i+2];\r\n            i += 3;\r\n            a.push(T.charAt(63 & (v >> 18)));\r\n            a.push(T.charAt(63 & (v >> 12)));\r\n            a.push(T.charAt(63 & (v >> 6)));\r\n            a.push(T.charAt(63 & v));\r\n        }\r\n        if (2 == (u.length - i)) {\r\n            var v = (u[i] << 16) + (u[i+1] << 8);\r\n            a.push(T.charAt(63 & (v >> 18)));\r\n            a.push(T.charAt(63 & (v >> 12)));\r\n            a.push(T.charAt(63 & (v >> 6)));\r\n            a.push('=');\r\n        } else if (1 == (u.length - i)) {\r\n            var v = (u[i] << 16);\r\n            a.push(T.charAt(63 & (v >> 18)));\r\n            a.push(T.charAt(63 & (v >> 12)));\r\n            a.push('==');\r\n        }\r\n        return a.join('');\r\n    }\r\n    var R = (function(){\r\n        var a = [];\r\n        for (var i=0; i<T.length; ++i) {\r\n            a[T.charCodeAt(i)] = i;\r\n        }\r\n        a['='.charCodeAt(0)] = 0;\r\n        return a;\r\n    })();\r\n    var decodeArray = function(s) {\r\n        var i = 0;\r\n        var u = [];\r\n        var n = 0 | (s.length / 4);\r\n        while (0 < n--) {\r\n            var v = (R[s.charCodeAt(i)] << 18) + (R[s.charCodeAt(i+1)] << 12) + (R[s.charCodeAt(i+2)] << 6) + R[s.charCodeAt(i+3)];\r\n            u.push(255 & (v >> 16));\r\n            u.push(255 & (v >> 8));\r\n            u.push(255 & v);\r\n            i += 4;\r\n        }\r\n        if (u) {\r\n            if ('=' == s.charAt(i-2)) {\r\n                u.pop();\r\n                u.pop();\r\n            } else if ('=' == s.charAt(i-1)) {\r\n                u.pop();\r\n            }\r\n        }\r\n        return u;\r\n    }\r\n    var ASCII = {};\r\n    ASCII.encode = function(s) {\r\n        var u = [];\r\n        for (var i = 0; i<s.length; ++i) {\r\n            u.push(s.charCodeAt(i));\r\n        }\r\n        return u;\r\n    };\r\n    ASCII.decode = function(u) {\r\n        for (var i = 0; i<s.length; ++i) {\r\n            a[i] = String.fromCharCode(a[i]);\r\n        }\r\n        return a.join('');\r\n    };\r\n    BASE64.decodeArray = function(s) {\r\n        var u = decodeArray(s);\r\n        return new Uint8Array(u);\r\n    };\r\n    BASE64.encodeASCII = function(s) {\r\n        var u = ASCII.encode(s);\r\n        return encodeArray(u);\r\n    };\r\n    BASE64.decodeASCII = function(s) {\r\n        var a = decodeArray(s);\r\n        return ASCII.decode(a);\r\n    };\r\n    BASE64.encode = function(s) {\r\n        var u = UTF8.encode(s);\r\n        return encodeArray(u);\r\n    };\r\n    BASE64.decode = function(s) {\r\n        var u = decodeArray(s);\r\n        return UTF8.decode(u);\r\n    };\r\n})(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\");\r\n\r\n/*The following polyfills are not used in dash.js but have caused multiplayer integration issues.\r\n Therefore commenting them out.\r\nif (undefined === btoa) {\r\n    var btoa = BASE64.encode;\r\n}\r\nif (undefined === atob) {\r\n    var atob = BASE64.decode;\r\n}\r\n*/\r\n\r\nif (typeof exports !== 'undefined') {\r\n    exports.decode = BASE64.decode;\r\n    exports.decodeArray = BASE64.decodeArray;\r\n    exports.encode = BASE64.encode;\r\n    exports.encodeASCII = BASE64.encodeASCII;\r\n}\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2015-2016, DASH Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  1. Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  2. Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n(function(exports) {\r\n\r\n    \"use strict\";\r\n\r\n    /**\r\n     *  Exceptions from regular ASCII. CodePoints are mapped to UTF-16 codes\r\n     */\r\n\r\n    var specialCea608CharsCodes = {\r\n        0x2a : 0xe1, // lowercase a, acute accent\r\n        0x5c : 0xe9, // lowercase e, acute accent\r\n        0x5e : 0xed, // lowercase i, acute accent\r\n        0x5f : 0xf3, // lowercase o, acute accent\r\n        0x60 : 0xfa, // lowercase u, acute accent\r\n        0x7b : 0xe7, // lowercase c with cedilla\r\n        0x7c : 0xf7, // division symbol\r\n        0x7d : 0xd1, // uppercase N tilde\r\n        0x7e : 0xf1, // lowercase n tilde\r\n        0x7f : 0x2588, // Full block\r\n        // THIS BLOCK INCLUDES THE 16 EXTENDED (TWO-BYTE) LINE 21 CHARACTERS\r\n        // THAT COME FROM HI BYTE=0x11 AND LOW BETWEEN 0x30 AND 0x3F\r\n        // THIS MEANS THAT \\x50 MUST BE ADDED TO THE VALUES\r\n        0x80 : 0xae, // Registered symbol (R)\r\n        0x81 : 0xb0, // degree sign\r\n        0x82 : 0xbd, // 1/2 symbol\r\n        0x83 : 0xbf, // Inverted (open) question mark\r\n        0x84 : 0x2122, // Trademark symbol (TM)\r\n        0x85 : 0xa2, // Cents symbol\r\n        0x86 : 0xa3, // Pounds sterling\r\n        0x87 : 0x266a, // Music 8'th note\r\n        0x88 : 0xe0, // lowercase a, grave accent\r\n        0x89 : 0x20, // transparent space (regular)\r\n        0x8a : 0xe8, // lowercase e, grave accent\r\n        0x8b : 0xe2, // lowercase a, circumflex accent\r\n        0x8c : 0xea, // lowercase e, circumflex accent\r\n        0x8d : 0xee, // lowercase i, circumflex accent\r\n        0x8e : 0xf4, // lowercase o, circumflex accent\r\n        0x8f : 0xfb, // lowercase u, circumflex accent\r\n        // THIS BLOCK INCLUDES THE 32 EXTENDED (TWO-BYTE) LINE 21 CHARACTERS\r\n        // THAT COME FROM HI BYTE=0x12 AND LOW BETWEEN 0x20 AND 0x3F\r\n        0x90 : 0xc1, // capital letter A with acute\r\n        0x91 : 0xc9, // capital letter E with acute\r\n        0x92 : 0xd3, // capital letter O with acute\r\n        0x93 : 0xda, // capital letter U with acute\r\n        0x94 : 0xdc, // capital letter U with diaresis\r\n        0x95 : 0xfc, // lowercase letter U with diaeresis\r\n        0x96 : 0x2018, // opening single quote\r\n        0x97 : 0xa1, // inverted exclamation mark\r\n        0x98 : 0x2a, // asterisk\r\n        0x99 : 0x2019, // closing single quote\r\n        0x9a : 0x2501, // box drawings heavy horizontal\r\n        0x9b : 0xa9, // copyright sign\r\n        0x9c : 0x2120, // Service mark\r\n        0x9d : 0x2022, // (round) bullet\r\n        0x9e : 0x201c, // Left double quotation mark\r\n        0x9f : 0x201d, // Right double quotation mark\r\n        0xa0 : 0xc0, // uppercase A, grave accent\r\n        0xa1 : 0xc2, // uppercase A, circumflex\r\n        0xa2 : 0xc7, // uppercase C with cedilla\r\n        0xa3 : 0xc8, // uppercase E, grave accent\r\n        0xa4 : 0xca, // uppercase E, circumflex\r\n        0xa5 : 0xcb, // capital letter E with diaresis\r\n        0xa6 : 0xeb, // lowercase letter e with diaresis\r\n        0xa7 : 0xce, // uppercase I, circumflex\r\n        0xa8 : 0xcf, // uppercase I, with diaresis\r\n        0xa9 : 0xef, // lowercase i, with diaresis\r\n        0xaa : 0xd4, // uppercase O, circumflex\r\n        0xab : 0xd9, // uppercase U, grave accent\r\n        0xac : 0xf9, // lowercase u, grave accent\r\n        0xad : 0xdb, // uppercase U, circumflex\r\n        0xae : 0xab, // left-pointing double angle quotation mark\r\n        0xaf : 0xbb, // right-pointing double angle quotation mark\r\n        // THIS BLOCK INCLUDES THE 32 EXTENDED (TWO-BYTE) LINE 21 CHARACTERS\r\n        // THAT COME FROM HI BYTE=0x13 AND LOW BETWEEN 0x20 AND 0x3F\r\n        0xb0 : 0xc3, // Uppercase A, tilde\r\n        0xb1 : 0xe3, // Lowercase a, tilde\r\n        0xb2 : 0xcd, // Uppercase I, acute accent\r\n        0xb3 : 0xcc, // Uppercase I, grave accent\r\n        0xb4 : 0xec, // Lowercase i, grave accent\r\n        0xb5 : 0xd2, // Uppercase O, grave accent\r\n        0xb6 : 0xf2, // Lowercase o, grave accent\r\n        0xb7 : 0xd5, // Uppercase O, tilde\r\n        0xb8 : 0xf5, // Lowercase o, tilde\r\n        0xb9 : 0x7b, // Open curly brace\r\n        0xba : 0x7d, // Closing curly brace\r\n        0xbb : 0x5c, // Backslash\r\n        0xbc : 0x5e, // Caret\r\n        0xbd : 0x5f, // Underscore\r\n        0xbe : 0x7c, // Pipe (vertical line)\r\n        0xbf : 0x223c, // Tilde operator\r\n        0xc0 : 0xc4, // Uppercase A, umlaut\r\n        0xc1 : 0xe4, // Lowercase A, umlaut\r\n        0xc2 : 0xd6, // Uppercase O, umlaut\r\n        0xc3 : 0xf6, // Lowercase o, umlaut\r\n        0xc4 : 0xdf, // Esszett (sharp S)\r\n        0xc5 : 0xa5, // Yen symbol\r\n        0xc6 : 0xa4, // Generic currency sign\r\n        0xc7 : 0x2503, // Box drawings heavy vertical\r\n        0xc8 : 0xc5, // Uppercase A, ring\r\n        0xc9 : 0xe5, // Lowercase A, ring\r\n        0xca : 0xd8, // Uppercase O, stroke\r\n        0xcb : 0xf8, // Lowercase o, strok\r\n        0xcc : 0x250f, // Box drawings heavy down and right\r\n        0xcd : 0x2513, // Box drawings heavy down and left\r\n        0xce : 0x2517, // Box drawings heavy up and right\r\n        0xcf : 0x251b // Box drawings heavy up and left\r\n    };\r\n\r\n    /**\r\n     * Get Unicode Character from CEA-608 byte code\r\n     */\r\n    var getCharForByte = function(byte) {\r\n        var charCode = byte;\r\n        if (specialCea608CharsCodes.hasOwnProperty(byte)) {\r\n            charCode = specialCea608CharsCodes[byte];\r\n        }\r\n        return String.fromCharCode(charCode);\r\n    };\r\n\r\n    var NR_ROWS = 15,\r\n        NR_COLS = 32;\r\n    // Tables to look up row from PAC data\r\n    var rowsLowCh1 = {0x11 : 1, 0x12 : 3, 0x15 : 5, 0x16 : 7, 0x17 : 9, 0x10 : 11, 0x13 : 12, 0x14 : 14};\r\n    var rowsHighCh1 = {0x11 : 2, 0x12 : 4, 0x15 : 6, 0x16 : 8, 0x17 : 10, 0x13 : 13, 0x14 : 15};\r\n    var rowsLowCh2 = {0x19 : 1, 0x1A : 3, 0x1D : 5, 0x1E : 7, 0x1F : 9, 0x18 : 11, 0x1B : 12, 0x1C : 14};\r\n    var rowsHighCh2 = {0x19 : 2, 0x1A : 4, 0x1D : 6, 0x1E : 8, 0x1F : 10, 0x1B : 13, 0x1C : 15};\r\n\r\n    var backgroundColors = ['white', 'green', 'blue', 'cyan', 'red', 'yellow', 'magenta', 'black', 'transparent'];\r\n\r\n    /**\r\n     * Simple logger class to be able to write with time-stamps and filter on level.\r\n     */\r\n    var logger = {\r\n        verboseFilter : {'DATA' : 3, 'DEBUG' : 3, 'INFO' : 2, 'WARNING' : 2, 'TEXT' : 1, 'ERROR' : 0},\r\n        time : null,\r\n        verboseLevel : 0, // Only write errors\r\n        setTime : function(newTime) {\r\n            this.time = newTime;\r\n        },\r\n        log : function(severity, msg) {\r\n            var minLevel = this.verboseFilter[severity];\r\n            if (this.verboseLevel >= minLevel) {\r\n                console.log(this.time + \" [\" + severity + \"] \" + msg);\r\n            }\r\n        }\r\n    };\r\n\r\n    var numArrayToHexArray = function(numArray) {\r\n        var hexArray = [];\r\n        for (var j = 0; j < numArray.length; j++) {\r\n            hexArray.push(numArray[j].toString(16));\r\n        }\r\n        return hexArray;\r\n    };\r\n\r\n    /**\r\n     * State of CEA-608 pen or character\r\n     * @constructor\r\n     */\r\n    var PenState = function(foreground, underline, italics, background, flash) {\r\n        this.foreground = foreground || \"white\";\r\n        this.underline = underline || false;\r\n        this.italics = italics || false;\r\n        this.background = background || \"black\";\r\n        this.flash = flash || false;\r\n    };\r\n\r\n    PenState.prototype = {\r\n        \r\n        reset : function() {\r\n            this.foreground = \"white\";\r\n            this.underline = false;\r\n            this.italics = false;\r\n            this.background = \"black\";\r\n            this.flash = false;\r\n        },\r\n        \r\n        setStyles : function(styles) {\r\n            var attribs = [\"foreground\", \"underline\", \"italics\", \"background\", \"flash\"];\r\n            for (var i = 0 ; i < attribs.length; i++) {\r\n                var style = attribs[i];\r\n                if (styles.hasOwnProperty(style)) {\r\n                    this[style] = styles[style];\r\n                }\r\n            }\r\n        },\r\n        \r\n        isDefault : function() {\r\n            return (this.foreground === \"white\" && !this.underline && !this.italics && \r\n                    this.background === \"black\" && !this.flash);\r\n        },\r\n\r\n        equals : function(other) {\r\n            return ( (this.foreground === other.foreground) && \r\n                     (this.underline === other.underline) &&\r\n                     (this.italics === other.italics) &&\r\n                     (this.background === other.background) &&\r\n                     (this.flash === other.flash) );\r\n        },\r\n\r\n        copy : function(newPenState) {\r\n            this.foreground = newPenState.foreground;\r\n            this.underline = newPenState.underline;\r\n            this.italics = newPenState.italics;\r\n            this.background = newPenState.background;\r\n            this.flash = newPenState.flash;\r\n        },\r\n        \r\n        toString: function() {\r\n            return (\"color=\" + this.foreground + \", underline=\" + this.underline + \", italics=\" + this.italics +\r\n                \", background=\" + this.background + \", flash=\" + this.flash);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Unicode character with styling and background.\r\n     * @constructor\r\n     */\r\n    var StyledUnicodeChar = function(uchar, foreground, underline, italics, background, flash) {\r\n        this.uchar = uchar || ' '; // unicode character\r\n        this.penState = new PenState(foreground, underline,italics, background, flash);\r\n    };\r\n\r\n    StyledUnicodeChar.prototype = {\r\n        \r\n        reset: function() {\r\n            this.uchar = ' ';\r\n            this.penState.reset();\r\n        },\r\n        \r\n        setChar: function(uchar, newPenState) {\r\n            this.uchar = uchar;\r\n            this.penState.copy(newPenState);\r\n        },\r\n        \r\n        setPenState: function(newPenState) {\r\n            this.penState.copy(newPenState);\r\n        },\r\n        \r\n        equals: function(other) {\r\n            return this.uchar === other.uchar && this.penState.equals(other.penState);\r\n        },\r\n        \r\n        copy: function(newChar) {\r\n            this.uchar = newChar.uchar;\r\n            this.penState.copy(newChar.penState);\r\n        },\r\n        \r\n        isEmpty : function() {\r\n            return this.uchar === ' ' && this.penState.isDefault();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * CEA-608 row consisting of NR_COLS instances of StyledUnicodeChar.\r\n     * @constructor\r\n     */\r\n    var Row = function() {\r\n        this.chars = [];\r\n        for (var i = 0 ; i < NR_COLS ; i++) {\r\n            this.chars.push(new StyledUnicodeChar());\r\n        }\r\n        this.pos = 0;\r\n        this.currPenState = new PenState();\r\n    };\r\n\r\n    Row.prototype = {\r\n        \r\n        equals: function(other) {\r\n            var equal = true;\r\n            for (var i = 0 ; i < NR_COLS; i ++) {\r\n                if (!this.chars[i].equals(other.chars[i])) {\r\n                    equal = false;\r\n                    break;\r\n                }\r\n            }\r\n            return equal;\r\n        },\r\n        \r\n        copy: function(other) {\r\n            for (var i = 0 ; i < NR_COLS; i ++) {\r\n                this.chars[i].copy(other.chars[i]);\r\n            }\r\n        },\r\n        \r\n        isEmpty : function() {\r\n            var empty = true;\r\n            for (var i = 0 ; i < NR_COLS; i ++) {\r\n                if (!this.chars[i].isEmpty()) {\r\n                    empty = false;\r\n                    break;\r\n                }\r\n            }\r\n            return empty;\r\n        },\r\n\r\n        /**\r\n         *  Set the cursor to a valid column.\r\n         */\r\n        setCursor : function(absPos) {\r\n            if (this.pos !== absPos) {\r\n                this.pos = absPos;\r\n            }\r\n            if (this.pos < 0) {\r\n                logger.log(\"ERROR\", \"Negative cursor position \" + this.pos);\r\n                this.pos = 0;\r\n            } else if (this.pos > NR_COLS) {\r\n                logger.log(\"ERROR\", \"Too large cursor position \" + this.pos);\r\n                this.pos = NR_COLS;\r\n            }\r\n        },\r\n\r\n        /** \r\n         * Move the cursor relative to current position.\r\n         */\r\n        moveCursor : function(relPos) {\r\n            var newPos = this.pos + relPos;\r\n            if (relPos > 1) {\r\n                for (var i = this.pos+1; i < newPos+1 ; i++) {\r\n                    this.chars[i].setPenState(this.currPenState);\r\n                }\r\n            }\r\n            this.setCursor(newPos);\r\n        },\r\n\r\n        /**\r\n         * Backspace, move one step back and clear character.\r\n         */\r\n        backSpace : function () {\r\n            this.moveCursor(-1);\r\n            this.chars[this.pos].setChar(' ', this.currPenState);\r\n        },\r\n\r\n        insertChar: function(byte) {\r\n            if (byte >= 0x90) { //Extended char\r\n                this.backSpace();\r\n            }\r\n            var char = getCharForByte(byte);\r\n            if (this.pos >= NR_COLS) {\r\n                logger.log(\"ERROR\", \"Cannot insert \" + byte.toString(16) +  \r\n                            \" (\" + char + \") at position \" + this.pos + \". Skipping it!\");\r\n                return;\r\n            }\r\n            this.chars[this.pos].setChar(char, this.currPenState);\r\n            this.moveCursor(1);\r\n        },\r\n\r\n        clearFromPos : function(startPos) {\r\n            var i;\r\n            for (i = startPos ; i < NR_COLS ; i++) {\r\n                this.chars[i].reset();\r\n            }\r\n        },\r\n\r\n        clear : function() {\r\n            this.clearFromPos(0);\r\n            this.pos = 0;\r\n            this.currPenState.reset();\r\n        },\r\n\r\n        clearToEndOfRow : function() {\r\n            this.clearFromPos(this.pos);\r\n        },\r\n\r\n        getTextString: function() {\r\n            var chars = [];\r\n            var empty = true;\r\n            for (var i = 0 ; i < NR_COLS ; i++) {\r\n                var char = this.chars[i].uchar;\r\n                if (char !== \" \") {\r\n                    empty = false;\r\n                }\r\n                chars.push(char);\r\n            }\r\n            if (empty) {\r\n                return \"\";\r\n            } else {\r\n                return chars.join(\"\");\r\n            }\r\n        },\r\n\r\n        setPenStyles: function(styles) {\r\n            this.currPenState.setStyles(styles);\r\n            var currChar = this.chars[this.pos];\r\n            currChar.setPenState(this.currPenState);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Keep a CEA-608 screen of 32x15 styled characters\r\n     * @constructor\r\n    */\r\n    var CaptionScreen = function() {\r\n\r\n        this.rows = [];\r\n        for (var i = 0 ; i <  NR_ROWS; i++) {\r\n            this.rows.push(new Row()); // Note that we use zero-based numbering (0-14)\r\n        }\r\n        this.currRow = NR_ROWS - 1;\r\n        this.nrRollUpRows = null;\r\n        this.reset();\r\n    };\r\n\r\n    CaptionScreen.prototype = {\r\n\r\n        reset : function() {\r\n            for (var i = 0 ; i < NR_ROWS ; i++) {\r\n                this.rows[i].clear();\r\n            }\r\n            this.currRow = NR_ROWS - 1;\r\n        },\r\n\r\n        equals : function(other) {\r\n            var equal = true;\r\n            for (var i = 0 ; i < NR_ROWS ; i++) {\r\n                if (!this.rows[i].equals(other.rows[i])) {\r\n                    equal = false;\r\n                    break;\r\n                }\r\n            }\r\n            return equal;\r\n        },\r\n\r\n        copy : function(other) {\r\n            for (var i = 0 ; i < NR_ROWS ; i++) {\r\n                this.rows[i].copy(other.rows[i]);\r\n            }\r\n        },\r\n\r\n        isEmpty : function() {\r\n            var empty = true;\r\n            for (var i = 0 ; i < NR_ROWS ; i++) {\r\n                if (!this.rows[i].isEmpty()) {\r\n                    empty = false;\r\n                    break;\r\n                }\r\n            }\r\n            return empty;\r\n        },\r\n\r\n        backSpace : function() {\r\n            var row = this.rows[this.currRow]; \r\n            row.backSpace();\r\n        },\r\n\r\n        clearToEndOfRow : function() {\r\n            var row = this.rows[this.currRow];\r\n            row.clearToEndOfRow();\r\n        },\r\n\r\n        /**\r\n         * Insert a character (without styling) in the current row.\r\n         */\r\n        insertChar : function(char) {\r\n            var row = this.rows[this.currRow];\r\n            row.insertChar(char);\r\n        },\r\n\r\n        setPen : function(styles) {\r\n            var row = this.rows[this.currRow];\r\n            row.setPenStyles(styles);\r\n        },\r\n\r\n        moveCursor : function(relPos) {\r\n            var row = this.rows[this.currRow];\r\n            row.moveCursor(relPos); \r\n        },\r\n\r\n        setCursor : function(absPos) {\r\n            logger.log(\"INFO\", \"setCursor: \" + absPos);\r\n            var row = this.rows[this.currRow];\r\n            row.setCursor(absPos);\r\n        },\r\n\r\n        setPAC : function(pacData) {\r\n            logger.log(\"INFO\", \"pacData = \" + JSON.stringify(pacData));\r\n            var newRow = pacData.row - 1;\r\n            if (this.nrRollUpRows  && newRow < this.nrRollUpRows - 1) {\r\n                    newRow = this.nrRollUpRows-1;\r\n            }\r\n            this.currRow = newRow;\r\n            var row = this.rows[this.currRow];\r\n            if (pacData.indent !== null) {\r\n                var indent = pacData.indent;\r\n                var prevPos = Math.max(indent-1, 0);\r\n                row.setCursor(pacData.indent);\r\n                pacData.color = row.chars[prevPos].penState.foreground;\r\n            }\r\n            var styles = {foreground : pacData.color, underline : pacData.underline, italics : pacData.italics, background : 'black', flash : false};\r\n            this.setPen(styles);\r\n        },\r\n\r\n        /**\r\n         * Set background/extra foreground, but first do back_space, and then insert space (backwards compatibility).\r\n         */\r\n        setBkgData : function(bkgData) {\r\n\r\n            logger.log(\"INFO\", \"bkgData = \" + JSON.stringify(bkgData));\r\n            this.backSpace();\r\n            this.setPen(bkgData);\r\n            this.insertChar(0x20); //Space\r\n        },\r\n\r\n        setRollUpRows : function(nrRows) {\r\n            this.nrRollUpRows = nrRows;\r\n        },\r\n\r\n        rollUp : function() {\r\n            if (this.nrRollUpRows === null) {\r\n                logger.log(\"DEBUG\", \"roll_up but nrRollUpRows not set yet\");\r\n                return; //Not properly setup\r\n            }\r\n            logger.log(\"TEXT\", this.getDisplayText());\r\n            var topRowIndex = this.currRow + 1 - this.nrRollUpRows;\r\n            var topRow = this.rows.splice(topRowIndex, 1)[0];\r\n            topRow.clear();\r\n            this.rows.splice(this.currRow, 0, topRow);\r\n            logger.log(\"INFO\", \"Rolling up\");\r\n            //logger.log(\"TEXT\", this.get_display_text())\r\n        },\r\n\r\n       /**\r\n        * Get all non-empty rows with as unicode text. \r\n        */        \r\n        getDisplayText : function(asOneRow) {\r\n            asOneRow = asOneRow || false;\r\n            var displayText = [];\r\n            var text = \"\";\r\n            var rowNr = -1;\r\n            for (var i = 0 ; i < NR_ROWS ; i++) {\r\n                var rowText = this.rows[i].getTextString();\r\n                if (rowText) {\r\n                    rowNr = i+1;\r\n                    if (asOneRow) {\r\n                        displayText.push(\"Row \" + rowNr + ': \"' + rowText + '\"');\r\n                    } else {\r\n                        displayText.push(rowText.trim());\r\n                    }\r\n                }\r\n            }\r\n            if (displayText.length > 0) {\r\n                if (asOneRow) {\r\n                    text = \"[\" + displayText.join(\" | \") + \"]\";\r\n                } else {\r\n                    text = displayText.join(\"\\n\");\r\n                }\r\n            }\r\n            return text;\r\n        },\r\n\r\n        getTextAndFormat : function() {\r\n            return this.rows;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Handle a CEA-608 channel and send decoded data to outputFilter\r\n     * @constructor\r\n     * @param {Number} channelNumber (1 or 2)\r\n     * @param {CueHandler} outputFilter Output from channel1 newCue(startTime, endTime, captionScreen)\r\n    */\r\n    var Cea608Channel = function(channelNumber, outputFilter) {\r\n\r\n        this.chNr = channelNumber;\r\n        this.outputFilter = outputFilter;\r\n        this.mode = null;\r\n        this.verbose = 0;\r\n        this.displayedMemory = new CaptionScreen();\r\n        this.nonDisplayedMemory = new CaptionScreen();\r\n        this.lastOutputScreen = new CaptionScreen();\r\n        this.currRollUpRow = this.displayedMemory.rows[NR_ROWS-1];\r\n        this.writeScreen = this.displayedMemory;\r\n        this.mode = null;\r\n        this.cueStartTime = null; // Keeps track of where a cue started.\r\n    };\r\n\r\n    Cea608Channel.prototype = {\r\n        \r\n        modes : [\"MODE_ROLL-UP\", \"MODE_POP-ON\", \"MODE_PAINT-ON\", \"MODE_TEXT\"],\r\n        \r\n        reset : function() {\r\n            this.mode = null;\r\n            this.displayedMemory.reset();\r\n            this.nonDisplayedMemory.reset();\r\n            this.lastOutputScreen.reset();\r\n            this.currRollUpRow = this.displayedMemory.rows[NR_ROWS-1];\r\n            this.writeScreen = this.displayedMemory;\r\n            this.mode = null;\r\n            this.cueStartTime = null;\r\n            this.lastCueEndTime = null;\r\n        },\r\n\r\n        getHandler : function() {\r\n            return this.outputFilter;\r\n        },\r\n\r\n        setHandler : function(newHandler) {\r\n            this.outputFilter = newHandler;\r\n        },\r\n\r\n        setPAC : function(pacData) {\r\n            this.writeScreen.setPAC(pacData);\r\n        },\r\n\r\n        setBkgData : function(bkgData) {\r\n            this.writeScreen.setBkgData(bkgData);\r\n        },\r\n\r\n        setMode : function(newMode) {\r\n            if (newMode === this.mode) {\r\n                return;\r\n            }\r\n            this.mode = newMode;\r\n            logger.log(\"INFO\", \"MODE=\" + newMode);\r\n            if (this.mode == \"MODE_POP-ON\") {\r\n                this.writeScreen = this.nonDisplayedMemory;\r\n            } else {\r\n                this.writeScreen = this.displayedMemory;\r\n                this.writeScreen.reset();\r\n            }\r\n            if (this.mode !== \"MODE_ROLL-UP\") {\r\n                this.displayedMemory.nrRollUpRows = null;\r\n                this.nonDisplayedMemory.nrRollUpRows = null;\r\n            }\r\n            this.mode = newMode;\r\n        },\r\n\r\n        insertChars : function(chars) {\r\n            for (var i = 0 ; i < chars.length ; i++) {\r\n                this.writeScreen.insertChar(chars[i]);\r\n            }\r\n            var screen = this.writeScreen === this.displayedMemory ? \"DISP\" : \"NON_DISP\";\r\n            logger.log(\"INFO\", screen + \": \" + this.writeScreen.getDisplayText(true));\r\n            if (this.mode === \"MODE_PAINT-ON\" || this.mode === \"MODE_ROLL-UP\") {\r\n                logger.log(\"TEXT\", \"DISPLAYED: \" + this.displayedMemory.getDisplayText(true));\r\n                this.outputDataUpdate();\r\n            }\r\n        },\r\n\r\n        cc_RCL: function() { // Resume Caption Loading (switch mode to Pop On)\r\n            logger.log(\"INFO\", \"RCL - Resume Caption Loading\");\r\n            this.setMode(\"MODE_POP-ON\");\r\n        },\r\n        cc_BS: function() { // BackSpace\r\n            logger.log(\"INFO\", \"BS - BackSpace\");\r\n            if (this.mode === \"MODE_TEXT\") {\r\n                return;\r\n            }\r\n            this.writeScreen.backSpace();\r\n            if (this.writeScreen === this.displayedMemory) {\r\n                this.outputDataUpdate();\r\n            }\r\n        },\r\n        cc_AOF : function() { // Reserved (formerly Alarm Off)\r\n            return;\r\n        },\r\n        cc_AON: function() { // Reserved (formerly Alarm On)\r\n            return;\r\n        },\r\n        cc_DER: function() { // Delete to End of Row\r\n            logger.log(\"INFO\", \"DER- Delete to End of Row\");\r\n            this.writeScreen.clearToEndOfRow();\r\n            this.outputDataUpdate();\r\n        },\r\n        cc_RU: function(nrRows) { //Roll-Up Captions-2,3,or 4 Rows\r\n            logger.log(\"INFO\", \"RU(\" + nrRows +\") - Roll Up\");\r\n            this.writeScreen = this.displayedMemory;\r\n            this.setMode(\"MODE_ROLL-UP\");\r\n            this.writeScreen.setRollUpRows(nrRows);\r\n        },\r\n        cc_FON: function() { //Flash On\r\n            logger.log(\"INFO\", \"FON - Flash On\");\r\n            this.writeScreen.setPen({flash : true});\r\n        },\r\n        cc_RDC: function() { // Resume Direct Captioning (switch mode to PaintOn)\r\n            logger.log(\"INFO\", \"RDC - Resume Direct Captioning\");\r\n            this.setMode(\"MODE_PAINT-ON\");\r\n        },\r\n        cc_TR: function() { // Text Restart in text mode (not supported, however)\r\n            logger.log(\"INFO\", \"TR\");\r\n            this.setMode(\"MODE_TEXT\");\r\n        },\r\n        cc_RTD: function() { // Resume Text Display in Text mode (not supported, however)\r\n            logger.log(\"INFO\", \"RTD\");\r\n            this.setMode(\"MODE_TEXT\");\r\n        },\r\n        cc_EDM: function() { // Erase Displayed Memory\r\n            logger.log(\"INFO\", \"EDM - Erase Displayed Memory\");\r\n            this.displayedMemory.reset();\r\n            this.outputDataUpdate();\r\n        },\r\n        cc_CR: function() { // Carriage Return\r\n            logger.log(\"CR - Carriage Return\");\r\n            this.writeScreen.rollUp();\r\n            this.outputDataUpdate();\r\n        },\r\n        cc_ENM: function() { //Erase Non-Displayed Memory\r\n            logger.log(\"INFO\", \"ENM - Erase Non-displayed Memory\");\r\n            this.nonDisplayedMemory.reset();\r\n        },\r\n        cc_EOC: function() { //End of Caption (Flip Memories)\r\n            logger.log(\"INFO\", \"EOC - End Of Caption\");\r\n            if (this.mode === \"MODE_POP-ON\") {\r\n                var tmp = this.displayedMemory;\r\n                this.displayedMemory = this.nonDisplayedMemory;\r\n                this.nonDisplayedMemory = tmp;\r\n                this.writeScreen = this.nonDisplayedMemory;\r\n                logger.log(\"TEXT\", \"DISP: \" + this.displayedMemory.getDisplayText());\r\n            }\r\n            this.outputDataUpdate();\r\n        },\r\n        cc_TO: function(nrCols) { // Tab Offset 1,2, or 3 columns\r\n            logger.log(\"INFO\", \"TO(\" + nrCols + \") - Tab Offset\");\r\n            this.writeScreen.moveCursor(nrCols);\r\n        },\r\n        cc_MIDROW: function(secondByte) { // Parse MIDROW command\r\n            var styles = {flash : false};\r\n            styles.underline = secondByte % 2 === 1;\r\n            styles.italics = secondByte >= 0x2e;\r\n            if (!styles.italics) {\r\n                var colorIndex = Math.floor(secondByte/2) - 0x10;\r\n                var colors = [\"white\", \"green\", \"blue\", \"cyan\", \"red\", \"yellow\", \"magenta\"];\r\n                styles.foreground = colors[colorIndex];\r\n            } else {\r\n                styles.foreground = \"white\";\r\n            }\r\n            logger.log(\"INFO\", \"MIDROW: \" + JSON.stringify(styles));\r\n            this.writeScreen.setPen(styles);\r\n        },\r\n\r\n        outputDataUpdate: function() {\r\n            var t = logger.time;\r\n            if (t === null) {\r\n                return;\r\n            }\r\n            if (this.outputFilter) {\r\n                if (this.outputFilter.updateData) {\r\n                    this.outputFilter.updateData(t, this.displayedMemory);\r\n                }\r\n                if (this.cueStartTime === null && !this.displayedMemory.isEmpty()) { // Start of a new cue\r\n                    this.cueStartTime = t;\r\n                } else {\r\n                    if (!this.displayedMemory.equals(this.lastOutputScreen)) { \r\n                        if (this.outputFilter.newCue) {\r\n                            this.outputFilter.newCue(this.cueStartTime, t, this.lastOutputScreen);\r\n                        }\r\n                        this.cueStartTime = this.displayedMemory.isEmpty() ? null : t;\r\n                    }\r\n                }\r\n                this.lastOutputScreen.copy(this.displayedMemory);\r\n            }\r\n        },\r\n\r\n        cueSplitAtTime : function(t) {\r\n            if (this.outputFilter) {\r\n                if (!this.displayedMemory.isEmpty()) {\r\n                    if (this.outputFilter.newCue) {\r\n                        this.outputFilter.newCue(this.cueStartTime, t, this.displayedMemory);\r\n                    }\r\n                    this.cueStartTime = t;\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Parse CEA-608 data and send decoded data to out1 and out2.\r\n     * @constructor\r\n     * @param {Number} field  CEA-608 field (1 or 2)\r\n     * @param {CueHandler} out1 Output from channel1 newCue(startTime, endTime, captionScreen)\r\n     * @param {CueHandler} out2 Output from channel2 newCue(startTime, endTime, captionScreen)\r\n     */\r\n    var Cea608Parser = function(field, out1, out2) {\r\n        this.field = field || 1;\r\n        this.outputs = [out1, out2];\r\n        this.channels = [new Cea608Channel(1, out1), new Cea608Channel(2, out2)];\r\n        this.currChNr = -1; // Will be 1 or 2\r\n        this.lastCmdA = null; // First byte of last command\r\n        this.lastCmdB = null; // Second byte of last command\r\n        this.bufferedData = [];\r\n        this.startTime = null;\r\n        this.lastTime = null;\r\n        this.dataCounters = {'padding' : 0, 'char' : 0, 'cmd' : 0, 'other' : 0};\r\n    };\r\n\r\n    Cea608Parser.prototype = {\r\n        \r\n        getHandler : function(index) {\r\n            return this.channels[index].getHandler();\r\n        },\r\n        \r\n        setHandler : function(index, newHandler) {\r\n            this.channels[index].setHandler(newHandler);\r\n        },\r\n\r\n        /**\r\n         * Add data for time t in forms of list of bytes (unsigned ints). The bytes are treated as pairs.\r\n         */\r\n        addData : function(t, byteList) {\r\n            var cmdFound, a, b, \r\n            charsFound = false;\r\n            \r\n            this.lastTime = t;\r\n            logger.setTime(t);\r\n\r\n            for (var i = 0 ; i < byteList.length ; i+=2) {\r\n                a = byteList[i] & 0x7f;\r\n                b = byteList[i+1] & 0x7f;\r\n\r\n                if (a >= 0x10 && a <= 0x1f && a === this.lastCmdA && b === this.lastCmdB) {\r\n                    this.lastCmdA = null;\r\n                    this.lastCmdB = null;\r\n                    logger.log(\"DEBUG\", \"Repeated command (\" + numArrayToHexArray([a, b]) + \") is dropped\");\r\n                    continue; // Repeated commands are dropped (once)\r\n                }\r\n\r\n                if (a === 0 && b === 0) {\r\n                    this.dataCounters.padding += 2;\r\n                    continue;\r\n                } else {\r\n                    logger.log(\"DATA\", \"[\" + numArrayToHexArray([byteList[i], byteList[i+1]]) +\"] -> (\" + numArrayToHexArray([a, b]) + \")\");\r\n                }\r\n                cmdFound = this.parseCmd(a, b);\r\n                if (!cmdFound) {\r\n                    cmdFound = this.parseMidrow(a, b);\r\n                }\r\n                if (!cmdFound) {\r\n                    cmdFound = this.parsePAC(a, b);\r\n                }\r\n                if (!cmdFound) {\r\n                    cmdFound = this.parseBackgroundAttributes(a, b);\r\n                }\r\n                if (!cmdFound) {\r\n                    charsFound = this.parseChars(a, b);\r\n                    if (charsFound) {\r\n                        if (this.currChNr && this.currChNr >=0) {\r\n                            var channel = this.channels[this.currChNr-1];\r\n                            channel.insertChars(charsFound);\r\n                        } else {\r\n                            logger.log(\"WARNING\", \"No channel found yet. TEXT-MODE?\");\r\n                        }\r\n                    }\r\n                }\r\n                if (cmdFound) {\r\n                    this.dataCounters.cmd += 2;\r\n                } else if (charsFound) {\r\n                    this.dataCounters.char += 2;\r\n                } else {\r\n                    this.dataCounters.other += 2;\r\n                    logger.log(\"WARNING\", \"Couldn't parse cleaned data \" + numArrayToHexArray([a, b]) +\r\n                                \" orig: \" + numArrayToHexArray([byteList[i], byteList[i+1]]));\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Parse Command.\r\n         * @returns {Boolean} Tells if a command was found\r\n         */\r\n        parseCmd: function(a, b) {\r\n            var chNr = null;\r\n\r\n            var cond1 = (a === 0x14 || a === 0x15 || a === 0x1C || a === 0x1D) && (0x20 <= b && b <= 0x2F);\r\n            var cond2 = (a === 0x17 || a === 0x1F) && (0x21 <= b && b <= 0x23);\r\n            if (!(cond1 || cond2)) {\r\n                return false;\r\n            }\r\n                 \r\n            if (a === 0x14 || a === 0x15 || a === 0x17) {\r\n                chNr = 1;\r\n            } else {\r\n                chNr = 2; // (a === 0x1C || a === 0x1D || a=== 0x1f)\r\n            }\r\n\r\n            var channel = this.channels[chNr - 1];\r\n\r\n            if (a === 0x14 || a === 0x15 || a === 0x1C || a === 0x1D) {\r\n                if (b === 0x20) {\r\n                    channel.cc_RCL();\r\n                } else if (b === 0x21) {\r\n                    channel.cc_BS();\r\n                } else if (b === 0x22) {\r\n                    channel.cc_AOF();\r\n                } else if (b === 0x23) {\r\n                    channel.cc_AON();\r\n                } else if (b === 0x24) {\r\n                    channel.cc_DER();\r\n                } else if (b === 0x25) {\r\n                    channel.cc_RU(2);\r\n                } else if (b === 0x26) {\r\n                    channel.cc_RU(3);\r\n                } else if (b === 0x27) {\r\n                    channel.cc_RU(4);\r\n                } else if (b === 0x28) {\r\n                    channel.cc_FON();\r\n                } else if (b === 0x29) {\r\n                    channel.cc_RDC();\r\n                } else if (b === 0x2A) {\r\n                    channel.cc_TR();\r\n                } else if (b === 0x2B) {\r\n                    channel.cc_RTD();\r\n                } else if (b === 0x2C) {\r\n                    channel.cc_EDM();\r\n                } else if (b === 0x2D) {\r\n                    channel.cc_CR();\r\n                } else if (b === 0x2E) {\r\n                    channel.cc_ENM();\r\n                } else if (b === 0x2F) {\r\n                    channel.cc_EOC();\r\n                }\r\n            } else { //a == 0x17 || a == 0x1F\r\n                channel.cc_TO(b - 0x20);\r\n            }\r\n            this.lastCmdA = a;\r\n            this.lastCmdB = b;\r\n            this.currChNr = chNr;\r\n            return true;\r\n        },\r\n\r\n        /**\r\n         * Parse midrow styling command\r\n         * @returns {Boolean}\r\n         */\r\n        parseMidrow : function(a, b) {\r\n            var chNr = null;\r\n                \r\n            if ( ((a === 0x11) || (a === 0x19)) && 0x20 <= b && b <= 0x2f) {\r\n                if (a === 0x11) {\r\n                    chNr = 1;\r\n                } else  {\r\n                    chNr = 2;\r\n                }\r\n                if (chNr !== this.currChNr) {\r\n                    logger.log(\"ERROR\", \"Mismatch channel in midrow parsing\");\r\n                    return false;\r\n                }\r\n                var channel = this.channels[chNr-1];\r\n                // cea608 spec says midrow codes should inject a space\r\n                channel.insertChars([0x20]);\r\n                channel.cc_MIDROW(b);\r\n                logger.log(\"DEBUG\", \"MIDROW (\" + numArrayToHexArray([a, b]) + \")\");\r\n                this.lastCmdA = a;\r\n                this.lastCmdB = b;\r\n                return true;\r\n            }\r\n            return false;\r\n        },\r\n        /**\r\n         * Parse Preable Access Codes (Table 53).\r\n         * @returns {Boolean} Tells if PAC found\r\n         */\r\n        parsePAC : function(a, b) {\r\n\r\n           var chNr = null;\r\n           var row = null;\r\n            \r\n            var case1 = ((0x11 <= a  && a <= 0x17) || (0x19 <= a && a <= 0x1F)) && (0x40 <= b && b <= 0x7F);\r\n            var case2 = (a === 0x10 || a === 0x18) && (0x40 <= b && b <= 0x5F);\r\n            if (! (case1 || case2)) {\r\n                return false;\r\n            }\r\n\r\n            chNr = (a <= 0x17) ? 1 : 2;\r\n\r\n            if (0x40 <= b && b <= 0x5F) {\r\n                row = (chNr === 1) ? rowsLowCh1[a] : rowsLowCh2[a];\r\n            } else { // 0x60 <= b <= 0x7F\r\n                row = (chNr === 1) ? rowsHighCh1[a] : rowsHighCh2[a];\r\n            }\r\n            var pacData = this.interpretPAC(row, b);\r\n            var channel = this.channels[chNr-1];\r\n            channel.setPAC(pacData);\r\n            this.lastCmdA = a;\r\n            this.lastCmdB = b;\r\n            this.currChNr = chNr;\r\n            return true;\r\n        },\r\n\r\n        /**\r\n         * Interpret the second byte of the pac, and return the information.\r\n         * @returns {Object} pacData with style parameters.\r\n         */\r\n        interpretPAC : function (row, byte) {\r\n            var pacIndex = byte;\r\n            var pacData = {color : null, italics : false, indent : null, underline : false, row : row};\r\n            \r\n            if (byte > 0x5F) {\r\n                pacIndex = byte - 0x60;\r\n            } else {\r\n                pacIndex = byte - 0x40;\r\n            }\r\n            pacData.underline = (pacIndex & 1) === 1;\r\n            if (pacIndex <= 0xd) {\r\n                pacData.color = ['white', 'green', 'blue', 'cyan', 'red', 'yellow', 'magenta', 'white'][Math.floor(pacIndex/2)];\r\n            } else if (pacIndex <= 0xf) {\r\n                pacData.italics = true;\r\n                pacData.color = 'white';\r\n            } else {\r\n                pacData.indent = (Math.floor((pacIndex-0x10)/2))*4;\r\n            }\r\n            return pacData; // Note that row has zero offset. The spec uses 1.\r\n        },\r\n\r\n        /**\r\n         * Parse characters.\r\n         * @returns An array with 1 to 2 codes corresponding to chars, if found. null otherwise.\r\n         */\r\n        parseChars : function(a, b) {\r\n\r\n           var  channelNr = null,\r\n                charCodes = null,\r\n                charCode1 = null,\r\n                charCode2 = null;\r\n\r\n            if (a >= 0x19) {\r\n                channelNr = 2;\r\n                charCode1 = a - 8;\r\n            } else {\r\n                channelNr = 1;\r\n                charCode1 = a;\r\n            }\r\n            if (0x11 <= charCode1 && charCode1 <= 0x13) {\r\n                // Special character\r\n                var oneCode = b;\r\n                if (charCode1 === 0x11) {\r\n                    oneCode = b + 0x50;\r\n                } else if (charCode1 === 0x12) {\r\n                    oneCode = b + 0x70;\r\n                } else {\r\n                    oneCode = b + 0x90;\r\n                }\r\n                logger.log(\"INFO\", \"Special char '\" + getCharForByte(oneCode) + \"' in channel \" + channelNr);\r\n                charCodes = [oneCode];\r\n                this.lastCmdA = a;\r\n                this.lastCmdB = b;\r\n            } else if (0x20 <= a && a <= 0x7f) {\r\n                charCodes = (b === 0) ? [a] : [a, b];\r\n                this.lastCmdA = null;\r\n                this.lastCmdB = null;\r\n            }\r\n            if (charCodes) {\r\n                var hexCodes = numArrayToHexArray(charCodes);\r\n                logger.log(\"DEBUG\", \"Char codes =  \" + hexCodes.join(\",\"));\r\n            }\r\n            return charCodes;\r\n        },\r\n        \r\n        /**\r\n        * Parse extended background attributes as well as new foreground color black.\r\n        * @returns{Boolean} Tells if background attributes are found\r\n        */\r\n        parseBackgroundAttributes : function(a, b) {\r\n           var  bkgData,\r\n                index,\r\n                chNr,\r\n                channel;\r\n\r\n            var case1 = (a === 0x10 || a === 0x18) && (0x20 <= b && b <= 0x2f);\r\n            var case2 = (a === 0x17 || a === 0x1f) && (0x2d <=b && b <= 0x2f);\r\n            if (!(case1 || case2)) {\r\n                return false;\r\n            }\r\n            bkgData = {};\r\n            if (a  === 0x10 || a === 0x18) {\r\n                index = Math.floor((b-0x20)/2);\r\n                bkgData.background = backgroundColors[index];\r\n                if (b % 2 === 1) {\r\n                    bkgData.background = bkgData.background + \"_semi\";\r\n                }\r\n            } else if (b === 0x2d) {\r\n                bkgData.background = \"transparent\";\r\n            } else {\r\n                bkgData.foreground = \"black\";\r\n                if (b === 0x2f) {\r\n                    bkgData.underline = true;\r\n                }\r\n            }\r\n            chNr = (a < 0x18) ? 1 : 2;\r\n            channel = this.channels[chNr-1];\r\n            channel.setBkgData(bkgData);\r\n            this.lastCmdA = a;\r\n            this.lastCmdB = b;\r\n            return true;\r\n        },\r\n\r\n        /**\r\n         * Reset state of parser and its channels.\r\n         */\r\n        reset : function() {\r\n            for (var i=0 ; i < this.channels.length ; i++) {\r\n                if (this.channels[i]) {\r\n                    this.channels[i].reset();\r\n                }\r\n            }\r\n            this.lastCmdA = null;\r\n            this.lastCmdB = null;\r\n        },\r\n\r\n        /**\r\n         * Trigger the generation of a cue, and the start of a new one if displayScreens are not empty.\r\n         */\r\n        cueSplitAtTime : function(t) {\r\n            for (var i=0 ; i < this.channels.length ; i++) {\r\n                if (this.channels[i]) {\r\n                    this.channels[i].cueSplitAtTime(t);\r\n                }\r\n            }\r\n        },\r\n    };\r\n\r\n    /**\r\n     * Find ranges corresponding to SEA CEA-608 NALUS in sizeprepended NALU array.\r\n     * @param {raw} dataView of binary data\r\n     * @param {startPos} start position in raw\r\n     * @param {size} total size of data in raw to consider\r\n     * @returns \r\n     */\r\n    var findCea608Nalus = function(raw, startPos, size) {\r\n        var nalSize = 0,\r\n            cursor = startPos,\r\n            nalType = 0,\r\n            cea608NaluRanges = [],\r\n            // Check SEI data according to ANSI-SCTE 128\r\n            isCEA608SEI = function (payloadType, payloadSize, raw, pos) {\r\n                if (payloadType !== 4 || payloadSize < 8) {\r\n                    return null;\r\n                }\r\n                var countryCode = raw.getUint8(pos);\r\n                var providerCode = raw.getUint16(pos + 1);\r\n                var userIdentifier = raw.getUint32(pos + 3);\r\n                var userDataTypeCode = raw.getUint8(pos + 7);\r\n                return countryCode == 0xB5 && providerCode == 0x31 && userIdentifier == 0x47413934 && userDataTypeCode == 0x3;\r\n            };\r\n        while (cursor < startPos + size) {\r\n            nalSize = raw.getUint32(cursor);\r\n            nalType = raw.getUint8(cursor + 4) & 0x1F;\r\n            //console.log(time + \"  NAL \" + nalType);\r\n            if (nalType === 6) {\r\n                // SEI NAL Unit. The NAL header is the first byte\r\n                //console.log(\"SEI NALU of size \" + nalSize + \" at time \" + time);\r\n                var pos = cursor + 5;\r\n                var payloadType = -1;\r\n                while (pos < cursor + 4 + nalSize - 1) { // The last byte should be rbsp_trailing_bits\r\n                    payloadType = 0;\r\n                    var b = 0xFF;\r\n                    while (b === 0xFF) {\r\n                        b = raw.getUint8(pos);\r\n                        payloadType += b;\r\n                        pos++;\r\n                    }\r\n                    var payloadSize = 0;\r\n                    b = 0xFF;\r\n                    while (b === 0xFF) {\r\n                        b = raw.getUint8(pos);\r\n                        payloadSize += b;\r\n                        pos++;\r\n                    }\r\n                    if (isCEA608SEI(payloadType, payloadSize, raw, pos)) {\r\n                        //console.log(\"CEA608 SEI \" + time + \" \" + payloadSize);\r\n                        cea608NaluRanges.push([pos, payloadSize]);\r\n                    }\r\n                    pos += payloadSize;\r\n                }\r\n            }\r\n            cursor += nalSize + 4;\r\n        }\r\n        return cea608NaluRanges;\r\n    };\r\n    \r\n    var extractCea608DataFromRange = function(raw, cea608Range) {\r\n        var pos = cea608Range[0];\r\n        var fieldData = [[], []];\r\n\r\n        pos += 8; // Skip the identifier up to userDataTypeCode\r\n        var ccCount = raw.getUint8(pos) & 0x1f;\r\n        pos += 2; // Advance 1 and skip reserved byte\r\n          \r\n        for (var i = 0; i < ccCount; i++) {\r\n            var byte = raw.getUint8(pos);\r\n            var ccValid = byte & 0x4;\r\n            var ccType = byte & 0x3;\r\n            pos++;\r\n            var ccData1 = raw.getUint8(pos); // Keep parity bit\r\n            pos++;\r\n            var ccData2 = raw.getUint8(pos); // Keep parity bit\r\n            pos++;\r\n            if (ccValid && ((ccData1 & 0x7f) + (ccData2 & 0x7f) !== 0)) { //Check validity and non-empty data\r\n                if (ccType === 0) {\r\n                    fieldData[0].push(ccData1);\r\n                    fieldData[0].push(ccData2);\r\n                } else if (ccType === 1) {\r\n                    fieldData[1].push(ccData1);\r\n                    fieldData[1].push(ccData2);\r\n                }\r\n            }\r\n        }\r\n        return fieldData;\r\n    };\r\n\r\n    exports.logger = logger;\r\n    exports.PenState = PenState;\r\n    exports.CaptionScreen = CaptionScreen;  \r\n    exports.Cea608Parser = Cea608Parser;\r\n    exports.findCea608Nalus = findCea608Nalus;\r\n    exports.extractCea608DataFromRange = extractCea608DataFromRange;\r\n\r\n}(typeof exports === 'undefined' ? this.cea608parser = {} : exports));\r\n","/*\r\n Copyright 2011-2013 Abdulla Abdurakhmanov\r\n Original sources are available at https://code.google.com/p/x2js/\r\n\r\n Licensed under the Apache License, Version 2.0 (the \"License\");\r\n you may not use this file except in compliance with the License.\r\n You may obtain a copy of the License at\r\n\r\n http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n Unless required by applicable law or agreed to in writing, software\r\n distributed under the License is distributed on an \"AS IS\" BASIS,\r\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n See the License for the specific language governing permissions and\r\n limitations under the License.\r\n */\r\n\r\n/*\r\n  Further modified for dashjs to:\r\n  - keep track of children nodes in order in attribute __children.\r\n  - add type conversion matchers\r\n  - re-add ignoreRoot\r\n  - allow zero-length attributePrefix\r\n  - don't add white-space text nodes\r\n  - remove explicit RequireJS support\r\n*/\r\n\r\nfunction X2JS(config) {\r\n    'use strict';\r\n\r\n    var VERSION = \"1.2.0\";\r\n\r\n    config = config || {};\r\n    initConfigDefaults();\r\n    initRequiredPolyfills();\r\n\r\n    function initConfigDefaults() {\r\n        if(config.escapeMode === undefined) {\r\n            config.escapeMode = true;\r\n        }\r\n\r\n        if (config.attributePrefix === undefined) {\r\n            config.attributePrefix = \"_\";\r\n        }\r\n\r\n        config.arrayAccessForm = config.arrayAccessForm || \"none\";\r\n        config.emptyNodeForm = config.emptyNodeForm || \"text\";\r\n\r\n        if(config.enableToStringFunc === undefined) {\r\n            config.enableToStringFunc = true;\r\n        }\r\n        config.arrayAccessFormPaths = config.arrayAccessFormPaths || [];\r\n        if(config.skipEmptyTextNodesForObj === undefined) {\r\n            config.skipEmptyTextNodesForObj = true;\r\n        }\r\n        if(config.stripWhitespaces === undefined) {\r\n            config.stripWhitespaces = true;\r\n        }\r\n        config.datetimeAccessFormPaths = config.datetimeAccessFormPaths || [];\r\n\r\n        if(config.useDoubleQuotes === undefined) {\r\n            config.useDoubleQuotes = false;\r\n        }\r\n\r\n        config.xmlElementsFilter = config.xmlElementsFilter || [];\r\n        config.jsonPropertiesFilter = config.jsonPropertiesFilter || [];\r\n\r\n        if(config.keepCData === undefined) {\r\n            config.keepCData = false;\r\n        }\r\n\r\n        if (config.ignoreRoot === undefined) {\r\n            config.ignoreRoot = false;\r\n        }\r\n    }\r\n\r\n    var DOMNodeTypes = {\r\n        ELEMENT_NODE \t   : 1,\r\n        TEXT_NODE    \t   : 3,\r\n        CDATA_SECTION_NODE : 4,\r\n        COMMENT_NODE\t   : 8,\r\n        DOCUMENT_NODE \t   : 9\r\n    };\r\n\r\n    function initRequiredPolyfills() {\r\n    }\r\n\r\n    function getNodeLocalName( node ) {\r\n        var nodeLocalName = node.localName;\r\n        if(nodeLocalName == null) // Yeah, this is IE!!\r\n            nodeLocalName = node.baseName;\r\n        if(nodeLocalName == null || nodeLocalName==\"\") // ==\"\" is IE too\r\n            nodeLocalName = node.nodeName;\r\n        return nodeLocalName;\r\n    }\r\n\r\n    function getNodePrefix(node) {\r\n        return node.prefix;\r\n    }\r\n\r\n    function escapeXmlChars(str) {\r\n        if(typeof(str) == \"string\")\r\n            return str.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;').replace(/'/g, '&apos;');\r\n        else\r\n            return str;\r\n    }\r\n\r\n    function unescapeXmlChars(str) {\r\n        return str.replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&quot;/g, '\"').replace(/&apos;/g, \"'\").replace(/&amp;/g, '&');\r\n    }\r\n\r\n    function checkInStdFiltersArrayForm(stdFiltersArrayForm, obj, name, path) {\r\n        var idx = 0;\r\n        for(; idx < stdFiltersArrayForm.length; idx++) {\r\n            var filterPath = stdFiltersArrayForm[idx];\r\n            if( typeof filterPath === \"string\" ) {\r\n                if(filterPath == path)\r\n                    break;\r\n            }\r\n            else\r\n            if( filterPath instanceof RegExp) {\r\n                if(filterPath.test(path))\r\n                    break;\r\n            }\r\n            else\r\n            if( typeof filterPath === \"function\") {\r\n                if(filterPath(obj, name, path))\r\n                    break;\r\n            }\r\n        }\r\n        return idx!=stdFiltersArrayForm.length;\r\n    }\r\n\r\n    function toArrayAccessForm(obj, childName, path) {\r\n        switch(config.arrayAccessForm) {\r\n            case \"property\":\r\n                if(!(obj[childName] instanceof Array))\r\n                    obj[childName+\"_asArray\"] = [obj[childName]];\r\n                else\r\n                    obj[childName+\"_asArray\"] = obj[childName];\r\n                break;\r\n            /*case \"none\":\r\n                break;*/\r\n        }\r\n\r\n        if(!(obj[childName] instanceof Array) && config.arrayAccessFormPaths.length > 0) {\r\n            if(checkInStdFiltersArrayForm(config.arrayAccessFormPaths, obj, childName, path)) {\r\n                obj[childName] = [obj[childName]];\r\n            }\r\n        }\r\n    }\r\n\r\n    function fromXmlDateTime(prop) {\r\n        // Implementation based up on http://stackoverflow.com/questions/8178598/xml-datetime-to-javascript-date-object\r\n        // Improved to support full spec and optional parts\r\n        var bits = prop.split(/[-T:+Z]/g);\r\n\r\n        var d = new Date(bits[0], bits[1]-1, bits[2]);\r\n        var secondBits = bits[5].split(\"\\.\");\r\n        d.setHours(bits[3], bits[4], secondBits[0]);\r\n        if(secondBits.length>1)\r\n            d.setMilliseconds(secondBits[1]);\r\n\r\n        // Get supplied time zone offset in minutes\r\n        if(bits[6] && bits[7]) {\r\n            var offsetMinutes = bits[6] * 60 + Number(bits[7]);\r\n            var sign = /\\d\\d-\\d\\d:\\d\\d$/.test(prop)? '-' : '+';\r\n\r\n            // Apply the sign\r\n            offsetMinutes = 0 + (sign == '-'? -1 * offsetMinutes : offsetMinutes);\r\n\r\n            // Apply offset and local timezone\r\n            d.setMinutes(d.getMinutes() - offsetMinutes - d.getTimezoneOffset())\r\n        }\r\n        else\r\n            if(prop.indexOf(\"Z\", prop.length - 1) !== -1) {\r\n                d = new Date(Date.UTC(d.getFullYear(), d.getMonth(), d.getDate(), d.getHours(), d.getMinutes(), d.getSeconds(), d.getMilliseconds()));\r\n            }\r\n\r\n        // d is now a local time equivalent to the supplied time\r\n        return d;\r\n    }\r\n\r\n    function checkFromXmlDateTimePaths(value, childName, fullPath) {\r\n        if(config.datetimeAccessFormPaths.length > 0) {\r\n            var path = fullPath.split(\"\\.#\")[0];\r\n            if(checkInStdFiltersArrayForm(config.datetimeAccessFormPaths, value, childName, path)) {\r\n                return fromXmlDateTime(value);\r\n            }\r\n            else\r\n                return value;\r\n        }\r\n        else\r\n            return value;\r\n    }\r\n\r\n    function checkXmlElementsFilter(obj, childType, childName, childPath) {\r\n        if( childType == DOMNodeTypes.ELEMENT_NODE && config.xmlElementsFilter.length > 0) {\r\n            return checkInStdFiltersArrayForm(config.xmlElementsFilter, obj, childName, childPath);\r\n        }\r\n        else\r\n            return true;\r\n    }\r\n\r\n    function parseDOMChildren( node, path ) {\r\n        if(node.nodeType == DOMNodeTypes.DOCUMENT_NODE) {\r\n            var result = new Object;\r\n            var nodeChildren = node.childNodes;\r\n            // Alternative for firstElementChild which is not supported in some environments\r\n            for(var cidx=0; cidx <nodeChildren.length; cidx++) {\r\n                var child = nodeChildren[cidx];\r\n                if(child.nodeType == DOMNodeTypes.ELEMENT_NODE) {\r\n                    if (config.ignoreRoot) {\r\n                        result = parseDOMChildren(child);\r\n                    } else {\r\n                        result = {};\r\n                        var childName = getNodeLocalName(child);\r\n                        result[childName] = parseDOMChildren(child);\r\n                    }\r\n                }\r\n            }\r\n            return result;\r\n        }\r\n        else\r\n        if(node.nodeType == DOMNodeTypes.ELEMENT_NODE) {\r\n            var result = new Object;\r\n            result.__cnt=0;\r\n\r\n            var children = [];\r\n            var nodeChildren = node.childNodes;\r\n\r\n            // Children nodes\r\n            for(var cidx=0; cidx <nodeChildren.length; cidx++) {\r\n                var child = nodeChildren[cidx];\r\n                var childName = getNodeLocalName(child);\r\n\r\n                if(child.nodeType!= DOMNodeTypes.COMMENT_NODE) {\r\n                    var childPath = path+\".\"+childName;\r\n                    if (checkXmlElementsFilter(result,child.nodeType,childName,childPath)) {\r\n                        result.__cnt++;\r\n                        if(result[childName] == null) {\r\n                            var c = parseDOMChildren(child, childPath);\r\n                            if (childName != \"#text\" || /[^\\s]/.test(c)) {\r\n                                var o = {};\r\n                                o[childName] = c;\r\n                                children.push(o);\r\n                            }\r\n                            result[childName] = c;\r\n                            toArrayAccessForm(result, childName, childPath);\r\n                        }\r\n                        else {\r\n                            if(result[childName] != null) {\r\n                                if( !(result[childName] instanceof Array)) {\r\n                                    result[childName] = [result[childName]];\r\n                                    toArrayAccessForm(result, childName, childPath);\r\n                                }\r\n                            }\r\n\r\n                            var c = parseDOMChildren(child, childPath);\r\n                            if (childName != \"#text\" || /[^\\s]/.test(c)) { // Don't add white-space text nodes\r\n                                var o = {};\r\n                                o[childName] = c;\r\n                                children.push( o );\r\n                            }\r\n                            (result[childName])[result[childName].length] = c;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            result.__children = children;\r\n\r\n            // Attributes\r\n            var nodeLocalName = getNodeLocalName(node)\r\n            for(var aidx=0; aidx <node.attributes.length; aidx++) {\r\n                var attr = node.attributes[aidx];\r\n                result.__cnt++;\r\n\r\n                var value2 = attr.value;\r\n                for(var m=0, ml=config.matchers.length; m < ml; m++) {\r\n                    var matchobj = config.matchers[m];\r\n                    if (matchobj.test(attr, nodeLocalName))\r\n                        value2 = matchobj.converter(attr.value);\r\n                }\r\n\r\n                result[config.attributePrefix+attr.name]=value2;\r\n            }\r\n\r\n            // Node namespace prefix\r\n            var nodePrefix = getNodePrefix(node);\r\n            if(nodePrefix!=null && nodePrefix!=\"\") {\r\n                result.__cnt++;\r\n                result.__prefix=nodePrefix;\r\n            }\r\n\r\n            if(result[\"#text\"]!=null) {\r\n                result.__text = result[\"#text\"];\r\n                if(result.__text instanceof Array) {\r\n                    result.__text = result.__text.join(\"\\n\");\r\n                }\r\n                //if(config.escapeMode)\r\n                //\tresult.__text = unescapeXmlChars(result.__text);\r\n                if(config.stripWhitespaces)\r\n                    result.__text = result.__text.trim();\r\n                delete result[\"#text\"];\r\n                if(config.arrayAccessForm==\"property\")\r\n                    delete result[\"#text_asArray\"];\r\n                result.__text = checkFromXmlDateTimePaths(result.__text, childName, path+\".\"+childName);\r\n            }\r\n            if(result[\"#cdata-section\"]!=null) {\r\n                result.__cdata = result[\"#cdata-section\"];\r\n                delete result[\"#cdata-section\"];\r\n                if(config.arrayAccessForm==\"property\")\r\n                    delete result[\"#cdata-section_asArray\"];\r\n            }\r\n\r\n            if( result.__cnt == 0 && config.emptyNodeForm==\"text\" ) {\r\n                result = '';\r\n            }\r\n            else\r\n            if( result.__cnt == 1 && result.__text!=null  ) {\r\n                result = result.__text;\r\n            }\r\n            else\r\n            if( result.__cnt == 1 && result.__cdata!=null && !config.keepCData  ) {\r\n                result = result.__cdata;\r\n            }\r\n            else\r\n            if ( result.__cnt > 1 && result.__text!=null && config.skipEmptyTextNodesForObj) {\r\n                if( (config.stripWhitespaces && result.__text==\"\") || (result.__text.trim()==\"\")) {\r\n                    delete result.__text;\r\n                }\r\n            }\r\n            delete result.__cnt;\r\n\r\n            if( config.enableToStringFunc && (result.__text!=null || result.__cdata!=null )) {\r\n                result.toString = function() {\r\n                    return (this.__text!=null? this.__text:'')+( this.__cdata!=null ? this.__cdata:'');\r\n                };\r\n            }\r\n\r\n            return result;\r\n        }\r\n        else\r\n        if(node.nodeType == DOMNodeTypes.TEXT_NODE || node.nodeType == DOMNodeTypes.CDATA_SECTION_NODE) {\r\n            return node.nodeValue;\r\n        }\r\n    }\r\n\r\n    function startTag(jsonObj, element, attrList, closed) {\r\n        var resultStr = \"<\"+ ( (jsonObj!=null && jsonObj.__prefix!=null)? (jsonObj.__prefix+\":\"):\"\") + element;\r\n        if(attrList!=null) {\r\n            for(var aidx = 0; aidx < attrList.length; aidx++) {\r\n                var attrName = attrList[aidx];\r\n                var attrVal = jsonObj[attrName];\r\n                if(config.escapeMode)\r\n                    attrVal=escapeXmlChars(attrVal);\r\n                resultStr+=\" \"+attrName.substr(config.attributePrefix.length)+\"=\";\r\n                if(config.useDoubleQuotes)\r\n                    resultStr+='\"'+attrVal+'\"';\r\n                else\r\n                    resultStr+=\"'\"+attrVal+\"'\";\r\n            }\r\n        }\r\n        if(!closed)\r\n            resultStr+=\">\";\r\n        else\r\n            resultStr+=\"/>\";\r\n        return resultStr;\r\n    }\r\n\r\n    function endTag(jsonObj,elementName) {\r\n        return \"</\"+ (jsonObj.__prefix!=null? (jsonObj.__prefix+\":\"):\"\")+elementName+\">\";\r\n    }\r\n\r\n    function endsWith(str, suffix) {\r\n        return str.indexOf(suffix, str.length - suffix.length) !== -1;\r\n    }\r\n\r\n    function jsonXmlSpecialElem ( jsonObj, jsonObjField ) {\r\n        if((config.arrayAccessForm==\"property\" && endsWith(jsonObjField.toString(),(\"_asArray\")))\r\n                || jsonObjField.toString().indexOf(config.attributePrefix)==0\r\n                || jsonObjField.toString().indexOf(\"__\")==0\r\n                || (jsonObj[jsonObjField] instanceof Function) )\r\n            return true;\r\n        else\r\n            return false;\r\n    }\r\n\r\n    function jsonXmlElemCount ( jsonObj ) {\r\n        var elementsCnt = 0;\r\n        if(jsonObj instanceof Object ) {\r\n            for( var it in jsonObj  ) {\r\n                if(jsonXmlSpecialElem ( jsonObj, it) )\r\n                    continue;\r\n                elementsCnt++;\r\n            }\r\n        }\r\n        return elementsCnt;\r\n    }\r\n\r\n    function checkJsonObjPropertiesFilter(jsonObj, propertyName, jsonObjPath) {\r\n        return config.jsonPropertiesFilter.length == 0\r\n            || jsonObjPath==\"\"\r\n            || checkInStdFiltersArrayForm(config.jsonPropertiesFilter, jsonObj, propertyName, jsonObjPath);\r\n    }\r\n\r\n    function parseJSONAttributes ( jsonObj ) {\r\n        var attrList = [];\r\n        if(jsonObj instanceof Object ) {\r\n            for( var ait in jsonObj  ) {\r\n                if(ait.toString().indexOf(\"__\")== -1 && ait.toString().indexOf(config.attributePrefix)==0) {\r\n                    attrList.push(ait);\r\n                }\r\n            }\r\n        }\r\n        return attrList;\r\n    }\r\n\r\n    function parseJSONTextAttrs ( jsonTxtObj ) {\r\n        var result =\"\";\r\n\r\n        if(jsonTxtObj.__cdata!=null) {\r\n            result+=\"<![CDATA[\"+jsonTxtObj.__cdata+\"]]>\";\r\n        }\r\n\r\n        if(jsonTxtObj.__text!=null) {\r\n            if(config.escapeMode)\r\n                result+=escapeXmlChars(jsonTxtObj.__text);\r\n            else\r\n                result+=jsonTxtObj.__text;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function parseJSONTextObject ( jsonTxtObj ) {\r\n        var result =\"\";\r\n\r\n        if( jsonTxtObj instanceof Object ) {\r\n            result+=parseJSONTextAttrs ( jsonTxtObj );\r\n        }\r\n        else\r\n            if(jsonTxtObj!=null) {\r\n                if(config.escapeMode)\r\n                    result+=escapeXmlChars(jsonTxtObj);\r\n                else\r\n                    result+=jsonTxtObj;\r\n            }\r\n\r\n        return result;\r\n    }\r\n\r\n    function getJsonPropertyPath(jsonObjPath, jsonPropName) {\r\n        if (jsonObjPath===\"\") {\r\n            return jsonPropName;\r\n        }\r\n        else\r\n            return jsonObjPath+\".\"+jsonPropName;\r\n    }\r\n\r\n    function parseJSONArray ( jsonArrRoot, jsonArrObj, attrList, jsonObjPath ) {\r\n        var result = \"\";\r\n        if(jsonArrRoot.length == 0) {\r\n            result+=startTag(jsonArrRoot, jsonArrObj, attrList, true);\r\n        }\r\n        else {\r\n            for(var arIdx = 0; arIdx < jsonArrRoot.length; arIdx++) {\r\n                result+=startTag(jsonArrRoot[arIdx], jsonArrObj, parseJSONAttributes(jsonArrRoot[arIdx]), false);\r\n                result+=parseJSONObject(jsonArrRoot[arIdx], getJsonPropertyPath(jsonObjPath,jsonArrObj));\r\n                result+=endTag(jsonArrRoot[arIdx],jsonArrObj);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function parseJSONObject ( jsonObj, jsonObjPath ) {\r\n        var result = \"\";\r\n\r\n        var elementsCnt = jsonXmlElemCount ( jsonObj );\r\n\r\n        if(elementsCnt > 0) {\r\n            for( var it in jsonObj ) {\r\n\r\n                if(jsonXmlSpecialElem ( jsonObj, it) || (jsonObjPath!=\"\" && !checkJsonObjPropertiesFilter(jsonObj, it, getJsonPropertyPath(jsonObjPath,it))) )\r\n                    continue;\r\n\r\n                var subObj = jsonObj[it];\r\n\r\n                var attrList = parseJSONAttributes( subObj )\r\n\r\n                if(subObj == null || subObj == undefined) {\r\n                    result+=startTag(subObj, it, attrList, true);\r\n                }\r\n                else\r\n                if(subObj instanceof Object) {\r\n\r\n                    if(subObj instanceof Array) {\r\n                        result+=parseJSONArray( subObj, it, attrList, jsonObjPath );\r\n                    }\r\n                    else if(subObj instanceof Date) {\r\n                        result+=startTag(subObj, it, attrList, false);\r\n                        result+=subObj.toISOString();\r\n                        result+=endTag(subObj,it);\r\n                    }\r\n                    else {\r\n                        var subObjElementsCnt = jsonXmlElemCount ( subObj );\r\n                        if(subObjElementsCnt > 0 || subObj.__text!=null || subObj.__cdata!=null) {\r\n                            result+=startTag(subObj, it, attrList, false);\r\n                            result+=parseJSONObject(subObj, getJsonPropertyPath(jsonObjPath,it));\r\n                            result+=endTag(subObj,it);\r\n                        }\r\n                        else {\r\n                            result+=startTag(subObj, it, attrList, true);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    result+=startTag(subObj, it, attrList, false);\r\n                    result+=parseJSONTextObject(subObj);\r\n                    result+=endTag(subObj,it);\r\n                }\r\n            }\r\n        }\r\n        result+=parseJSONTextObject(jsonObj);\r\n\r\n        return result;\r\n    }\r\n\r\n    this.parseXmlString = function(xmlDocStr) {\r\n        var isIEParser = window.ActiveXObject || \"ActiveXObject\" in window;\r\n        if (xmlDocStr === undefined) {\r\n            return null;\r\n        }\r\n        var xmlDoc;\r\n        if (window.DOMParser) {\r\n            var parser=new window.DOMParser();\r\n            var parsererrorNS = null;\r\n            try {\r\n                xmlDoc = parser.parseFromString( xmlDocStr, \"text/xml\" );\r\n                if(xmlDoc.getElementsByTagNameNS(\"*\", \"parsererror\").length > 0) {\r\n                    xmlDoc = null;\r\n                }\r\n            }\r\n            catch(err) {\r\n                xmlDoc = null;\r\n            }\r\n        }\r\n        else {\r\n            // IE :(\r\n            if(xmlDocStr.indexOf(\"<?\")==0) {\r\n                xmlDocStr = xmlDocStr.substr( xmlDocStr.indexOf(\"?>\") + 2 );\r\n            }\r\n            xmlDoc=new ActiveXObject(\"Microsoft.XMLDOM\");\r\n            xmlDoc.async=\"false\";\r\n            xmlDoc.loadXML(xmlDocStr);\r\n        }\r\n        return xmlDoc;\r\n    };\r\n\r\n    this.asArray = function(prop) {\r\n        if (prop === undefined || prop == null)\r\n            return [];\r\n        else\r\n        if(prop instanceof Array)\r\n            return prop;\r\n        else\r\n            return [prop];\r\n    };\r\n\r\n    this.toXmlDateTime = function(dt) {\r\n        if(dt instanceof Date)\r\n            return dt.toISOString();\r\n        else\r\n        if(typeof(dt) === 'number' )\r\n            return new Date(dt).toISOString();\r\n        else\r\n            return null;\r\n    };\r\n\r\n    this.asDateTime = function(prop) {\r\n        if(typeof(prop) == \"string\") {\r\n            return fromXmlDateTime(prop);\r\n        }\r\n        else\r\n            return prop;\r\n    };\r\n\r\n    this.xml2json = function (xmlDoc) {\r\n        return parseDOMChildren ( xmlDoc );\r\n    };\r\n\r\n    this.xml_str2json = function (xmlDocStr) {\r\n        var xmlDoc = this.parseXmlString(xmlDocStr);\r\n        if(xmlDoc!=null)\r\n            return this.xml2json(xmlDoc);\r\n        else\r\n            return null;\r\n    };\r\n\r\n    this.json2xml_str = function (jsonObj) {\r\n        return parseJSONObject ( jsonObj, \"\" );\r\n    };\r\n\r\n    this.json2xml = function (jsonObj) {\r\n        var xmlDocStr = this.json2xml_str (jsonObj);\r\n        return this.parseXmlString(xmlDocStr);\r\n    };\r\n\r\n    this.getVersion = function () {\r\n        return VERSION;\r\n    };\r\n}\r\n\r\nexport default X2JS;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport { MediaPlayer } from './index_mediaplayerOnly';\r\n\r\nimport MetricsReporting from './src/streaming/metrics/MetricsReporting';\r\nimport Protection from './src/streaming/protection/Protection';\r\nimport MediaPlayerFactory from './src/streaming/MediaPlayerFactory';\r\nimport Debug from './src/core/Debug';\r\n\r\ndashjs.Protection = Protection;\r\ndashjs.MetricsReporting = MetricsReporting;\r\ndashjs.MediaPlayerFactory = MediaPlayerFactory;\r\ndashjs.Debug = Debug;\r\n\r\nexport default dashjs;\r\nexport { MediaPlayer, Protection, MetricsReporting, MediaPlayerFactory, Debug};","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport MediaPlayer from './src/streaming/MediaPlayer';\r\nimport FactoryMaker from './src/core/FactoryMaker';\r\nimport Debug from './src/core/Debug';\r\nimport { getVersionString } from './src/core/Version';\r\n\r\n// Shove both of these into the global scope\r\nvar context = (typeof window !== 'undefined' && window) || global;\r\n\r\nvar dashjs = context.dashjs;\r\nif (!dashjs) {\r\n    dashjs = context.dashjs = {};\r\n}\r\n\r\ndashjs.MediaPlayer = MediaPlayer;\r\ndashjs.FactoryMaker = FactoryMaker;\r\ndashjs.Debug = Debug;\r\ndashjs.Version = getVersionString();\r\n\r\nexport default dashjs;\r\nexport { MediaPlayer, FactoryMaker, Debug};\r\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  for (var i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require(6)\nvar ieee754 = require(12)\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nvar K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = { __proto__: Uint8Array.prototype, foo: function () { return 42 } }\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nObject.defineProperty(Buffer.prototype, 'parent', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.buffer\n  }\n})\n\nObject.defineProperty(Buffer.prototype, 'offset', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.byteOffset\n  }\n})\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"')\n  }\n  // Return an augmented `Uint8Array` instance\n  var buf = new Uint8Array(length)\n  buf.__proto__ = Buffer.prototype\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new TypeError(\n        'The \"string\" argument must be of type string. Received type number'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\n// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\nif (typeof Symbol !== 'undefined' && Symbol.species != null &&\n    Buffer[Symbol.species] === Buffer) {\n  Object.defineProperty(Buffer, Symbol.species, {\n    value: null,\n    configurable: true,\n    enumerable: false,\n    writable: false\n  })\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  if (ArrayBuffer.isView(value)) {\n    return fromArrayLike(value)\n  }\n\n  if (value == null) {\n    throw TypeError(\n      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n      'or Array-like Object. Received type ' + (typeof value)\n    )\n  }\n\n  if (isInstance(value, ArrayBuffer) ||\n      (value && isInstance(value.buffer, ArrayBuffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'number') {\n    throw new TypeError(\n      'The \"value\" argument must not be of type number. Received type number'\n    )\n  }\n\n  var valueOf = value.valueOf && value.valueOf()\n  if (valueOf != null && valueOf !== value) {\n    return Buffer.from(valueOf, encodingOrOffset, length)\n  }\n\n  var b = fromObject(value)\n  if (b) return b\n\n  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&\n      typeof value[Symbol.toPrimitive] === 'function') {\n    return Buffer.from(\n      value[Symbol.toPrimitive]('string'), encodingOrOffset, length\n    )\n  }\n\n  throw new TypeError(\n    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n    'or Array-like Object. Received type ' + (typeof value)\n  )\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nBuffer.prototype.__proto__ = Uint8Array.prototype\nBuffer.__proto__ = Uint8Array\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number')\n  } else if (size < 0) {\n    throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding)\n  }\n\n  var length = byteLength(string, encoding) | 0\n  var buf = createBuffer(length)\n\n  var actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  var buf = createBuffer(length)\n  for (var i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds')\n  }\n\n  var buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  buf.__proto__ = Buffer.prototype\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    var buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj.length !== undefined) {\n    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n      return createBuffer(0)\n    }\n    return fromArrayLike(obj)\n  }\n\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n    return fromArrayLike(obj.data)\n  }\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true &&\n    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n}\n\nBuffer.compare = function compare (a, b) {\n  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)\n  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError(\n      'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n    )\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (isInstance(buf, Uint8Array)) {\n      buf = Buffer.from(buf)\n    }\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    throw new TypeError(\n      'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\n      'Received type ' + typeof string\n    )\n  }\n\n  var len = string.length\n  var mustMatch = (arguments.length > 2 && arguments[2] === true)\n  if (!mustMatch && len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) {\n          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n        }\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()\n  if (this.length > max) str += ' ... '\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (isInstance(target, Uint8Array)) {\n    target = Buffer.from(target, target.offset, target.byteLength)\n  }\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError(\n      'The \"target\" argument must be one of type Buffer or Uint8Array. ' +\n      'Received type ' + (typeof target)\n    )\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  var strLen = string.length\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n        : (firstByte > 0xBF) ? 2\n          : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  newBuf.__proto__ = Buffer.prototype\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    var limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    var limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end)\n  } else if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (var i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, end),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if ((encoding === 'utf8' && code < 128) ||\n          encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : Buffer.from(val, encoding)\n    var len = bytes.length\n    if (len === 0) {\n      throw new TypeError('The value \"' + val +\n        '\" is invalid for argument \"value\"')\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0]\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction isInstance (obj, type) {\n  return obj instanceof type ||\n    (obj != null && obj.constructor != null && obj.constructor.name != null &&\n      obj.constructor.name === type.name)\n}\nfunction numberIsNaN (obj) {\n  // For IE11 support\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n","/*! codem-isoboxer v0.3.6 https://github.com/madebyhiro/codem-isoboxer/blob/master/LICENSE.txt */\nvar ISOBoxer = {};\n\nISOBoxer.parseBuffer = function(arrayBuffer) {\n  return new ISOFile(arrayBuffer).parse();\n};\n\nISOBoxer.addBoxProcessor = function(type, parser) {\n  if (typeof type !== 'string' || typeof parser !== 'function') {\n    return;\n  }\n  ISOBox.prototype._boxProcessors[type] = parser;\n};\n\nISOBoxer.createFile = function() {\n  return new ISOFile();\n};\n\n// See ISOBoxer.append() for 'pos' parameter syntax\nISOBoxer.createBox = function(type, parent, pos) {\n  var newBox = ISOBox.create(type);\n  if (parent) {\n    parent.append(newBox, pos);\n  }\n  return newBox;\n};\n\n// See ISOBoxer.append() for 'pos' parameter syntax\nISOBoxer.createFullBox = function(type, parent, pos) {\n  var newBox = ISOBoxer.createBox(type, parent, pos);\n  newBox.version = 0;\n  newBox.flags = 0;\n  return newBox;\n};\n\nISOBoxer.Utils = {};\nISOBoxer.Utils.dataViewToString = function(dataView, encoding) {\n  var impliedEncoding = encoding || 'utf-8';\n  if (typeof TextDecoder !== 'undefined') {\n    return new TextDecoder(impliedEncoding).decode(dataView);\n  }\n  var a = [];\n  var i = 0;\n\n  if (impliedEncoding === 'utf-8') {\n    /* The following algorithm is essentially a rewrite of the UTF8.decode at\n    http://bannister.us/weblog/2007/simple-base64-encodedecode-javascript/\n    */\n\n    while (i < dataView.byteLength) {\n      var c = dataView.getUint8(i++);\n      if (c < 0x80) {\n        // 1-byte character (7 bits)\n      } else if (c < 0xe0) {\n        // 2-byte character (11 bits)\n        c = (c & 0x1f) << 6;\n        c |= (dataView.getUint8(i++) & 0x3f);\n      } else if (c < 0xf0) {\n        // 3-byte character (16 bits)\n        c = (c & 0xf) << 12;\n        c |= (dataView.getUint8(i++) & 0x3f) << 6;\n        c |= (dataView.getUint8(i++) & 0x3f);\n      } else {\n        // 4-byte character (21 bits)\n        c = (c & 0x7) << 18;\n        c |= (dataView.getUint8(i++) & 0x3f) << 12;\n        c |= (dataView.getUint8(i++) & 0x3f) << 6;\n        c |= (dataView.getUint8(i++) & 0x3f);\n      }\n      a.push(String.fromCharCode(c));\n    }\n  } else { // Just map byte-by-byte (probably wrong)\n    while (i < dataView.byteLength) {\n      a.push(String.fromCharCode(dataView.getUint8(i++)));\n    }\n  }\n  return a.join('');\n};\n\nISOBoxer.Utils.utf8ToByteArray = function(string) {\n  // Only UTF-8 encoding is supported by TextEncoder\n  var u, i;\n  if (typeof TextEncoder !== 'undefined') {\n    u = new TextEncoder().encode(string);\n  } else {\n    u = [];\n    for (i = 0; i < string.length; ++i) {\n      var c = string.charCodeAt(i);\n      if (c < 0x80) {\n        u.push(c);\n      } else if (c < 0x800) {\n        u.push(0xC0 | (c >> 6));\n        u.push(0x80 | (63 & c));\n      } else if (c < 0x10000) {\n        u.push(0xE0 | (c >> 12));\n        u.push(0x80 | (63 & (c >> 6)));\n        u.push(0x80 | (63 & c));\n      } else {\n        u.push(0xF0 | (c >> 18));\n        u.push(0x80 | (63 & (c >> 12)));\n        u.push(0x80 | (63 & (c >> 6)));\n        u.push(0x80 | (63 & c));\n      }\n    }\n  }\n  return u;\n};\n\n// Method to append a box in the list of child boxes\n// The 'pos' parameter can be either:\n//   - (number) a position index at which to insert the new box\n//   - (string) the type of the box after which to insert the new box\n//   - (object) the box after which to insert the new box\nISOBoxer.Utils.appendBox = function(parent, box, pos) {\n  box._offset = parent._cursor.offset;\n  box._root = (parent._root ? parent._root : parent);\n  box._raw = parent._raw;\n  box._parent = parent;\n\n  if (pos === -1) {\n    // The new box is a sub-box of the parent but not added in boxes array,\n    // for example when the new box is set as an entry (see dref and stsd for example)\n    return;\n  }\n\n  if (pos === undefined || pos === null) {\n    parent.boxes.push(box);\n    return;\n  }\n\n  var index = -1,\n      type;\n\n  if (typeof pos === \"number\") {\n    index = pos;\n  } else {\n    if (typeof pos === \"string\") {\n      type = pos;\n    } else if (typeof pos === \"object\" && pos.type) {\n      type = pos.type;\n    } else {\n      parent.boxes.push(box);\n      return;\n    }\n\n    for (var i = 0; i < parent.boxes.length; i++) {\n      if (type === parent.boxes[i].type) {\n        index = i + 1;\n        break;\n      }\n    }\n  }\n  parent.boxes.splice(index, 0, box);\n};\n\nif (typeof exports !== 'undefined') {\n  exports.parseBuffer     = ISOBoxer.parseBuffer;\n  exports.addBoxProcessor = ISOBoxer.addBoxProcessor;\n  exports.createFile      = ISOBoxer.createFile;\n  exports.createBox       = ISOBoxer.createBox;\n  exports.createFullBox   = ISOBoxer.createFullBox;\n  exports.Utils           = ISOBoxer.Utils;\n}\n\nISOBoxer.Cursor = function(initialOffset) {\n  this.offset = (typeof initialOffset == 'undefined' ? 0 : initialOffset);\n};\n\nvar ISOFile = function(arrayBuffer) {\n  this._cursor = new ISOBoxer.Cursor();\n  this.boxes = [];\n  if (arrayBuffer) {\n    this._raw = new DataView(arrayBuffer);\n  }\n};\n\nISOFile.prototype.fetch = function(type) {\n  var result = this.fetchAll(type, true);\n  return (result.length ? result[0] : null);\n};\n\nISOFile.prototype.fetchAll = function(type, returnEarly) {\n  var result = [];\n  ISOFile._sweep.call(this, type, result, returnEarly);\n  return result;\n};\n\nISOFile.prototype.parse = function() {\n  this._cursor.offset = 0;\n  this.boxes = [];\n  while (this._cursor.offset < this._raw.byteLength) {\n    var box = ISOBox.parse(this);\n\n    // Box could not be parsed\n    if (typeof box.type === 'undefined') break;\n\n    this.boxes.push(box);\n  }\n  return this;\n};\n\nISOFile._sweep = function(type, result, returnEarly) {\n  if (this.type && this.type == type) result.push(this);\n  for (var box in this.boxes) {\n    if (result.length && returnEarly) return;\n    ISOFile._sweep.call(this.boxes[box], type, result, returnEarly);\n  }\n};\n\nISOFile.prototype.write = function() {\n\n  var length = 0,\n      i;\n\n  for (i = 0; i < this.boxes.length; i++) {\n    length += this.boxes[i].getLength(false);\n  }\n\n  var bytes = new Uint8Array(length);\n  this._rawo = new DataView(bytes.buffer);\n  this.bytes = bytes;\n  this._cursor.offset = 0;\n\n  for (i = 0; i < this.boxes.length; i++) {\n    this.boxes[i].write();\n  }\n\n  return bytes.buffer;\n};\n\nISOFile.prototype.append = function(box, pos) {\n  ISOBoxer.Utils.appendBox(this, box, pos);\n};\nvar ISOBox = function() {\n  this._cursor = new ISOBoxer.Cursor();\n};\n\nISOBox.parse = function(parent) {\n  var newBox = new ISOBox();\n  newBox._offset = parent._cursor.offset;\n  newBox._root = (parent._root ? parent._root : parent);\n  newBox._raw = parent._raw;\n  newBox._parent = parent;\n  newBox._parseBox();\n  parent._cursor.offset = newBox._raw.byteOffset + newBox._raw.byteLength;\n  return newBox;\n};\n\nISOBox.create = function(type) {\n  var newBox = new ISOBox();\n  newBox.type = type;\n  newBox.boxes = [];\n  return newBox;\n};\n\nISOBox.prototype._boxContainers = ['dinf', 'edts', 'mdia', 'meco', 'mfra', 'minf', 'moof', 'moov', 'mvex', 'stbl', 'strk', 'traf', 'trak', 'tref', 'udta', 'vttc', 'sinf', 'schi', 'encv', 'enca'];\n\nISOBox.prototype._boxProcessors = {};\n\n///////////////////////////////////////////////////////////////////////////////////////////////////\n// Generic read/write functions\n\nISOBox.prototype._procField = function (name, type, size) {\n  if (this._parsing) {\n    this[name] = this._readField(type, size);\n  }\n  else {\n    this._writeField(type, size, this[name]);\n  }\n};\n\nISOBox.prototype._procFieldArray = function (name, length, type, size) {\n  var i;\n  if (this._parsing) {\n    this[name] = [];\n    for (i = 0; i < length; i++) {\n      this[name][i] = this._readField(type, size);\n    }\n  }\n  else {\n    for (i = 0; i < this[name].length; i++) {\n      this._writeField(type, size, this[name][i]);\n    }\n  }\n};\n\nISOBox.prototype._procFullBox = function() {\n  this._procField('version', 'uint', 8);\n  this._procField('flags', 'uint', 24);\n};\n\nISOBox.prototype._procEntries = function(name, length, fn) {\n  var i;\n  if (this._parsing) {\n    this[name] = [];\n    for (i = 0; i < length; i++) {\n      this[name].push({});\n      fn.call(this, this[name][i]);\n    }\n  }\n  else {\n    for (i = 0; i < length; i++) {\n      fn.call(this, this[name][i]);\n    }\n  }\n};\n\nISOBox.prototype._procSubEntries = function(entry, name, length, fn) {\n  var i;\n  if (this._parsing) {\n    entry[name] = [];\n    for (i = 0; i < length; i++) {\n      entry[name].push({});\n      fn.call(this, entry[name][i]);\n    }\n  }\n  else {\n    for (i = 0; i < length; i++) {\n      fn.call(this, entry[name][i]);\n    }\n  }\n};\n\nISOBox.prototype._procEntryField = function (entry, name, type, size) {\n  if (this._parsing) {\n    entry[name] = this._readField(type, size);\n  }\n  else {\n    this._writeField(type, size, entry[name]);\n  }\n};\n\nISOBox.prototype._procSubBoxes = function(name, length) {\n  var i;\n  if (this._parsing) {\n    this[name] = [];\n    for (i = 0; i < length; i++) {\n      this[name].push(ISOBox.parse(this));\n    }\n  }\n  else {\n    for (i = 0; i < length; i++) {\n      if (this._rawo) {\n        this[name][i].write();\n      } else {\n        this.size += this[name][i].getLength();\n      }\n    }\n  }\n};\n\n///////////////////////////////////////////////////////////////////////////////////////////////////\n// Read/parse functions\n\nISOBox.prototype._readField = function(type, size) {\n  switch (type) {\n    case 'uint':\n      return this._readUint(size);\n    case 'int':\n      return this._readInt(size);\n    case 'template':\n      return this._readTemplate(size);\n    case 'string':\n      return (size === -1) ? this._readTerminatedString() : this._readString(size);\n    case 'data':\n      return this._readData(size);\n    case 'utf8':\n      return this._readUTF8String();\n    default:\n      return -1;\n  }\n};\n\nISOBox.prototype._readInt = function(size) {\n  var result = null,\n      offset = this._cursor.offset - this._raw.byteOffset;\n  switch(size) {\n  case 8:\n    result = this._raw.getInt8(offset);\n    break;\n  case 16:\n    result = this._raw.getInt16(offset);\n    break;\n  case 32:\n    result = this._raw.getInt32(offset);\n    break;\n  case 64:\n    // Warning: JavaScript cannot handle 64-bit integers natively.\n    // This will give unexpected results for integers >= 2^53\n    var s1 = this._raw.getInt32(offset);\n    var s2 = this._raw.getInt32(offset + 4);\n    result = (s1 * Math.pow(2,32)) + s2;\n    break;\n  }\n  this._cursor.offset += (size >> 3);\n  return result;\n};\n\nISOBox.prototype._readUint = function(size) {\n  var result = null,\n      offset = this._cursor.offset - this._raw.byteOffset,\n      s1, s2;\n  switch(size) {\n  case 8:\n    result = this._raw.getUint8(offset);\n    break;\n  case 16:\n    result = this._raw.getUint16(offset);\n    break;\n  case 24:\n    s1 = this._raw.getUint16(offset);\n    s2 = this._raw.getUint8(offset + 2);\n    result = (s1 << 8) + s2;\n    break;\n  case 32:\n    result = this._raw.getUint32(offset);\n    break;\n  case 64:\n    // Warning: JavaScript cannot handle 64-bit integers natively.\n    // This will give unexpected results for integers >= 2^53\n    s1 = this._raw.getUint32(offset);\n    s2 = this._raw.getUint32(offset + 4);\n    result = (s1 * Math.pow(2,32)) + s2;\n    break;\n  }\n  this._cursor.offset += (size >> 3);\n  return result;\n};\n\nISOBox.prototype._readString = function(length) {\n  var str = '';\n  for (var c = 0; c < length; c++) {\n    var char = this._readUint(8);\n    str += String.fromCharCode(char);\n  }\n  return str;\n};\n\nISOBox.prototype._readTemplate = function(size) {\n  var pre = this._readUint(size / 2);\n  var post = this._readUint(size / 2);\n  return pre + (post / Math.pow(2, size / 2));\n};\n\nISOBox.prototype._readTerminatedString = function() {\n  var str = '';\n  while (this._cursor.offset - this._offset < this._raw.byteLength) {\n    var char = this._readUint(8);\n    if (char === 0) break;\n    str += String.fromCharCode(char);\n  }\n  return str;\n};\n\nISOBox.prototype._readData = function(size) {\n  var length = (size > 0) ? size : (this._raw.byteLength - (this._cursor.offset - this._offset));\n  if (length > 0) {\n    var data = new Uint8Array(this._raw.buffer, this._cursor.offset, length);\n\n    this._cursor.offset += length;\n    return data;\n  }\n  else {\n    return null;\n  }\n};\n\nISOBox.prototype._readUTF8String = function() {\n  var length = this._raw.byteLength - (this._cursor.offset - this._offset);\n  var data = null;\n  if (length > 0) {\n    data = new DataView(this._raw.buffer, this._cursor.offset, length);\n    this._cursor.offset += length;\n  }\n \n  return data ? ISOBoxer.Utils.dataViewToString(data) : data;\n};\n\nISOBox.prototype._parseBox = function() {\n  this._parsing = true;\n  this._cursor.offset = this._offset;\n\n  // return immediately if there are not enough bytes to read the header\n  if (this._offset + 8 > this._raw.buffer.byteLength) {\n    this._root._incomplete = true;\n    return;\n  }\n\n  this._procField('size', 'uint', 32);\n  this._procField('type', 'string', 4);\n\n  if (this.size === 1)      { this._procField('largesize', 'uint', 64); }\n  if (this.type === 'uuid') { this._procFieldArray('usertype', 16, 'uint', 8); }\n\n  switch(this.size) {\n  case 0:\n    this._raw = new DataView(this._raw.buffer, this._offset, (this._raw.byteLength - this._cursor.offset + 8));\n    break;\n  case 1:\n    if (this._offset + this.size > this._raw.buffer.byteLength) {\n      this._incomplete = true;\n      this._root._incomplete = true;\n    } else {\n      this._raw = new DataView(this._raw.buffer, this._offset, this.largesize);\n    }\n    break;\n  default:\n    if (this._offset + this.size > this._raw.buffer.byteLength) {\n      this._incomplete = true;\n      this._root._incomplete = true;\n    } else {\n      this._raw = new DataView(this._raw.buffer, this._offset, this.size);\n    }\n  }\n\n  // additional parsing\n  if (!this._incomplete) {\n    if (this._boxProcessors[this.type]) {\n      this._boxProcessors[this.type].call(this);\n    }\n    if (this._boxContainers.indexOf(this.type) !== -1) {\n      this._parseContainerBox();\n    } else{\n      // Unknown box => read and store box content\n      this._data = this._readData();\n    }\n  }\n};\n\nISOBox.prototype._parseFullBox = function() {\n  this.version = this._readUint(8);\n  this.flags = this._readUint(24);\n};\n\nISOBox.prototype._parseContainerBox = function() {\n  this.boxes = [];\n  while (this._cursor.offset - this._raw.byteOffset < this._raw.byteLength) {\n    this.boxes.push(ISOBox.parse(this));\n  }\n};\n\n///////////////////////////////////////////////////////////////////////////////////////////////////\n// Write functions\n\nISOBox.prototype.append = function(box, pos) {\n  ISOBoxer.Utils.appendBox(this, box, pos);\n};\n\nISOBox.prototype.getLength = function() {\n  this._parsing = false;\n  this._rawo = null;\n\n  this.size = 0;\n  this._procField('size', 'uint', 32);\n  this._procField('type', 'string', 4);\n\n  if (this.size === 1)      { this._procField('largesize', 'uint', 64); }\n  if (this.type === 'uuid') { this._procFieldArray('usertype', 16, 'uint', 8); }\n\n  if (this._boxProcessors[this.type]) {\n    this._boxProcessors[this.type].call(this);\n  }\n\n  if (this._boxContainers.indexOf(this.type) !== -1) {\n    for (var i = 0; i < this.boxes.length; i++) {\n      this.size += this.boxes[i].getLength();\n    }\n  } \n\n  if (this._data) {\n    this._writeData(this._data);\n  }\n\n  return this.size;\n};\n\nISOBox.prototype.write = function() {\n  this._parsing = false;\n  this._cursor.offset = this._parent._cursor.offset;\n\n  switch(this.size) {\n  case 0:\n    this._rawo = new DataView(this._parent._rawo.buffer, this._cursor.offset, (this.parent._rawo.byteLength - this._cursor.offset));\n    break;\n  case 1:\n      this._rawo = new DataView(this._parent._rawo.buffer, this._cursor.offset, this.largesize);\n    break;\n  default:\n      this._rawo = new DataView(this._parent._rawo.buffer, this._cursor.offset, this.size);\n  }\n\n  this._procField('size', 'uint', 32);\n  this._procField('type', 'string', 4);\n\n  if (this.size === 1)      { this._procField('largesize', 'uint', 64); }\n  if (this.type === 'uuid') { this._procFieldArray('usertype', 16, 'uint', 8); }\n\n  if (this._boxProcessors[this.type]) {\n    this._boxProcessors[this.type].call(this);\n  }\n\n  if (this._boxContainers.indexOf(this.type) !== -1) {\n    for (var i = 0; i < this.boxes.length; i++) {\n      this.boxes[i].write();\n    }\n  } \n\n  if (this._data) {\n    this._writeData(this._data);\n  }\n\n  this._parent._cursor.offset += this.size;\n\n  return this.size;\n};\n\nISOBox.prototype._writeInt = function(size, value) {\n  if (this._rawo) {\n    var offset = this._cursor.offset - this._rawo.byteOffset;\n    switch(size) {\n    case 8:\n      this._rawo.setInt8(offset, value);\n      break;\n    case 16:\n      this._rawo.setInt16(offset, value);\n      break;\n    case 32:\n      this._rawo.setInt32(offset, value);\n      break;\n    case 64:\n      // Warning: JavaScript cannot handle 64-bit integers natively.\n      // This will give unexpected results for integers >= 2^53\n      var s1 = Math.floor(value / Math.pow(2,32));\n      var s2 = value - (s1 * Math.pow(2,32));\n      this._rawo.setUint32(offset, s1);\n      this._rawo.setUint32(offset + 4, s2);\n      break;\n    }\n    this._cursor.offset += (size >> 3);\n  } else {\n    this.size += (size >> 3);\n  }\n};\n\nISOBox.prototype._writeUint = function(size, value) {\n\n  if (this._rawo) {\n    var offset = this._cursor.offset - this._rawo.byteOffset,\n        s1, s2;\n    switch(size) {\n    case 8:\n      this._rawo.setUint8(offset, value);\n      break;\n    case 16:\n      this._rawo.setUint16(offset, value);\n      break;\n    case 24:\n      s1 = (value & 0xFFFF00) >> 8;\n      s2 = (value & 0x0000FF);\n      this._rawo.setUint16(offset, s1);\n      this._rawo.setUint8(offset + 2, s2);\n      break;\n    case 32:\n      this._rawo.setUint32(offset, value);\n      break;\n    case 64:\n      // Warning: JavaScript cannot handle 64-bit integers natively.\n      // This will give unexpected results for integers >= 2^53\n      s1 = Math.floor(value / Math.pow(2,32));\n      s2 = value - (s1 * Math.pow(2,32));\n      this._rawo.setUint32(offset, s1);\n      this._rawo.setUint32(offset + 4, s2);\n      break;\n    }\n    this._cursor.offset += (size >> 3);\n  } else {\n    this.size += (size >> 3);\n  }\n};\n\nISOBox.prototype._writeString = function(size, str) {\n  for (var c = 0; c < size; c++) {\n    this._writeUint(8, str.charCodeAt(c));\n  }\n};\n\nISOBox.prototype._writeTerminatedString = function(str) {\n  if (str.length === 0) {\n    return;\n  }\n  for (var c = 0; c < str.length; c++) {\n    this._writeUint(8, str.charCodeAt(c));\n  }\n  this._writeUint(8, 0);\n};\n\nISOBox.prototype._writeTemplate = function(size, value) {\n  var pre = Math.floor(value);\n  var post = (value - pre) * Math.pow(2, size / 2);\n  this._writeUint(size / 2, pre);\n  this._writeUint(size / 2, post);\n};\n\nISOBox.prototype._writeData = function(data) {\n  var i;\n  //data to copy\n  if (data) {\n    if (this._rawo) {\n      //Array and Uint8Array has also to be managed\n      if (data instanceof Array) {\n        var offset = this._cursor.offset - this._rawo.byteOffset;\n        for (var i = 0; i < data.length; i++) {\n          this._rawo.setInt8(offset + i, data[i]);\n        }\n        this._cursor.offset += data.length;\n      } \n\n      if (data instanceof Uint8Array) {\n        this._root.bytes.set(data, this._cursor.offset);\n        this._cursor.offset += data.length;\n      }\n\n    } else {\n      //nothing to copy only size to compute\n      this.size += data.length;\n    }\n  }\n};\n\nISOBox.prototype._writeUTF8String = function(string) {\n  var u = ISOBoxer.Utils.utf8ToByteArray(string);\n  if (this._rawo) {\n    var dataView = new DataView(this._rawo.buffer, this._cursor.offset, u.length);\n    for (var i = 0; i < u.length; i++) {\n      dataView.setUint8(i, u[i]);\n    }\n  } else {\n    this.size += u.length;\n  }\n};\n\nISOBox.prototype._writeField = function(type, size, value) {\n  switch (type) {\n  case 'uint':\n    this._writeUint(size, value);\n    break;\n  case 'int':\n    this._writeInt(size, value);\n    break;\n  case 'template':\n    this._writeTemplate(size, value);\n    break;\n  case 'string':\n      if (size == -1) {\n        this._writeTerminatedString(value);\n      } else {\n        this._writeString(size, value);\n      }\n      break;\n  case 'data':\n    this._writeData(value);\n    break;\n  case 'utf8':\n    this._writeUTF8String(value);\n    break;\n  default:\n    break;\n  }\n};\n\n// ISO/IEC 14496-15:2014 - avc1 box\nISOBox.prototype._boxProcessors['avc1'] = ISOBox.prototype._boxProcessors['encv'] = function() {\n  // SampleEntry fields\n  this._procFieldArray('reserved1', 6,    'uint', 8);\n  this._procField('data_reference_index', 'uint', 16);\n  // VisualSampleEntry fields\n  this._procField('pre_defined1',         'uint',     16);\n  this._procField('reserved2',            'uint',     16);\n  this._procFieldArray('pre_defined2', 3, 'uint',     32);\n  this._procField('width',                'uint',     16);\n  this._procField('height',               'uint',     16);\n  this._procField('horizresolution',      'template', 32);\n  this._procField('vertresolution',       'template', 32);\n  this._procField('reserved3',            'uint',     32);\n  this._procField('frame_count',          'uint',     16);\n  this._procFieldArray('compressorname', 32,'uint',    8);\n  this._procField('depth',                'uint',     16);\n  this._procField('pre_defined3',         'int',      16);\n  // AVCSampleEntry fields\n  this._procField('config', 'data', -1);\n};\n\n// ISO/IEC 14496-12:2012 - 8.7.2 Data Reference Box\nISOBox.prototype._boxProcessors['dref'] = function() {\n  this._procFullBox();\n  this._procField('entry_count', 'uint', 32);\n  this._procSubBoxes('entries', this.entry_count);\n};\n\n// ISO/IEC 14496-12:2012 - 8.6.6 Edit List Box\nISOBox.prototype._boxProcessors['elst'] = function() {\n  this._procFullBox();\n  this._procField('entry_count', 'uint', 32);\n  this._procEntries('entries', this.entry_count, function(entry) {\n    this._procEntryField(entry, 'segment_duration',     'uint', (this.version === 1) ? 64 : 32);\n    this._procEntryField(entry, 'media_time',           'int',  (this.version === 1) ? 64 : 32);\n    this._procEntryField(entry, 'media_rate_integer',   'int',  16);\n    this._procEntryField(entry, 'media_rate_fraction',  'int',  16);\n  });\n};\n\n// ISO/IEC 23009-1:2014 - 5.10.3.3 Event Message Box\nISOBox.prototype._boxProcessors['emsg'] = function() {\n  this._procFullBox();\n  if (this.version == 1) {\n    this._procField('timescale',                'uint',   32);\n    this._procField('presentation_time',        'uint',   64);\n    this._procField('event_duration',           'uint',   32);\n    this._procField('id',                       'uint',   32);\n    this._procField('scheme_id_uri',            'string', -1);\n    this._procField('value',                    'string', -1);\n  } else {\n    this._procField('scheme_id_uri',            'string', -1);\n    this._procField('value',                    'string', -1);\n    this._procField('timescale',                'uint',   32);\n    this._procField('presentation_time_delta',  'uint',   32);\n    this._procField('event_duration',           'uint',   32);\n    this._procField('id',                       'uint',   32);\n  }\n  this._procField('message_data',             'data',   -1);\n};\n// ISO/IEC 14496-12:2012 - 8.1.2 Free Space Box\nISOBox.prototype._boxProcessors['free'] = ISOBox.prototype._boxProcessors['skip'] = function() {\n  this._procField('data', 'data', -1);\n};\n\n// ISO/IEC 14496-12:2012 - 8.12.2 Original Format Box\nISOBox.prototype._boxProcessors['frma'] = function() {\n  this._procField('data_format', 'uint', 32);\n};\n// ISO/IEC 14496-12:2012 - 4.3 File Type Box / 8.16.2 Segment Type Box\nISOBox.prototype._boxProcessors['ftyp'] =\nISOBox.prototype._boxProcessors['styp'] = function() {\n  this._procField('major_brand', 'string', 4);\n  this._procField('minor_version', 'uint', 32);\n  var nbCompatibleBrands = -1;\n  if (this._parsing) {\n    nbCompatibleBrands = (this._raw.byteLength - (this._cursor.offset - this._raw.byteOffset)) / 4;\n  }\n  this._procFieldArray('compatible_brands', nbCompatibleBrands, 'string', 4);\n};\n\n// ISO/IEC 14496-12:2012 - 8.4.3 Handler Reference Box\nISOBox.prototype._boxProcessors['hdlr'] = function() {\n  this._procFullBox();\n  this._procField('pre_defined',      'uint',   32);\n  this._procField('handler_type',     'string', 4);\n  this._procFieldArray('reserved', 3, 'uint', 32);\n  this._procField('name',             'string', -1);\n};\n\n// ISO/IEC 14496-12:2012 - 8.1.1 Media Data Box\nISOBox.prototype._boxProcessors['mdat'] = function() {\n  this._procField('data', 'data', -1);\n};\n\n// ISO/IEC 14496-12:2012 - 8.4.2 Media Header Box\nISOBox.prototype._boxProcessors['mdhd'] = function() {\n  this._procFullBox();\n  this._procField('creation_time',      'uint', (this.version == 1) ? 64 : 32);\n  this._procField('modification_time',  'uint', (this.version == 1) ? 64 : 32);\n  this._procField('timescale',          'uint', 32);\n  this._procField('duration',           'uint', (this.version == 1) ? 64 : 32);\n  if (!this._parsing && typeof this.language === 'string') {\n    // In case of writing and language has been set as a string, then convert it into char codes array\n    this.language = ((this.language.charCodeAt(0) - 0x60) << 10) |\n                    ((this.language.charCodeAt(1) - 0x60) << 5) |\n                    ((this.language.charCodeAt(2) - 0x60));\n  }\n  this._procField('language',           'uint', 16);\n  if (this._parsing) {\n    this.language = String.fromCharCode(((this.language >> 10) & 0x1F) + 0x60,\n                                        ((this.language >> 5) & 0x1F) + 0x60,\n                                        (this.language & 0x1F) + 0x60);\n  }\n  this._procField('pre_defined',        'uint', 16);\n};\n\n// ISO/IEC 14496-12:2012 - 8.8.2 Movie Extends Header Box\nISOBox.prototype._boxProcessors['mehd'] = function() {\n  this._procFullBox();\n  this._procField('fragment_duration', 'uint', (this.version == 1) ? 64 : 32);\n};\n\n// ISO/IEC 14496-12:2012 - 8.8.5 Movie Fragment Header Box\nISOBox.prototype._boxProcessors['mfhd'] = function() {\n  this._procFullBox();\n  this._procField('sequence_number', 'uint', 32);\n};\n\n// ISO/IEC 14496-12:2012 - 8.8.11 Movie Fragment Random Access Box\nISOBox.prototype._boxProcessors['mfro'] = function() {\n  this._procFullBox();\n  this._procField('mfra_size', 'uint', 32); // Called mfra_size to distinguish from the normal \"size\" attribute of a box\n};\n\n\n// ISO/IEC 14496-12:2012 - 8.5.2.2 mp4a box (use AudioSampleEntry definition and naming)\nISOBox.prototype._boxProcessors['mp4a'] = ISOBox.prototype._boxProcessors['enca'] = function() {\n  // SampleEntry fields\n  this._procFieldArray('reserved1', 6,    'uint', 8);\n  this._procField('data_reference_index', 'uint', 16);\n  // AudioSampleEntry fields\n  this._procFieldArray('reserved2', 2,    'uint', 32);\n  this._procField('channelcount',         'uint', 16);\n  this._procField('samplesize',           'uint', 16);\n  this._procField('pre_defined',          'uint', 16);\n  this._procField('reserved3',            'uint', 16);\n  this._procField('samplerate',           'template', 32);\n  // ESDescriptor fields\n  this._procField('esds',                 'data', -1);\n};\n\n// ISO/IEC 14496-12:2012 - 8.2.2 Movie Header Box\nISOBox.prototype._boxProcessors['mvhd'] = function() {\n  this._procFullBox();\n  this._procField('creation_time',      'uint',     (this.version == 1) ? 64 : 32);\n  this._procField('modification_time',  'uint',     (this.version == 1) ? 64 : 32);\n  this._procField('timescale',          'uint',     32);\n  this._procField('duration',           'uint',     (this.version == 1) ? 64 : 32);\n  this._procField('rate',               'template', 32);\n  this._procField('volume',             'template', 16);\n  this._procField('reserved1',          'uint',  16);\n  this._procFieldArray('reserved2', 2,  'uint',     32);\n  this._procFieldArray('matrix', 9,     'template', 32);\n  this._procFieldArray('pre_defined', 6,'uint',   32);\n  this._procField('next_track_ID',      'uint',     32);\n};\n\n// ISO/IEC 14496-30:2014 - WebVTT Cue Payload Box.\nISOBox.prototype._boxProcessors['payl'] = function() {\n  this._procField('cue_text', 'utf8');\n};\n\n//ISO/IEC 23001-7:2011 - 8.1 Protection System Specific Header Box\nISOBox.prototype._boxProcessors['pssh'] = function() {\n  this._procFullBox();\n  \n  this._procFieldArray('SystemID', 16, 'uint', 8);\n  this._procField('DataSize', 'uint', 32);\n  this._procFieldArray('Data', this.DataSize, 'uint', 8);\n};\n// ISO/IEC 14496-12:2012 - 8.12.5 Scheme Type Box\nISOBox.prototype._boxProcessors['schm'] = function() {\n    this._procFullBox();\n    \n    this._procField('scheme_type', 'uint', 32);\n    this._procField('scheme_version', 'uint', 32);\n\n    if (this.flags & 0x000001) {\n        this._procField('scheme_uri', 'string', -1);\n    }\n};\n// ISO/IEC 14496-12:2012 - 8.6.4.1 sdtp box \nISOBox.prototype._boxProcessors['sdtp'] = function() {\n  this._procFullBox();\n\n  var sample_count = -1;\n  if (this._parsing) {\n    sample_count = (this._raw.byteLength - (this._cursor.offset - this._raw.byteOffset));\n  }\n\n  this._procFieldArray('sample_dependency_table', sample_count, 'uint', 8);\n};\n\n// ISO/IEC 14496-12:2012 - 8.16.3 Segment Index Box\nISOBox.prototype._boxProcessors['sidx'] = function() {\n  this._procFullBox();\n  this._procField('reference_ID', 'uint', 32);\n  this._procField('timescale', 'uint', 32);\n  this._procField('earliest_presentation_time', 'uint', (this.version == 1) ? 64 : 32);\n  this._procField('first_offset', 'uint', (this.version == 1) ? 64 : 32);\n  this._procField('reserved', 'uint', 16);\n  this._procField('reference_count', 'uint', 16);\n  this._procEntries('references', this.reference_count, function(entry) {\n    if (!this._parsing) {\n      entry.reference  = (entry.reference_type  & 0x00000001) << 31;\n      entry.reference |= (entry.referenced_size & 0x7FFFFFFF);\n      entry.sap  = (entry.starts_with_SAP & 0x00000001) << 31;\n      entry.sap |= (entry.SAP_type        & 0x00000003) << 28;\n      entry.sap |= (entry.SAP_delta_time  & 0x0FFFFFFF);\n    }\n    this._procEntryField(entry, 'reference', 'uint', 32);\n    this._procEntryField(entry, 'subsegment_duration', 'uint', 32);\n    this._procEntryField(entry, 'sap', 'uint', 32);\n    if (this._parsing) {\n      entry.reference_type = (entry.reference >> 31) & 0x00000001;\n      entry.referenced_size = entry.reference & 0x7FFFFFFF;\n      entry.starts_with_SAP  = (entry.sap >> 31) & 0x00000001;\n      entry.SAP_type = (entry.sap >> 28) & 0x00000007;\n      entry.SAP_delta_time = (entry.sap  & 0x0FFFFFFF);\n    }\n  });\n};\n\n// ISO/IEC 14496-12:2012 - 8.4.5.3 Sound Media Header Box\nISOBox.prototype._boxProcessors['smhd'] = function() {\n  this._procFullBox();\n  this._procField('balance',  'uint', 16);\n  this._procField('reserved', 'uint', 16);\n};\n\n// ISO/IEC 14496-12:2012 - 8.16.4 Subsegment Index Box\nISOBox.prototype._boxProcessors['ssix'] = function() {\n  this._procFullBox();\n  this._procField('subsegment_count', 'uint', 32);\n  this._procEntries('subsegments', this.subsegment_count, function(subsegment) {\n    this._procEntryField(subsegment, 'ranges_count', 'uint', 32);\n    this._procSubEntries(subsegment, 'ranges', subsegment.ranges_count, function(range) {\n      this._procEntryField(range, 'level', 'uint', 8);\n      this._procEntryField(range, 'range_size', 'uint', 24);\n    });\n  });\n};\n\n// ISO/IEC 14496-12:2012 - 8.5.2 Sample Description Box\nISOBox.prototype._boxProcessors['stsd'] = function() {\n  this._procFullBox();\n  this._procField('entry_count', 'uint', 32);\n  this._procSubBoxes('entries', this.entry_count);\n};\n\n// ISO/IEC 14496-12:2015 - 8.7.7 Sub-Sample Information Box\nISOBox.prototype._boxProcessors['subs'] = function () {\n  this._procFullBox();\n  this._procField('entry_count', 'uint', 32);\n  this._procEntries('entries', this.entry_count, function(entry) {\n    this._procEntryField(entry, 'sample_delta', 'uint', 32);\n    this._procEntryField(entry, 'subsample_count', 'uint', 16);\n    this._procSubEntries(entry, 'subsamples', entry.subsample_count, function(subsample) {\n      this._procEntryField(subsample, 'subsample_size', 'uint', (this.version === 1) ? 32 : 16);\n      this._procEntryField(subsample, 'subsample_priority', 'uint', 8);\n      this._procEntryField(subsample, 'discardable', 'uint', 8);\n      this._procEntryField(subsample, 'codec_specific_parameters', 'uint', 32);\n    });\n  });\n};\n\n//ISO/IEC 23001-7:2011 - 8.2 Track Encryption Box\nISOBox.prototype._boxProcessors['tenc'] = function() {\n    this._procFullBox();\n\n    this._procField('default_IsEncrypted', 'uint', 24);\n    this._procField('default_IV_size', 'uint', 8);\n    this._procFieldArray('default_KID', 16,    'uint', 8);\n };\n\n// ISO/IEC 14496-12:2012 - 8.8.12 Track Fragmnent Decode Time\nISOBox.prototype._boxProcessors['tfdt'] = function() {\n  this._procFullBox();\n  this._procField('baseMediaDecodeTime', 'uint', (this.version == 1) ? 64 : 32);\n};\n\n// ISO/IEC 14496-12:2012 - 8.8.7 Track Fragment Header Box\nISOBox.prototype._boxProcessors['tfhd'] = function() {\n  this._procFullBox();\n  this._procField('track_ID', 'uint', 32);\n  if (this.flags & 0x01) this._procField('base_data_offset',          'uint', 64);\n  if (this.flags & 0x02) this._procField('sample_description_offset', 'uint', 32);\n  if (this.flags & 0x08) this._procField('default_sample_duration',   'uint', 32);\n  if (this.flags & 0x10) this._procField('default_sample_size',       'uint', 32);\n  if (this.flags & 0x20) this._procField('default_sample_flags',      'uint', 32);\n};\n\n// ISO/IEC 14496-12:2012 - 8.8.10 Track Fragment Random Access Box\nISOBox.prototype._boxProcessors['tfra'] = function() {\n  this._procFullBox();\n  this._procField('track_ID', 'uint', 32);\n  if (!this._parsing) {\n    this.reserved = 0;\n    this.reserved |= (this.length_size_of_traf_num  & 0x00000030) << 4;\n    this.reserved |= (this.length_size_of_trun_num  & 0x0000000C) << 2;\n    this.reserved |= (this.length_size_of_sample_num  & 0x00000003);\n  }\n  this._procField('reserved', 'uint', 32);\n  if (this._parsing) {\n    this.length_size_of_traf_num = (this.reserved & 0x00000030) >> 4;\n    this.length_size_of_trun_num = (this.reserved & 0x0000000C) >> 2;\n    this.length_size_of_sample_num = (this.reserved & 0x00000003);\n  }\n  this._procField('number_of_entry', 'uint', 32);\n  this._procEntries('entries', this.number_of_entry, function(entry) {\n    this._procEntryField(entry, 'time', 'uint', (this.version === 1) ? 64 : 32);\n    this._procEntryField(entry, 'moof_offset', 'uint', (this.version === 1) ? 64 : 32);\n    this._procEntryField(entry, 'traf_number', 'uint', (this.length_size_of_traf_num + 1) * 8);\n    this._procEntryField(entry, 'trun_number', 'uint', (this.length_size_of_trun_num + 1) * 8);\n    this._procEntryField(entry, 'sample_number', 'uint', (this.length_size_of_sample_num + 1) * 8);\n  });\n};\n\n// ISO/IEC 14496-12:2012 - 8.3.2 Track Header Box\nISOBox.prototype._boxProcessors['tkhd'] = function() {\n  this._procFullBox();\n  this._procField('creation_time',      'uint',     (this.version == 1) ? 64 : 32);\n  this._procField('modification_time',  'uint',     (this.version == 1) ? 64 : 32);\n  this._procField('track_ID',           'uint',     32);\n  this._procField('reserved1',          'uint',     32);\n  this._procField('duration',           'uint',     (this.version == 1) ? 64 : 32);\n  this._procFieldArray('reserved2', 2,  'uint',     32);\n  this._procField('layer',              'uint',     16);\n  this._procField('alternate_group',    'uint',     16);\n  this._procField('volume',             'template', 16);\n  this._procField('reserved3',          'uint',     16);\n  this._procFieldArray('matrix', 9,     'template', 32);\n  this._procField('width',              'template', 32);\n  this._procField('height',             'template', 32);\n};\n\n// ISO/IEC 14496-12:2012 - 8.8.3 Track Extends Box\nISOBox.prototype._boxProcessors['trex'] = function() {\n  this._procFullBox();\n  this._procField('track_ID',                         'uint', 32);\n  this._procField('default_sample_description_index', 'uint', 32);\n  this._procField('default_sample_duration',          'uint', 32);\n  this._procField('default_sample_size',              'uint', 32);\n  this._procField('default_sample_flags',             'uint', 32);\n};\n\n// ISO/IEC 14496-12:2012 - 8.8.8 Track Run Box\n// Note: the 'trun' box has a direct relation to the 'tfhd' box for defaults.\n// These defaults are not set explicitly here, but are left to resolve for the user.\nISOBox.prototype._boxProcessors['trun'] = function() {\n  this._procFullBox();\n  this._procField('sample_count', 'uint', 32);\n  if (this.flags & 0x1) this._procField('data_offset', 'int', 32);\n  if (this.flags & 0x4) this._procField('first_sample_flags', 'uint', 32);\n  this._procEntries('samples', this.sample_count, function(sample) {\n    if (this.flags & 0x100) this._procEntryField(sample, 'sample_duration', 'uint', 32);\n    if (this.flags & 0x200) this._procEntryField(sample, 'sample_size', 'uint', 32);\n    if (this.flags & 0x400) this._procEntryField(sample, 'sample_flags', 'uint', 32);\n    if (this.flags & 0x800) this._procEntryField(sample, 'sample_composition_time_offset', (this.version === 1) ? 'int' : 'uint',  32);\n  });\n};\n\n// ISO/IEC 14496-12:2012 - 8.7.2 Data Reference Box\nISOBox.prototype._boxProcessors['url '] = ISOBox.prototype._boxProcessors['urn '] = function() {\n  this._procFullBox();\n  if (this.type === 'urn ') {\n    this._procField('name', 'string', -1);\n  }\n  this._procField('location', 'string', -1);\n};\n\n// ISO/IEC 14496-30:2014 - WebVTT Source Label Box\nISOBox.prototype._boxProcessors['vlab'] = function() {\n  this._procField('source_label', 'utf8');\n};\n\n// ISO/IEC 14496-12:2012 - 8.4.5.2 Video Media Header Box\nISOBox.prototype._boxProcessors['vmhd'] = function() {\n  this._procFullBox();\n  this._procField('graphicsmode', 'uint', 16);\n  this._procFieldArray('opcolor', 3, 'uint', 16);\n};\n\n// ISO/IEC 14496-30:2014 - WebVTT Configuration Box\nISOBox.prototype._boxProcessors['vttC'] = function() {\n  this._procField('config', 'utf8');\n};\n\n// ISO/IEC 14496-30:2014 - WebVTT Empty Sample Box\nISOBox.prototype._boxProcessors['vtte'] = function() {\n  // Nothing should happen here.\n};\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar objectCreate = Object.create || objectCreatePolyfill\nvar objectKeys = Object.keys || objectKeysPolyfill\nvar bind = Function.prototype.bind || functionBindPolyfill\n\nfunction EventEmitter() {\n  if (!this._events || !Object.prototype.hasOwnProperty.call(this, '_events')) {\n    this._events = objectCreate(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nvar hasDefineProperty;\ntry {\n  var o = {};\n  if (Object.defineProperty) Object.defineProperty(o, 'x', { value: 0 });\n  hasDefineProperty = o.x === 0;\n} catch (err) { hasDefineProperty = false }\nif (hasDefineProperty) {\n  Object.defineProperty(EventEmitter, 'defaultMaxListeners', {\n    enumerable: true,\n    get: function() {\n      return defaultMaxListeners;\n    },\n    set: function(arg) {\n      // check whether the input is a positive number (whose value is zero or\n      // greater and not a NaN).\n      if (typeof arg !== 'number' || arg < 0 || arg !== arg)\n        throw new TypeError('\"defaultMaxListeners\" must be a positive number');\n      defaultMaxListeners = arg;\n    }\n  });\n} else {\n  EventEmitter.defaultMaxListeners = defaultMaxListeners;\n}\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || isNaN(n))\n    throw new TypeError('\"n\" argument must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nfunction $getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return $getMaxListeners(this);\n};\n\n// These standalone emit* functions are used to optimize calling of event\n// handlers for fast cases because emit() itself often has a variable number of\n// arguments and can be deoptimized because of that. These functions always have\n// the same number of arguments and thus do not get deoptimized, so the code\n// inside them can execute faster.\nfunction emitNone(handler, isFn, self) {\n  if (isFn)\n    handler.call(self);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self);\n  }\n}\nfunction emitOne(handler, isFn, self, arg1) {\n  if (isFn)\n    handler.call(self, arg1);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self, arg1);\n  }\n}\nfunction emitTwo(handler, isFn, self, arg1, arg2) {\n  if (isFn)\n    handler.call(self, arg1, arg2);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self, arg1, arg2);\n  }\n}\nfunction emitThree(handler, isFn, self, arg1, arg2, arg3) {\n  if (isFn)\n    handler.call(self, arg1, arg2, arg3);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self, arg1, arg2, arg3);\n  }\n}\n\nfunction emitMany(handler, isFn, self, args) {\n  if (isFn)\n    handler.apply(self, args);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].apply(self, args);\n  }\n}\n\nEventEmitter.prototype.emit = function emit(type) {\n  var er, handler, len, args, i, events;\n  var doError = (type === 'error');\n\n  events = this._events;\n  if (events)\n    doError = (doError && events.error == null);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    if (arguments.length > 1)\n      er = arguments[1];\n    if (er instanceof Error) {\n      throw er; // Unhandled 'error' event\n    } else {\n      // At least give some kind of context to the user\n      var err = new Error('Unhandled \"error\" event. (' + er + ')');\n      err.context = er;\n      throw err;\n    }\n    return false;\n  }\n\n  handler = events[type];\n\n  if (!handler)\n    return false;\n\n  var isFn = typeof handler === 'function';\n  len = arguments.length;\n  switch (len) {\n      // fast cases\n    case 1:\n      emitNone(handler, isFn, this);\n      break;\n    case 2:\n      emitOne(handler, isFn, this, arguments[1]);\n      break;\n    case 3:\n      emitTwo(handler, isFn, this, arguments[1], arguments[2]);\n      break;\n    case 4:\n      emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);\n      break;\n      // slower\n    default:\n      args = new Array(len - 1);\n      for (i = 1; i < len; i++)\n        args[i - 1] = arguments[i];\n      emitMany(handler, isFn, this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  if (typeof listener !== 'function')\n    throw new TypeError('\"listener\" argument must be a function');\n\n  events = target._events;\n  if (!events) {\n    events = target._events = objectCreate(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener) {\n      target.emit('newListener', type,\n          listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (!existing) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n          prepend ? [listener, existing] : [existing, listener];\n    } else {\n      // If we've already got an array, just append.\n      if (prepend) {\n        existing.unshift(listener);\n      } else {\n        existing.push(listener);\n      }\n    }\n\n    // Check for listener leak\n    if (!existing.warned) {\n      m = $getMaxListeners(target);\n      if (m && m > 0 && existing.length > m) {\n        existing.warned = true;\n        var w = new Error('Possible EventEmitter memory leak detected. ' +\n            existing.length + ' \"' + String(type) + '\" listeners ' +\n            'added. Use emitter.setMaxListeners() to ' +\n            'increase limit.');\n        w.name = 'MaxListenersExceededWarning';\n        w.emitter = target;\n        w.type = type;\n        w.count = existing.length;\n        if (typeof console === 'object' && console.warn) {\n          console.warn('%s: %s', w.name, w.message);\n        }\n      }\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    switch (arguments.length) {\n      case 0:\n        return this.listener.call(this.target);\n      case 1:\n        return this.listener.call(this.target, arguments[0]);\n      case 2:\n        return this.listener.call(this.target, arguments[0], arguments[1]);\n      case 3:\n        return this.listener.call(this.target, arguments[0], arguments[1],\n            arguments[2]);\n      default:\n        var args = new Array(arguments.length);\n        for (var i = 0; i < args.length; ++i)\n          args[i] = arguments[i];\n        this.listener.apply(this.target, args);\n    }\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = bind.call(onceWrapper, state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  if (typeof listener !== 'function')\n    throw new TypeError('\"listener\" argument must be a function');\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      if (typeof listener !== 'function')\n        throw new TypeError('\"listener\" argument must be a function');\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      if (typeof listener !== 'function')\n        throw new TypeError('\"listener\" argument must be a function');\n\n      events = this._events;\n      if (!events)\n        return this;\n\n      list = events[type];\n      if (!list)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = objectCreate(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else\n          spliceOne(list, position);\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (!events)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (!events.removeListener) {\n        if (arguments.length === 0) {\n          this._events = objectCreate(null);\n          this._eventsCount = 0;\n        } else if (events[type]) {\n          if (--this._eventsCount === 0)\n            this._events = objectCreate(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = objectKeys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = objectCreate(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (!events)\n    return [];\n\n  var evlistener = events[type];\n  if (!evlistener)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];\n};\n\n// About 1.5x faster than the two-arg version of Array#splice().\nfunction spliceOne(list, index) {\n  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1)\n    list[i] = list[k];\n  list.pop();\n}\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction objectCreatePolyfill(proto) {\n  var F = function() {};\n  F.prototype = proto;\n  return new F;\n}\nfunction objectKeysPolyfill(obj) {\n  var keys = [];\n  for (var k in obj) if (Object.prototype.hasOwnProperty.call(obj, k)) {\n    keys.push(k);\n  }\n  return k;\n}\nfunction functionBindPolyfill(context) {\n  var fn = this;\n  return function () {\n    return fn.apply(context, arguments);\n  };\n}\n","'use strict';\n\nvar isArray = Array.isArray;\nvar keyList = Object.keys;\nvar hasProp = Object.prototype.hasOwnProperty;\n\nmodule.exports = function equal(a, b) {\n  if (a === b) return true;\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    var arrA = isArray(a)\n      , arrB = isArray(b)\n      , i\n      , length\n      , key;\n\n    if (arrA && arrB) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (!equal(a[i], b[i])) return false;\n      return true;\n    }\n\n    if (arrA != arrB) return false;\n\n    var dateA = a instanceof Date\n      , dateB = b instanceof Date;\n    if (dateA != dateB) return false;\n    if (dateA && dateB) return a.getTime() == b.getTime();\n\n    var regexpA = a instanceof RegExp\n      , regexpB = b instanceof RegExp;\n    if (regexpA != regexpB) return false;\n    if (regexpA && regexpB) return a.toString() == b.toString();\n\n    var keys = keyList(a);\n    length = keys.length;\n\n    if (length !== keyList(b).length)\n      return false;\n\n    for (i = length; i-- !== 0;)\n      if (!hasProp.call(b, keys[i])) return false;\n\n    for (i = length; i-- !== 0;) {\n      key = keys[i];\n      if (!equal(a[key], b[key])) return false;\n    }\n\n    return true;\n  }\n\n  return a!==a && b!==b;\n};\n","exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","/* \r\n * Copyright (c) 2016, Pierre-Anthony Lemieux <pal@sandflow.com>\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *\r\n * * Redistributions of source code must retain the above copyright notice, this\r\n *   list of conditions and the following disclaimer.\r\n * * Redistributions in binary form must reproduce the above copyright notice,\r\n *   this list of conditions and the following disclaimer in the documentation\r\n *   and/or other materials provided with the distribution.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\r\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n * POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n/**\r\n * @module imscDoc\r\n */\r\n\r\n;\r\n(function (imscDoc, sax, imscNames, imscStyles, imscUtils) {\r\n\r\n\r\n    /**\r\n     * Allows a client to provide callbacks to handle children of the <metadata> element\r\n     * @typedef {Object} MetadataHandler\r\n     * @property {?OpenTagCallBack} onOpenTag\r\n     * @property {?CloseTagCallBack} onCloseTag\r\n     * @property {?TextCallBack} onText\r\n     */\r\n\r\n    /**\r\n     * Called when the opening tag of an element node is encountered.\r\n     * @callback OpenTagCallBack\r\n     * @param {string} ns Namespace URI of the element\r\n     * @param {string} name Local name of the element\r\n     * @param {Object[]} attributes List of attributes, each consisting of a\r\n     *                              `uri`, `name` and `value`\r\n     */\r\n\r\n    /**\r\n     * Called when the closing tag of an element node is encountered.\r\n     * @callback CloseTagCallBack\r\n     */\r\n\r\n    /**\r\n     * Called when a text node is encountered.\r\n     * @callback TextCallBack\r\n     * @param {string} contents Contents of the text node\r\n     */\r\n\r\n    /**\r\n     * Parses an IMSC1 document into an opaque in-memory representation that exposes\r\n     * a single method <pre>getMediaTimeEvents()</pre> that returns a list of time\r\n     * offsets (in seconds) of the ISD, i.e. the points in time where the visual\r\n     * representation of the document change. `metadataHandler` allows the caller to\r\n     * be called back when nodes are present in <metadata> elements. \r\n     * \r\n     * @param {string} xmlstring XML document\r\n     * @param {?module:imscUtils.ErrorHandler} errorHandler Error callback\r\n     * @param {?MetadataHandler} metadataHandler Callback for <Metadata> elements\r\n     * @returns {Object} Opaque in-memory representation of an IMSC1 document\r\n     */\r\n\r\n    imscDoc.fromXML = function (xmlstring, errorHandler, metadataHandler) {\r\n        var p = sax.parser(true, {xmlns: true});\r\n        var estack = [];\r\n        var xmllangstack = [];\r\n        var xmlspacestack = [];\r\n        var metadata_depth = 0;\r\n        var doc = null;\r\n\r\n        p.onclosetag = function (node) {\r\n\r\n            if (estack[0] instanceof Styling) {\r\n\r\n                /* flatten chained referential styling */\r\n\r\n                for (var sid in estack[0].styles) {\r\n\r\n                    mergeChainedStyles(estack[0], estack[0].styles[sid], errorHandler);\r\n\r\n                }\r\n\r\n            } else if (estack[0] instanceof P || estack[0] instanceof Span) {\r\n\r\n                /* merge anonymous spans */\r\n\r\n                if (estack[0].contents.length > 1) {\r\n\r\n                    var cs = [estack[0].contents[0]];\r\n\r\n                    var c;\r\n\r\n                    for (c = 1; c < estack[0].contents.length; c++) {\r\n\r\n                        if (estack[0].contents[c] instanceof AnonymousSpan &&\r\n                                cs[cs.length - 1] instanceof AnonymousSpan) {\r\n\r\n                            cs[cs.length - 1].text += estack[0].contents[c].text;\r\n\r\n                        } else {\r\n\r\n                            cs.push(estack[0].contents[c]);\r\n\r\n                        }\r\n\r\n                    }\r\n\r\n                    estack[0].contents = cs;\r\n\r\n                }\r\n\r\n                // remove redundant nested anonymous spans (9.3.3(1)(c))\r\n\r\n                if (estack[0] instanceof Span &&\r\n                        estack[0].contents.length === 1 &&\r\n                        estack[0].contents[0] instanceof AnonymousSpan) {\r\n\r\n                    estack[0].text = estack[0].contents[0].text;\r\n                    delete estack[0].contents;\r\n\r\n                }\r\n\r\n            } else if (estack[0] instanceof ForeignElement) {\r\n\r\n                if (estack[0].node.uri === imscNames.ns_tt &&\r\n                        estack[0].node.local === 'metadata') {\r\n\r\n                    /* leave the metadata element */\r\n\r\n                    metadata_depth--;\r\n\r\n                } else if (metadata_depth > 0 &&\r\n                        metadataHandler &&\r\n                        'onCloseTag' in metadataHandler) {\r\n\r\n                    /* end of child of metadata element */\r\n\r\n                    metadataHandler.onCloseTag();\r\n\r\n                }\r\n\r\n            }\r\n\r\n            // TODO: delete stylerefs?\r\n\r\n            // maintain the xml:space stack\r\n\r\n            xmlspacestack.shift();\r\n\r\n            // maintain the xml:lang stack\r\n\r\n            xmllangstack.shift();\r\n\r\n            // prepare for the next element\r\n\r\n            estack.shift();\r\n        };\r\n\r\n        p.ontext = function (str) {\r\n\r\n            if (estack[0] === undefined) {\r\n\r\n                /* ignoring text outside of elements */\r\n\r\n            } else if (estack[0] instanceof Span || estack[0] instanceof P) {\r\n\r\n                /* create an anonymous span */\r\n\r\n                var s = new AnonymousSpan();\r\n\r\n                s.initFromText(doc, estack[0], str, xmlspacestack[0], errorHandler);\r\n\r\n                estack[0].contents.push(s);\r\n\r\n            } else if (estack[0] instanceof ForeignElement &&\r\n                    metadata_depth > 0 &&\r\n                    metadataHandler &&\r\n                    'onText' in metadataHandler) {\r\n\r\n                /* text node within a child of metadata element */\r\n\r\n                metadataHandler.onText(str);\r\n\r\n            }\r\n\r\n        };\r\n\r\n\r\n        p.onopentag = function (node) {\r\n\r\n            // maintain the xml:space stack\r\n\r\n            var xmlspace = node.attributes[\"xml:space\"];\r\n\r\n            if (xmlspace) {\r\n\r\n                xmlspacestack.unshift(xmlspace.value);\r\n\r\n            } else {\r\n\r\n                if (xmlspacestack.length === 0) {\r\n\r\n                    xmlspacestack.unshift(\"default\");\r\n\r\n                } else {\r\n\r\n                    xmlspacestack.unshift(xmlspacestack[0]);\r\n\r\n                }\r\n\r\n            }\r\n\r\n            /* maintain the xml:lang stack */\r\n\r\n\r\n            var xmllang = node.attributes[\"xml:lang\"];\r\n\r\n            if (xmllang) {\r\n\r\n                xmllangstack.unshift(xmllang.value);\r\n\r\n            } else {\r\n\r\n                if (xmllangstack.length === 0) {\r\n\r\n                    xmllangstack.unshift(\"\");\r\n\r\n                } else {\r\n\r\n                    xmllangstack.unshift(xmllangstack[0]);\r\n\r\n                }\r\n\r\n            }\r\n\r\n\r\n            /* process the element */\r\n\r\n            if (node.uri === imscNames.ns_tt) {\r\n\r\n                if (node.local === 'tt') {\r\n\r\n                    if (doc !== null) {\r\n\r\n                        reportFatal(errorHandler, \"Two <tt> elements at (\" + this.line + \",\" + this.column + \")\");\r\n\r\n                    }\r\n\r\n                    doc = new TT();\r\n\r\n                    doc.initFromNode(node, errorHandler);\r\n\r\n                    estack.unshift(doc);\r\n\r\n                } else if (node.local === 'head') {\r\n\r\n                    if (!(estack[0] instanceof TT)) {\r\n                        reportFatal(errorHandler, \"Parent of <head> element is not <tt> at (\" + this.line + \",\" + this.column + \")\");\r\n                    }\r\n\r\n                    if (doc.head !== null) {\r\n                        reportFatal(\"Second <head> element at (\" + this.line + \",\" + this.column + \")\");\r\n                    }\r\n\r\n                    doc.head = new Head();\r\n\r\n                    estack.unshift(doc.head);\r\n\r\n                } else if (node.local === 'styling') {\r\n\r\n                    if (!(estack[0] instanceof Head)) {\r\n                        reportFatal(errorHandler, \"Parent of <styling> element is not <head> at (\" + this.line + \",\" + this.column + \")\");\r\n                    }\r\n\r\n                    if (doc.head.styling !== null) {\r\n                        reportFatal(\"Second <styling> element at (\" + this.line + \",\" + this.column + \")\");\r\n                    }\r\n\r\n                    doc.head.styling = new Styling();\r\n\r\n                    estack.unshift(doc.head.styling);\r\n\r\n                } else if (node.local === 'style') {\r\n\r\n                    var s;\r\n\r\n                    if (estack[0] instanceof Styling) {\r\n\r\n                        s = new Style();\r\n\r\n                        s.initFromNode(node, errorHandler);\r\n\r\n                        /* ignore <style> element missing @id */\r\n\r\n                        if (!s.id) {\r\n\r\n                            reportError(errorHandler, \"<style> element missing @id attribute\");\r\n\r\n                        } else {\r\n\r\n                            doc.head.styling.styles[s.id] = s;\r\n\r\n                        }\r\n\r\n                        estack.unshift(s);\r\n\r\n                    } else if (estack[0] instanceof Region) {\r\n\r\n                        /* nested styles can be merged with specified styles\r\n                         * immediately, with lower priority\r\n                         * (see 8.4.4.2(3) at TTML1 )\r\n                         */\r\n\r\n                        s = new Style();\r\n\r\n                        s.initFromNode(node, errorHandler);\r\n\r\n                        mergeStylesIfNotPresent(s.styleAttrs, estack[0].styleAttrs);\r\n\r\n                        estack.unshift(s);\r\n\r\n                    } else {\r\n\r\n                        reportFatal(errorHandler, \"Parent of <style> element is not <styling> or <region> at (\" + this.line + \",\" + this.column + \")\");\r\n\r\n                    }\r\n\r\n                } else if (node.local === 'layout') {\r\n\r\n                    if (!(estack[0] instanceof Head)) {\r\n\r\n                        reportFatal(errorHandler, \"Parent of <layout> element is not <head> at \" + this.line + \",\" + this.column + \")\");\r\n\r\n                    }\r\n\r\n                    if (doc.head.layout !== null) {\r\n\r\n                        reportFatal(errorHandler, \"Second <layout> element at \" + this.line + \",\" + this.column + \")\");\r\n\r\n                    }\r\n\r\n                    doc.head.layout = new Layout();\r\n\r\n                    estack.unshift(doc.head.layout);\r\n\r\n                } else if (node.local === 'region') {\r\n\r\n                    if (!(estack[0] instanceof Layout)) {\r\n                        reportFatal(errorHandler, \"Parent of <region> element is not <layout> at \" + this.line + \",\" + this.column + \")\");\r\n                    }\r\n\r\n                    var r = new Region();\r\n\r\n                    r.initFromNode(doc, node, errorHandler);\r\n\r\n                    if (!r.id || r.id in doc.head.layout.regions) {\r\n\r\n                        reportError(errorHandler, \"Ignoring <region> with duplicate or missing @id at \" + this.line + \",\" + this.column + \")\");\r\n\r\n                    } else {\r\n\r\n                        doc.head.layout.regions[r.id] = r;\r\n\r\n                    }\r\n\r\n                    estack.unshift(r);\r\n\r\n                } else if (node.local === 'body') {\r\n\r\n                    if (!(estack[0] instanceof TT)) {\r\n\r\n                        reportFatal(errorHandler, \"Parent of <body> element is not <tt> at \" + this.line + \",\" + this.column + \")\");\r\n\r\n                    }\r\n\r\n                    if (doc.body !== null) {\r\n\r\n                        reportFatal(errorHandler, \"Second <body> element at \" + this.line + \",\" + this.column + \")\");\r\n\r\n                    }\r\n\r\n                    var b = new Body();\r\n\r\n                    b.initFromNode(doc, node, errorHandler);\r\n\r\n                    doc.body = b;\r\n\r\n                    estack.unshift(b);\r\n\r\n                } else if (node.local === 'div') {\r\n\r\n                    if (!(estack[0] instanceof Div || estack[0] instanceof Body)) {\r\n\r\n                        reportFatal(errorHandler, \"Parent of <div> element is not <body> or <div> at \" + this.line + \",\" + this.column + \")\");\r\n\r\n                    }\r\n\r\n                    var d = new Div();\r\n\r\n                    d.initFromNode(doc, estack[0], node, errorHandler);\r\n\r\n                    estack[0].contents.push(d);\r\n\r\n                    estack.unshift(d);\r\n\r\n                } else if (node.local === 'p') {\r\n\r\n                    if (!(estack[0] instanceof Div)) {\r\n\r\n                        reportFatal(errorHandler, \"Parent of <p> element is not <div> at \" + this.line + \",\" + this.column + \")\");\r\n\r\n                    }\r\n\r\n                    var p = new P();\r\n\r\n                    p.initFromNode(doc, estack[0], node, errorHandler);\r\n\r\n                    estack[0].contents.push(p);\r\n\r\n                    estack.unshift(p);\r\n\r\n                } else if (node.local === 'span') {\r\n\r\n                    if (!(estack[0] instanceof Span || estack[0] instanceof P)) {\r\n\r\n                        reportFatal(errorHandler, \"Parent of <span> element is not <span> or <p> at \" + this.line + \",\" + this.column + \")\");\r\n\r\n                    }\r\n\r\n                    var ns = new Span();\r\n\r\n                    ns.initFromNode(doc, estack[0], node, xmlspacestack[0], errorHandler);\r\n\r\n                    estack[0].contents.push(ns);\r\n\r\n                    estack.unshift(ns);\r\n\r\n                } else if (node.local === 'br') {\r\n\r\n                    if (!(estack[0] instanceof Span || estack[0] instanceof P)) {\r\n\r\n                        reportFatal(errorHandler, \"Parent of <br> element is not <span> or <p> at \" + this.line + \",\" + this.column + \")\");\r\n\r\n                    }\r\n\r\n                    var nb = new Br();\r\n\r\n                    nb.initFromNode(doc, estack[0], node, errorHandler);\r\n\r\n                    estack[0].contents.push(nb);\r\n\r\n                    estack.unshift(nb);\r\n\r\n                } else if (node.local === 'set') {\r\n\r\n                    if (!(estack[0] instanceof Span ||\r\n                            estack[0] instanceof P ||\r\n                            estack[0] instanceof Div ||\r\n                            estack[0] instanceof Body ||\r\n                            estack[0] instanceof Region ||\r\n                            estack[0] instanceof Br)) {\r\n\r\n                        reportFatal(errorHandler, \"Parent of <set> element is not a content element or a region at \" + this.line + \",\" + this.column + \")\");\r\n\r\n                    }\r\n\r\n                    var st = new Set();\r\n\r\n                    st.initFromNode(doc, estack[0], node, errorHandler);\r\n\r\n                    estack[0].sets.push(st);\r\n\r\n                    estack.unshift(st);\r\n\r\n                } else {\r\n\r\n                    /* element in the TT namespace, but not a content element */\r\n\r\n                    estack.unshift(new ForeignElement(node));\r\n                }\r\n\r\n            } else {\r\n\r\n                /* ignore elements not in the TTML namespace unless in metadata element */\r\n\r\n                estack.unshift(new ForeignElement(node));\r\n\r\n            }\r\n\r\n            /* handle metadata callbacks */\r\n\r\n            if (estack[0] instanceof ForeignElement) {\r\n\r\n                if (node.uri === imscNames.ns_tt &&\r\n                        node.local === 'metadata') {\r\n\r\n                    /* enter the metadata element */\r\n\r\n                    metadata_depth++;\r\n\r\n                } else if (\r\n                        metadata_depth > 0 &&\r\n                        metadataHandler &&\r\n                        'onOpenTag' in metadataHandler\r\n                        ) {\r\n\r\n                    /* start of child of metadata element */\r\n\r\n                    var attrs = [];\r\n\r\n                    for (var a in node.attributes) {\r\n                        attrs[node.attributes[a].uri + \" \" + node.attributes[a].local] =\r\n                                {\r\n                                    uri: node.attributes[a].uri,\r\n                                    local: node.attributes[a].local,\r\n                                    value: node.attributes[a].value\r\n                                };\r\n                    }\r\n\r\n                    metadataHandler.onOpenTag(node.uri, node.local, attrs);\r\n\r\n                }\r\n\r\n            }\r\n\r\n        };\r\n\r\n        // parse the document\r\n\r\n        p.write(xmlstring).close();\r\n\r\n        // all referential styling has been flatten, so delete the styling elements if there is a head\r\n        // otherwise create an empty head\r\n\r\n        if (doc.head !== null) {\r\n            delete doc.head.styling;\r\n        } else {\r\n            doc.head = new Head();\r\n        }\r\n\r\n        // create default region if no regions specified\r\n\r\n        if (doc.head.layout === null) {\r\n\r\n            doc.head.layout = new Layout();\r\n\r\n        }\r\n\r\n        var hasRegions = false;\r\n\r\n        /* AFAIK the only way to determine whether an object has members */\r\n\r\n        for (var i in doc.head.layout.regions) {\r\n\r\n            hasRegions = true;\r\n\r\n            break;\r\n\r\n        }\r\n\r\n        if (!hasRegions) {\r\n\r\n            /* create default region */\r\n\r\n            var dr = Region.prototype.createDefaultRegion();\r\n\r\n            doc.head.layout.regions[dr.id] = dr;\r\n\r\n        }\r\n\r\n        /* resolve desired timing for regions */\r\n\r\n        for (var region_i in doc.head.layout.regions) {\r\n\r\n            resolveTiming(doc, doc.head.layout.regions[region_i], null, null);\r\n\r\n        }\r\n\r\n        /* resolve desired timing for content elements */\r\n\r\n        if (doc.body) {\r\n            resolveTiming(doc, doc.body, null, null);\r\n        }\r\n\r\n        return doc;\r\n    };\r\n\r\n    function resolveTiming(doc, element, prev_sibling, parent) {\r\n\r\n        /* are we in a seq container? */\r\n\r\n        var isinseq = parent && parent.timeContainer === \"seq\";\r\n\r\n        /* determine implicit begin */\r\n\r\n        var implicit_begin = 0; /* default */\r\n\r\n        if (parent) {\r\n\r\n            if (isinseq && prev_sibling) {\r\n\r\n                /*\r\n                 * if seq time container, offset from the previous sibling end\r\n                 */\r\n\r\n                implicit_begin = prev_sibling.end;\r\n\r\n\r\n            } else {\r\n\r\n                implicit_begin = parent.begin;\r\n\r\n            }\r\n\r\n        }\r\n\r\n        /* compute desired begin */\r\n\r\n        element.begin = element.explicit_begin ? element.explicit_begin + implicit_begin : implicit_begin;\r\n\r\n\r\n        /* determine implicit end */\r\n\r\n        var implicit_end = element.begin;\r\n\r\n        var s = null;\r\n\r\n        for (var set_i in element.sets) {\r\n\r\n            resolveTiming(doc, element.sets[set_i], s, element);\r\n\r\n            if (element.timeContainer === \"seq\") {\r\n\r\n                implicit_end = element.sets[set_i].end;\r\n\r\n            } else {\r\n\r\n                implicit_end = Math.max(implicit_end, element.sets[set_i].end);\r\n\r\n            }\r\n\r\n            s = element.sets[set_i];\r\n\r\n        }\r\n\r\n        if (!('contents' in element)) {\r\n\r\n            /* anonymous spans and regions and <set> and <br>s and spans with only children text nodes */\r\n\r\n            if (isinseq) {\r\n\r\n                /* in seq container, implicit duration is zero */\r\n\r\n                implicit_end = element.begin;\r\n\r\n            } else {\r\n\r\n                /* in par container, implicit duration is indefinite */\r\n\r\n                implicit_end = Number.POSITIVE_INFINITY;\r\n\r\n            }\r\n\r\n        } else {\r\n\r\n            for (var content_i in element.contents) {\r\n\r\n                resolveTiming(doc, element.contents[content_i], s, element);\r\n\r\n                if (element.timeContainer === \"seq\") {\r\n\r\n                    implicit_end = element.contents[content_i].end;\r\n\r\n                } else {\r\n\r\n                    implicit_end = Math.max(implicit_end, element.contents[content_i].end);\r\n\r\n                }\r\n\r\n                s = element.contents[content_i];\r\n\r\n            }\r\n\r\n        }\r\n\r\n        /* determine desired end */\r\n        /* it is never made really clear in SMIL that the explicit end is offset by the implicit begin */\r\n\r\n        if (element.explicit_end !== null && element.explicit_dur !== null) {\r\n\r\n            element.end = Math.min(element.begin + element.explicit_dur, implicit_begin + element.explicit_end);\r\n\r\n        } else if (element.explicit_end === null && element.explicit_dur !== null) {\r\n\r\n            element.end = element.begin + element.explicit_dur;\r\n\r\n        } else if (element.explicit_end !== null && element.explicit_dur === null) {\r\n\r\n            element.end = implicit_begin + element.explicit_end;\r\n\r\n        } else {\r\n\r\n            element.end = implicit_end;\r\n        }\r\n\r\n        delete element.explicit_begin;\r\n        delete element.explicit_dur;\r\n        delete element.explicit_end;\r\n\r\n        doc._registerEvent(element);\r\n\r\n    }\r\n\r\n    function ForeignElement(node) {\r\n        this.node = node;\r\n    }\r\n\r\n    function TT() {\r\n        this.events = [];\r\n        this.head = null;\r\n        this.body = null;\r\n    }\r\n\r\n    TT.prototype.initFromNode = function (node, errorHandler) {\r\n\r\n        /* compute cell resolution */\r\n\r\n        this.cellResolution = extractCellResolution(node, errorHandler);\r\n\r\n        /* extract frame rate and tick rate */\r\n\r\n        var frtr = extractFrameAndTickRate(node, errorHandler);\r\n\r\n        this.effectiveFrameRate = frtr.effectiveFrameRate;\r\n\r\n        this.tickRate = frtr.tickRate;\r\n\r\n        /* extract aspect ratio */\r\n\r\n        this.aspectRatio = extractAspectRatio(node, errorHandler);\r\n\r\n        /* check timebase */\r\n\r\n        var attr = findAttribute(node, imscNames.ns_ttp, \"timeBase\");\r\n\r\n        if (attr !== null && attr !== \"media\") {\r\n\r\n            reportFatal(errorHandler, \"Unsupported time base\");\r\n\r\n        }\r\n\r\n        /* retrieve extent */\r\n\r\n        var e = extractExtent(node, errorHandler);\r\n\r\n        if (e === null) {\r\n\r\n            /* TODO: remove once unit tests are ready */\r\n\r\n            this.pxDimensions = {'h': 480, 'w': 640};\r\n\r\n        } else {\r\n\r\n            if (e.h.unit !== \"px\" || e.w.unit !== \"px\") {\r\n                reportFatal(errorHandler, \"Extent on TT must be in px or absent\");\r\n            }\r\n\r\n            this.pxDimensions = {'h': e.h.value, 'w': e.w.value};\r\n        }\r\n\r\n    };\r\n\r\n    /* register a temporal events */\r\n    TT.prototype._registerEvent = function (elem) {\r\n\r\n        /* skip if begin is not < then end */\r\n\r\n        if (elem.end <= elem.begin)\r\n            return;\r\n\r\n        /* index the begin time of the event */\r\n\r\n        var b_i = indexOf(this.events, elem.begin);\r\n\r\n        if (!b_i.found) {\r\n            this.events.splice(b_i.index, 0, elem.begin);\r\n        }\r\n\r\n        /* index the end time of the event */\r\n\r\n        if (elem.end !== Number.POSITIVE_INFINITY) {\r\n\r\n            var e_i = indexOf(this.events, elem.end);\r\n\r\n            if (!e_i.found) {\r\n                this.events.splice(e_i.index, 0, elem.end);\r\n            }\r\n\r\n        }\r\n\r\n    };\r\n\r\n\r\n    /*\r\n     * Retrieves the range of ISD times covered by the document\r\n     * \r\n     * @returns {Array} Array of two elements: min_begin_time and max_begin_time\r\n     * \r\n     */\r\n    TT.prototype.getMediaTimeRange = function () {\r\n\r\n        return [this.events[0], this.events[this.events.length - 1]];\r\n    };\r\n\r\n    /*\r\n     * Returns list of ISD begin times  \r\n     * \r\n     * @returns {Array}\r\n     */\r\n    TT.prototype.getMediaTimeEvents = function () {\r\n\r\n        return this.events;\r\n    };\r\n\r\n    /*\r\n     * Represents a TTML Head element\r\n     */\r\n\r\n    function Head() {\r\n        this.styling = null;\r\n        this.layout = null;\r\n    }\r\n\r\n    /*\r\n     * Represents a TTML Styling element\r\n     */\r\n\r\n    function Styling() {\r\n        this.styles = {};\r\n    }\r\n\r\n    /*\r\n     * Represents a TTML Style element\r\n     */\r\n\r\n    function Style() {\r\n        this.id = null;\r\n        this.styleAttrs = null;\r\n        this.styleRefs = null;\r\n    }\r\n\r\n    Style.prototype.initFromNode = function (node, errorHandler) {\r\n        this.id = elementGetXMLID(node);\r\n        this.styleAttrs = elementGetStyles(node, errorHandler);\r\n        this.styleRefs = elementGetStyleRefs(node);\r\n    };\r\n\r\n    /*\r\n     * Represents a TTML Layout element\r\n     * \r\n     */\r\n\r\n    function Layout() {\r\n        this.regions = {};\r\n    }\r\n\r\n    /*\r\n     * TTML element utility functions\r\n     * \r\n     */\r\n\r\n    function ContentElement(kind) {\r\n        this.kind = kind;\r\n    }\r\n\r\n    function IdentifiedElement(id) {\r\n        this.id = id;\r\n    }\r\n\r\n    IdentifiedElement.prototype.initFromNode = function (doc, parent, node, errorHandler) {\r\n        this.id = elementGetXMLID(node);\r\n    };\r\n\r\n    function LayoutElement(id) {\r\n        this.regionID = id;\r\n    }\r\n\r\n    LayoutElement.prototype.initFromNode = function (doc, parent, node, errorHandler) {\r\n        this.regionID = elementGetRegionID(node);\r\n    };\r\n\r\n    function StyledElement(styleAttrs) {\r\n        this.styleAttrs = styleAttrs;\r\n    }\r\n\r\n    StyledElement.prototype.initFromNode = function (doc, parent, node, errorHandler) {\r\n\r\n        this.styleAttrs = elementGetStyles(node, errorHandler);\r\n\r\n        if (doc.head !== null && doc.head.styling !== null) {\r\n            mergeReferencedStyles(doc.head.styling, elementGetStyleRefs(node), this.styleAttrs, errorHandler);\r\n        }\r\n\r\n    };\r\n\r\n    function AnimatedElement(sets) {\r\n        this.sets = sets;\r\n    }\r\n\r\n    AnimatedElement.prototype.initFromNode = function (doc, parent, node, errorHandler) {\r\n        this.sets = [];\r\n    };\r\n\r\n    function ContainerElement(contents) {\r\n        this.contents = contents;\r\n    }\r\n\r\n    ContainerElement.prototype.initFromNode = function (doc, parent, node, errorHandler) {\r\n        this.contents = [];\r\n    };\r\n\r\n    function TimedElement(explicit_begin, explicit_end, explicit_dur) {\r\n        this.explicit_begin = explicit_begin;\r\n        this.explicit_end = explicit_end;\r\n        this.explicit_dur = explicit_dur;\r\n    }\r\n\r\n    TimedElement.prototype.initFromNode = function (doc, parent, node, errorHandler) {\r\n        var t = processTiming(doc, parent, node, errorHandler);\r\n        this.explicit_begin = t.explicit_begin;\r\n        this.explicit_end = t.explicit_end;\r\n        this.explicit_dur = t.explicit_dur;\r\n\r\n        this.timeContainer = elementGetTimeContainer(node, errorHandler);\r\n    };\r\n\r\n\r\n    /*\r\n     * Represents a TTML body element\r\n     */\r\n\r\n\r\n\r\n    function Body() {\r\n        ContentElement.call(this, 'body');\r\n    }\r\n\r\n\r\n    Body.prototype.initFromNode = function (doc, node, errorHandler) {\r\n        StyledElement.prototype.initFromNode.call(this, doc, null, node, errorHandler);\r\n        TimedElement.prototype.initFromNode.call(this, doc, null, node, errorHandler);\r\n        AnimatedElement.prototype.initFromNode.call(this, doc, null, node, errorHandler);\r\n        LayoutElement.prototype.initFromNode.call(this, doc, null, node, errorHandler);\r\n        ContainerElement.prototype.initFromNode.call(this, doc, null, node, errorHandler);\r\n    };\r\n\r\n    /*\r\n     * Represents a TTML div element\r\n     */\r\n\r\n    function Div() {\r\n        ContentElement.call(this, 'div');\r\n    }\r\n\r\n    Div.prototype.initFromNode = function (doc, parent, node, errorHandler) {\r\n        StyledElement.prototype.initFromNode.call(this, doc, parent, node, errorHandler);\r\n        TimedElement.prototype.initFromNode.call(this, doc, parent, node, errorHandler);\r\n        AnimatedElement.prototype.initFromNode.call(this, doc, parent, node, errorHandler);\r\n        LayoutElement.prototype.initFromNode.call(this, doc, parent, node, errorHandler);\r\n        ContainerElement.prototype.initFromNode.call(this, doc, parent, node, errorHandler);\r\n    };\r\n\r\n    /*\r\n     * Represents a TTML p element\r\n     */\r\n\r\n    function P() {\r\n        ContentElement.call(this, 'p');\r\n    }\r\n\r\n    P.prototype.initFromNode = function (doc, parent, node, errorHandler) {\r\n        StyledElement.prototype.initFromNode.call(this, doc, parent, node, errorHandler);\r\n        TimedElement.prototype.initFromNode.call(this, doc, parent, node, errorHandler);\r\n        AnimatedElement.prototype.initFromNode.call(this, doc, parent, node, errorHandler);\r\n        LayoutElement.prototype.initFromNode.call(this, doc, parent, node, errorHandler);\r\n        ContainerElement.prototype.initFromNode.call(this, doc, parent, node, errorHandler);\r\n    };\r\n\r\n    /*\r\n     * Represents a TTML span element\r\n     */\r\n\r\n    function Span() {\r\n        ContentElement.call(this, 'span');\r\n    }\r\n\r\n    Span.prototype.initFromNode = function (doc, parent, node, xmlspace, errorHandler) {\r\n        StyledElement.prototype.initFromNode.call(this, doc, parent, node, errorHandler);\r\n        TimedElement.prototype.initFromNode.call(this, doc, parent, node, errorHandler);\r\n        AnimatedElement.prototype.initFromNode.call(this, doc, parent, node, errorHandler);\r\n        LayoutElement.prototype.initFromNode.call(this, doc, parent, node, errorHandler);\r\n        ContainerElement.prototype.initFromNode.call(this, doc, parent, node, errorHandler);\r\n\r\n        this.space = xmlspace;\r\n    };\r\n\r\n    /*\r\n     * Represents a TTML anonymous span element\r\n     */\r\n\r\n    function AnonymousSpan() {\r\n        ContentElement.call(this, 'span');\r\n    }\r\n\r\n    AnonymousSpan.prototype.initFromText = function (doc, parent, text, xmlspace, errorHandler) {\r\n        TimedElement.prototype.initFromNode.call(this, doc, parent, null, errorHandler);\r\n\r\n        this.text = text;\r\n        this.space = xmlspace;\r\n    };\r\n\r\n    /*\r\n     * Represents a TTML br element\r\n     */\r\n\r\n    function Br() {\r\n        ContentElement.call(this, 'br');\r\n    }\r\n\r\n    Br.prototype.initFromNode = function (doc, parent, node, errorHandler) {\r\n        LayoutElement.prototype.initFromNode.call(this, doc, parent, node, errorHandler);\r\n        TimedElement.prototype.initFromNode.call(this, doc, parent, node, errorHandler);\r\n    };\r\n\r\n    /*\r\n     * Represents a TTML Region element\r\n     * \r\n     */\r\n\r\n    function Region() {\r\n    }\r\n\r\n    Region.prototype.createDefaultRegion = function () {\r\n        var r = new Region();\r\n\r\n        IdentifiedElement.call(r, '');\r\n        StyledElement.call(r, {});\r\n        AnimatedElement.call(r, []);\r\n        TimedElement.call(r, 0, Number.POSITIVE_INFINITY, null);\r\n\r\n        return r;\r\n    };\r\n\r\n    Region.prototype.initFromNode = function (doc, node, errorHandler) {\r\n        IdentifiedElement.prototype.initFromNode.call(this, doc, null, node, errorHandler);\r\n        StyledElement.prototype.initFromNode.call(this, doc, null, node, errorHandler);\r\n        TimedElement.prototype.initFromNode.call(this, doc, null, node, errorHandler);\r\n        AnimatedElement.prototype.initFromNode.call(this, doc, null, node, errorHandler);\r\n\r\n        /* immediately merge referenced styles */\r\n\r\n        if (doc.head !== null && doc.head.styling !== null) {\r\n            mergeReferencedStyles(doc.head.styling, elementGetStyleRefs(node), this.styleAttrs, errorHandler);\r\n        }\r\n\r\n    };\r\n\r\n    /*\r\n     * Represents a TTML Set element\r\n     * \r\n     */\r\n\r\n    function Set() {\r\n    }\r\n\r\n    Set.prototype.initFromNode = function (doc, parent, node, errorHandler) {\r\n\r\n        TimedElement.prototype.initFromNode.call(this, doc, parent, node, errorHandler);\r\n\r\n        var styles = elementGetStyles(node, errorHandler);\r\n\r\n        this.qname = null;\r\n        this.value = null;\r\n\r\n        for (var qname in styles) {\r\n\r\n            if (this.qname) {\r\n\r\n                reportError(errorHandler, \"More than one style specified on set\");\r\n                break;\r\n\r\n            }\r\n\r\n            this.qname = qname;\r\n            this.value = styles[qname];\r\n\r\n        }\r\n\r\n    };\r\n\r\n    /*\r\n     * Utility functions\r\n     * \r\n     */\r\n\r\n\r\n    function elementGetXMLID(node) {\r\n        return node && 'xml:id' in node.attributes ? node.attributes['xml:id'].value || null : null;\r\n    }\r\n\r\n    function elementGetRegionID(node) {\r\n        return node && 'region' in node.attributes ? node.attributes.region.value : '';\r\n    }\r\n\r\n    function elementGetTimeContainer(node, errorHandler) {\r\n\r\n        var tc = node && 'timeContainer' in node.attributes ? node.attributes.timeContainer.value : null;\r\n\r\n        if ((!tc) || tc === \"par\") {\r\n\r\n            return \"par\";\r\n\r\n        } else if (tc === \"seq\") {\r\n\r\n            return \"seq\";\r\n\r\n        } else {\r\n\r\n            reportError(errorHandler, \"Illegal value of timeContainer (assuming 'par')\");\r\n\r\n            return \"par\";\r\n\r\n        }\r\n\r\n    }\r\n\r\n    function elementGetStyleRefs(node) {\r\n\r\n        return node && 'style' in node.attributes ? node.attributes.style.value.split(\" \") : [];\r\n\r\n    }\r\n\r\n    function elementGetStyles(node, errorHandler) {\r\n\r\n        var s = {};\r\n\r\n        if (node !== null) {\r\n\r\n            for (var i in node.attributes) {\r\n\r\n                var qname = node.attributes[i].uri + \" \" + node.attributes[i].local;\r\n\r\n                var sa = imscStyles.byQName[qname];\r\n\r\n                if (sa !== undefined) {\r\n\r\n                    var val = sa.parse(node.attributes[i].value);\r\n\r\n                    if (val !== null) {\r\n\r\n                        s[qname] = val;\r\n\r\n                        /* TODO: consider refactoring errorHandler into parse and compute routines */\r\n\r\n                        if (sa === imscStyles.byName.zIndex) {\r\n                            reportWarning(errorHandler, \"zIndex attribute present but not used by IMSC1 since regions do not overlap\");\r\n                        }\r\n\r\n                    } else {\r\n\r\n                        reportError(errorHandler, \"Cannot parse styling attribute \" + qname + \" --> \" + node.attributes[i].value);\r\n\r\n                    }\r\n\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n\r\n        return s;\r\n    }\r\n\r\n    function findAttribute(node, ns, name) {\r\n        for (var i in node.attributes) {\r\n\r\n            if (node.attributes[i].uri === ns &&\r\n                    node.attributes[i].local === name) {\r\n\r\n                return node.attributes[i].value;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    function extractAspectRatio(node, errorHandler) {\r\n\r\n        var ar = findAttribute(node, imscNames.ns_ittp, \"aspectRatio\");\r\n\r\n        var rslt = null;\r\n\r\n        if (ar !== null) {\r\n\r\n            var ASPECT_RATIO_RE = /(\\d+) (\\d+)/;\r\n\r\n            var m = ASPECT_RATIO_RE.exec(ar);\r\n\r\n            if (m !== null) {\r\n\r\n                var w = parseInt(m[1]);\r\n\r\n                var h = parseInt(m[2]);\r\n\r\n                if (w !== 0 && h !== 0) {\r\n\r\n                    rslt = w / h;\r\n\r\n                } else {\r\n\r\n                    reportError(errorHandler, \"Illegal aspectRatio values (ignoring)\");\r\n                }\r\n\r\n            } else {\r\n\r\n                reportError(errorHandler, \"Malformed aspectRatio attribute (ignoring)\");\r\n            }\r\n\r\n        }\r\n\r\n        return rslt;\r\n\r\n    }\r\n\r\n    /*\r\n     * Returns the cellResolution attribute from a node\r\n     * \r\n     */\r\n    function extractCellResolution(node, errorHandler) {\r\n\r\n        var cr = findAttribute(node, imscNames.ns_ttp, \"cellResolution\");\r\n\r\n        // initial value\r\n\r\n        var h = 15;\r\n        var w = 32;\r\n\r\n        if (cr !== null) {\r\n\r\n            var CELL_RESOLUTION_RE = /(\\d+) (\\d+)/;\r\n\r\n            var m = CELL_RESOLUTION_RE.exec(cr);\r\n\r\n            if (m !== null) {\r\n\r\n                w = parseInt(m[1]);\r\n\r\n                h = parseInt(m[2]);\r\n\r\n            } else {\r\n\r\n                reportWarning(errorHandler, \"Malformed cellResolution value (using initial value instead)\");\r\n\r\n            }\r\n\r\n        }\r\n\r\n        return {'w': w, 'h': h};\r\n\r\n    }\r\n\r\n\r\n    function extractFrameAndTickRate(node, errorHandler) {\r\n\r\n        // subFrameRate is ignored per IMSC1 specification\r\n\r\n        // extract frame rate\r\n\r\n        var fps_attr = findAttribute(node, imscNames.ns_ttp, \"frameRate\");\r\n\r\n        // initial value\r\n\r\n        var fps = 30;\r\n\r\n        // match variable\r\n\r\n        var m;\r\n\r\n        if (fps_attr !== null) {\r\n\r\n            var FRAME_RATE_RE = /(\\d+)/;\r\n\r\n            m = FRAME_RATE_RE.exec(fps_attr);\r\n\r\n            if (m !== null) {\r\n\r\n                fps = parseInt(m[1]);\r\n\r\n            } else {\r\n\r\n                reportWarning(errorHandler, \"Malformed frame rate attribute (using initial value instead)\");\r\n            }\r\n\r\n        }\r\n\r\n        // extract frame rate multiplier\r\n\r\n        var frm_attr = findAttribute(node, imscNames.ns_ttp, \"frameRateMultiplier\");\r\n\r\n        // initial value\r\n\r\n        var frm = 1;\r\n\r\n        if (frm_attr !== null) {\r\n\r\n            var FRAME_RATE_MULT_RE = /(\\d+) (\\d+)/;\r\n\r\n            m = FRAME_RATE_MULT_RE.exec(frm_attr);\r\n\r\n            if (m !== null) {\r\n\r\n                frm = parseInt(m[1]) / parseInt(m[2]);\r\n\r\n            } else {\r\n\r\n                reportWarning(errorHandler, \"Malformed frame rate multiplier attribute (using initial value instead)\");\r\n            }\r\n\r\n        }\r\n\r\n        var efps = frm * fps;\r\n\r\n        // extract tick rate\r\n\r\n        var tr = 1;\r\n\r\n        var trattr = findAttribute(node, imscNames.ns_ttp, \"tickRate\");\r\n\r\n        if (trattr === null) {\r\n\r\n            if (fps_attr !== null)\r\n                tr = efps;\r\n\r\n        } else {\r\n\r\n            var TICK_RATE_RE = /(\\d+)/;\r\n\r\n            m = TICK_RATE_RE.exec(trattr);\r\n\r\n            if (m !== null) {\r\n\r\n                tr = parseInt(m[1]);\r\n\r\n            } else {\r\n\r\n                reportWarning(errorHandler, \"Malformed tick rate attribute (using initial value instead)\");\r\n            }\r\n\r\n        }\r\n\r\n        return {effectiveFrameRate: efps, tickRate: tr};\r\n\r\n    }\r\n\r\n    function extractExtent(node, errorHandler) {\r\n\r\n        var attr = findAttribute(node, imscNames.ns_tts, \"extent\");\r\n\r\n        if (attr === null)\r\n            return null;\r\n\r\n        var s = attr.split(\" \");\r\n\r\n        if (s.length !== 2) {\r\n\r\n            reportWarning(errorHandler, \"Malformed extent (ignoring)\");\r\n\r\n            return null;\r\n        }\r\n\r\n        var w = imscUtils.parseLength(s[0]);\r\n\r\n        var h = imscUtils.parseLength(s[1]);\r\n\r\n        if (!h || !w) {\r\n\r\n            reportWarning(errorHandler, \"Malformed extent values (ignoring)\");\r\n\r\n            return null;\r\n        }\r\n\r\n        return {'h': h, 'w': w};\r\n\r\n    }\r\n\r\n    function parseTimeExpression(tickRate, effectiveFrameRate, str) {\r\n\r\n        var CLOCK_TIME_FRACTION_RE = /^(\\d{2,}):(\\d\\d):(\\d\\d(?:\\.\\d+)?)$/;\r\n        var CLOCK_TIME_FRAMES_RE = /^(\\d{2,}):(\\d\\d):(\\d\\d)\\:(\\d{2,})$/;\r\n        var OFFSET_FRAME_RE = /^(\\d+(?:\\.\\d+)?)f$/;\r\n        var OFFSET_TICK_RE = /^(\\d+(?:\\.\\d+)?)t$/;\r\n        var OFFSET_MS_RE = /^(\\d+(?:\\.\\d+)?)ms$/;\r\n        var OFFSET_S_RE = /^(\\d+(?:\\.\\d+)?)s$/;\r\n        var OFFSET_H_RE = /^(\\d+(?:\\.\\d+)?)h$/;\r\n        var OFFSET_M_RE = /^(\\d+(?:\\.\\d+)?)m$/;\r\n        var m;\r\n        var r = null;\r\n        if ((m = OFFSET_FRAME_RE.exec(str)) !== null) {\r\n\r\n            if (effectiveFrameRate !== null) {\r\n\r\n                r = parseFloat(m[1]) / effectiveFrameRate;\r\n            }\r\n\r\n        } else if ((m = OFFSET_TICK_RE.exec(str)) !== null) {\r\n\r\n            if (tickRate !== null) {\r\n\r\n                r = parseFloat(m[1]) / tickRate;\r\n            }\r\n\r\n        } else if ((m = OFFSET_MS_RE.exec(str)) !== null) {\r\n\r\n            r = parseFloat(m[1]) / 1000.0;\r\n\r\n        } else if ((m = OFFSET_S_RE.exec(str)) !== null) {\r\n\r\n            r = parseFloat(m[1]);\r\n\r\n        } else if ((m = OFFSET_H_RE.exec(str)) !== null) {\r\n\r\n            r = parseFloat(m[1]) * 3600.0;\r\n\r\n        } else if ((m = OFFSET_M_RE.exec(str)) !== null) {\r\n\r\n            r = parseFloat(m[1]) * 60.0;\r\n\r\n        } else if ((m = CLOCK_TIME_FRACTION_RE.exec(str)) !== null) {\r\n\r\n            r = parseInt(m[1]) * 3600 +\r\n                    parseInt(m[2]) * 60 +\r\n                    parseFloat(m[3]);\r\n\r\n        } else if ((m = CLOCK_TIME_FRAMES_RE.exec(str)) !== null) {\r\n\r\n            /* this assumes that HH:MM:SS is a clock-time-with-fraction */\r\n\r\n            if (effectiveFrameRate !== null) {\r\n\r\n                r = parseInt(m[1]) * 3600 +\r\n                        parseInt(m[2]) * 60 +\r\n                        parseInt(m[3]) +\r\n                        (m[4] === null ? 0 : parseInt(m[4]) / effectiveFrameRate);\r\n            }\r\n\r\n        }\r\n\r\n        return r;\r\n    }\r\n\r\n    function processTiming(doc, parent, node, errorHandler) {\r\n\r\n        /* determine explicit begin */\r\n\r\n        var explicit_begin = null;\r\n\r\n        if (node && 'begin' in node.attributes) {\r\n\r\n            explicit_begin = parseTimeExpression(doc.tickRate, doc.effectiveFrameRate, node.attributes.begin.value);\r\n\r\n            if (explicit_begin === null) {\r\n\r\n                reportWarning(errorHandler, \"Malformed begin value \" + node.attributes.begin.value + \" (using 0)\");\r\n\r\n            }\r\n\r\n        }\r\n\r\n        /* determine explicit duration */\r\n\r\n        var explicit_dur = null;\r\n\r\n        if (node && 'dur' in node.attributes) {\r\n\r\n            explicit_dur = parseTimeExpression(doc.tickRate, doc.effectiveFrameRate, node.attributes.dur.value);\r\n\r\n            if (explicit_dur === null) {\r\n\r\n                reportWarning(errorHandler, \"Malformed dur value \" + node.attributes.dur.value + \" (ignoring)\");\r\n\r\n            }\r\n\r\n        }\r\n\r\n        /* determine explicit end */\r\n\r\n        var explicit_end = null;\r\n\r\n        if (node && 'end' in node.attributes) {\r\n\r\n            explicit_end = parseTimeExpression(doc.tickRate, doc.effectiveFrameRate, node.attributes.end.value);\r\n\r\n            if (explicit_end === null) {\r\n\r\n                reportWarning(errorHandler, \"Malformed end value (ignoring)\");\r\n\r\n            }\r\n\r\n        }\r\n\r\n        return {explicit_begin: explicit_begin,\r\n            explicit_end: explicit_end,\r\n            explicit_dur: explicit_dur};\r\n\r\n    }\r\n\r\n\r\n\r\n    function mergeChainedStyles(styling, style, errorHandler) {\r\n\r\n        while (style.styleRefs.length > 0) {\r\n\r\n            var sref = style.styleRefs.pop();\r\n\r\n            if (!(sref in styling.styles)) {\r\n                reportError(errorHandler, \"Non-existant style id referenced\");\r\n                continue;\r\n            }\r\n\r\n            mergeChainedStyles(styling, styling.styles[sref], errorHandler);\r\n\r\n            mergeStylesIfNotPresent(styling.styles[sref].styleAttrs, style.styleAttrs);\r\n\r\n        }\r\n\r\n    }\r\n\r\n    function mergeReferencedStyles(styling, stylerefs, styleattrs, errorHandler) {\r\n\r\n        for (var i = stylerefs.length - 1; i >= 0; i--) {\r\n\r\n            var sref = stylerefs[i];\r\n\r\n            if (!(sref in styling.styles)) {\r\n                reportError(errorHandler, \"Non-existant style id referenced\");\r\n                continue;\r\n            }\r\n\r\n            mergeStylesIfNotPresent(styling.styles[sref].styleAttrs, styleattrs);\r\n\r\n        }\r\n\r\n    }\r\n\r\n    function mergeStylesIfNotPresent(from_styles, into_styles) {\r\n\r\n        for (var sname in from_styles) {\r\n\r\n            if (sname in into_styles)\r\n                continue;\r\n\r\n            into_styles[sname] = from_styles[sname];\r\n\r\n        }\r\n\r\n    }\r\n\r\n    /* TODO: validate style format at parsing */\r\n\r\n\r\n    /*\r\n     * ERROR HANDLING UTILITY FUNCTIONS\r\n     * \r\n     */\r\n\r\n    function reportInfo(errorHandler, msg) {\r\n\r\n        if (errorHandler && errorHandler.info && errorHandler.info(msg))\r\n            throw msg;\r\n\r\n    }\r\n\r\n    function reportWarning(errorHandler, msg) {\r\n\r\n        if (errorHandler && errorHandler.warn && errorHandler.warn(msg))\r\n            throw msg;\r\n\r\n    }\r\n\r\n    function reportError(errorHandler, msg) {\r\n\r\n        if (errorHandler && errorHandler.error && errorHandler.error(msg))\r\n            throw msg;\r\n\r\n    }\r\n\r\n    function reportFatal(errorHandler, msg) {\r\n\r\n        if (errorHandler && errorHandler.fatal)\r\n            errorHandler.fatal(msg);\r\n\r\n        throw msg;\r\n\r\n    }\r\n\r\n    /*\r\n     * Binary search utility function\r\n     * \r\n     * @typedef {Object} BinarySearchResult\r\n     * @property {boolean} found Was an exact match found?\r\n     * @property {number} index Position of the exact match or insert position\r\n     * \r\n     * @returns {BinarySearchResult}\r\n     */\r\n\r\n    function indexOf(arr, searchval) {\r\n\r\n        var min = 0;\r\n        var max = arr.length - 1;\r\n        var cur;\r\n\r\n        while (min <= max) {\r\n\r\n            cur = Math.floor((min + max) / 2);\r\n\r\n            var curval = arr[cur];\r\n\r\n            if (curval < searchval) {\r\n\r\n                min = cur + 1;\r\n\r\n            } else if (curval > searchval) {\r\n\r\n                max = cur - 1;\r\n\r\n            } else {\r\n\r\n                return {found: true, index: cur};\r\n\r\n            }\r\n\r\n        }\r\n\r\n        return {found: false, index: min};\r\n    }\r\n\r\n\r\n})(typeof exports === 'undefined' ? this.imscDoc = {} : exports,\r\n        typeof sax === 'undefined' ? require(41) : sax,\r\n        typeof imscNames === 'undefined' ? require(17) : imscNames,\r\n        typeof imscStyles === 'undefined' ? require(18) : imscStyles,\r\n        typeof imscUtils === 'undefined' ? require(19) : imscUtils);\r\n","/* \r\n * Copyright (c) 2016, Pierre-Anthony Lemieux <pal@sandflow.com>\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *\r\n * * Redistributions of source code must retain the above copyright notice, this\r\n *   list of conditions and the following disclaimer.\r\n * * Redistributions in binary form must reproduce the above copyright notice,\r\n *   this list of conditions and the following disclaimer in the documentation\r\n *   and/or other materials provided with the distribution.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\r\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n * POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n/**\r\n * @module imscHTML\r\n */\r\n\r\n;\r\n(function (imscHTML, imscNames, imscStyles) {\r\n\r\n    /**\r\n     * Function that maps <pre>smpte:background</pre> URIs to URLs resolving to image resource\r\n     * @callback IMGResolver\r\n     * @param {string} <pre>smpte:background</pre> URI\r\n     * @return {string} PNG resource URL\r\n     */\r\n\r\n\r\n    /**\r\n     * Renders an ISD object (returned by <pre>generateISD()</pre>) into a \r\n     * parent element, that must be attached to the DOM. The ISD will be rendered\r\n     * into a child <pre>div</pre>\r\n     * with heigh and width equal to the clientHeight and clientWidth of the element,\r\n     * unless explicitly specified otherwise by the caller. Images URIs specified \r\n     * by <pre>smpte:background</pre> attributes are mapped to image resource URLs\r\n     * by an <pre>imgResolver</pre> function. The latter takes the value of <code>smpte:background</code>\r\n     * attribute and an <code>img</code> DOM element as input, and is expected to\r\n     * set the <code>src</code> attribute of the <code>img</code> to the absolute URI of the image.\r\n     * <pre>displayForcedOnlyMode</pre> sets the (boolean)\r\n     * value of the IMSC1 displayForcedOnlyMode parameter. The function returns\r\n     * an opaque object that should passed in <code>previousISDState</code> when this function\r\n     * is called for the next ISD, otherwise <code>previousISDState</code> should be set to \r\n     * <code>null</code>.\r\n     * \r\n     * @param {Object} isd ISD to be rendered\r\n     * @param {Object} element Element into which the ISD is rendered\r\n     * @param {?IMGResolver} imgResolver Resolve <pre>smpte:background</pre> URIs into URLs.\r\n     * @param {?number} eheight Height (in pixel) of the child <div>div</div> or null \r\n     *                  to use clientHeight of the parent element\r\n     * @param {?number} ewidth Width (in pixel) of the child <div>div</div> or null\r\n     *                  to use clientWidth of the parent element\r\n     * @param {?boolean} displayForcedOnlyMode Value of the IMSC1 displayForcedOnlyMode parameter,\r\n     *                   or false if null         \r\n     * @param {?module:imscUtils.ErrorHandler} errorHandler Error callback\r\n     * @param {Object} previousISDState State saved during processing of the previous ISD, or null if initial call\r\n     * @param {?boolean} enableRollUp Enables roll-up animations (see CEA 708)\r\n     * @return {Object} ISD state to be provided when this funtion is called for the next ISD\r\n     */\r\n\r\n    imscHTML.render = function (isd,\r\n        element,\r\n        imgResolver,\r\n        eheight,\r\n        ewidth,\r\n        displayForcedOnlyMode,\r\n        errorHandler,\r\n        previousISDState,\r\n        enableRollUp\r\n        ) {\r\n\r\n        /* maintain aspect ratio if specified */\r\n\r\n        var height = eheight || element.clientHeight;\r\n        var width = ewidth || element.clientWidth;\r\n\r\n        if (isd.aspectRatio !== null) {\r\n\r\n            var twidth = height * isd.aspectRatio;\r\n\r\n            if (twidth > width) {\r\n\r\n                height = Math.round(width / isd.aspectRatio);\r\n\r\n            } else {\r\n\r\n                width = twidth;\r\n\r\n            }\r\n\r\n        }\r\n\r\n        var rootcontainer = document.createElement(\"div\");\r\n\r\n        rootcontainer.style.position = \"relative\";\r\n        rootcontainer.style.width = width + \"px\";\r\n        rootcontainer.style.height = height + \"px\";\r\n        rootcontainer.style.margin = \"auto\";\r\n        rootcontainer.style.top = 0;\r\n        rootcontainer.style.bottom = 0;\r\n        rootcontainer.style.left = 0;\r\n        rootcontainer.style.right = 0;\r\n        rootcontainer.style.zIndex = 0;\r\n\r\n        var context = {\r\n            h: height,\r\n            w: width,\r\n            regionH: null,\r\n            regionW: null,\r\n            imgResolver: imgResolver,\r\n            displayForcedOnlyMode: displayForcedOnlyMode || false,\r\n            isd: isd,\r\n            errorHandler: errorHandler,\r\n            previousISDState: previousISDState,\r\n            enableRollUp: enableRollUp || false,\r\n            currentISDState: {},\r\n            flg: null, /* current fillLineGap value if active, null otherwise */\r\n            lp: null, /* current linePadding value if active, null otherwise */\r\n            mra: null, /* current multiRowAlign value if active, null otherwise */\r\n            ipd: null, /* inline progression direction (lr, rl, tb) */\r\n            bpd: null /* block progression direction (lr, rl, tb) */\r\n        };\r\n\r\n        element.appendChild(rootcontainer);\r\n\r\n        for (var i in isd.contents) {\r\n\r\n            processElement(context, rootcontainer, isd.contents[i]);\r\n\r\n        }\r\n\r\n        return context.currentISDState;\r\n\r\n    };\r\n\r\n    function processElement(context, dom_parent, isd_element) {\r\n\r\n        var e;\r\n\r\n        if (isd_element.kind === 'region') {\r\n\r\n            e = document.createElement(\"div\");\r\n            e.style.position = \"absolute\";\r\n\r\n        } else if (isd_element.kind === 'body') {\r\n\r\n            e = document.createElement(\"div\");\r\n\r\n        } else if (isd_element.kind === 'div') {\r\n\r\n            e = document.createElement(\"div\");\r\n\r\n        } else if (isd_element.kind === 'p') {\r\n\r\n            e = document.createElement(\"p\");\r\n\r\n        } else if (isd_element.kind === 'span') {\r\n\r\n            e = document.createElement(\"span\");\r\n\r\n            //e.textContent = isd_element.text;\r\n\r\n        } else if (isd_element.kind === 'br') {\r\n\r\n            e = document.createElement(\"br\");\r\n\r\n        }\r\n\r\n        if (!e) {\r\n\r\n            reportError(context.errorHandler, \"Error processing ISD element kind: \" + isd_element.kind);\r\n\r\n            return;\r\n\r\n        }\r\n\r\n        /* override UA default margin */\r\n        /* TODO: should apply to <p> only */\r\n\r\n        e.style.margin = \"0\";\r\n\r\n        /* tranform TTML styles to CSS styles */\r\n\r\n        for (var i in STYLING_MAP_DEFS) {\r\n\r\n            var sm = STYLING_MAP_DEFS[i];\r\n\r\n            var attr = isd_element.styleAttrs[sm.qname];\r\n\r\n            if (attr !== undefined && sm.map !== null) {\r\n\r\n                sm.map(context, e, isd_element, attr);\r\n\r\n            }\r\n\r\n        }\r\n\r\n        var proc_e = e;\r\n\r\n        /* remember writing direction */\r\n\r\n        if (isd_element.kind === \"region\") {\r\n\r\n            var wdir = isd_element.styleAttrs[imscStyles.byName.writingMode.qname];\r\n\r\n            if (wdir === \"lrtb\" || wdir === \"lr\") {\r\n\r\n                context.ipd = \"lr\";\r\n                context.bpd = \"tb\";\r\n\r\n            } else if (wdir === \"rltb\" || wdir === \"rl\") {\r\n\r\n                context.ipd = \"rl\";\r\n                context.bpd = \"tb\";\r\n\r\n            } else if (wdir === \"tblr\") {\r\n\r\n                context.ipd = \"tb\";\r\n                context.bpd = \"lr\";\r\n\r\n            } else if (wdir === \"tbrl\" || wdir === \"tb\") {\r\n\r\n                context.ipd = \"tb\";\r\n                context.bpd = \"rl\";\r\n\r\n            }\r\n\r\n        }\r\n\r\n        /* do we have linePadding ? */\r\n\r\n        var lp = isd_element.styleAttrs[imscStyles.byName.linePadding.qname];\r\n\r\n        if (lp && lp > 0) {\r\n\r\n            /* apply padding to the <p> so that line padding does not cause line wraps */\r\n\r\n            var padmeasure = Math.ceil(lp * context.h) + \"px\";\r\n\r\n            if (context.bpd === \"tb\") {\r\n\r\n                proc_e.style.paddingLeft = padmeasure;\r\n                proc_e.style.paddingRight = padmeasure;\r\n\r\n            } else {\r\n\r\n                proc_e.style.paddingTop = padmeasure;\r\n                proc_e.style.paddingBottom = padmeasure;\r\n\r\n            }\r\n\r\n            context.lp = lp;\r\n        }\r\n\r\n        // do we have multiRowAlign?\r\n\r\n        var mra = isd_element.styleAttrs[imscStyles.byName.multiRowAlign.qname];\r\n\r\n        if (mra && mra !== \"auto\") {\r\n\r\n            /* create inline block to handle multirowAlign */\r\n\r\n            var s = document.createElement(\"span\");\r\n\r\n            s.style.display = \"inline-block\";\r\n\r\n            s.style.textAlign = mra;\r\n\r\n            e.appendChild(s);\r\n\r\n            proc_e = s;\r\n\r\n            context.mra = mra;\r\n\r\n        }\r\n\r\n        /* remember we are filling line gaps */\r\n\r\n        if (isd_element.styleAttrs[imscStyles.byName.fillLineGap.qname]) {\r\n            context.flg = true;\r\n        }\r\n\r\n\r\n        if (isd_element.kind === \"span\" && isd_element.text) {\r\n\r\n            if (context.lp || context.mra || context.flg) {\r\n\r\n                // wrap characters in spans to find the line wrap locations\r\n\r\n                var cbuf = '';\r\n\r\n                for (var j = 0; j < isd_element.text.length; j++) {\r\n\r\n                    cbuf += isd_element.text.charAt(j);\r\n\r\n                    var cc = isd_element.text.charCodeAt(j);\r\n\r\n                    if (cc < 0xD800 || cc > 0xDBFF || j === isd_element.text.length) {\r\n\r\n                        /* wrap the character(s) in a span unless it is a high surrogate */\r\n\r\n                        var span = document.createElement(\"span\");\r\n\r\n                        span.textContent = cbuf;\r\n    \r\n                        e.appendChild(span);\r\n\r\n                        cbuf = '';\r\n\r\n                    }\r\n\r\n                }\r\n\r\n            } else {\r\n\r\n                e.textContent = isd_element.text;\r\n\r\n            }\r\n        }\r\n\r\n        dom_parent.appendChild(e);\r\n\r\n        /* process the children of the ISD element */\r\n\r\n        for (var k in isd_element.contents) {\r\n\r\n            processElement(context, proc_e, isd_element.contents[k]);\r\n\r\n        }\r\n\r\n        /* list of lines */\r\n\r\n        var linelist = [];\r\n\r\n\r\n        /* paragraph processing */\r\n        /* TODO: linePadding only supported for horizontal scripts */\r\n\r\n        if ((context.lp || context.mra || context.flg) && isd_element.kind === \"p\") {\r\n\r\n            constructLineList(context, proc_e, linelist, null);\r\n\r\n            /* insert line breaks for multirowalign */\r\n\r\n            if (context.mra) {\r\n\r\n                applyMultiRowAlign(linelist);\r\n\r\n                context.mra = null;\r\n\r\n            }\r\n\r\n            /* add linepadding */\r\n\r\n            if (context.lp) {\r\n\r\n                applyLinePadding(linelist, context.lp * context.h, context);\r\n\r\n                context.lp = null;\r\n\r\n            }\r\n\r\n            /* fill line gaps linepadding */\r\n\r\n            if (context.flg) {\r\n\r\n                var par_edges = rect2edges(proc_e.getBoundingClientRect(), context);\r\n\r\n                applyFillLineGap(linelist, par_edges.before, par_edges.after, context);\r\n\r\n                context.flg = null;\r\n\r\n            }\r\n\r\n        }\r\n\r\n\r\n        /* region processing */\r\n\r\n        if (isd_element.kind === \"region\") {\r\n\r\n            /* build line list */\r\n\r\n            constructLineList(context, proc_e, linelist);\r\n\r\n            /* perform roll up if needed */\r\n\r\n            if ((context.bpd === \"tb\") &&\r\n                context.enableRollUp &&\r\n                isd_element.contents.length > 0 &&\r\n                isd_element.styleAttrs[imscStyles.byName.displayAlign.qname] === 'after') {\r\n\r\n                /* horrible hack, perhaps default region id should be underscore everywhere? */\r\n\r\n                var rid = isd_element.id === '' ? '_' : isd_element.id;\r\n\r\n                var rb = new RegionPBuffer(rid, linelist);\r\n\r\n                context.currentISDState[rb.id] = rb;\r\n\r\n                if (context.previousISDState &&\r\n                    rb.id in context.previousISDState &&\r\n                    context.previousISDState[rb.id].plist.length > 0 &&\r\n                    rb.plist.length > 1 &&\r\n                    rb.plist[rb.plist.length - 2].text ===\r\n                    context.previousISDState[rb.id].plist[context.previousISDState[rb.id].plist.length - 1].text) {\r\n\r\n                    var body_elem = e.firstElementChild;\r\n                    \r\n                    var h = rb.plist[rb.plist.length - 1].after - rb.plist[rb.plist.length - 1].before;\r\n\r\n                    body_elem.style.bottom = \"-\" + h + \"px\";\r\n                    body_elem.style.transition = \"transform 0.4s\";\r\n                    body_elem.style.position = \"relative\";\r\n                    body_elem.style.transform = \"translateY(-\" + h + \"px)\";\r\n\r\n                }\r\n\r\n            }\r\n\r\n            /* TODO: clean-up the spans ? */\r\n\r\n        }\r\n    }\r\n\r\n    function applyLinePadding(lineList, lp, context) {\r\n\r\n        for (var i in lineList) {\r\n\r\n            var l = lineList[i].elements.length;\r\n\r\n            var se = lineList[i].elements[lineList[i].start_elem];\r\n\r\n            var ee = lineList[i].elements[lineList[i].end_elem];\r\n\r\n            var pospadpxlen = Math.ceil(lp) + \"px\";\r\n\r\n            var negpadpxlen = \"-\" + Math.ceil(lp) + \"px\";\r\n\r\n            if (l !== 0) {\r\n\r\n                if (context.ipd === \"lr\") {\r\n\r\n                    se.node.style.borderLeftColor = se.bgcolor || \"#00000000\";\r\n                    se.node.style.borderLeftStyle = \"solid\";\r\n                    se.node.style.borderLeftWidth = pospadpxlen;\r\n                    se.node.style.marginLeft = negpadpxlen;\r\n\r\n                } else if (context.ipd === \"rl\") {\r\n\r\n                    se.node.style.borderRightColor = se.bgcolor || \"#00000000\";\r\n                    se.node.style.borderRightStyle = \"solid\";\r\n                    se.node.style.borderRightWidth = pospadpxlen;\r\n                    se.node.style.marginRight = negpadpxlen;\r\n\r\n                } else if (context.ipd === \"tb\") {\r\n\r\n                    se.node.style.borderTopColor = se.bgcolor || \"#00000000\";\r\n                    se.node.style.borderTopStyle = \"solid\";\r\n                    se.node.style.borderTopWidth = pospadpxlen;\r\n                    se.node.style.marginTop = negpadpxlen;\r\n\r\n                }\r\n\r\n                if (context.ipd === \"lr\") {\r\n\r\n                    ee.node.style.borderRightColor = ee.bgcolor  || \"#00000000\";\r\n                    ee.node.style.borderRightStyle = \"solid\";\r\n                    ee.node.style.borderRightWidth = pospadpxlen;\r\n                    ee.node.style.marginRight = negpadpxlen;\r\n\r\n                } else if (context.ipd === \"rl\") {\r\n\r\n                    ee.node.style.borderLeftColor = ee.bgcolor || \"#00000000\";\r\n                    ee.node.style.borderLeftStyle = \"solid\";\r\n                    ee.node.style.borderLeftWidth = pospadpxlen;\r\n                    ee.node.style.marginLeft = negpadpxlen;\r\n\r\n                } else if (context.ipd === \"tb\") {\r\n\r\n                    ee.node.style.borderBottomColor = ee.bgcolor || \"#00000000\";\r\n                    ee.node.style.borderBottomStyle = \"solid\";\r\n                    ee.node.style.borderBottomWidth = pospadpxlen;\r\n                    ee.node.style.marginBottom = negpadpxlen;\r\n\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    function applyMultiRowAlign(lineList) {\r\n\r\n        /* apply an explicit br to all but the last line */\r\n\r\n        for (var i = 0; i < lineList.length - 1; i++) {\r\n\r\n            var l = lineList[i].elements.length;\r\n\r\n            if (l !== 0 && lineList[i].br === false) {\r\n                var br = document.createElement(\"br\");\r\n\r\n                var lastnode = lineList[i].elements[l - 1].node;\r\n\r\n                lastnode.parentElement.insertBefore(br, lastnode.nextSibling);\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    function applyFillLineGap(lineList, par_before, par_after, context) {\r\n\r\n        /* positive for BPD = lr and tb, negative for BPD = rl */\r\n        var s = Math.sign(par_after - par_before);\r\n\r\n        for (var i = 0; i <= lineList.length; i++) {\r\n\r\n            /* compute frontier between lines */\r\n\r\n            var frontier;\r\n\r\n            if (i === 0) {\r\n\r\n                frontier = par_before;\r\n\r\n            } else if (i === lineList.length) {\r\n\r\n                frontier = par_after;\r\n\r\n            } else {\r\n\r\n                frontier = (lineList[i].before + lineList[i - 1].after) / 2;\r\n\r\n            }\r\n\r\n            /* padding amount */\r\n\r\n            var pad;\r\n\r\n            /* current element */\r\n\r\n            var e;\r\n\r\n            /* before line */\r\n\r\n            if (i > 0) {\r\n\r\n                for (var j = 0; j < lineList[i - 1].elements.length; j++) {\r\n\r\n                    if (lineList[i - 1].elements[j].bgcolor === null) continue;\r\n\r\n                    e = lineList[i - 1].elements[j];\r\n\r\n                    if (s * (e.after - frontier) < 0) {\r\n\r\n                        pad = Math.ceil(Math.abs(frontier - e.after)) + \"px\";\r\n\r\n                        e.node.style.backgroundColor = e.bgcolor;\r\n\r\n                        if (context.bpd === \"lr\") {\r\n\r\n                            e.node.style.paddingRight = pad;\r\n\r\n\r\n                        } else if (context.bpd === \"rl\") {\r\n\r\n                            e.node.style.paddingLeft = pad;\r\n\r\n                        } else if (context.bpd === \"tb\") {\r\n\r\n                            e.node.style.paddingBottom = pad;\r\n\r\n                        }\r\n\r\n                    }\r\n\r\n                }\r\n\r\n            }\r\n\r\n            /* after line */\r\n\r\n            if (i < lineList.length) {\r\n\r\n                for (var k = 0; k < lineList[i].elements.length; k++) {\r\n\r\n                    e = lineList[i].elements[k];\r\n\r\n                    if (e.bgcolor === null) continue;\r\n\r\n                    if (s * (e.before - frontier) > 0) {\r\n\r\n                        pad = Math.ceil(Math.abs(e.before - frontier)) + \"px\";\r\n\r\n                        e.node.style.backgroundColor = e.bgcolor;\r\n\r\n                        if (context.bpd === \"lr\") {\r\n\r\n                            e.node.style.paddingLeft = pad;\r\n\r\n\r\n                        } else if (context.bpd === \"rl\") {\r\n\r\n                            e.node.style.paddingRight = pad;\r\n\r\n\r\n                        } else if (context.bpd === \"tb\") {\r\n\r\n                            e.node.style.paddingTop = pad;\r\n\r\n                        }\r\n\r\n                    }\r\n\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    function RegionPBuffer(id, lineList) {\r\n\r\n        this.id = id;\r\n\r\n        this.plist = lineList;\r\n\r\n    }\r\n\r\n    function pruneEmptySpans(element) {\r\n\r\n        var child = element.firstChild;\r\n\r\n        while (child) {\r\n\r\n            var nchild = child.nextSibling;\r\n\r\n            if (child.nodeType === Node.ELEMENT_NODE &&\r\n                child.localName === 'span') {\r\n\r\n                pruneEmptySpans(child);\r\n\r\n                if (child.childElementCount === 0 &&\r\n                    child.textContent.length === 0) {\r\n\r\n                    element.removeChild(child);\r\n\r\n                }\r\n            }\r\n\r\n            child = nchild;\r\n        }\r\n\r\n    }\r\n\r\n    function rect2edges(rect, context) {\r\n\r\n        var edges = {before: null, after: null, start: null, end: null};\r\n\r\n        if (context.bpd === \"tb\") {\r\n\r\n            edges.before = rect.top;\r\n            edges.after = rect.bottom;\r\n\r\n            if (context.ipd === \"lr\") {\r\n\r\n                edges.start = rect.left;\r\n                edges.end = rect.right;\r\n\r\n            } else {\r\n\r\n                edges.start = rect.right;\r\n                edges.end = rect.left;\r\n            }\r\n\r\n        } else if (context.bpd === \"lr\") {\r\n\r\n            edges.before = rect.left;\r\n            edges.after = rect.right;\r\n            edges.start = rect.top;\r\n            edges.end = rect.bottom;\r\n\r\n        } else if (context.bpd === \"rl\") {\r\n\r\n            edges.before = rect.right;\r\n            edges.after = rect.left;\r\n            edges.start = rect.top;\r\n            edges.end = rect.bottom;\r\n\r\n        }\r\n\r\n        return edges;\r\n\r\n    }\r\n\r\n    function constructLineList(context, element, llist, bgcolor) {\r\n\r\n        var curbgcolor = element.style.backgroundColor || bgcolor;\r\n\r\n        if (element.childElementCount === 0) {\r\n\r\n            if (element.localName === 'span') {\r\n\r\n                var r = element.getBoundingClientRect();\r\n\r\n                /* skip if span is not displayed */\r\n\r\n                if (r.height === 0 || r.width === 0) return;\r\n\r\n                var edges = rect2edges(r, context);\r\n\r\n                if (llist.length === 0 ||\r\n                    (!isSameLine(edges.before, edges.after, llist[llist.length - 1].before, llist[llist.length - 1].after))\r\n                    ) {\r\n\r\n                    llist.push({\r\n                        before: edges.before,\r\n                        after: edges.after,\r\n                        start: edges.start,\r\n                        end: edges.end,\r\n                        start_elem: 0,\r\n                        end_elem: 0,\r\n                        elements: [],\r\n                        text: \"\",\r\n                        br: false\r\n                    });\r\n\r\n                } else {\r\n\r\n                    /* positive for BPD = lr and tb, negative for BPD = rl */\r\n                    var bpd_dir = Math.sign(edges.after - edges.before);\r\n\r\n                    /* positive for IPD = lr and tb, negative for IPD = rl */\r\n                    var ipd_dir = Math.sign(edges.end - edges.start);\r\n\r\n                    /* check if the line height has increased */\r\n\r\n                    if (bpd_dir * (edges.before - llist[llist.length - 1].before) < 0) {\r\n                        llist[llist.length - 1].before = edges.before;\r\n                    }\r\n\r\n                    if (bpd_dir * (edges.after - llist[llist.length - 1].after) > 0) {\r\n                        llist[llist.length - 1].after = edges.after;\r\n                    }\r\n\r\n                    if (ipd_dir * (edges.start - llist[llist.length - 1].start) < 0) {\r\n                        llist[llist.length - 1].start = edges.start;\r\n                        llist[llist.length - 1].start_elem = llist[llist.length - 1].elements.length;\r\n                    }\r\n\r\n                    if (ipd_dir * (edges.end - llist[llist.length - 1].end) > 0) {\r\n                        llist[llist.length - 1].end = edges.end;\r\n                        llist[llist.length - 1].end_elem = llist[llist.length - 1].elements.length;\r\n                    }\r\n\r\n                }\r\n\r\n                llist[llist.length - 1].text += element.textContent;\r\n\r\n                llist[llist.length - 1].elements.push(\r\n                    {\r\n                        node: element,\r\n                        bgcolor: curbgcolor,\r\n                        before: edges.before,\r\n                        after: edges.after\r\n                    }\r\n                );\r\n\r\n            } else if (element.localName === 'br' && llist.length !== 0) {\r\n\r\n                llist[llist.length - 1].br = true;\r\n\r\n            }\r\n\r\n        } else {\r\n\r\n            var child = element.firstChild;\r\n\r\n            while (child) {\r\n\r\n                if (child.nodeType === Node.ELEMENT_NODE) {\r\n\r\n                    constructLineList(context, child, llist, curbgcolor);\r\n\r\n                }\r\n\r\n                child = child.nextSibling;\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    function isSameLine(before1, after1, before2, after2) {\r\n\r\n        return ((after1 < after2) && (before1 > before2)) || ((after2 <= after1) && (before2 >= before1));\r\n\r\n    }\r\n\r\n    function HTMLStylingMapDefintion(qName, mapFunc) {\r\n        this.qname = qName;\r\n        this.map = mapFunc;\r\n    }\r\n\r\n    var STYLING_MAP_DEFS = [\r\n\r\n        new HTMLStylingMapDefintion(\r\n            \"http://www.w3.org/ns/ttml#styling backgroundColor\",\r\n            function (context, dom_element, isd_element, attr) {\r\n\r\n                /* skip if transparent */\r\n                if (attr[3] === 0) return;\r\n\r\n                dom_element.style.backgroundColor = \"rgba(\" +\r\n                    attr[0].toString() + \",\" +\r\n                    attr[1].toString() + \",\" +\r\n                    attr[2].toString() + \",\" +\r\n                    (attr[3] / 255).toString() +\r\n                    \")\";\r\n            }\r\n        ),\r\n        new HTMLStylingMapDefintion(\r\n            \"http://www.w3.org/ns/ttml#styling color\",\r\n            function (context, dom_element, isd_element, attr) {\r\n                dom_element.style.color = \"rgba(\" +\r\n                    attr[0].toString() + \",\" +\r\n                    attr[1].toString() + \",\" +\r\n                    attr[2].toString() + \",\" +\r\n                    (attr[3] / 255).toString() +\r\n                    \")\";\r\n            }\r\n        ),\r\n        new HTMLStylingMapDefintion(\r\n            \"http://www.w3.org/ns/ttml#styling direction\",\r\n            function (context, dom_element, isd_element, attr) {\r\n                dom_element.style.direction = attr;\r\n            }\r\n        ),\r\n        new HTMLStylingMapDefintion(\r\n            \"http://www.w3.org/ns/ttml#styling display\",\r\n            function (context, dom_element, isd_element, attr) {}\r\n        ),\r\n        new HTMLStylingMapDefintion(\r\n            \"http://www.w3.org/ns/ttml#styling displayAlign\",\r\n            function (context, dom_element, isd_element, attr) {\r\n\r\n                /* see https://css-tricks.com/snippets/css/a-guide-to-flexbox/ */\r\n\r\n                /* TODO: is this affected by writing direction? */\r\n\r\n                dom_element.style.display = \"flex\";\r\n                dom_element.style.flexDirection = \"column\";\r\n\r\n\r\n                if (attr === \"before\") {\r\n\r\n                    dom_element.style.justifyContent = \"flex-start\";\r\n\r\n                } else if (attr === \"center\") {\r\n\r\n                    dom_element.style.justifyContent = \"center\";\r\n\r\n                } else if (attr === \"after\") {\r\n\r\n                    dom_element.style.justifyContent = \"flex-end\";\r\n                }\r\n\r\n            }\r\n        ),\r\n        new HTMLStylingMapDefintion(\r\n            \"http://www.w3.org/ns/ttml#styling extent\",\r\n            function (context, dom_element, isd_element, attr) {\r\n                /* TODO: this is super ugly */\r\n\r\n                context.regionH = (attr.h * context.h);\r\n                context.regionW = (attr.w * context.w);\r\n\r\n                /* \r\n                 * CSS height/width are measured against the content rectangle,\r\n                 * whereas TTML height/width include padding\r\n                 */\r\n\r\n                var hdelta = 0;\r\n                var wdelta = 0;\r\n\r\n                var p = isd_element.styleAttrs[\"http://www.w3.org/ns/ttml#styling padding\"];\r\n\r\n                if (!p) {\r\n\r\n                    /* error */\r\n\r\n                } else {\r\n\r\n                    hdelta = (p[0] + p[2]) * context.h;\r\n                    wdelta = (p[1] + p[3]) * context.w;\r\n\r\n                }\r\n\r\n                dom_element.style.height = (context.regionH - hdelta) + \"px\";\r\n                dom_element.style.width = (context.regionW - wdelta) + \"px\";\r\n\r\n            }\r\n        ),\r\n        new HTMLStylingMapDefintion(\r\n            \"http://www.w3.org/ns/ttml#styling fontFamily\",\r\n            function (context, dom_element, isd_element, attr) {\r\n\r\n                var rslt = [];\r\n\r\n                /* per IMSC1 */\r\n\r\n                for (var i in attr) {\r\n\r\n                    if (attr[i] === \"monospaceSerif\") {\r\n\r\n                        rslt.push(\"Courier New\");\r\n                        rslt.push('\"Liberation Mono\"');\r\n                        rslt.push(\"Courier\");\r\n                        rslt.push(\"monospace\");\r\n\r\n                    } else if (attr[i] === \"proportionalSansSerif\") {\r\n\r\n                        rslt.push(\"Arial\");\r\n                        rslt.push(\"Helvetica\");\r\n                        rslt.push('\"Liberation Sans\"');\r\n                        rslt.push(\"sans-serif\");\r\n\r\n                    } else if (attr[i] === \"monospace\") {\r\n\r\n                        rslt.push(\"monospace\");\r\n\r\n                    } else if (attr[i] === \"sansSerif\") {\r\n\r\n                        rslt.push(\"sans-serif\");\r\n\r\n                    } else if (attr[i] === \"serif\") {\r\n\r\n                        rslt.push(\"serif\");\r\n\r\n                    } else if (attr[i] === \"monospaceSansSerif\") {\r\n\r\n                        rslt.push(\"Consolas\");\r\n                        rslt.push(\"monospace\");\r\n\r\n                    } else if (attr[i] === \"proportionalSerif\") {\r\n\r\n                        rslt.push(\"serif\");\r\n\r\n                    } else {\r\n\r\n                        rslt.push(attr[i]);\r\n\r\n                    }\r\n\r\n                }\r\n\r\n                dom_element.style.fontFamily = rslt.join(\",\");\r\n            }\r\n        ),\r\n\r\n        new HTMLStylingMapDefintion(\r\n            \"http://www.w3.org/ns/ttml#styling fontSize\",\r\n            function (context, dom_element, isd_element, attr) {\r\n                dom_element.style.fontSize = (attr * context.h) + \"px\";\r\n            }\r\n        ),\r\n\r\n        new HTMLStylingMapDefintion(\r\n            \"http://www.w3.org/ns/ttml#styling fontStyle\",\r\n            function (context, dom_element, isd_element, attr) {\r\n                dom_element.style.fontStyle = attr;\r\n            }\r\n        ),\r\n        new HTMLStylingMapDefintion(\r\n            \"http://www.w3.org/ns/ttml#styling fontWeight\",\r\n            function (context, dom_element, isd_element, attr) {\r\n                dom_element.style.fontWeight = attr;\r\n            }\r\n        ),\r\n        new HTMLStylingMapDefintion(\r\n            \"http://www.w3.org/ns/ttml#styling lineHeight\",\r\n            function (context, dom_element, isd_element, attr) {\r\n                if (attr === \"normal\") {\r\n\r\n                    dom_element.style.lineHeight = \"normal\";\r\n\r\n                } else {\r\n\r\n                    dom_element.style.lineHeight = (attr * context.h) + \"px\";\r\n                }\r\n            }\r\n        ),\r\n        new HTMLStylingMapDefintion(\r\n            \"http://www.w3.org/ns/ttml#styling opacity\",\r\n            function (context, dom_element, isd_element, attr) {\r\n                dom_element.style.opacity = attr;\r\n            }\r\n        ),\r\n        new HTMLStylingMapDefintion(\r\n            \"http://www.w3.org/ns/ttml#styling origin\",\r\n            function (context, dom_element, isd_element, attr) {\r\n                dom_element.style.top = (attr.h * context.h) + \"px\";\r\n                dom_element.style.left = (attr.w * context.w) + \"px\";\r\n            }\r\n        ),\r\n        new HTMLStylingMapDefintion(\r\n            \"http://www.w3.org/ns/ttml#styling overflow\",\r\n            function (context, dom_element, isd_element, attr) {\r\n                dom_element.style.overflow = attr;\r\n            }\r\n        ),\r\n        new HTMLStylingMapDefintion(\r\n            \"http://www.w3.org/ns/ttml#styling padding\",\r\n            function (context, dom_element, isd_element, attr) {\r\n\r\n                /* attr: top,left,bottom,right*/\r\n\r\n                /* style: top right bottom left*/\r\n\r\n                var rslt = [];\r\n\r\n                rslt[0] = (attr[0] * context.h) + \"px\";\r\n                rslt[1] = (attr[3] * context.w) + \"px\";\r\n                rslt[2] = (attr[2] * context.h) + \"px\";\r\n                rslt[3] = (attr[1] * context.w) + \"px\";\r\n\r\n                dom_element.style.padding = rslt.join(\" \");\r\n            }\r\n        ),\r\n        new HTMLStylingMapDefintion(\r\n            \"http://www.w3.org/ns/ttml#styling showBackground\",\r\n            null\r\n            ),\r\n        new HTMLStylingMapDefintion(\r\n            \"http://www.w3.org/ns/ttml#styling textAlign\",\r\n            function (context, dom_element, isd_element, attr) {\r\n\r\n                var ta;\r\n                var dir = isd_element.styleAttrs[imscStyles.byName.direction.qname];\r\n\r\n                /* handle UAs that do not understand start or end */\r\n\r\n                if (attr === \"start\") {\r\n\r\n                    ta = (dir === \"rtl\") ? \"right\" : \"left\";\r\n\r\n                } else if (attr === \"end\") {\r\n\r\n                    ta = (dir === \"rtl\") ? \"left\" : \"right\";\r\n\r\n                } else {\r\n\r\n                    ta = attr;\r\n\r\n                }\r\n\r\n                dom_element.style.textAlign = ta;\r\n\r\n            }\r\n        ),\r\n        new HTMLStylingMapDefintion(\r\n            \"http://www.w3.org/ns/ttml#styling textDecoration\",\r\n            function (context, dom_element, isd_element, attr) {\r\n                dom_element.style.textDecoration = attr.join(\" \").replace(\"lineThrough\", \"line-through\");\r\n            }\r\n        ),\r\n        new HTMLStylingMapDefintion(\r\n            \"http://www.w3.org/ns/ttml#styling textOutline\",\r\n            function (context, dom_element, isd_element, attr) {\r\n\r\n                if (attr === \"none\") {\r\n\r\n                    dom_element.style.textShadow = \"\";\r\n\r\n                } else {\r\n\r\n                    dom_element.style.textShadow = \"rgba(\" +\r\n                        attr.color[0].toString() + \",\" +\r\n                        attr.color[1].toString() + \",\" +\r\n                        attr.color[2].toString() + \",\" +\r\n                        (attr.color[3] / 255).toString() +\r\n                        \")\" + \" 0px 0px \" +\r\n                        (attr.thickness * context.h) + \"px\";\r\n\r\n                }\r\n            }\r\n        ),\r\n        new HTMLStylingMapDefintion(\r\n            \"http://www.w3.org/ns/ttml#styling unicodeBidi\",\r\n            function (context, dom_element, isd_element, attr) {\r\n\r\n                var ub;\r\n\r\n                if (attr === 'bidiOverride') {\r\n                    ub = \"bidi-override\";\r\n                } else {\r\n                    ub = attr;\r\n                }\r\n\r\n                dom_element.style.unicodeBidi = ub;\r\n            }\r\n        ),\r\n        new HTMLStylingMapDefintion(\r\n            \"http://www.w3.org/ns/ttml#styling visibility\",\r\n            function (context, dom_element, isd_element, attr) {\r\n                dom_element.style.visibility = attr;\r\n            }\r\n        ),\r\n        new HTMLStylingMapDefintion(\r\n            \"http://www.w3.org/ns/ttml#styling wrapOption\",\r\n            function (context, dom_element, isd_element, attr) {\r\n\r\n                if (attr === \"wrap\") {\r\n\r\n                    if (isd_element.space === \"preserve\") {\r\n                        dom_element.style.whiteSpace = \"pre-wrap\";\r\n                    } else {\r\n                        dom_element.style.whiteSpace = \"normal\";\r\n                    }\r\n\r\n                } else {\r\n\r\n                    if (isd_element.space === \"preserve\") {\r\n\r\n                        dom_element.style.whiteSpace = \"pre\";\r\n\r\n                    } else {\r\n                        dom_element.style.whiteSpace = \"noWrap\";\r\n                    }\r\n\r\n                }\r\n\r\n            }\r\n        ),\r\n        new HTMLStylingMapDefintion(\r\n            \"http://www.w3.org/ns/ttml#styling writingMode\",\r\n            function (context, dom_element, isd_element, attr) {\r\n                if (attr === \"lrtb\" || attr === \"lr\") {\r\n\r\n                    dom_element.style.writingMode = \"horizontal-tb\";\r\n\r\n                } else if (attr === \"rltb\" || attr === \"rl\") {\r\n\r\n                    dom_element.style.writingMode = \"horizontal-tb\";\r\n\r\n                } else if (attr === \"tblr\") {\r\n\r\n                    dom_element.style.writingMode = \"vertical-lr\";\r\n\r\n                } else if (attr === \"tbrl\" || attr === \"tb\") {\r\n\r\n                    dom_element.style.writingMode = \"vertical-rl\";\r\n\r\n                }\r\n            }\r\n        ),\r\n        new HTMLStylingMapDefintion(\r\n            \"http://www.w3.org/ns/ttml#styling zIndex\",\r\n            function (context, dom_element, isd_element, attr) {\r\n                dom_element.style.zIndex = attr;\r\n            }\r\n        ),\r\n        new HTMLStylingMapDefintion(\r\n            \"http://www.smpte-ra.org/schemas/2052-1/2010/smpte-tt backgroundImage\",\r\n            function (context, dom_element, isd_element, attr) {\r\n\r\n                if (context.imgResolver !== null && attr !== null) {\r\n\r\n                    var img = document.createElement(\"img\");\r\n\r\n                    var uri = context.imgResolver(attr, img);\r\n\r\n                    if (uri)\r\n                        img.src = uri;\r\n\r\n                    img.height = context.regionH;\r\n                    img.width = context.regionW;\r\n\r\n                    dom_element.appendChild(img);\r\n                }\r\n            }\r\n        ),\r\n        new HTMLStylingMapDefintion(\r\n            \"http://www.w3.org/ns/ttml/profile/imsc1#styling forcedDisplay\",\r\n            function (context, dom_element, isd_element, attr) {\r\n\r\n                if (context.displayForcedOnlyMode && attr === false) {\r\n                    dom_element.style.visibility = \"hidden\";\r\n                }\r\n\r\n            }\r\n        )\r\n    ];\r\n\r\n    var STYLMAP_BY_QNAME = {};\r\n\r\n    for (var i in STYLING_MAP_DEFS) {\r\n\r\n        STYLMAP_BY_QNAME[STYLING_MAP_DEFS[i].qname] = STYLING_MAP_DEFS[i];\r\n    }\r\n\r\n    function reportError(errorHandler, msg) {\r\n\r\n        if (errorHandler && errorHandler.error && errorHandler.error(msg))\r\n            throw msg;\r\n\r\n    }\r\n\r\n})(typeof exports === 'undefined' ? this.imscHTML = {} : exports,\r\n    typeof imscNames === 'undefined' ? require(17) : imscNames,\r\n    typeof imscStyles === 'undefined' ? require(18) : imscStyles);","/* \r\n * Copyright (c) 2016, Pierre-Anthony Lemieux <pal@sandflow.com>\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *\r\n * * Redistributions of source code must retain the above copyright notice, this\r\n *   list of conditions and the following disclaimer.\r\n * * Redistributions in binary form must reproduce the above copyright notice,\r\n *   this list of conditions and the following disclaimer in the documentation\r\n *   and/or other materials provided with the distribution.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\r\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n * POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n/**\r\n * @module imscISD\r\n */\r\n\r\n\r\n;\r\n(function (imscISD, imscNames, imscStyles) { // wrapper for non-node envs\r\n\r\n    /** \r\n     * Creates a canonical representation of an IMSC1 document returned by <pre>imscDoc.fromXML()</pre>\r\n     * at a given absolute offset in seconds. This offset does not have to be one of the values returned\r\n     * by <pre>getMediaTimeEvents()</pre>.\r\n     * \r\n     * @param {Object} tt IMSC1 document\r\n     * @param {number} offset Absolute offset (in seconds)\r\n     * @param {?module:imscUtils.ErrorHandler} errorHandler Error callback\r\n     * @returns {Object} Opaque in-memory representation of an ISD\r\n     */\r\n\r\n    imscISD.generateISD = function (tt, offset, errorHandler) {\r\n\r\n        /* TODO check for tt and offset validity */\r\n\r\n        /* create the ISD object from the IMSC1 doc */\r\n\r\n        var isd = new ISD(tt);\r\n        \r\n        /* context */\r\n        \r\n        var context = {\r\n          \r\n            /* empty for now */\r\n            \r\n        };\r\n\r\n        /* process regions */\r\n\r\n        for (var r in tt.head.layout.regions) {\r\n\r\n            /* post-order traversal of the body tree per [construct intermediate document] */\r\n\r\n            var c = isdProcessContentElement(tt, offset, tt.head.layout.regions[r], tt.body, null, '', tt.head.layout.regions[r], errorHandler, context);\r\n\r\n            if (c !== null) {\r\n\r\n                /* add the region to the ISD */\r\n\r\n                isd.contents.push(c.element);\r\n            }\r\n\r\n\r\n        }\r\n\r\n        return isd;\r\n    };\r\n\r\n    function isdProcessContentElement(doc, offset, region, body, parent, inherited_region_id, elem, errorHandler, context) {\r\n\r\n        /* prune if temporally inactive */\r\n\r\n        if (offset < elem.begin || offset >= elem.end) {\r\n            return null;\r\n        }\r\n\r\n        /* \r\n         * set the associated region as specified by the regionID attribute, or the \r\n         * inherited associated region otherwise\r\n         */\r\n\r\n        var associated_region_id = 'regionID' in elem && elem.regionID !== '' ? elem.regionID : inherited_region_id;\r\n\r\n        /* prune the element if either:\r\n         * - the element is not terminal and the associated region is neither the default\r\n         *   region nor the parent region (this allows children to be associated with a \r\n         *   region later on)\r\n         * - the element is terminal and the associated region is not the parent region\r\n         */\r\n        \r\n        /* TODO: improve detection of terminal elements since <region> has no contents */\r\n\r\n        if (parent !== null /* are we in the region element */ &&\r\n            associated_region_id !== region.id &&\r\n                (\r\n                    (! ('contents' in elem)) ||\r\n                    ('contents' in elem && elem.contents.length === 0) ||\r\n                    associated_region_id !== ''\r\n                )\r\n             )\r\n            return null;\r\n\r\n        /* create an ISD element, including applying specified styles */\r\n\r\n        var isd_element = new ISDContentElement(elem);\r\n\r\n        /* apply set (animation) styling */\r\n\r\n        for (var i in elem.sets) {\r\n\r\n            if (offset < elem.sets[i].begin || offset >= elem.sets[i].end)\r\n                continue;\r\n\r\n            isd_element.styleAttrs[elem.sets[i].qname] = elem.sets[i].value;\r\n\r\n        }\r\n\r\n        /* \r\n         * keep track of specified styling attributes so that we\r\n         * can compute them later\r\n         */\r\n\r\n        var spec_attr = {};\r\n\r\n        for (var qname in isd_element.styleAttrs) {\r\n\r\n            spec_attr[qname] = true;\r\n\r\n            /* special rule for tts:writingMode (section 7.29.1 of XSL)\r\n             * direction is set consistently with writingMode only\r\n             * if writingMode sets inline-direction to LTR or RTL  \r\n             */\r\n\r\n            if (qname === imscStyles.byName.writingMode.qname &&\r\n                !(imscStyles.byName.direction.qname in isd_element.styleAttrs)) {\r\n\r\n                var wm = isd_element.styleAttrs[qname];\r\n\r\n                if (wm === \"lrtb\" || wm === \"lr\") {\r\n\r\n                    isd_element.styleAttrs[imscStyles.byName.direction.qname] = \"ltr\";\r\n\r\n                } else if (wm === \"rltb\" || wm === \"rl\") {\r\n\r\n                    isd_element.styleAttrs[imscStyles.byName.direction.qname] = \"rtl\";\r\n\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        /* inherited styling */\r\n\r\n        if (parent !== null) {\r\n\r\n            for (var j in imscStyles.all) {\r\n\r\n                var sa = imscStyles.all[j];\r\n\r\n                /* textDecoration has special inheritance rules */\r\n\r\n                if (sa.qname === imscStyles.byName.textDecoration.qname) {\r\n\r\n                    /* handle both textDecoration inheritance and specification */\r\n\r\n                    var ps = parent.styleAttrs[sa.qname];\r\n                    var es = isd_element.styleAttrs[sa.qname];\r\n                    var outs = [];\r\n\r\n                    if (es === undefined) {\r\n\r\n                        outs = ps;\r\n\r\n                    } else if (es.indexOf(\"none\") === -1) {\r\n\r\n                        if ((es.indexOf(\"noUnderline\") === -1 &&\r\n                            ps.indexOf(\"underline\") !== -1) ||\r\n                            es.indexOf(\"underline\") !== -1) {\r\n\r\n                            outs.push(\"underline\");\r\n\r\n                        }\r\n\r\n                        if ((es.indexOf(\"noLineThrough\") === -1 &&\r\n                            ps.indexOf(\"lineThrough\") !== -1) ||\r\n                            es.indexOf(\"lineThrough\") !== -1) {\r\n\r\n                            outs.push(\"lineThrough\");\r\n\r\n                        }\r\n\r\n                        if ((es.indexOf(\"noOverline\") === -1 &&\r\n                            ps.indexOf(\"overline\") !== -1) ||\r\n                            es.indexOf(\"overline\") !== -1) {\r\n\r\n                            outs.push(\"overline\");\r\n\r\n                        }\r\n\r\n                    } else {\r\n\r\n                        outs.push(\"none\");\r\n\r\n                    }\r\n\r\n                    isd_element.styleAttrs[sa.qname] = outs;\r\n\r\n                } else if (sa.inherit &&\r\n                    (sa.qname in parent.styleAttrs) &&\r\n                    !(sa.qname in isd_element.styleAttrs)) {\r\n\r\n                    isd_element.styleAttrs[sa.qname] = parent.styleAttrs[sa.qname];\r\n\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n\r\n        /* initial value styling */\r\n\r\n        for (var k in imscStyles.all) {\r\n\r\n            var ivs = imscStyles.all[k];\r\n\r\n            /* skip if value is already specified */\r\n\r\n            if (ivs.qname in isd_element.styleAttrs) continue;\r\n\r\n            /* apply initial value to elements other than region only if non-inherited */\r\n\r\n            if (isd_element.kind === 'region' || (ivs.inherit === false && ivs.initial !== null)) {\r\n\r\n                isd_element.styleAttrs[ivs.qname] = ivs.parse(ivs.initial);\r\n\r\n                /* keep track of the style as specified */\r\n\r\n                spec_attr[ivs.qname] = true;\r\n\r\n            }\r\n\r\n        }\r\n\r\n        /* compute styles (only for non-inherited styles) */\r\n        /* TODO: get rid of spec_attr */\r\n\r\n        for (var z in imscStyles.all) {\r\n\r\n            var cs = imscStyles.all[z];\r\n\r\n            if (!(cs.qname in spec_attr)) continue;\r\n\r\n            if (cs.compute !== null) {\r\n\r\n                var cstyle = cs.compute(\r\n                    /*doc, parent, element, attr, context*/\r\n                    doc,\r\n                    parent,\r\n                    isd_element,\r\n                    isd_element.styleAttrs[cs.qname],\r\n                    context\r\n                    );\r\n\r\n                if (cstyle !== null) {\r\n                    isd_element.styleAttrs[cs.qname] = cstyle;\r\n                } else {\r\n                    reportError(errorHandler, \"Style '\" + cs.qname + \"' on element '\" + isd_element.kind + \"' cannot be computed\");\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n        /* prune if tts:display is none */\r\n\r\n        if (isd_element.styleAttrs[imscStyles.byName.display.qname] === \"none\")\r\n            return null;\r\n\r\n        /* process contents of the element */\r\n\r\n        var contents;\r\n\r\n        if (parent === null) {\r\n\r\n            /* we are processing the region */\r\n\r\n            if (body === null) {\r\n\r\n                /* if there is no body, still process the region but with empty content */\r\n\r\n                contents = [];\r\n\r\n            } else {\r\n\r\n                /*use the body element as contents */\r\n\r\n                contents = [body];\r\n\r\n            }\r\n\r\n        } else if ('contents' in elem) {\r\n\r\n            contents = elem.contents;\r\n\r\n        }\r\n\r\n        for (var x in contents) {\r\n\r\n            var c = isdProcessContentElement(doc, offset, region, body, isd_element, associated_region_id, contents[x], errorHandler, context);\r\n\r\n            /* \r\n             * keep child element only if they are non-null and their region match \r\n             * the region of this element\r\n             */\r\n\r\n            if (c !== null) {\r\n\r\n                isd_element.contents.push(c.element);\r\n\r\n            }\r\n\r\n        }\r\n\r\n        /* compute used value of lineHeight=\"normal\" */\r\n\r\n        /*        if (isd_element.styleAttrs[imscStyles.byName.lineHeight.qname] === \"normal\"  ) {\r\n         \r\n         isd_element.styleAttrs[imscStyles.byName.lineHeight.qname] =\r\n         isd_element.styleAttrs[imscStyles.byName.fontSize.qname] * 1.2;\r\n         \r\n         }\r\n         */\r\n\r\n        /* remove styles that are not applicable */\r\n\r\n        for (var qnameb in isd_element.styleAttrs) {\r\n            var da = imscStyles.byQName[qnameb];\r\n\r\n            if (da.applies.indexOf(isd_element.kind) === -1) {\r\n                delete isd_element.styleAttrs[qnameb];\r\n            }\r\n        }\r\n\r\n        /* collapse white space if space is \"default\" */\r\n\r\n        if (isd_element.kind === 'span' && isd_element.text && isd_element.space === \"default\") {\r\n\r\n            var trimmedspan = isd_element.text.replace(/\\s+/g, ' ');\r\n\r\n            isd_element.text = trimmedspan;\r\n\r\n        }\r\n\r\n        /* trim whitespace around explicit line breaks */\r\n\r\n        if (isd_element.kind === 'p') {\r\n\r\n            var elist = [];\r\n\r\n            constructSpanList(isd_element, elist);\r\n\r\n            var l = 0;\r\n\r\n            var state = \"after_br\";\r\n            var br_pos = 0;\r\n\r\n            while (true) {\r\n\r\n                if (state === \"after_br\") {\r\n\r\n                    if (l >= elist.length || elist[l].kind === \"br\") {\r\n\r\n                        state = \"before_br\";\r\n                        br_pos = l;\r\n                        l--;\r\n\r\n                    } else {\r\n\r\n                        if (elist[l].space !== \"preserve\") {\r\n\r\n                            elist[l].text = elist[l].text.replace(/^\\s+/g, '');\r\n\r\n                        }\r\n\r\n                        if (elist[l].text.length > 0) {\r\n\r\n                            state = \"looking_br\";\r\n                            l++;\r\n\r\n                        } else {\r\n\r\n                            elist.splice(l, 1);\r\n\r\n                        }\r\n\r\n                    }\r\n\r\n                } else if (state === \"before_br\") {\r\n\r\n                    if (l < 0 || elist[l].kind === \"br\") {\r\n\r\n                        state = \"after_br\";\r\n                        l = br_pos + 1;\r\n\r\n                        if (l >= elist.length) break;\r\n\r\n                    } else {\r\n\r\n                        if (elist[l].space !== \"preserve\") {\r\n\r\n                            elist[l].text = elist[l].text.replace(/\\s+$/g, '');\r\n\r\n                        }\r\n\r\n                        if (elist[l].text.length > 0) {\r\n\r\n                            state = \"after_br\";\r\n                            l = br_pos + 1;\r\n\r\n                            if (l >= elist.length) break;\r\n\r\n                        } else {\r\n\r\n                            elist.splice(l, 1);\r\n                            l--;\r\n\r\n                        }\r\n\r\n                    }\r\n\r\n                } else {\r\n\r\n                    if (l >= elist.length || elist[l].kind === \"br\") {\r\n\r\n                        state = \"before_br\";\r\n                        br_pos = l;\r\n                        l--;\r\n\r\n                    } else {\r\n\r\n                        l++;\r\n\r\n                    }\r\n\r\n                }\r\n\r\n            }\r\n            \r\n            pruneEmptySpans(isd_element);\r\n\r\n        }\r\n\r\n        /* keep element if:\r\n         * * contains a background image\r\n         * * <br/>\r\n         * * if there are children\r\n         * * if <span> and has text\r\n         * * if region and showBackground = always\r\n         */\r\n\r\n        if ((isd_element.kind === 'div' && imscStyles.byName.backgroundImage.qname in isd_element.styleAttrs) ||\r\n            isd_element.kind === 'br' ||\r\n            ('contents' in isd_element && isd_element.contents.length > 0) ||\r\n            (isd_element.kind === 'span' && isd_element.text !== null) ||\r\n            (isd_element.kind === 'region' &&\r\n                isd_element.styleAttrs[imscStyles.byName.showBackground.qname] === 'always')) {\r\n\r\n            return {\r\n                region_id: associated_region_id,\r\n                element: isd_element\r\n            };\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    function constructSpanList(element, elist) {\r\n\r\n        if ('contents' in element) {\r\n\r\n            for (var i in element.contents) {\r\n                constructSpanList(element.contents[i], elist);\r\n            }\r\n\r\n        } else {\r\n\r\n            elist.push(element);\r\n\r\n        }\r\n\r\n    }\r\n\r\n    function pruneEmptySpans(element) {\r\n\r\n        if (element.kind === 'br') {\r\n            \r\n            return false;\r\n            \r\n        } else if ('text' in element) {\r\n            \r\n            return  element.text.length === 0;\r\n            \r\n        } else if ('contents' in element) {\r\n            \r\n            var i = element.contents.length;\r\n\r\n            while (i--) {\r\n                \r\n                if (pruneEmptySpans(element.contents[i])) {\r\n                    element.contents.splice(i, 1);\r\n                }\r\n                \r\n            }\r\n            \r\n            return element.contents.length === 0;\r\n\r\n        }\r\n    }\r\n\r\n    function ISD(tt) {\r\n        this.contents = [];\r\n        this.aspectRatio = tt.aspectRatio;\r\n    }\r\n\r\n    function ISDContentElement(ttelem) {\r\n\r\n        /* assume the element is a region if it does not have a kind */\r\n\r\n        this.kind = ttelem.kind || 'region';\r\n        \r\n        /* copy id */\r\n        \r\n        if (ttelem.id) {\r\n            this.id = ttelem.id;\r\n        }\r\n\r\n        /* deep copy of style attributes */\r\n        this.styleAttrs = {};\r\n\r\n        for (var sname in ttelem.styleAttrs) {\r\n\r\n            this.styleAttrs[sname] =\r\n                ttelem.styleAttrs[sname];\r\n        }\r\n\r\n        /* TODO: clean this! */\r\n\r\n        if ('text' in ttelem) {\r\n\r\n            this.text = ttelem.text;\r\n\r\n        } else if (ttelem.kind !== 'br') {\r\n            \r\n            this.contents = [];\r\n        }\r\n\r\n        if ('space' in ttelem) {\r\n\r\n            this.space = ttelem.space;\r\n        }\r\n    }\r\n\r\n\r\n    /*\r\n     * ERROR HANDLING UTILITY FUNCTIONS\r\n     * \r\n     */\r\n\r\n    function reportInfo(errorHandler, msg) {\r\n\r\n        if (errorHandler && errorHandler.info && errorHandler.info(msg))\r\n            throw msg;\r\n\r\n    }\r\n\r\n    function reportWarning(errorHandler, msg) {\r\n\r\n        if (errorHandler && errorHandler.warn && errorHandler.warn(msg))\r\n            throw msg;\r\n\r\n    }\r\n\r\n    function reportError(errorHandler, msg) {\r\n\r\n        if (errorHandler && errorHandler.error && errorHandler.error(msg))\r\n            throw msg;\r\n\r\n    }\r\n\r\n    function reportFatal(errorHandler, msg) {\r\n\r\n        if (errorHandler && errorHandler.fatal)\r\n            errorHandler.fatal(msg);\r\n\r\n        throw msg;\r\n\r\n    }\r\n\r\n\r\n})(typeof exports === 'undefined' ? this.imscISD = {} : exports,\r\n    typeof imscNames === 'undefined' ? require(17) : imscNames,\r\n    typeof imscStyles === 'undefined' ? require(18) : imscStyles\r\n    );\r\n","/* \r\n * Copyright (c) 2016, Pierre-Anthony Lemieux <pal@sandflow.com>\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *\r\n * * Redistributions of source code must retain the above copyright notice, this\r\n *   list of conditions and the following disclaimer.\r\n * * Redistributions in binary form must reproduce the above copyright notice,\r\n *   this list of conditions and the following disclaimer in the documentation\r\n *   and/or other materials provided with the distribution.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\r\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n * POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nexports.generateISD = require(15).generateISD;\r\nexports.fromXML = require(13).fromXML;\r\nexports.renderHTML = require(14).render;","/* \r\n * Copyright (c) 2016, Pierre-Anthony Lemieux <pal@sandflow.com>\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *\r\n * * Redistributions of source code must retain the above copyright notice, this\r\n *   list of conditions and the following disclaimer.\r\n * * Redistributions in binary form must reproduce the above copyright notice,\r\n *   this list of conditions and the following disclaimer in the documentation\r\n *   and/or other materials provided with the distribution.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\r\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n * POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n/**\r\n * @module imscNames\r\n */\r\n\r\n;\r\n(function (imscNames) { // wrapper for non-node envs\r\n\r\n    imscNames.ns_tt = \"http://www.w3.org/ns/ttml\";\r\n    imscNames.ns_tts = \"http://www.w3.org/ns/ttml#styling\";\r\n    imscNames.ns_ttp = \"http://www.w3.org/ns/ttml#parameter\";\r\n    imscNames.ns_xml = \"http://www.w3.org/XML/1998/namespace\";\r\n    imscNames.ns_itts = \"http://www.w3.org/ns/ttml/profile/imsc1#styling\";\r\n    imscNames.ns_ittp = \"http://www.w3.org/ns/ttml/profile/imsc1#parameter\";\r\n    imscNames.ns_smpte = \"http://www.smpte-ra.org/schemas/2052-1/2010/smpte-tt\";\r\n    imscNames.ns_ebutts = \"urn:ebu:tt:style\";\r\n    \r\n})(typeof exports === 'undefined' ? this.imscNames = {} : exports);\r\n\r\n\r\n\r\n\r\n","/* \r\n * Copyright (c) 2016, Pierre-Anthony Lemieux <pal@sandflow.com>\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *\r\n * * Redistributions of source code must retain the above copyright notice, this\r\n *   list of conditions and the following disclaimer.\r\n * * Redistributions in binary form must reproduce the above copyright notice,\r\n *   this list of conditions and the following disclaimer in the documentation\r\n *   and/or other materials provided with the distribution.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\r\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n * POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n/**\r\n * @module imscStyles\r\n */\r\n\r\n;\r\n(function (imscStyles, imscNames, imscUtils) { // wrapper for non-node envs\r\n\r\n    function StylingAttributeDefinition(ns, name, initialValue, appliesTo, isInherit, isAnimatable, parseFunc, computeFunc) {\r\n        this.name = name;\r\n        this.ns = ns;\r\n        this.qname = ns + \" \" + name;\r\n        this.inherit = isInherit;\r\n        this.animatable = isAnimatable;\r\n        this.initial = initialValue;\r\n        this.applies = appliesTo;\r\n        this.parse = parseFunc;\r\n        this.compute = computeFunc;\r\n    }\r\n\r\n    imscStyles.all = [\r\n\r\n        new StylingAttributeDefinition(\r\n                imscNames.ns_tts,\r\n                \"backgroundColor\",\r\n                \"transparent\",\r\n                ['body', 'div', 'p', 'region', 'span'],\r\n                false,\r\n                true,\r\n                imscUtils.parseColor,\r\n                null\r\n                ),\r\n        new StylingAttributeDefinition(\r\n                imscNames.ns_tts,\r\n                \"color\",\r\n                \"white\",\r\n                ['span'],\r\n                true,\r\n                true,\r\n                imscUtils.parseColor,\r\n                null\r\n                ),\r\n        new StylingAttributeDefinition(\r\n                imscNames.ns_tts,\r\n                \"direction\",\r\n                \"ltr\",\r\n                ['p', 'span'],\r\n                true,\r\n                true,\r\n                function (str) {\r\n                    return str;\r\n                },\r\n                null\r\n                ),\r\n        new StylingAttributeDefinition(\r\n                imscNames.ns_tts,\r\n                \"display\",\r\n                \"auto\",\r\n                ['body', 'div', 'p', 'region', 'span'],\r\n                false,\r\n                true,\r\n                function (str) {\r\n                    return str;\r\n                },\r\n                null\r\n                ),\r\n        new StylingAttributeDefinition(\r\n                imscNames.ns_tts,\r\n                \"displayAlign\",\r\n                \"before\",\r\n                ['region'],\r\n                false,\r\n                true,\r\n                function (str) {\r\n                    return str;\r\n                },\r\n                null\r\n                ),\r\n        new StylingAttributeDefinition(\r\n                imscNames.ns_tts,\r\n                \"extent\",\r\n                \"auto\",\r\n                ['tt', 'region'],\r\n                false,\r\n                true,\r\n                function (str) {\r\n\r\n                    if (str === \"auto\") {\r\n\r\n                        return str;\r\n\r\n                    } else {\r\n\r\n                        var s = str.split(\" \");\r\n                        if (s.length !== 2) return null;\r\n                        var w = imscUtils.parseLength(s[0]);\r\n                        var h = imscUtils.parseLength(s[1]);\r\n                        if (!h || !w) return null;\r\n                        return {'h': h, 'w': w};\r\n                    }\r\n\r\n                },\r\n                function (doc, parent, element, attr, context) {\r\n\r\n                    var h;\r\n                    var w;\r\n\r\n                    if (attr === \"auto\") {\r\n\r\n                        h = 1;\r\n\r\n                    } else if (attr.h.unit === \"%\") {\r\n\r\n                        h = attr.h.value / 100;\r\n\r\n                    } else if (attr.h.unit === \"px\") {\r\n\r\n                        h = attr.h.value / doc.pxDimensions.h;\r\n\r\n                    } else {\r\n\r\n                        return null;\r\n\r\n                    }\r\n\r\n                    if (attr === \"auto\") {\r\n\r\n                        w = 1;\r\n\r\n                    } else if (attr.w.unit === \"%\") {\r\n\r\n                        w = attr.w.value / 100;\r\n\r\n                    } else if (attr.w.unit === \"px\") {\r\n\r\n                        w = attr.w.value / doc.pxDimensions.w;\r\n\r\n                    } else {\r\n\r\n                        return null;\r\n\r\n                    }\r\n\r\n                    return {'h': h, 'w': w};\r\n                }\r\n        ),\r\n        new StylingAttributeDefinition(\r\n                imscNames.ns_tts,\r\n                \"fontFamily\",\r\n                \"default\",\r\n                ['span'],\r\n                true,\r\n                true,\r\n                function (str) {\r\n                    var ffs = str.split(\",\");\r\n                    var rslt = [];\r\n\r\n                    for (var i in ffs) {\r\n\r\n                        if (ffs[i].charAt(0) !== \"'\" && ffs[i].charAt(0) !== '\"') {\r\n\r\n                            if (ffs[i] === \"default\") {\r\n\r\n                                /* per IMSC1 */\r\n\r\n                                rslt.push(\"monospaceSerif\");\r\n\r\n                            } else {\r\n\r\n                                rslt.push(ffs[i]);\r\n\r\n                            }\r\n\r\n                        } else {\r\n\r\n                            rslt.push(ffs[i]);\r\n\r\n                        }\r\n\r\n                    }\r\n\r\n                    return rslt;\r\n                },\r\n                null\r\n                ),\r\n        new StylingAttributeDefinition(\r\n                imscNames.ns_tts,\r\n                \"fontSize\",\r\n                \"1c\",\r\n                ['span'],\r\n                true,\r\n                true,\r\n                imscUtils.parseLength,\r\n                function (doc, parent, element, attr, context) {\r\n\r\n                    var fs;\r\n\r\n                    if (attr.unit === \"%\") {\r\n\r\n                        if (parent !== null) {\r\n\r\n                            fs = parent.styleAttrs[imscStyles.byName.fontSize.qname] * attr.value / 100;\r\n\r\n                        } else {\r\n\r\n                            /* region, so percent of 1c */\r\n\r\n                            fs = attr.value / 100 / doc.cellResolution.h;\r\n\r\n                        }\r\n\r\n                    } else if (attr.unit === \"em\") {\r\n\r\n                        if (parent !== null) {\r\n\r\n                            fs = parent.styleAttrs[imscStyles.byName.fontSize.qname] * attr.value;\r\n\r\n                        } else {\r\n\r\n                            /* region, so percent of 1c */\r\n\r\n                            fs = attr.value / doc.cellResolution.h;\r\n\r\n                        }\r\n\r\n                    } else if (attr.unit === \"c\") {\r\n\r\n                        fs = attr.value / doc.cellResolution.h;\r\n\r\n                    } else if (attr.unit === \"px\") {\r\n\r\n                        fs = attr.value / doc.pxDimensions.h;\r\n\r\n                    } else {\r\n\r\n                        return null;\r\n\r\n                    }\r\n\r\n                    return fs;\r\n                }\r\n        ),\r\n        new StylingAttributeDefinition(\r\n                imscNames.ns_tts,\r\n                \"fontStyle\",\r\n                \"normal\",\r\n                ['span'],\r\n                true,\r\n                true,\r\n                function (str) {\r\n                    /* TODO: handle font style */\r\n\r\n                    return str;\r\n                },\r\n                null\r\n                ),\r\n        new StylingAttributeDefinition(\r\n                imscNames.ns_tts,\r\n                \"fontWeight\",\r\n                \"normal\",\r\n                ['span'],\r\n                true,\r\n                true,\r\n                function (str) {\r\n                    /* TODO: handle font weight */\r\n\r\n                    return str;\r\n                },\r\n                null\r\n                ),\r\n        new StylingAttributeDefinition(\r\n                imscNames.ns_tts,\r\n                \"lineHeight\",\r\n                \"normal\",\r\n                ['p'],\r\n                true,\r\n                true,\r\n                function (str) {\r\n                    if (str === \"normal\") {\r\n                        return str;\r\n                    } else {\r\n                        return imscUtils.parseLength(str);\r\n                    }\r\n                },\r\n                function (doc, parent, element, attr, context) {\r\n\r\n                    var lh;\r\n\r\n                    if (attr === \"normal\") {\r\n\r\n                        /* inherit normal per https://github.com/w3c/ttml1/issues/220 */\r\n\r\n                        lh = attr;\r\n\r\n                    } else if (attr.unit === \"%\") {\r\n\r\n                        lh = element.styleAttrs[imscStyles.byName.fontSize.qname] * attr.value / 100;\r\n\r\n                    } else if (attr.unit === \"em\") {\r\n\r\n                        lh = element.styleAttrs[imscStyles.byName.fontSize.qname] * attr.value;\r\n\r\n                    } else if (attr.unit === \"c\") {\r\n\r\n                        lh = attr.value / doc.cellResolution.h;\r\n\r\n                    } else if (attr.unit === \"px\") {\r\n\r\n                        /* TODO: handle error if no px dimensions are provided */\r\n\r\n                        lh = attr.value / doc.pxDimensions.h;\r\n\r\n                    } else {\r\n\r\n                        return null;\r\n\r\n                    }\r\n\r\n                    /* TODO: create a Length constructor */\r\n\r\n                    return lh;\r\n                }\r\n        ),\r\n        new StylingAttributeDefinition(\r\n                imscNames.ns_tts,\r\n                \"opacity\",\r\n                1.0,\r\n                ['region'],\r\n                false,\r\n                true,\r\n                parseFloat,\r\n                null\r\n                ),\r\n        new StylingAttributeDefinition(\r\n                imscNames.ns_tts,\r\n                \"origin\",\r\n                \"auto\",\r\n                ['region'],\r\n                false,\r\n                true,\r\n                function (str) {\r\n\r\n                    if (str === \"auto\") {\r\n\r\n                        return str;\r\n\r\n                    } else {\r\n\r\n                        var s = str.split(\" \");\r\n                        if (s.length !== 2) return null;\r\n                        var w = imscUtils.parseLength(s[0]);\r\n                        var h = imscUtils.parseLength(s[1]);\r\n                        if (!h || !w) return null;\r\n                        return {'h': h, 'w': w};\r\n                    }\r\n\r\n                },\r\n                function (doc, parent, element, attr, context) {\r\n\r\n                    var h;\r\n                    var w;\r\n\r\n                    if (attr === \"auto\") {\r\n\r\n                        h = 0;\r\n\r\n                    } else if (attr.h.unit === \"%\") {\r\n\r\n                        h = attr.h.value / 100;\r\n\r\n                    } else if (attr.h.unit === \"px\") {\r\n\r\n                        h = attr.h.value / doc.pxDimensions.h;\r\n\r\n                    } else {\r\n\r\n                        return null;\r\n\r\n                    }\r\n\r\n                    if (attr === \"auto\") {\r\n\r\n                        w = 0;\r\n\r\n                    } else if (attr.w.unit === \"%\") {\r\n\r\n                        w = attr.w.value / 100;\r\n\r\n                    } else if (attr.w.unit === \"px\") {\r\n\r\n                        w = attr.w.value / doc.pxDimensions.w;\r\n\r\n                    } else {\r\n\r\n                        return null;\r\n\r\n                    }\r\n\r\n                    return {'h': h, 'w': w};\r\n                }\r\n        ),\r\n        new StylingAttributeDefinition(\r\n                imscNames.ns_tts,\r\n                \"overflow\",\r\n                \"hidden\",\r\n                ['region'],\r\n                false,\r\n                true,\r\n                function (str) {\r\n                    return str;\r\n                },\r\n                null\r\n                ),\r\n        new StylingAttributeDefinition(\r\n                imscNames.ns_tts,\r\n                \"padding\",\r\n                \"0px\",\r\n                ['region'],\r\n                false,\r\n                true,\r\n                function (str) {\r\n\r\n                    var s = str.split(\" \");\r\n                    if (s.length > 4) return null;\r\n                    var r = [];\r\n                    for (var i in s) {\r\n\r\n                        var l = imscUtils.parseLength(s[i]);\r\n                        if (!l) return null;\r\n                        r.push(l);\r\n                    }\r\n\r\n                    return r;\r\n                },\r\n                function (doc, parent, element, attr, context) {\r\n\r\n                    var padding;\r\n\r\n                    /* TODO: make sure we are in region */\r\n\r\n                    /*\r\n                     * expand padding shortcuts to \r\n                     * [before, end, after, start]\r\n                     * \r\n                     */\r\n\r\n                    if (attr.length === 1) {\r\n\r\n                        padding = [attr[0], attr[0], attr[0], attr[0]];\r\n\r\n                    } else if (attr.length === 2) {\r\n\r\n                        padding = [attr[0], attr[1], attr[0], attr[1]];\r\n\r\n                    } else if (attr.length === 3) {\r\n\r\n                        padding = [attr[0], attr[1], attr[2], attr[1]];\r\n\r\n                    } else if (attr.length === 4) {\r\n\r\n                        padding = [attr[0], attr[1], attr[2], attr[3]];\r\n\r\n                    } else {\r\n\r\n                        return null;\r\n\r\n                    }\r\n\r\n                    /* TODO: take into account tts:direction */\r\n\r\n                    /* \r\n                     * transform [before, end, after, start] according to writingMode to \r\n                     * [top,left,bottom,right]\r\n                     * \r\n                     */\r\n\r\n                    var dir = element.styleAttrs[imscStyles.byName.writingMode.qname];\r\n\r\n                    if (dir === \"lrtb\" || dir === \"lr\") {\r\n\r\n                        padding = [padding[0], padding[3], padding[2], padding[1]];\r\n\r\n                    } else if (dir === \"rltb\" || dir === \"rl\") {\r\n\r\n                        padding = [padding[0], padding[1], padding[2], padding[3]];\r\n\r\n                    } else if (dir === \"tblr\") {\r\n\r\n                        padding = [padding[3], padding[0], padding[1], padding[2]];\r\n\r\n                    } else if (dir === \"tbrl\" || dir === \"tb\") {\r\n\r\n                        padding = [padding[3], padding[2], padding[1], padding[0]];\r\n\r\n                    } else {\r\n\r\n                        return null;\r\n\r\n                    }\r\n\r\n                    var out = [];\r\n\r\n                    for (var i in padding) {\r\n\r\n                        if (padding[i].value === 0) {\r\n\r\n                            out[i] = 0;\r\n\r\n                        } else if (padding[i].unit === \"%\") {\r\n\r\n                            if (i === \"0\" || i === \"2\") {\r\n\r\n                                out[i] = element.styleAttrs[imscStyles.byName.extent.qname].h * padding[i].value / 100;\r\n\r\n                            } else {\r\n\r\n                                out[i] = element.styleAttrs[imscStyles.byName.extent.qname].w * padding[i].value / 100;\r\n                            }\r\n\r\n                        } else if (padding[i].unit === \"em\") {\r\n\r\n                            out[i] = element.styleAttrs[imscStyles.byName.fontSize.qname] * padding[i].value;\r\n\r\n                        } else if (padding[i].unit === \"c\") {\r\n\r\n                            out[i] = padding[i].value / doc.cellResolution.h;\r\n\r\n                        } else if (padding[i].unit === \"px\") {\r\n                            \r\n                            if (i === \"0\" || i === \"2\") {\r\n\r\n                                out[i] = padding[i].value / doc.pxDimensions.h;\r\n\r\n                            } else {\r\n\r\n                                out[i] = padding[i].value / doc.pxDimensions.w;\r\n                            }\r\n                            \r\n                        } else {\r\n\r\n                            return null;\r\n\r\n                        }\r\n                    }\r\n\r\n\r\n                    return out;\r\n                }\r\n        ),\r\n        new StylingAttributeDefinition(\r\n                imscNames.ns_tts,\r\n                \"showBackground\",\r\n                \"always\",\r\n                ['region'],\r\n                false,\r\n                true,\r\n                function (str) {\r\n                    return str;\r\n                },\r\n                null\r\n                ),\r\n        new StylingAttributeDefinition(\r\n                imscNames.ns_tts,\r\n                \"textAlign\",\r\n                \"start\",\r\n                ['p'],\r\n                true,\r\n                true,\r\n                function (str) {\r\n                    return str;\r\n                },\r\n                function (doc, parent, element, attr, context) {\r\n                    \r\n                    /* Section 7.16.9 of XSL */\r\n                    \r\n                    if (attr === \"left\") {\r\n                        \r\n                        return \"start\";\r\n                        \r\n                    } else if (attr === \"right\") {\r\n                        \r\n                        return \"end\";\r\n                        \r\n                    } else {\r\n                        \r\n                        return attr;\r\n                        \r\n                    }\r\n                }\r\n                ),\r\n        new StylingAttributeDefinition(\r\n                imscNames.ns_tts,\r\n                \"textDecoration\",\r\n                \"none\",\r\n                ['span'],\r\n                true,\r\n                true,\r\n                function (str) {\r\n                    return str.split(\" \");\r\n                },\r\n                null\r\n                ),\r\n        new StylingAttributeDefinition(\r\n                imscNames.ns_tts,\r\n                \"textOutline\",\r\n                \"none\",\r\n                ['span'],\r\n                true,\r\n                true,\r\n                function (str) {\r\n\r\n                    /*\r\n                     * returns {c: <color>?, thichness: <length>} | \"none\"\r\n                     * \r\n                     */\r\n\r\n                    if (str === \"none\") {\r\n\r\n                        return str;\r\n\r\n                    } else {\r\n\r\n                        var r = {};\r\n                        var s = str.split(\" \");\r\n                        if (s.length === 0 || s.length > 2) return null;\r\n                        var c = imscUtils.parseColor(s[0]);\r\n                       \r\n                        r.color = c;\r\n                        \r\n                        if (c !== null) s.shift();\r\n\r\n                        if (s.length !== 1) return null;\r\n\r\n                        var l = imscUtils.parseLength(s[0]);\r\n\r\n                        if (!l) return null;\r\n\r\n                        r.thickness = l;\r\n\r\n                        return r;\r\n                    }\r\n\r\n                },\r\n                function (doc, parent, element, attr, context) {\r\n\r\n                    /*\r\n                     * returns {color: <color>, thickness: <norm length>}\r\n                     * \r\n                     */\r\n\r\n                    if (attr === \"none\") return attr;\r\n\r\n                    var rslt = {};\r\n\r\n                    if (attr.color === null) {\r\n                        \r\n                        rslt.color = element.styleAttrs[imscStyles.byName.color.qname];\r\n                        \r\n                    } else {\r\n                        \r\n                        rslt.color = attr.color;\r\n\r\n                    }\r\n\r\n                    if (attr.thickness.unit === \"%\") {\r\n\r\n                        rslt.thickness = element.styleAttrs[imscStyles.byName.fontSize.qname] * attr.thickness.value / 100;\r\n\r\n                    } else if (attr.thickness.unit === \"em\") {\r\n\r\n                        rslt.thickness = element.styleAttrs[imscStyles.byName.fontSize.qname] * attr.thickness.value;\r\n\r\n                    } else if (attr.thickness.unit === \"c\") {\r\n\r\n                        rslt.thickness = attr.thickness.value / doc.cellResolution.h;\r\n\r\n                    } else if (attr.thickness.unit === \"px\") {\r\n\r\n                        rslt.thickness = attr.thickness.value / doc.pxDimensions.h;\r\n\r\n                    } else {\r\n\r\n                        return null;\r\n\r\n                    }\r\n\r\n\r\n                    return rslt;\r\n                }\r\n        ),\r\n        new StylingAttributeDefinition(\r\n                imscNames.ns_tts,\r\n                \"unicodeBidi\",\r\n                \"normal\",\r\n                ['span', 'p'],\r\n                false,\r\n                true,\r\n                function (str) {\r\n                    return str;\r\n                },\r\n                null\r\n                ),\r\n        new StylingAttributeDefinition(\r\n                imscNames.ns_tts,\r\n                \"visibility\",\r\n                \"visible\",\r\n                ['body', 'div', 'p', 'region', 'span'],\r\n                true,\r\n                true,\r\n                function (str) {\r\n                    return str;\r\n                },\r\n                null\r\n                ),\r\n        new StylingAttributeDefinition(\r\n                imscNames.ns_tts,\r\n                \"wrapOption\",\r\n                \"wrap\",\r\n                ['span'],\r\n                true,\r\n                true,\r\n                function (str) {\r\n                    return str;\r\n                },\r\n                null\r\n                ),\r\n        new StylingAttributeDefinition(\r\n                imscNames.ns_tts,\r\n                \"writingMode\",\r\n                \"lrtb\",\r\n                ['region'],\r\n                false,\r\n                true,\r\n                function (str) {\r\n                    return str;\r\n                },\r\n                null\r\n                ),\r\n        new StylingAttributeDefinition(\r\n                imscNames.ns_tts,\r\n                \"zIndex\",\r\n                \"auto\",\r\n                ['region'],\r\n                false,\r\n                true,\r\n                function (str) {\r\n                    \r\n                    var rslt;\r\n                    \r\n                    if (str === 'auto') {\r\n                        \r\n                        rslt = str;\r\n                        \r\n                    } else {\r\n                        \r\n                        rslt = parseInt(str);\r\n                        \r\n                        if (isNaN(rslt)) {\r\n                            rslt = null;\r\n                        }\r\n                        \r\n                    }\r\n                    \r\n                    return rslt;\r\n                },\r\n                null\r\n                ),\r\n        new StylingAttributeDefinition(\r\n                imscNames.ns_ebutts,\r\n                \"linePadding\",\r\n                \"0c\",\r\n                ['p'],\r\n                true,\r\n                false,\r\n                imscUtils.parseLength,\r\n                function (doc, parent, element, attr, context) {\r\n                    if (attr.unit === \"c\") {\r\n\r\n                        return attr.value / doc.cellResolution.h;\r\n\r\n                    } else {\r\n\r\n                        return null;\r\n\r\n                    }\r\n                }\r\n        ),\r\n        new StylingAttributeDefinition(\r\n                imscNames.ns_ebutts,\r\n                \"multiRowAlign\",\r\n                \"auto\",\r\n                ['p'],\r\n                true,\r\n                false,\r\n                function (str) {\r\n                    return str;\r\n                },\r\n                null\r\n                ),\r\n\r\n        new StylingAttributeDefinition(\r\n                imscNames.ns_smpte,\r\n                \"backgroundImage\",\r\n                null,\r\n                ['div'],\r\n                false,\r\n                false,\r\n                function (str) {\r\n                    return str;\r\n                },\r\n                null\r\n                ),\r\n\r\n        new StylingAttributeDefinition(\r\n                imscNames.ns_itts,\r\n                \"forcedDisplay\",\r\n                \"false\",\r\n                ['body', 'div', 'p', 'region', 'span'],\r\n                true,\r\n                true,\r\n                function (str) {\r\n                    return str === 'true' ? true : false;\r\n                },\r\n                null\r\n                ),\r\n\r\n        new StylingAttributeDefinition(\r\n                imscNames.ns_itts,\r\n                \"fillLineGap\",\r\n                \"false\",\r\n                ['p'],\r\n                true,\r\n                true,\r\n                function (str) {\r\n                    return str === 'true' ? true : false;\r\n                },\r\n                null\r\n                )\r\n    ];\r\n\r\n    /* TODO: allow null parse function */\r\n\r\n    imscStyles.byQName = {};\r\n    for (var i in imscStyles.all) {\r\n\r\n        imscStyles.byQName[imscStyles.all[i].qname] = imscStyles.all[i];\r\n    }\r\n\r\n    imscStyles.byName = {};\r\n    for (var j in imscStyles.all) {\r\n\r\n        imscStyles.byName[imscStyles.all[j].name] = imscStyles.all[j];\r\n    }\r\n\r\n})(typeof exports === 'undefined' ? this.imscStyles = {} : exports,\r\n        typeof imscNames === 'undefined' ? require(17) : imscNames,\r\n        typeof imscUtils === 'undefined' ? require(19) : imscUtils);\r\n","/* \r\n * Copyright (c) 2016, Pierre-Anthony Lemieux <pal@sandflow.com>\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *\r\n * * Redistributions of source code must retain the above copyright notice, this\r\n *   list of conditions and the following disclaimer.\r\n * * Redistributions in binary form must reproduce the above copyright notice,\r\n *   this list of conditions and the following disclaimer in the documentation\r\n *   and/or other materials provided with the distribution.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\r\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n * POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n/**\r\n * @module imscUtils\r\n */\r\n\r\n;\r\n(function (imscUtils) { // wrapper for non-node envs\r\n    \r\n    /* Documents the error handler interface */\r\n    \r\n    /**\r\n     * @classdesc Generic interface for handling events. The interface exposes four\r\n     * methods:\r\n     * * <pre>info</pre>: unusual event that does not result in an inconsistent state\r\n     * * <pre>warn</pre>: unexpected event that should not result in an inconsistent state\r\n     * * <pre>error</pre>: unexpected event that may result in an inconsistent state\r\n     * * <pre>fatal</pre>: unexpected event that results in an inconsistent state\r\n     *   and termination of processing\r\n     * Each method takes a single <pre>string</pre> describing the event as argument,\r\n     * and returns a single <pre>boolean</pre>, which terminates processing if <pre>true</pre>.\r\n     *\r\n     * @name ErrorHandler\r\n     * @class\r\n     */\r\n\r\n\r\n    /*\r\n     * Parses a TTML color expression\r\n     * \r\n     */\r\n\r\n    var HEX_COLOR_RE = /#([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})?/;\r\n    var DEC_COLOR_RE = /rgb\\(\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*\\)/;\r\n    var DEC_COLORA_RE = /rgba\\(\\s*(\\d+),\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*\\)/;\r\n    var NAMED_COLOR = {\r\n        transparent: [0, 0, 0, 0],\r\n        black: [0, 0, 0, 255],\r\n        silver: [192, 192, 192, 255],\r\n        gray: [128, 128, 128, 255],\r\n        white: [255, 255, 255, 255],\r\n        maroon: [128, 0, 0, 255],\r\n        red: [255, 0, 0, 255],\r\n        purple: [128, 0, 128, 255],\r\n        fuchsia: [255, 0, 255, 255],\r\n        magenta: [255, 0, 255, 255],\r\n        green: [0, 128, 0, 255],\r\n        lime: [0, 255, 0, 255],\r\n        olive: [128, 128, 0, 255],\r\n        yellow: [255, 255, 0, 255],\r\n        navy: [0, 0, 128, 255],\r\n        blue: [0, 0, 255, 255],\r\n        teal: [0, 128, 128, 255],\r\n        aqua: [0, 255, 255, 255],\r\n        cyan: [0, 255, 255, 255]\r\n    };\r\n\r\n    imscUtils.parseColor = function (str) {\r\n\r\n        var m;\r\n        \r\n        var r = null;\r\n        \r\n        var nc = NAMED_COLOR[str.toLowerCase()];\r\n        \r\n        if (nc !== undefined) {\r\n\r\n            r = nc;\r\n\r\n        } else if ((m = HEX_COLOR_RE.exec(str)) !== null) {\r\n\r\n            r = [parseInt(m[1], 16),\r\n                parseInt(m[2], 16),\r\n                parseInt(m[3], 16),\r\n                (m[4] !== undefined ? parseInt(m[4], 16) : 255)];\r\n            \r\n        } else if ((m = DEC_COLOR_RE.exec(str)) !== null) {\r\n\r\n            r = [parseInt(m[1]),\r\n                parseInt(m[2]),\r\n                parseInt(m[3]),\r\n                255];\r\n            \r\n        } else if ((m = DEC_COLORA_RE.exec(str)) !== null) {\r\n\r\n            r = [parseInt(m[1]),\r\n                parseInt(m[2]),\r\n                parseInt(m[3]),\r\n                parseInt(m[4])];\r\n            \r\n        }\r\n\r\n        return r;\r\n    };\r\n\r\n    var LENGTH_RE = /^((?:\\+|\\-)?\\d*(?:\\.\\d+)?)(px|em|c|%)$/;\r\n\r\n    imscUtils.parseLength = function (str) {\r\n\r\n        var m;\r\n\r\n        var r = null;\r\n\r\n        if ((m = LENGTH_RE.exec(str)) !== null) {\r\n\r\n            r = {value: parseFloat(m[1]), unit: m[2]};\r\n        }\r\n\r\n        return r;\r\n    };\r\n\r\n})(typeof exports === 'undefined' ? this.imscUtils = {} : exports);\r\n","/*!\n * Determine if an object is a Buffer\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n\n// The _isBuffer check is for Safari 5-7 support, because it's missing\n// Object.prototype.constructor. Remove this eventually\nmodule.exports = function (obj) {\n  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)\n}\n\nfunction isBuffer (obj) {\n  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n}\n\n// For Node v0.10 support. Remove this eventually.\nfunction isSlowBuffer (obj) {\n  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))\n}\n","var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n","'use strict';\n\nif (!process.version ||\n    process.version.indexOf('v0.') === 0 ||\n    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {\n  module.exports = { nextTick: nextTick };\n} else {\n  module.exports = process\n}\n\nfunction nextTick(fn, arg1, arg2, arg3) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('\"callback\" argument must be a function');\n  }\n  var len = arguments.length;\n  var args, i;\n  switch (len) {\n  case 0:\n  case 1:\n    return process.nextTick(fn);\n  case 2:\n    return process.nextTick(function afterTickOne() {\n      fn.call(null, arg1);\n    });\n  case 3:\n    return process.nextTick(function afterTickTwo() {\n      fn.call(null, arg1, arg2);\n    });\n  case 4:\n    return process.nextTick(function afterTickThree() {\n      fn.call(null, arg1, arg2, arg3);\n    });\n  default:\n    args = new Array(len - 1);\n    i = 0;\n    while (i < args.length) {\n      args[i++] = arguments[i];\n    }\n    return process.nextTick(function afterTick() {\n      fn.apply(null, args);\n    });\n  }\n}\n\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","module.exports = require(25);\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// a duplex stream is just a stream that is both readable and writable.\n// Since JS doesn't have multiple prototypal inheritance, this class\n// prototypally inherits from Readable, and then parasitically from\n// Writable.\n\n'use strict';\n\n/*<replacement>*/\n\nvar pna = require(22);\n/*</replacement>*/\n\n/*<replacement>*/\nvar objectKeys = Object.keys || function (obj) {\n  var keys = [];\n  for (var key in obj) {\n    keys.push(key);\n  }return keys;\n};\n/*</replacement>*/\n\nmodule.exports = Duplex;\n\n/*<replacement>*/\nvar util = require(33);\nutil.inherits = require(34);\n/*</replacement>*/\n\nvar Readable = require(27);\nvar Writable = require(29);\n\nutil.inherits(Duplex, Readable);\n\n{\n  // avoid scope creep, the keys array can then be collected\n  var keys = objectKeys(Writable.prototype);\n  for (var v = 0; v < keys.length; v++) {\n    var method = keys[v];\n    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];\n  }\n}\n\nfunction Duplex(options) {\n  if (!(this instanceof Duplex)) return new Duplex(options);\n\n  Readable.call(this, options);\n  Writable.call(this, options);\n\n  if (options && options.readable === false) this.readable = false;\n\n  if (options && options.writable === false) this.writable = false;\n\n  this.allowHalfOpen = true;\n  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;\n\n  this.once('end', onend);\n}\n\nObject.defineProperty(Duplex.prototype, 'writableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function () {\n    return this._writableState.highWaterMark;\n  }\n});\n\n// the no-half-open enforcer\nfunction onend() {\n  // if we allow half-open state, or if the writable side ended,\n  // then we're ok.\n  if (this.allowHalfOpen || this._writableState.ended) return;\n\n  // no more data can be written.\n  // But allow more writes to happen in this tick.\n  pna.nextTick(onEndNT, this);\n}\n\nfunction onEndNT(self) {\n  self.end();\n}\n\nObject.defineProperty(Duplex.prototype, 'destroyed', {\n  get: function () {\n    if (this._readableState === undefined || this._writableState === undefined) {\n      return false;\n    }\n    return this._readableState.destroyed && this._writableState.destroyed;\n  },\n  set: function (value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (this._readableState === undefined || this._writableState === undefined) {\n      return;\n    }\n\n    // backward compatibility, the user is explicitly\n    // managing destroyed\n    this._readableState.destroyed = value;\n    this._writableState.destroyed = value;\n  }\n});\n\nDuplex.prototype._destroy = function (err, cb) {\n  this.push(null);\n  this.end();\n\n  pna.nextTick(cb, err);\n};","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// a passthrough stream.\n// basically just the most minimal sort of Transform stream.\n// Every written chunk gets output as-is.\n\n'use strict';\n\nmodule.exports = PassThrough;\n\nvar Transform = require(28);\n\n/*<replacement>*/\nvar util = require(33);\nutil.inherits = require(34);\n/*</replacement>*/\n\nutil.inherits(PassThrough, Transform);\n\nfunction PassThrough(options) {\n  if (!(this instanceof PassThrough)) return new PassThrough(options);\n\n  Transform.call(this, options);\n}\n\nPassThrough.prototype._transform = function (chunk, encoding, cb) {\n  cb(null, chunk);\n};","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\n/*<replacement>*/\n\nvar pna = require('process-nextick-args');\n/*</replacement>*/\n\nmodule.exports = Readable;\n\n/*<replacement>*/\nvar isArray = require('isarray');\n/*</replacement>*/\n\n/*<replacement>*/\nvar Duplex;\n/*</replacement>*/\n\nReadable.ReadableState = ReadableState;\n\n/*<replacement>*/\nvar EE = require('events').EventEmitter;\n\nvar EElistenerCount = function (emitter, type) {\n  return emitter.listeners(type).length;\n};\n/*</replacement>*/\n\n/*<replacement>*/\nvar Stream = require('./internal/streams/stream');\n/*</replacement>*/\n\n/*<replacement>*/\n\nvar Buffer = require('safe-buffer').Buffer;\nvar OurUint8Array = global.Uint8Array || function () {};\nfunction _uint8ArrayToBuffer(chunk) {\n  return Buffer.from(chunk);\n}\nfunction _isUint8Array(obj) {\n  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;\n}\n\n/*</replacement>*/\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\n/*<replacement>*/\nvar debugUtil = require('util');\nvar debug = void 0;\nif (debugUtil && debugUtil.debuglog) {\n  debug = debugUtil.debuglog('stream');\n} else {\n  debug = function () {};\n}\n/*</replacement>*/\n\nvar BufferList = require('./internal/streams/BufferList');\nvar destroyImpl = require('./internal/streams/destroy');\nvar StringDecoder;\n\nutil.inherits(Readable, Stream);\n\nvar kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];\n\nfunction prependListener(emitter, event, fn) {\n  // Sadly this is not cacheable as some libraries bundle their own\n  // event emitter implementation with them.\n  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn);\n\n  // This is a hack to make sure that our error handler is attached before any\n  // userland ones.  NEVER DO THIS. This is here only because this code needs\n  // to continue to work with older versions of Node.js that do not include\n  // the prependListener() method. The goal is to eventually remove this hack.\n  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];\n}\n\nfunction ReadableState(options, stream) {\n  Duplex = Duplex || require('./_stream_duplex');\n\n  options = options || {};\n\n  // Duplex streams are both readable and writable, but share\n  // the same options object.\n  // However, some cases require setting options to different\n  // values for the readable and the writable sides of the duplex stream.\n  // These options can be provided separately as readableXXX and writableXXX.\n  var isDuplex = stream instanceof Duplex;\n\n  // object stream flag. Used to make read(n) ignore n and to\n  // make all the buffer merging and length checks go away\n  this.objectMode = !!options.objectMode;\n\n  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;\n\n  // the point at which it stops calling _read() to fill the buffer\n  // Note: 0 is a valid value, means \"don't call _read preemptively ever\"\n  var hwm = options.highWaterMark;\n  var readableHwm = options.readableHighWaterMark;\n  var defaultHwm = this.objectMode ? 16 : 16 * 1024;\n\n  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (readableHwm || readableHwm === 0)) this.highWaterMark = readableHwm;else this.highWaterMark = defaultHwm;\n\n  // cast to ints.\n  this.highWaterMark = Math.floor(this.highWaterMark);\n\n  // A linked list is used to store data chunks instead of an array because the\n  // linked list can remove elements from the beginning faster than\n  // array.shift()\n  this.buffer = new BufferList();\n  this.length = 0;\n  this.pipes = null;\n  this.pipesCount = 0;\n  this.flowing = null;\n  this.ended = false;\n  this.endEmitted = false;\n  this.reading = false;\n\n  // a flag to be able to tell if the event 'readable'/'data' is emitted\n  // immediately, or on a later tick.  We set this to true at first, because\n  // any actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first read call.\n  this.sync = true;\n\n  // whenever we return null, then we set a flag to say\n  // that we're awaiting a 'readable' event emission.\n  this.needReadable = false;\n  this.emittedReadable = false;\n  this.readableListening = false;\n  this.resumeScheduled = false;\n\n  // has it been destroyed\n  this.destroyed = false;\n\n  // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n  this.defaultEncoding = options.defaultEncoding || 'utf8';\n\n  // the number of writers that are awaiting a drain event in .pipe()s\n  this.awaitDrain = 0;\n\n  // if true, a maybeReadMore has been scheduled\n  this.readingMore = false;\n\n  this.decoder = null;\n  this.encoding = null;\n  if (options.encoding) {\n    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;\n    this.decoder = new StringDecoder(options.encoding);\n    this.encoding = options.encoding;\n  }\n}\n\nfunction Readable(options) {\n  Duplex = Duplex || require('./_stream_duplex');\n\n  if (!(this instanceof Readable)) return new Readable(options);\n\n  this._readableState = new ReadableState(options, this);\n\n  // legacy\n  this.readable = true;\n\n  if (options) {\n    if (typeof options.read === 'function') this._read = options.read;\n\n    if (typeof options.destroy === 'function') this._destroy = options.destroy;\n  }\n\n  Stream.call(this);\n}\n\nObject.defineProperty(Readable.prototype, 'destroyed', {\n  get: function () {\n    if (this._readableState === undefined) {\n      return false;\n    }\n    return this._readableState.destroyed;\n  },\n  set: function (value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (!this._readableState) {\n      return;\n    }\n\n    // backward compatibility, the user is explicitly\n    // managing destroyed\n    this._readableState.destroyed = value;\n  }\n});\n\nReadable.prototype.destroy = destroyImpl.destroy;\nReadable.prototype._undestroy = destroyImpl.undestroy;\nReadable.prototype._destroy = function (err, cb) {\n  this.push(null);\n  cb(err);\n};\n\n// Manually shove something into the read() buffer.\n// This returns true if the highWaterMark has not been hit yet,\n// similar to how Writable.write() returns true if you should\n// write() some more.\nReadable.prototype.push = function (chunk, encoding) {\n  var state = this._readableState;\n  var skipChunkCheck;\n\n  if (!state.objectMode) {\n    if (typeof chunk === 'string') {\n      encoding = encoding || state.defaultEncoding;\n      if (encoding !== state.encoding) {\n        chunk = Buffer.from(chunk, encoding);\n        encoding = '';\n      }\n      skipChunkCheck = true;\n    }\n  } else {\n    skipChunkCheck = true;\n  }\n\n  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);\n};\n\n// Unshift should *always* be something directly out of read()\nReadable.prototype.unshift = function (chunk) {\n  return readableAddChunk(this, chunk, null, true, false);\n};\n\nfunction readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {\n  var state = stream._readableState;\n  if (chunk === null) {\n    state.reading = false;\n    onEofChunk(stream, state);\n  } else {\n    var er;\n    if (!skipChunkCheck) er = chunkInvalid(state, chunk);\n    if (er) {\n      stream.emit('error', er);\n    } else if (state.objectMode || chunk && chunk.length > 0) {\n      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {\n        chunk = _uint8ArrayToBuffer(chunk);\n      }\n\n      if (addToFront) {\n        if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event'));else addChunk(stream, state, chunk, true);\n      } else if (state.ended) {\n        stream.emit('error', new Error('stream.push() after EOF'));\n      } else {\n        state.reading = false;\n        if (state.decoder && !encoding) {\n          chunk = state.decoder.write(chunk);\n          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);\n        } else {\n          addChunk(stream, state, chunk, false);\n        }\n      }\n    } else if (!addToFront) {\n      state.reading = false;\n    }\n  }\n\n  return needMoreData(state);\n}\n\nfunction addChunk(stream, state, chunk, addToFront) {\n  if (state.flowing && state.length === 0 && !state.sync) {\n    stream.emit('data', chunk);\n    stream.read(0);\n  } else {\n    // update the buffer info.\n    state.length += state.objectMode ? 1 : chunk.length;\n    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);\n\n    if (state.needReadable) emitReadable(stream);\n  }\n  maybeReadMore(stream, state);\n}\n\nfunction chunkInvalid(state, chunk) {\n  var er;\n  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {\n    er = new TypeError('Invalid non-string/buffer chunk');\n  }\n  return er;\n}\n\n// if it's past the high water mark, we can push in some more.\n// Also, if we have no data yet, we can stand some\n// more bytes.  This is to work around cases where hwm=0,\n// such as the repl.  Also, if the push() triggered a\n// readable event, and the user called read(largeNumber) such that\n// needReadable was set, then we ought to push more, so that another\n// 'readable' event will be triggered.\nfunction needMoreData(state) {\n  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);\n}\n\nReadable.prototype.isPaused = function () {\n  return this._readableState.flowing === false;\n};\n\n// backwards compatibility.\nReadable.prototype.setEncoding = function (enc) {\n  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;\n  this._readableState.decoder = new StringDecoder(enc);\n  this._readableState.encoding = enc;\n  return this;\n};\n\n// Don't raise the hwm > 8MB\nvar MAX_HWM = 0x800000;\nfunction computeNewHighWaterMark(n) {\n  if (n >= MAX_HWM) {\n    n = MAX_HWM;\n  } else {\n    // Get the next highest power of 2 to prevent increasing hwm excessively in\n    // tiny amounts\n    n--;\n    n |= n >>> 1;\n    n |= n >>> 2;\n    n |= n >>> 4;\n    n |= n >>> 8;\n    n |= n >>> 16;\n    n++;\n  }\n  return n;\n}\n\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction howMuchToRead(n, state) {\n  if (n <= 0 || state.length === 0 && state.ended) return 0;\n  if (state.objectMode) return 1;\n  if (n !== n) {\n    // Only flow one buffer at a time\n    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;\n  }\n  // If we're asking for more than the current hwm, then raise the hwm.\n  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);\n  if (n <= state.length) return n;\n  // Don't have enough\n  if (!state.ended) {\n    state.needReadable = true;\n    return 0;\n  }\n  return state.length;\n}\n\n// you can override either this method, or the async _read(n) below.\nReadable.prototype.read = function (n) {\n  debug('read', n);\n  n = parseInt(n, 10);\n  var state = this._readableState;\n  var nOrig = n;\n\n  if (n !== 0) state.emittedReadable = false;\n\n  // if we're doing read(0) to trigger a readable event, but we\n  // already have a bunch of data in the buffer, then just trigger\n  // the 'readable' event and move on.\n  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {\n    debug('read: emitReadable', state.length, state.ended);\n    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);\n    return null;\n  }\n\n  n = howMuchToRead(n, state);\n\n  // if we've ended, and we're now clear, then finish it up.\n  if (n === 0 && state.ended) {\n    if (state.length === 0) endReadable(this);\n    return null;\n  }\n\n  // All the actual chunk generation logic needs to be\n  // *below* the call to _read.  The reason is that in certain\n  // synthetic stream cases, such as passthrough streams, _read\n  // may be a completely synchronous operation which may change\n  // the state of the read buffer, providing enough data when\n  // before there was *not* enough.\n  //\n  // So, the steps are:\n  // 1. Figure out what the state of things will be after we do\n  // a read from the buffer.\n  //\n  // 2. If that resulting state will trigger a _read, then call _read.\n  // Note that this may be asynchronous, or synchronous.  Yes, it is\n  // deeply ugly to write APIs this way, but that still doesn't mean\n  // that the Readable class should behave improperly, as streams are\n  // designed to be sync/async agnostic.\n  // Take note if the _read call is sync or async (ie, if the read call\n  // has returned yet), so that we know whether or not it's safe to emit\n  // 'readable' etc.\n  //\n  // 3. Actually pull the requested chunks out of the buffer and return.\n\n  // if we need a readable event, then we need to do some reading.\n  var doRead = state.needReadable;\n  debug('need readable', doRead);\n\n  // if we currently have less than the highWaterMark, then also read some\n  if (state.length === 0 || state.length - n < state.highWaterMark) {\n    doRead = true;\n    debug('length less than watermark', doRead);\n  }\n\n  // however, if we've ended, then there's no point, and if we're already\n  // reading, then it's unnecessary.\n  if (state.ended || state.reading) {\n    doRead = false;\n    debug('reading or ended', doRead);\n  } else if (doRead) {\n    debug('do read');\n    state.reading = true;\n    state.sync = true;\n    // if the length is currently zero, then we *need* a readable event.\n    if (state.length === 0) state.needReadable = true;\n    // call internal read method\n    this._read(state.highWaterMark);\n    state.sync = false;\n    // If _read pushed data synchronously, then `reading` will be false,\n    // and we need to re-evaluate how much data we can return to the user.\n    if (!state.reading) n = howMuchToRead(nOrig, state);\n  }\n\n  var ret;\n  if (n > 0) ret = fromList(n, state);else ret = null;\n\n  if (ret === null) {\n    state.needReadable = true;\n    n = 0;\n  } else {\n    state.length -= n;\n  }\n\n  if (state.length === 0) {\n    // If we have nothing in the buffer, then we want to know\n    // as soon as we *do* get something into the buffer.\n    if (!state.ended) state.needReadable = true;\n\n    // If we tried to read() past the EOF, then emit end on the next tick.\n    if (nOrig !== n && state.ended) endReadable(this);\n  }\n\n  if (ret !== null) this.emit('data', ret);\n\n  return ret;\n};\n\nfunction onEofChunk(stream, state) {\n  if (state.ended) return;\n  if (state.decoder) {\n    var chunk = state.decoder.end();\n    if (chunk && chunk.length) {\n      state.buffer.push(chunk);\n      state.length += state.objectMode ? 1 : chunk.length;\n    }\n  }\n  state.ended = true;\n\n  // emit 'readable' now to make sure it gets picked up.\n  emitReadable(stream);\n}\n\n// Don't emit readable right away in sync mode, because this can trigger\n// another read() call => stack overflow.  This way, it might trigger\n// a nextTick recursion warning, but that's not so bad.\nfunction emitReadable(stream) {\n  var state = stream._readableState;\n  state.needReadable = false;\n  if (!state.emittedReadable) {\n    debug('emitReadable', state.flowing);\n    state.emittedReadable = true;\n    if (state.sync) pna.nextTick(emitReadable_, stream);else emitReadable_(stream);\n  }\n}\n\nfunction emitReadable_(stream) {\n  debug('emit readable');\n  stream.emit('readable');\n  flow(stream);\n}\n\n// at this point, the user has presumably seen the 'readable' event,\n// and called read() to consume some data.  that may have triggered\n// in turn another _read(n) call, in which case reading = true if\n// it's in progress.\n// However, if we're not ended, or reading, and the length < hwm,\n// then go ahead and try to read some more preemptively.\nfunction maybeReadMore(stream, state) {\n  if (!state.readingMore) {\n    state.readingMore = true;\n    pna.nextTick(maybeReadMore_, stream, state);\n  }\n}\n\nfunction maybeReadMore_(stream, state) {\n  var len = state.length;\n  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {\n    debug('maybeReadMore read 0');\n    stream.read(0);\n    if (len === state.length)\n      // didn't get any data, stop spinning.\n      break;else len = state.length;\n  }\n  state.readingMore = false;\n}\n\n// abstract method.  to be overridden in specific implementation classes.\n// call cb(er, data) where data is <= n in length.\n// for virtual (non-string, non-buffer) streams, \"length\" is somewhat\n// arbitrary, and perhaps not very meaningful.\nReadable.prototype._read = function (n) {\n  this.emit('error', new Error('_read() is not implemented'));\n};\n\nReadable.prototype.pipe = function (dest, pipeOpts) {\n  var src = this;\n  var state = this._readableState;\n\n  switch (state.pipesCount) {\n    case 0:\n      state.pipes = dest;\n      break;\n    case 1:\n      state.pipes = [state.pipes, dest];\n      break;\n    default:\n      state.pipes.push(dest);\n      break;\n  }\n  state.pipesCount += 1;\n  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);\n\n  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;\n\n  var endFn = doEnd ? onend : unpipe;\n  if (state.endEmitted) pna.nextTick(endFn);else src.once('end', endFn);\n\n  dest.on('unpipe', onunpipe);\n  function onunpipe(readable, unpipeInfo) {\n    debug('onunpipe');\n    if (readable === src) {\n      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {\n        unpipeInfo.hasUnpiped = true;\n        cleanup();\n      }\n    }\n  }\n\n  function onend() {\n    debug('onend');\n    dest.end();\n  }\n\n  // when the dest drains, it reduces the awaitDrain counter\n  // on the source.  This would be more elegant with a .once()\n  // handler in flow(), but adding and removing repeatedly is\n  // too slow.\n  var ondrain = pipeOnDrain(src);\n  dest.on('drain', ondrain);\n\n  var cleanedUp = false;\n  function cleanup() {\n    debug('cleanup');\n    // cleanup event handlers once the pipe is broken\n    dest.removeListener('close', onclose);\n    dest.removeListener('finish', onfinish);\n    dest.removeListener('drain', ondrain);\n    dest.removeListener('error', onerror);\n    dest.removeListener('unpipe', onunpipe);\n    src.removeListener('end', onend);\n    src.removeListener('end', unpipe);\n    src.removeListener('data', ondata);\n\n    cleanedUp = true;\n\n    // if the reader is waiting for a drain event from this\n    // specific writer, then it would cause it to never start\n    // flowing again.\n    // So, if this is awaiting a drain, then we just call it now.\n    // If we don't know, then assume that we are waiting for one.\n    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();\n  }\n\n  // If the user pushes more data while we're writing to dest then we'll end up\n  // in ondata again. However, we only want to increase awaitDrain once because\n  // dest will only emit one 'drain' event for the multiple writes.\n  // => Introduce a guard on increasing awaitDrain.\n  var increasedAwaitDrain = false;\n  src.on('data', ondata);\n  function ondata(chunk) {\n    debug('ondata');\n    increasedAwaitDrain = false;\n    var ret = dest.write(chunk);\n    if (false === ret && !increasedAwaitDrain) {\n      // If the user unpiped during `dest.write()`, it is possible\n      // to get stuck in a permanently paused state if that write\n      // also returned false.\n      // => Check whether `dest` is still a piping destination.\n      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {\n        debug('false write response, pause', src._readableState.awaitDrain);\n        src._readableState.awaitDrain++;\n        increasedAwaitDrain = true;\n      }\n      src.pause();\n    }\n  }\n\n  // if the dest has an error, then stop piping into it.\n  // however, don't suppress the throwing behavior for this.\n  function onerror(er) {\n    debug('onerror', er);\n    unpipe();\n    dest.removeListener('error', onerror);\n    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);\n  }\n\n  // Make sure our error handler is attached before userland ones.\n  prependListener(dest, 'error', onerror);\n\n  // Both close and finish should trigger unpipe, but only once.\n  function onclose() {\n    dest.removeListener('finish', onfinish);\n    unpipe();\n  }\n  dest.once('close', onclose);\n  function onfinish() {\n    debug('onfinish');\n    dest.removeListener('close', onclose);\n    unpipe();\n  }\n  dest.once('finish', onfinish);\n\n  function unpipe() {\n    debug('unpipe');\n    src.unpipe(dest);\n  }\n\n  // tell the dest that it's being piped to\n  dest.emit('pipe', src);\n\n  // start the flow if it hasn't been started already.\n  if (!state.flowing) {\n    debug('pipe resume');\n    src.resume();\n  }\n\n  return dest;\n};\n\nfunction pipeOnDrain(src) {\n  return function () {\n    var state = src._readableState;\n    debug('pipeOnDrain', state.awaitDrain);\n    if (state.awaitDrain) state.awaitDrain--;\n    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {\n      state.flowing = true;\n      flow(src);\n    }\n  };\n}\n\nReadable.prototype.unpipe = function (dest) {\n  var state = this._readableState;\n  var unpipeInfo = { hasUnpiped: false };\n\n  // if we're not piping anywhere, then do nothing.\n  if (state.pipesCount === 0) return this;\n\n  // just one destination.  most common case.\n  if (state.pipesCount === 1) {\n    // passed in one, but it's not the right one.\n    if (dest && dest !== state.pipes) return this;\n\n    if (!dest) dest = state.pipes;\n\n    // got a match.\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n    if (dest) dest.emit('unpipe', this, unpipeInfo);\n    return this;\n  }\n\n  // slow case. multiple pipe destinations.\n\n  if (!dest) {\n    // remove all.\n    var dests = state.pipes;\n    var len = state.pipesCount;\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n\n    for (var i = 0; i < len; i++) {\n      dests[i].emit('unpipe', this, unpipeInfo);\n    }return this;\n  }\n\n  // try to find the right one.\n  var index = indexOf(state.pipes, dest);\n  if (index === -1) return this;\n\n  state.pipes.splice(index, 1);\n  state.pipesCount -= 1;\n  if (state.pipesCount === 1) state.pipes = state.pipes[0];\n\n  dest.emit('unpipe', this, unpipeInfo);\n\n  return this;\n};\n\n// set up data events if they are asked for\n// Ensure readable listeners eventually get something\nReadable.prototype.on = function (ev, fn) {\n  var res = Stream.prototype.on.call(this, ev, fn);\n\n  if (ev === 'data') {\n    // Start flowing on next tick if stream isn't explicitly paused\n    if (this._readableState.flowing !== false) this.resume();\n  } else if (ev === 'readable') {\n    var state = this._readableState;\n    if (!state.endEmitted && !state.readableListening) {\n      state.readableListening = state.needReadable = true;\n      state.emittedReadable = false;\n      if (!state.reading) {\n        pna.nextTick(nReadingNextTick, this);\n      } else if (state.length) {\n        emitReadable(this);\n      }\n    }\n  }\n\n  return res;\n};\nReadable.prototype.addListener = Readable.prototype.on;\n\nfunction nReadingNextTick(self) {\n  debug('readable nexttick read 0');\n  self.read(0);\n}\n\n// pause() and resume() are remnants of the legacy readable stream API\n// If the user uses them, then switch into old mode.\nReadable.prototype.resume = function () {\n  var state = this._readableState;\n  if (!state.flowing) {\n    debug('resume');\n    state.flowing = true;\n    resume(this, state);\n  }\n  return this;\n};\n\nfunction resume(stream, state) {\n  if (!state.resumeScheduled) {\n    state.resumeScheduled = true;\n    pna.nextTick(resume_, stream, state);\n  }\n}\n\nfunction resume_(stream, state) {\n  if (!state.reading) {\n    debug('resume read 0');\n    stream.read(0);\n  }\n\n  state.resumeScheduled = false;\n  state.awaitDrain = 0;\n  stream.emit('resume');\n  flow(stream);\n  if (state.flowing && !state.reading) stream.read(0);\n}\n\nReadable.prototype.pause = function () {\n  debug('call pause flowing=%j', this._readableState.flowing);\n  if (false !== this._readableState.flowing) {\n    debug('pause');\n    this._readableState.flowing = false;\n    this.emit('pause');\n  }\n  return this;\n};\n\nfunction flow(stream) {\n  var state = stream._readableState;\n  debug('flow', state.flowing);\n  while (state.flowing && stream.read() !== null) {}\n}\n\n// wrap an old-style stream as the async data source.\n// This is *not* part of the readable stream interface.\n// It is an ugly unfortunate mess of history.\nReadable.prototype.wrap = function (stream) {\n  var _this = this;\n\n  var state = this._readableState;\n  var paused = false;\n\n  stream.on('end', function () {\n    debug('wrapped end');\n    if (state.decoder && !state.ended) {\n      var chunk = state.decoder.end();\n      if (chunk && chunk.length) _this.push(chunk);\n    }\n\n    _this.push(null);\n  });\n\n  stream.on('data', function (chunk) {\n    debug('wrapped data');\n    if (state.decoder) chunk = state.decoder.write(chunk);\n\n    // don't skip over falsy values in objectMode\n    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;\n\n    var ret = _this.push(chunk);\n    if (!ret) {\n      paused = true;\n      stream.pause();\n    }\n  });\n\n  // proxy all the other methods.\n  // important when wrapping filters and duplexes.\n  for (var i in stream) {\n    if (this[i] === undefined && typeof stream[i] === 'function') {\n      this[i] = function (method) {\n        return function () {\n          return stream[method].apply(stream, arguments);\n        };\n      }(i);\n    }\n  }\n\n  // proxy certain important events.\n  for (var n = 0; n < kProxyEvents.length; n++) {\n    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));\n  }\n\n  // when we try to consume some more bytes, simply unpause the\n  // underlying stream.\n  this._read = function (n) {\n    debug('wrapped _read', n);\n    if (paused) {\n      paused = false;\n      stream.resume();\n    }\n  };\n\n  return this;\n};\n\nObject.defineProperty(Readable.prototype, 'readableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function () {\n    return this._readableState.highWaterMark;\n  }\n});\n\n// exposed for testing purposes only.\nReadable._fromList = fromList;\n\n// Pluck off n bytes from an array of buffers.\n// Length is the combined lengths of all the buffers in the list.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction fromList(n, state) {\n  // nothing buffered\n  if (state.length === 0) return null;\n\n  var ret;\n  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {\n    // read it all, truncate the list\n    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);\n    state.buffer.clear();\n  } else {\n    // read part of list\n    ret = fromListPartial(n, state.buffer, state.decoder);\n  }\n\n  return ret;\n}\n\n// Extracts only enough buffered data to satisfy the amount requested.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction fromListPartial(n, list, hasStrings) {\n  var ret;\n  if (n < list.head.data.length) {\n    // slice is the same for buffers and strings\n    ret = list.head.data.slice(0, n);\n    list.head.data = list.head.data.slice(n);\n  } else if (n === list.head.data.length) {\n    // first chunk is a perfect match\n    ret = list.shift();\n  } else {\n    // result spans more than one buffer\n    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);\n  }\n  return ret;\n}\n\n// Copies a specified amount of characters from the list of buffered data\n// chunks.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction copyFromBufferString(n, list) {\n  var p = list.head;\n  var c = 1;\n  var ret = p.data;\n  n -= ret.length;\n  while (p = p.next) {\n    var str = p.data;\n    var nb = n > str.length ? str.length : n;\n    if (nb === str.length) ret += str;else ret += str.slice(0, n);\n    n -= nb;\n    if (n === 0) {\n      if (nb === str.length) {\n        ++c;\n        if (p.next) list.head = p.next;else list.head = list.tail = null;\n      } else {\n        list.head = p;\n        p.data = str.slice(nb);\n      }\n      break;\n    }\n    ++c;\n  }\n  list.length -= c;\n  return ret;\n}\n\n// Copies a specified amount of bytes from the list of buffered data chunks.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction copyFromBuffer(n, list) {\n  var ret = Buffer.allocUnsafe(n);\n  var p = list.head;\n  var c = 1;\n  p.data.copy(ret);\n  n -= p.data.length;\n  while (p = p.next) {\n    var buf = p.data;\n    var nb = n > buf.length ? buf.length : n;\n    buf.copy(ret, ret.length - n, 0, nb);\n    n -= nb;\n    if (n === 0) {\n      if (nb === buf.length) {\n        ++c;\n        if (p.next) list.head = p.next;else list.head = list.tail = null;\n      } else {\n        list.head = p;\n        p.data = buf.slice(nb);\n      }\n      break;\n    }\n    ++c;\n  }\n  list.length -= c;\n  return ret;\n}\n\nfunction endReadable(stream) {\n  var state = stream._readableState;\n\n  // If we get here before consuming all the bytes, then that is a\n  // bug in node.  Should never happen.\n  if (state.length > 0) throw new Error('\"endReadable()\" called on non-empty stream');\n\n  if (!state.endEmitted) {\n    state.ended = true;\n    pna.nextTick(endReadableNT, state, stream);\n  }\n}\n\nfunction endReadableNT(state, stream) {\n  // Check that we didn't get one last unshift.\n  if (!state.endEmitted && state.length === 0) {\n    state.endEmitted = true;\n    stream.readable = false;\n    stream.emit('end');\n  }\n}\n\nfunction indexOf(xs, x) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    if (xs[i] === x) return i;\n  }\n  return -1;\n}","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// a transform stream is a readable/writable stream where you do\n// something with the data.  Sometimes it's called a \"filter\",\n// but that's not a great name for it, since that implies a thing where\n// some bits pass through, and others are simply ignored.  (That would\n// be a valid example of a transform, of course.)\n//\n// While the output is causally related to the input, it's not a\n// necessarily symmetric or synchronous transformation.  For example,\n// a zlib stream might take multiple plain-text writes(), and then\n// emit a single compressed chunk some time in the future.\n//\n// Here's how this works:\n//\n// The Transform stream has all the aspects of the readable and writable\n// stream classes.  When you write(chunk), that calls _write(chunk,cb)\n// internally, and returns false if there's a lot of pending writes\n// buffered up.  When you call read(), that calls _read(n) until\n// there's enough pending readable data buffered up.\n//\n// In a transform stream, the written data is placed in a buffer.  When\n// _read(n) is called, it transforms the queued up data, calling the\n// buffered _write cb's as it consumes chunks.  If consuming a single\n// written chunk would result in multiple output chunks, then the first\n// outputted bit calls the readcb, and subsequent chunks just go into\n// the read buffer, and will cause it to emit 'readable' if necessary.\n//\n// This way, back-pressure is actually determined by the reading side,\n// since _read has to be called to start processing a new chunk.  However,\n// a pathological inflate type of transform can cause excessive buffering\n// here.  For example, imagine a stream where every byte of input is\n// interpreted as an integer from 0-255, and then results in that many\n// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in\n// 1kb of data being output.  In this case, you could write a very small\n// amount of input, and end up with a very large amount of output.  In\n// such a pathological inflating mechanism, there'd be no way to tell\n// the system to stop doing the transform.  A single 4MB write could\n// cause the system to run out of memory.\n//\n// However, even in such a pathological case, only a single written chunk\n// would be consumed, and then the rest would wait (un-transformed) until\n// the results of the previous transformed chunk were consumed.\n\n'use strict';\n\nmodule.exports = Transform;\n\nvar Duplex = require(25);\n\n/*<replacement>*/\nvar util = require(33);\nutil.inherits = require(34);\n/*</replacement>*/\n\nutil.inherits(Transform, Duplex);\n\nfunction afterTransform(er, data) {\n  var ts = this._transformState;\n  ts.transforming = false;\n\n  var cb = ts.writecb;\n\n  if (!cb) {\n    return this.emit('error', new Error('write callback called multiple times'));\n  }\n\n  ts.writechunk = null;\n  ts.writecb = null;\n\n  if (data != null) // single equals check for both `null` and `undefined`\n    this.push(data);\n\n  cb(er);\n\n  var rs = this._readableState;\n  rs.reading = false;\n  if (rs.needReadable || rs.length < rs.highWaterMark) {\n    this._read(rs.highWaterMark);\n  }\n}\n\nfunction Transform(options) {\n  if (!(this instanceof Transform)) return new Transform(options);\n\n  Duplex.call(this, options);\n\n  this._transformState = {\n    afterTransform: afterTransform.bind(this),\n    needTransform: false,\n    transforming: false,\n    writecb: null,\n    writechunk: null,\n    writeencoding: null\n  };\n\n  // start out asking for a readable event once data is transformed.\n  this._readableState.needReadable = true;\n\n  // we have implemented the _read method, and done the other things\n  // that Readable wants before the first _read call, so unset the\n  // sync guard flag.\n  this._readableState.sync = false;\n\n  if (options) {\n    if (typeof options.transform === 'function') this._transform = options.transform;\n\n    if (typeof options.flush === 'function') this._flush = options.flush;\n  }\n\n  // When the writable side finishes, then flush out anything remaining.\n  this.on('prefinish', prefinish);\n}\n\nfunction prefinish() {\n  var _this = this;\n\n  if (typeof this._flush === 'function') {\n    this._flush(function (er, data) {\n      done(_this, er, data);\n    });\n  } else {\n    done(this, null, null);\n  }\n}\n\nTransform.prototype.push = function (chunk, encoding) {\n  this._transformState.needTransform = false;\n  return Duplex.prototype.push.call(this, chunk, encoding);\n};\n\n// This is the part where you do stuff!\n// override this function in implementation classes.\n// 'chunk' is an input chunk.\n//\n// Call `push(newChunk)` to pass along transformed output\n// to the readable side.  You may call 'push' zero or more times.\n//\n// Call `cb(err)` when you are done with this chunk.  If you pass\n// an error, then that'll put the hurt on the whole operation.  If you\n// never call cb(), then you'll never get another chunk.\nTransform.prototype._transform = function (chunk, encoding, cb) {\n  throw new Error('_transform() is not implemented');\n};\n\nTransform.prototype._write = function (chunk, encoding, cb) {\n  var ts = this._transformState;\n  ts.writecb = cb;\n  ts.writechunk = chunk;\n  ts.writeencoding = encoding;\n  if (!ts.transforming) {\n    var rs = this._readableState;\n    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);\n  }\n};\n\n// Doesn't matter what the args are here.\n// _transform does all the work.\n// That we got here means that the readable side wants more data.\nTransform.prototype._read = function (n) {\n  var ts = this._transformState;\n\n  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {\n    ts.transforming = true;\n    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);\n  } else {\n    // mark that we need a transform, so that any data that comes in\n    // will get processed, now that we've asked for it.\n    ts.needTransform = true;\n  }\n};\n\nTransform.prototype._destroy = function (err, cb) {\n  var _this2 = this;\n\n  Duplex.prototype._destroy.call(this, err, function (err2) {\n    cb(err2);\n    _this2.emit('close');\n  });\n};\n\nfunction done(stream, er, data) {\n  if (er) return stream.emit('error', er);\n\n  if (data != null) // single equals check for both `null` and `undefined`\n    stream.push(data);\n\n  // if there's nothing in the write buffer, then that means\n  // that nothing more will ever be provided\n  if (stream._writableState.length) throw new Error('Calling transform done when ws.length != 0');\n\n  if (stream._transformState.transforming) throw new Error('Calling transform done when still transforming');\n\n  return stream.push(null);\n}","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// A bit simpler than readable streams.\n// Implement an async ._write(chunk, encoding, cb), and it'll handle all\n// the drain event emission and buffering.\n\n'use strict';\n\n/*<replacement>*/\n\nvar pna = require('process-nextick-args');\n/*</replacement>*/\n\nmodule.exports = Writable;\n\n/* <replacement> */\nfunction WriteReq(chunk, encoding, cb) {\n  this.chunk = chunk;\n  this.encoding = encoding;\n  this.callback = cb;\n  this.next = null;\n}\n\n// It seems a linked list but it is not\n// there will be only 2 of these for each stream\nfunction CorkedRequest(state) {\n  var _this = this;\n\n  this.next = null;\n  this.entry = null;\n  this.finish = function () {\n    onCorkedFinish(_this, state);\n  };\n}\n/* </replacement> */\n\n/*<replacement>*/\nvar asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : pna.nextTick;\n/*</replacement>*/\n\n/*<replacement>*/\nvar Duplex;\n/*</replacement>*/\n\nWritable.WritableState = WritableState;\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\n/*<replacement>*/\nvar internalUtil = {\n  deprecate: require('util-deprecate')\n};\n/*</replacement>*/\n\n/*<replacement>*/\nvar Stream = require('./internal/streams/stream');\n/*</replacement>*/\n\n/*<replacement>*/\n\nvar Buffer = require('safe-buffer').Buffer;\nvar OurUint8Array = global.Uint8Array || function () {};\nfunction _uint8ArrayToBuffer(chunk) {\n  return Buffer.from(chunk);\n}\nfunction _isUint8Array(obj) {\n  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;\n}\n\n/*</replacement>*/\n\nvar destroyImpl = require('./internal/streams/destroy');\n\nutil.inherits(Writable, Stream);\n\nfunction nop() {}\n\nfunction WritableState(options, stream) {\n  Duplex = Duplex || require('./_stream_duplex');\n\n  options = options || {};\n\n  // Duplex streams are both readable and writable, but share\n  // the same options object.\n  // However, some cases require setting options to different\n  // values for the readable and the writable sides of the duplex stream.\n  // These options can be provided separately as readableXXX and writableXXX.\n  var isDuplex = stream instanceof Duplex;\n\n  // object stream flag to indicate whether or not this stream\n  // contains buffers or objects.\n  this.objectMode = !!options.objectMode;\n\n  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;\n\n  // the point at which write() starts returning false\n  // Note: 0 is a valid value, means that we always return false if\n  // the entire buffer is not flushed immediately on write()\n  var hwm = options.highWaterMark;\n  var writableHwm = options.writableHighWaterMark;\n  var defaultHwm = this.objectMode ? 16 : 16 * 1024;\n\n  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (writableHwm || writableHwm === 0)) this.highWaterMark = writableHwm;else this.highWaterMark = defaultHwm;\n\n  // cast to ints.\n  this.highWaterMark = Math.floor(this.highWaterMark);\n\n  // if _final has been called\n  this.finalCalled = false;\n\n  // drain event flag.\n  this.needDrain = false;\n  // at the start of calling end()\n  this.ending = false;\n  // when end() has been called, and returned\n  this.ended = false;\n  // when 'finish' is emitted\n  this.finished = false;\n\n  // has it been destroyed\n  this.destroyed = false;\n\n  // should we decode strings into buffers before passing to _write?\n  // this is here so that some node-core streams can optimize string\n  // handling at a lower level.\n  var noDecode = options.decodeStrings === false;\n  this.decodeStrings = !noDecode;\n\n  // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n  this.defaultEncoding = options.defaultEncoding || 'utf8';\n\n  // not an actual buffer we keep track of, but a measurement\n  // of how much we're waiting to get pushed to some underlying\n  // socket or file.\n  this.length = 0;\n\n  // a flag to see when we're in the middle of a write.\n  this.writing = false;\n\n  // when true all writes will be buffered until .uncork() call\n  this.corked = 0;\n\n  // a flag to be able to tell if the onwrite cb is called immediately,\n  // or on a later tick.  We set this to true at first, because any\n  // actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first write call.\n  this.sync = true;\n\n  // a flag to know if we're processing previously buffered items, which\n  // may call the _write() callback in the same tick, so that we don't\n  // end up in an overlapped onwrite situation.\n  this.bufferProcessing = false;\n\n  // the callback that's passed to _write(chunk,cb)\n  this.onwrite = function (er) {\n    onwrite(stream, er);\n  };\n\n  // the callback that the user supplies to write(chunk,encoding,cb)\n  this.writecb = null;\n\n  // the amount that is being written when _write is called.\n  this.writelen = 0;\n\n  this.bufferedRequest = null;\n  this.lastBufferedRequest = null;\n\n  // number of pending user-supplied write callbacks\n  // this must be 0 before 'finish' can be emitted\n  this.pendingcb = 0;\n\n  // emit prefinish if the only thing we're waiting for is _write cbs\n  // This is relevant for synchronous Transform streams\n  this.prefinished = false;\n\n  // True if the error was already emitted and should not be thrown again\n  this.errorEmitted = false;\n\n  // count buffered requests\n  this.bufferedRequestCount = 0;\n\n  // allocate the first CorkedRequest, there is always\n  // one allocated and free to use, and we maintain at most two\n  this.corkedRequestsFree = new CorkedRequest(this);\n}\n\nWritableState.prototype.getBuffer = function getBuffer() {\n  var current = this.bufferedRequest;\n  var out = [];\n  while (current) {\n    out.push(current);\n    current = current.next;\n  }\n  return out;\n};\n\n(function () {\n  try {\n    Object.defineProperty(WritableState.prototype, 'buffer', {\n      get: internalUtil.deprecate(function () {\n        return this.getBuffer();\n      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')\n    });\n  } catch (_) {}\n})();\n\n// Test _writableState for inheritance to account for Duplex streams,\n// whose prototype chain only points to Readable.\nvar realHasInstance;\nif (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {\n  realHasInstance = Function.prototype[Symbol.hasInstance];\n  Object.defineProperty(Writable, Symbol.hasInstance, {\n    value: function (object) {\n      if (realHasInstance.call(this, object)) return true;\n      if (this !== Writable) return false;\n\n      return object && object._writableState instanceof WritableState;\n    }\n  });\n} else {\n  realHasInstance = function (object) {\n    return object instanceof this;\n  };\n}\n\nfunction Writable(options) {\n  Duplex = Duplex || require('./_stream_duplex');\n\n  // Writable ctor is applied to Duplexes, too.\n  // `realHasInstance` is necessary because using plain `instanceof`\n  // would return false, as no `_writableState` property is attached.\n\n  // Trying to use the custom `instanceof` for Writable here will also break the\n  // Node.js LazyTransform implementation, which has a non-trivial getter for\n  // `_writableState` that would lead to infinite recursion.\n  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {\n    return new Writable(options);\n  }\n\n  this._writableState = new WritableState(options, this);\n\n  // legacy.\n  this.writable = true;\n\n  if (options) {\n    if (typeof options.write === 'function') this._write = options.write;\n\n    if (typeof options.writev === 'function') this._writev = options.writev;\n\n    if (typeof options.destroy === 'function') this._destroy = options.destroy;\n\n    if (typeof options.final === 'function') this._final = options.final;\n  }\n\n  Stream.call(this);\n}\n\n// Otherwise people can pipe Writable streams, which is just wrong.\nWritable.prototype.pipe = function () {\n  this.emit('error', new Error('Cannot pipe, not readable'));\n};\n\nfunction writeAfterEnd(stream, cb) {\n  var er = new Error('write after end');\n  // TODO: defer error events consistently everywhere, not just the cb\n  stream.emit('error', er);\n  pna.nextTick(cb, er);\n}\n\n// Checks that a user-supplied chunk is valid, especially for the particular\n// mode the stream is in. Currently this means that `null` is never accepted\n// and undefined/non-string values are only allowed in object mode.\nfunction validChunk(stream, state, chunk, cb) {\n  var valid = true;\n  var er = false;\n\n  if (chunk === null) {\n    er = new TypeError('May not write null values to stream');\n  } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {\n    er = new TypeError('Invalid non-string/buffer chunk');\n  }\n  if (er) {\n    stream.emit('error', er);\n    pna.nextTick(cb, er);\n    valid = false;\n  }\n  return valid;\n}\n\nWritable.prototype.write = function (chunk, encoding, cb) {\n  var state = this._writableState;\n  var ret = false;\n  var isBuf = !state.objectMode && _isUint8Array(chunk);\n\n  if (isBuf && !Buffer.isBuffer(chunk)) {\n    chunk = _uint8ArrayToBuffer(chunk);\n  }\n\n  if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;\n\n  if (typeof cb !== 'function') cb = nop;\n\n  if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {\n    state.pendingcb++;\n    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);\n  }\n\n  return ret;\n};\n\nWritable.prototype.cork = function () {\n  var state = this._writableState;\n\n  state.corked++;\n};\n\nWritable.prototype.uncork = function () {\n  var state = this._writableState;\n\n  if (state.corked) {\n    state.corked--;\n\n    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);\n  }\n};\n\nWritable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {\n  // node::ParseEncoding() requires lower case.\n  if (typeof encoding === 'string') encoding = encoding.toLowerCase();\n  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);\n  this._writableState.defaultEncoding = encoding;\n  return this;\n};\n\nfunction decodeChunk(state, chunk, encoding) {\n  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {\n    chunk = Buffer.from(chunk, encoding);\n  }\n  return chunk;\n}\n\nObject.defineProperty(Writable.prototype, 'writableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function () {\n    return this._writableState.highWaterMark;\n  }\n});\n\n// if we're already writing something, then just put this\n// in the queue, and wait our turn.  Otherwise, call _write\n// If we return false, then we need a drain event, so set that flag.\nfunction writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {\n  if (!isBuf) {\n    var newChunk = decodeChunk(state, chunk, encoding);\n    if (chunk !== newChunk) {\n      isBuf = true;\n      encoding = 'buffer';\n      chunk = newChunk;\n    }\n  }\n  var len = state.objectMode ? 1 : chunk.length;\n\n  state.length += len;\n\n  var ret = state.length < state.highWaterMark;\n  // we must ensure that previous needDrain will not be reset to false.\n  if (!ret) state.needDrain = true;\n\n  if (state.writing || state.corked) {\n    var last = state.lastBufferedRequest;\n    state.lastBufferedRequest = {\n      chunk: chunk,\n      encoding: encoding,\n      isBuf: isBuf,\n      callback: cb,\n      next: null\n    };\n    if (last) {\n      last.next = state.lastBufferedRequest;\n    } else {\n      state.bufferedRequest = state.lastBufferedRequest;\n    }\n    state.bufferedRequestCount += 1;\n  } else {\n    doWrite(stream, state, false, len, chunk, encoding, cb);\n  }\n\n  return ret;\n}\n\nfunction doWrite(stream, state, writev, len, chunk, encoding, cb) {\n  state.writelen = len;\n  state.writecb = cb;\n  state.writing = true;\n  state.sync = true;\n  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);\n  state.sync = false;\n}\n\nfunction onwriteError(stream, state, sync, er, cb) {\n  --state.pendingcb;\n\n  if (sync) {\n    // defer the callback if we are being called synchronously\n    // to avoid piling up things on the stack\n    pna.nextTick(cb, er);\n    // this can emit finish, and it will always happen\n    // after error\n    pna.nextTick(finishMaybe, stream, state);\n    stream._writableState.errorEmitted = true;\n    stream.emit('error', er);\n  } else {\n    // the caller expect this to happen before if\n    // it is async\n    cb(er);\n    stream._writableState.errorEmitted = true;\n    stream.emit('error', er);\n    // this can emit finish, but finish must\n    // always follow error\n    finishMaybe(stream, state);\n  }\n}\n\nfunction onwriteStateUpdate(state) {\n  state.writing = false;\n  state.writecb = null;\n  state.length -= state.writelen;\n  state.writelen = 0;\n}\n\nfunction onwrite(stream, er) {\n  var state = stream._writableState;\n  var sync = state.sync;\n  var cb = state.writecb;\n\n  onwriteStateUpdate(state);\n\n  if (er) onwriteError(stream, state, sync, er, cb);else {\n    // Check if we're actually ready to finish, but don't emit yet\n    var finished = needFinish(state);\n\n    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {\n      clearBuffer(stream, state);\n    }\n\n    if (sync) {\n      /*<replacement>*/\n      asyncWrite(afterWrite, stream, state, finished, cb);\n      /*</replacement>*/\n    } else {\n      afterWrite(stream, state, finished, cb);\n    }\n  }\n}\n\nfunction afterWrite(stream, state, finished, cb) {\n  if (!finished) onwriteDrain(stream, state);\n  state.pendingcb--;\n  cb();\n  finishMaybe(stream, state);\n}\n\n// Must force callback to be called on nextTick, so that we don't\n// emit 'drain' before the write() consumer gets the 'false' return\n// value, and has a chance to attach a 'drain' listener.\nfunction onwriteDrain(stream, state) {\n  if (state.length === 0 && state.needDrain) {\n    state.needDrain = false;\n    stream.emit('drain');\n  }\n}\n\n// if there's something in the buffer waiting, then process it\nfunction clearBuffer(stream, state) {\n  state.bufferProcessing = true;\n  var entry = state.bufferedRequest;\n\n  if (stream._writev && entry && entry.next) {\n    // Fast case, write everything using _writev()\n    var l = state.bufferedRequestCount;\n    var buffer = new Array(l);\n    var holder = state.corkedRequestsFree;\n    holder.entry = entry;\n\n    var count = 0;\n    var allBuffers = true;\n    while (entry) {\n      buffer[count] = entry;\n      if (!entry.isBuf) allBuffers = false;\n      entry = entry.next;\n      count += 1;\n    }\n    buffer.allBuffers = allBuffers;\n\n    doWrite(stream, state, true, state.length, buffer, '', holder.finish);\n\n    // doWrite is almost always async, defer these to save a bit of time\n    // as the hot path ends with doWrite\n    state.pendingcb++;\n    state.lastBufferedRequest = null;\n    if (holder.next) {\n      state.corkedRequestsFree = holder.next;\n      holder.next = null;\n    } else {\n      state.corkedRequestsFree = new CorkedRequest(state);\n    }\n    state.bufferedRequestCount = 0;\n  } else {\n    // Slow case, write chunks one-by-one\n    while (entry) {\n      var chunk = entry.chunk;\n      var encoding = entry.encoding;\n      var cb = entry.callback;\n      var len = state.objectMode ? 1 : chunk.length;\n\n      doWrite(stream, state, false, len, chunk, encoding, cb);\n      entry = entry.next;\n      state.bufferedRequestCount--;\n      // if we didn't call the onwrite immediately, then\n      // it means that we need to wait until it does.\n      // also, that means that the chunk and cb are currently\n      // being processed, so move the buffer counter past them.\n      if (state.writing) {\n        break;\n      }\n    }\n\n    if (entry === null) state.lastBufferedRequest = null;\n  }\n\n  state.bufferedRequest = entry;\n  state.bufferProcessing = false;\n}\n\nWritable.prototype._write = function (chunk, encoding, cb) {\n  cb(new Error('_write() is not implemented'));\n};\n\nWritable.prototype._writev = null;\n\nWritable.prototype.end = function (chunk, encoding, cb) {\n  var state = this._writableState;\n\n  if (typeof chunk === 'function') {\n    cb = chunk;\n    chunk = null;\n    encoding = null;\n  } else if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);\n\n  // .end() fully uncorks\n  if (state.corked) {\n    state.corked = 1;\n    this.uncork();\n  }\n\n  // ignore unnecessary end() calls.\n  if (!state.ending && !state.finished) endWritable(this, state, cb);\n};\n\nfunction needFinish(state) {\n  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;\n}\nfunction callFinal(stream, state) {\n  stream._final(function (err) {\n    state.pendingcb--;\n    if (err) {\n      stream.emit('error', err);\n    }\n    state.prefinished = true;\n    stream.emit('prefinish');\n    finishMaybe(stream, state);\n  });\n}\nfunction prefinish(stream, state) {\n  if (!state.prefinished && !state.finalCalled) {\n    if (typeof stream._final === 'function') {\n      state.pendingcb++;\n      state.finalCalled = true;\n      pna.nextTick(callFinal, stream, state);\n    } else {\n      state.prefinished = true;\n      stream.emit('prefinish');\n    }\n  }\n}\n\nfunction finishMaybe(stream, state) {\n  var need = needFinish(state);\n  if (need) {\n    prefinish(stream, state);\n    if (state.pendingcb === 0) {\n      state.finished = true;\n      stream.emit('finish');\n    }\n  }\n  return need;\n}\n\nfunction endWritable(stream, state, cb) {\n  state.ending = true;\n  finishMaybe(stream, state);\n  if (cb) {\n    if (state.finished) pna.nextTick(cb);else stream.once('finish', cb);\n  }\n  state.ended = true;\n  stream.writable = false;\n}\n\nfunction onCorkedFinish(corkReq, state, err) {\n  var entry = corkReq.entry;\n  corkReq.entry = null;\n  while (entry) {\n    var cb = entry.callback;\n    state.pendingcb--;\n    cb(err);\n    entry = entry.next;\n  }\n  if (state.corkedRequestsFree) {\n    state.corkedRequestsFree.next = corkReq;\n  } else {\n    state.corkedRequestsFree = corkReq;\n  }\n}\n\nObject.defineProperty(Writable.prototype, 'destroyed', {\n  get: function () {\n    if (this._writableState === undefined) {\n      return false;\n    }\n    return this._writableState.destroyed;\n  },\n  set: function (value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (!this._writableState) {\n      return;\n    }\n\n    // backward compatibility, the user is explicitly\n    // managing destroyed\n    this._writableState.destroyed = value;\n  }\n});\n\nWritable.prototype.destroy = destroyImpl.destroy;\nWritable.prototype._undestroy = destroyImpl.undestroy;\nWritable.prototype._destroy = function (err, cb) {\n  this.end();\n  cb(err);\n};","'use strict';\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Buffer = require(40).Buffer;\nvar util = require(7);\n\nfunction copyBuffer(src, target, offset) {\n  src.copy(target, offset);\n}\n\nmodule.exports = function () {\n  function BufferList() {\n    _classCallCheck(this, BufferList);\n\n    this.head = null;\n    this.tail = null;\n    this.length = 0;\n  }\n\n  BufferList.prototype.push = function push(v) {\n    var entry = { data: v, next: null };\n    if (this.length > 0) this.tail.next = entry;else this.head = entry;\n    this.tail = entry;\n    ++this.length;\n  };\n\n  BufferList.prototype.unshift = function unshift(v) {\n    var entry = { data: v, next: this.head };\n    if (this.length === 0) this.tail = entry;\n    this.head = entry;\n    ++this.length;\n  };\n\n  BufferList.prototype.shift = function shift() {\n    if (this.length === 0) return;\n    var ret = this.head.data;\n    if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;\n    --this.length;\n    return ret;\n  };\n\n  BufferList.prototype.clear = function clear() {\n    this.head = this.tail = null;\n    this.length = 0;\n  };\n\n  BufferList.prototype.join = function join(s) {\n    if (this.length === 0) return '';\n    var p = this.head;\n    var ret = '' + p.data;\n    while (p = p.next) {\n      ret += s + p.data;\n    }return ret;\n  };\n\n  BufferList.prototype.concat = function concat(n) {\n    if (this.length === 0) return Buffer.alloc(0);\n    if (this.length === 1) return this.head.data;\n    var ret = Buffer.allocUnsafe(n >>> 0);\n    var p = this.head;\n    var i = 0;\n    while (p) {\n      copyBuffer(p.data, ret, i);\n      i += p.data.length;\n      p = p.next;\n    }\n    return ret;\n  };\n\n  return BufferList;\n}();\n\nif (util && util.inspect && util.inspect.custom) {\n  module.exports.prototype[util.inspect.custom] = function () {\n    var obj = util.inspect({ length: this.length });\n    return this.constructor.name + ' ' + obj;\n  };\n}","'use strict';\n\n/*<replacement>*/\n\nvar pna = require(22);\n/*</replacement>*/\n\n// undocumented cb() API, needed for core, not for public API\nfunction destroy(err, cb) {\n  var _this = this;\n\n  var readableDestroyed = this._readableState && this._readableState.destroyed;\n  var writableDestroyed = this._writableState && this._writableState.destroyed;\n\n  if (readableDestroyed || writableDestroyed) {\n    if (cb) {\n      cb(err);\n    } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {\n      pna.nextTick(emitErrorNT, this, err);\n    }\n    return this;\n  }\n\n  // we set destroyed to true before firing error callbacks in order\n  // to make it re-entrance safe in case destroy() is called within callbacks\n\n  if (this._readableState) {\n    this._readableState.destroyed = true;\n  }\n\n  // if this is a duplex stream mark the writable part as destroyed as well\n  if (this._writableState) {\n    this._writableState.destroyed = true;\n  }\n\n  this._destroy(err || null, function (err) {\n    if (!cb && err) {\n      pna.nextTick(emitErrorNT, _this, err);\n      if (_this._writableState) {\n        _this._writableState.errorEmitted = true;\n      }\n    } else if (cb) {\n      cb(err);\n    }\n  });\n\n  return this;\n}\n\nfunction undestroy() {\n  if (this._readableState) {\n    this._readableState.destroyed = false;\n    this._readableState.reading = false;\n    this._readableState.ended = false;\n    this._readableState.endEmitted = false;\n  }\n\n  if (this._writableState) {\n    this._writableState.destroyed = false;\n    this._writableState.ended = false;\n    this._writableState.ending = false;\n    this._writableState.finished = false;\n    this._writableState.errorEmitted = false;\n  }\n}\n\nfunction emitErrorNT(self, err) {\n  self.emit('error', err);\n}\n\nmodule.exports = {\n  destroy: destroy,\n  undestroy: undestroy\n};","module.exports = require(10).EventEmitter;\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\n\nfunction isArray(arg) {\n  if (Array.isArray) {\n    return Array.isArray(arg);\n  }\n  return objectToString(arg) === '[object Array]';\n}\nexports.isArray = isArray;\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\nexports.isBoolean = isBoolean;\n\nfunction isNull(arg) {\n  return arg === null;\n}\nexports.isNull = isNull;\n\nfunction isNullOrUndefined(arg) {\n  return arg == null;\n}\nexports.isNullOrUndefined = isNullOrUndefined;\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\nexports.isNumber = isNumber;\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\nexports.isString = isString;\n\nfunction isSymbol(arg) {\n  return typeof arg === 'symbol';\n}\nexports.isSymbol = isSymbol;\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\nexports.isUndefined = isUndefined;\n\nfunction isRegExp(re) {\n  return objectToString(re) === '[object RegExp]';\n}\nexports.isRegExp = isRegExp;\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\nexports.isObject = isObject;\n\nfunction isDate(d) {\n  return objectToString(d) === '[object Date]';\n}\nexports.isDate = isDate;\n\nfunction isError(e) {\n  return (objectToString(e) === '[object Error]' || e instanceof Error);\n}\nexports.isError = isError;\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\nexports.isFunction = isFunction;\n\nfunction isPrimitive(arg) {\n  return arg === null ||\n         typeof arg === 'boolean' ||\n         typeof arg === 'number' ||\n         typeof arg === 'string' ||\n         typeof arg === 'symbol' ||  // ES6 symbol\n         typeof arg === 'undefined';\n}\nexports.isPrimitive = isPrimitive;\n\nexports.isBuffer = Buffer.isBuffer;\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n","if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    var TempCtor = function () {}\n    TempCtor.prototype = superCtor.prototype\n    ctor.prototype = new TempCtor()\n    ctor.prototype.constructor = ctor\n  }\n}\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\n/*<replacement>*/\n\nvar Buffer = require(40).Buffer;\n/*</replacement>*/\n\nvar isEncoding = Buffer.isEncoding || function (encoding) {\n  encoding = '' + encoding;\n  switch (encoding && encoding.toLowerCase()) {\n    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':\n      return true;\n    default:\n      return false;\n  }\n};\n\nfunction _normalizeEncoding(enc) {\n  if (!enc) return 'utf8';\n  var retried;\n  while (true) {\n    switch (enc) {\n      case 'utf8':\n      case 'utf-8':\n        return 'utf8';\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return 'utf16le';\n      case 'latin1':\n      case 'binary':\n        return 'latin1';\n      case 'base64':\n      case 'ascii':\n      case 'hex':\n        return enc;\n      default:\n        if (retried) return; // undefined\n        enc = ('' + enc).toLowerCase();\n        retried = true;\n    }\n  }\n};\n\n// Do not cache `Buffer.isEncoding` when checking encoding names as some\n// modules monkey-patch it to support additional encodings\nfunction normalizeEncoding(enc) {\n  var nenc = _normalizeEncoding(enc);\n  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);\n  return nenc || enc;\n}\n\n// StringDecoder provides an interface for efficiently splitting a series of\n// buffers into a series of JS strings without breaking apart multi-byte\n// characters.\nexports.StringDecoder = StringDecoder;\nfunction StringDecoder(encoding) {\n  this.encoding = normalizeEncoding(encoding);\n  var nb;\n  switch (this.encoding) {\n    case 'utf16le':\n      this.text = utf16Text;\n      this.end = utf16End;\n      nb = 4;\n      break;\n    case 'utf8':\n      this.fillLast = utf8FillLast;\n      nb = 4;\n      break;\n    case 'base64':\n      this.text = base64Text;\n      this.end = base64End;\n      nb = 3;\n      break;\n    default:\n      this.write = simpleWrite;\n      this.end = simpleEnd;\n      return;\n  }\n  this.lastNeed = 0;\n  this.lastTotal = 0;\n  this.lastChar = Buffer.allocUnsafe(nb);\n}\n\nStringDecoder.prototype.write = function (buf) {\n  if (buf.length === 0) return '';\n  var r;\n  var i;\n  if (this.lastNeed) {\n    r = this.fillLast(buf);\n    if (r === undefined) return '';\n    i = this.lastNeed;\n    this.lastNeed = 0;\n  } else {\n    i = 0;\n  }\n  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);\n  return r || '';\n};\n\nStringDecoder.prototype.end = utf8End;\n\n// Returns only complete characters in a Buffer\nStringDecoder.prototype.text = utf8Text;\n\n// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer\nStringDecoder.prototype.fillLast = function (buf) {\n  if (this.lastNeed <= buf.length) {\n    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);\n    return this.lastChar.toString(this.encoding, 0, this.lastTotal);\n  }\n  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);\n  this.lastNeed -= buf.length;\n};\n\n// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a\n// continuation byte. If an invalid byte is detected, -2 is returned.\nfunction utf8CheckByte(byte) {\n  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;\n  return byte >> 6 === 0x02 ? -1 : -2;\n}\n\n// Checks at most 3 bytes at the end of a Buffer in order to detect an\n// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)\n// needed to complete the UTF-8 character (if applicable) are returned.\nfunction utf8CheckIncomplete(self, buf, i) {\n  var j = buf.length - 1;\n  if (j < i) return 0;\n  var nb = utf8CheckByte(buf[j]);\n  if (nb >= 0) {\n    if (nb > 0) self.lastNeed = nb - 1;\n    return nb;\n  }\n  if (--j < i || nb === -2) return 0;\n  nb = utf8CheckByte(buf[j]);\n  if (nb >= 0) {\n    if (nb > 0) self.lastNeed = nb - 2;\n    return nb;\n  }\n  if (--j < i || nb === -2) return 0;\n  nb = utf8CheckByte(buf[j]);\n  if (nb >= 0) {\n    if (nb > 0) {\n      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;\n    }\n    return nb;\n  }\n  return 0;\n}\n\n// Validates as many continuation bytes for a multi-byte UTF-8 character as\n// needed or are available. If we see a non-continuation byte where we expect\n// one, we \"replace\" the validated continuation bytes we've seen so far with\n// a single UTF-8 replacement character ('\\ufffd'), to match v8's UTF-8 decoding\n// behavior. The continuation byte check is included three times in the case\n// where all of the continuation bytes for a character exist in the same buffer.\n// It is also done this way as a slight performance increase instead of using a\n// loop.\nfunction utf8CheckExtraBytes(self, buf, p) {\n  if ((buf[0] & 0xC0) !== 0x80) {\n    self.lastNeed = 0;\n    return '\\ufffd';\n  }\n  if (self.lastNeed > 1 && buf.length > 1) {\n    if ((buf[1] & 0xC0) !== 0x80) {\n      self.lastNeed = 1;\n      return '\\ufffd';\n    }\n    if (self.lastNeed > 2 && buf.length > 2) {\n      if ((buf[2] & 0xC0) !== 0x80) {\n        self.lastNeed = 2;\n        return '\\ufffd';\n      }\n    }\n  }\n}\n\n// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.\nfunction utf8FillLast(buf) {\n  var p = this.lastTotal - this.lastNeed;\n  var r = utf8CheckExtraBytes(this, buf, p);\n  if (r !== undefined) return r;\n  if (this.lastNeed <= buf.length) {\n    buf.copy(this.lastChar, p, 0, this.lastNeed);\n    return this.lastChar.toString(this.encoding, 0, this.lastTotal);\n  }\n  buf.copy(this.lastChar, p, 0, buf.length);\n  this.lastNeed -= buf.length;\n}\n\n// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a\n// partial character, the character's bytes are buffered until the required\n// number of bytes are available.\nfunction utf8Text(buf, i) {\n  var total = utf8CheckIncomplete(this, buf, i);\n  if (!this.lastNeed) return buf.toString('utf8', i);\n  this.lastTotal = total;\n  var end = buf.length - (total - this.lastNeed);\n  buf.copy(this.lastChar, 0, end);\n  return buf.toString('utf8', i, end);\n}\n\n// For UTF-8, a replacement character is added when ending on a partial\n// character.\nfunction utf8End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) return r + '\\ufffd';\n  return r;\n}\n\n// UTF-16LE typically needs two bytes per character, but even if we have an even\n// number of bytes available, we need to check if we end on a leading/high\n// surrogate. In that case, we need to wait for the next two bytes in order to\n// decode the last character properly.\nfunction utf16Text(buf, i) {\n  if ((buf.length - i) % 2 === 0) {\n    var r = buf.toString('utf16le', i);\n    if (r) {\n      var c = r.charCodeAt(r.length - 1);\n      if (c >= 0xD800 && c <= 0xDBFF) {\n        this.lastNeed = 2;\n        this.lastTotal = 4;\n        this.lastChar[0] = buf[buf.length - 2];\n        this.lastChar[1] = buf[buf.length - 1];\n        return r.slice(0, -1);\n      }\n    }\n    return r;\n  }\n  this.lastNeed = 1;\n  this.lastTotal = 2;\n  this.lastChar[0] = buf[buf.length - 1];\n  return buf.toString('utf16le', i, buf.length - 1);\n}\n\n// For UTF-16LE we do not explicitly append special replacement characters if we\n// end on a partial character, we simply let v8 handle that.\nfunction utf16End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) {\n    var end = this.lastTotal - this.lastNeed;\n    return r + this.lastChar.toString('utf16le', 0, end);\n  }\n  return r;\n}\n\nfunction base64Text(buf, i) {\n  var n = (buf.length - i) % 3;\n  if (n === 0) return buf.toString('base64', i);\n  this.lastNeed = 3 - n;\n  this.lastTotal = 3;\n  if (n === 1) {\n    this.lastChar[0] = buf[buf.length - 1];\n  } else {\n    this.lastChar[0] = buf[buf.length - 2];\n    this.lastChar[1] = buf[buf.length - 1];\n  }\n  return buf.toString('base64', i, buf.length - n);\n}\n\nfunction base64End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);\n  return r;\n}\n\n// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)\nfunction simpleWrite(buf) {\n  return buf.toString(this.encoding);\n}\n\nfunction simpleEnd(buf) {\n  return buf && buf.length ? this.write(buf) : '';\n}","module.exports = require(37).PassThrough\n","exports = module.exports = require(27);\nexports.Stream = exports;\nexports.Readable = exports;\nexports.Writable = require(29);\nexports.Duplex = require(25);\nexports.Transform = require(28);\nexports.PassThrough = require(26);\n","module.exports = require(37).Transform\n","module.exports = require(29);\n","/* eslint-disable node/no-deprecated-api */\nvar buffer = require(8)\nvar Buffer = buffer.Buffer\n\n// alternative to using Object.keys for old browsers\nfunction copyProps (src, dst) {\n  for (var key in src) {\n    dst[key] = src[key]\n  }\n}\nif (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {\n  module.exports = buffer\n} else {\n  // Copy properties from require('buffer')\n  copyProps(buffer, exports)\n  exports.Buffer = SafeBuffer\n}\n\nfunction SafeBuffer (arg, encodingOrOffset, length) {\n  return Buffer(arg, encodingOrOffset, length)\n}\n\n// Copy static methods from Buffer\ncopyProps(Buffer, SafeBuffer)\n\nSafeBuffer.from = function (arg, encodingOrOffset, length) {\n  if (typeof arg === 'number') {\n    throw new TypeError('Argument must not be a number')\n  }\n  return Buffer(arg, encodingOrOffset, length)\n}\n\nSafeBuffer.alloc = function (size, fill, encoding) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  var buf = Buffer(size)\n  if (fill !== undefined) {\n    if (typeof encoding === 'string') {\n      buf.fill(fill, encoding)\n    } else {\n      buf.fill(fill)\n    }\n  } else {\n    buf.fill(0)\n  }\n  return buf\n}\n\nSafeBuffer.allocUnsafe = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return Buffer(size)\n}\n\nSafeBuffer.allocUnsafeSlow = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return buffer.SlowBuffer(size)\n}\n",";(function (sax) { // wrapper for non-node envs\n  sax.parser = function (strict, opt) { return new SAXParser(strict, opt) }\n  sax.SAXParser = SAXParser\n  sax.SAXStream = SAXStream\n  sax.createStream = createStream\n\n  // When we pass the MAX_BUFFER_LENGTH position, start checking for buffer overruns.\n  // When we check, schedule the next check for MAX_BUFFER_LENGTH - (max(buffer lengths)),\n  // since that's the earliest that a buffer overrun could occur.  This way, checks are\n  // as rare as required, but as often as necessary to ensure never crossing this bound.\n  // Furthermore, buffers are only tested at most once per write(), so passing a very\n  // large string into write() might have undesirable effects, but this is manageable by\n  // the caller, so it is assumed to be safe.  Thus, a call to write() may, in the extreme\n  // edge case, result in creating at most one complete copy of the string passed in.\n  // Set to Infinity to have unlimited buffers.\n  sax.MAX_BUFFER_LENGTH = 64 * 1024\n\n  var buffers = [\n    'comment', 'sgmlDecl', 'textNode', 'tagName', 'doctype',\n    'procInstName', 'procInstBody', 'entity', 'attribName',\n    'attribValue', 'cdata', 'script'\n  ]\n\n  sax.EVENTS = [\n    'text',\n    'processinginstruction',\n    'sgmldeclaration',\n    'doctype',\n    'comment',\n    'opentagstart',\n    'attribute',\n    'opentag',\n    'closetag',\n    'opencdata',\n    'cdata',\n    'closecdata',\n    'error',\n    'end',\n    'ready',\n    'script',\n    'opennamespace',\n    'closenamespace'\n  ]\n\n  function SAXParser (strict, opt) {\n    if (!(this instanceof SAXParser)) {\n      return new SAXParser(strict, opt)\n    }\n\n    var parser = this\n    clearBuffers(parser)\n    parser.q = parser.c = ''\n    parser.bufferCheckPosition = sax.MAX_BUFFER_LENGTH\n    parser.opt = opt || {}\n    parser.opt.lowercase = parser.opt.lowercase || parser.opt.lowercasetags\n    parser.looseCase = parser.opt.lowercase ? 'toLowerCase' : 'toUpperCase'\n    parser.tags = []\n    parser.closed = parser.closedRoot = parser.sawRoot = false\n    parser.tag = parser.error = null\n    parser.strict = !!strict\n    parser.noscript = !!(strict || parser.opt.noscript)\n    parser.state = S.BEGIN\n    parser.strictEntities = parser.opt.strictEntities\n    parser.ENTITIES = parser.strictEntities ? Object.create(sax.XML_ENTITIES) : Object.create(sax.ENTITIES)\n    parser.attribList = []\n\n    // namespaces form a prototype chain.\n    // it always points at the current tag,\n    // which protos to its parent tag.\n    if (parser.opt.xmlns) {\n      parser.ns = Object.create(rootNS)\n    }\n\n    // mostly just for error reporting\n    parser.trackPosition = parser.opt.position !== false\n    if (parser.trackPosition) {\n      parser.position = parser.line = parser.column = 0\n    }\n    emit(parser, 'onready')\n  }\n\n  if (!Object.create) {\n    Object.create = function (o) {\n      function F () {}\n      F.prototype = o\n      var newf = new F()\n      return newf\n    }\n  }\n\n  if (!Object.keys) {\n    Object.keys = function (o) {\n      var a = []\n      for (var i in o) if (o.hasOwnProperty(i)) a.push(i)\n      return a\n    }\n  }\n\n  function checkBufferLength (parser) {\n    var maxAllowed = Math.max(sax.MAX_BUFFER_LENGTH, 10)\n    var maxActual = 0\n    for (var i = 0, l = buffers.length; i < l; i++) {\n      var len = parser[buffers[i]].length\n      if (len > maxAllowed) {\n        // Text/cdata nodes can get big, and since they're buffered,\n        // we can get here under normal conditions.\n        // Avoid issues by emitting the text node now,\n        // so at least it won't get any bigger.\n        switch (buffers[i]) {\n          case 'textNode':\n            closeText(parser)\n            break\n\n          case 'cdata':\n            emitNode(parser, 'oncdata', parser.cdata)\n            parser.cdata = ''\n            break\n\n          case 'script':\n            emitNode(parser, 'onscript', parser.script)\n            parser.script = ''\n            break\n\n          default:\n            error(parser, 'Max buffer length exceeded: ' + buffers[i])\n        }\n      }\n      maxActual = Math.max(maxActual, len)\n    }\n    // schedule the next check for the earliest possible buffer overrun.\n    var m = sax.MAX_BUFFER_LENGTH - maxActual\n    parser.bufferCheckPosition = m + parser.position\n  }\n\n  function clearBuffers (parser) {\n    for (var i = 0, l = buffers.length; i < l; i++) {\n      parser[buffers[i]] = ''\n    }\n  }\n\n  function flushBuffers (parser) {\n    closeText(parser)\n    if (parser.cdata !== '') {\n      emitNode(parser, 'oncdata', parser.cdata)\n      parser.cdata = ''\n    }\n    if (parser.script !== '') {\n      emitNode(parser, 'onscript', parser.script)\n      parser.script = ''\n    }\n  }\n\n  SAXParser.prototype = {\n    end: function () { end(this) },\n    write: write,\n    resume: function () { this.error = null; return this },\n    close: function () { return this.write(null) },\n    flush: function () { flushBuffers(this) }\n  }\n\n  var Stream\n  try {\n    Stream = require('stream').Stream\n  } catch (ex) {\n    Stream = function () {}\n  }\n\n  var streamWraps = sax.EVENTS.filter(function (ev) {\n    return ev !== 'error' && ev !== 'end'\n  })\n\n  function createStream (strict, opt) {\n    return new SAXStream(strict, opt)\n  }\n\n  function SAXStream (strict, opt) {\n    if (!(this instanceof SAXStream)) {\n      return new SAXStream(strict, opt)\n    }\n\n    Stream.apply(this)\n\n    this._parser = new SAXParser(strict, opt)\n    this.writable = true\n    this.readable = true\n\n    var me = this\n\n    this._parser.onend = function () {\n      me.emit('end')\n    }\n\n    this._parser.onerror = function (er) {\n      me.emit('error', er)\n\n      // if didn't throw, then means error was handled.\n      // go ahead and clear error, so we can write again.\n      me._parser.error = null\n    }\n\n    this._decoder = null\n\n    streamWraps.forEach(function (ev) {\n      Object.defineProperty(me, 'on' + ev, {\n        get: function () {\n          return me._parser['on' + ev]\n        },\n        set: function (h) {\n          if (!h) {\n            me.removeAllListeners(ev)\n            me._parser['on' + ev] = h\n            return h\n          }\n          me.on(ev, h)\n        },\n        enumerable: true,\n        configurable: false\n      })\n    })\n  }\n\n  SAXStream.prototype = Object.create(Stream.prototype, {\n    constructor: {\n      value: SAXStream\n    }\n  })\n\n  SAXStream.prototype.write = function (data) {\n    if (typeof Buffer === 'function' &&\n      typeof Buffer.isBuffer === 'function' &&\n      Buffer.isBuffer(data)) {\n      if (!this._decoder) {\n        var SD = require('string_decoder').StringDecoder\n        this._decoder = new SD('utf8')\n      }\n      data = this._decoder.write(data)\n    }\n\n    this._parser.write(data.toString())\n    this.emit('data', data)\n    return true\n  }\n\n  SAXStream.prototype.end = function (chunk) {\n    if (chunk && chunk.length) {\n      this.write(chunk)\n    }\n    this._parser.end()\n    return true\n  }\n\n  SAXStream.prototype.on = function (ev, handler) {\n    var me = this\n    if (!me._parser['on' + ev] && streamWraps.indexOf(ev) !== -1) {\n      me._parser['on' + ev] = function () {\n        var args = arguments.length === 1 ? [arguments[0]] : Array.apply(null, arguments)\n        args.splice(0, 0, ev)\n        me.emit.apply(me, args)\n      }\n    }\n\n    return Stream.prototype.on.call(me, ev, handler)\n  }\n\n  // character classes and tokens\n  var whitespace = '\\r\\n\\t '\n\n  // this really needs to be replaced with character classes.\n  // XML allows all manner of ridiculous numbers and digits.\n  var number = '0124356789'\n  var letter = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\n  // (Letter | \"_\" | \":\")\n  var quote = '\\'\"'\n  var attribEnd = whitespace + '>'\n  var CDATA = '[CDATA['\n  var DOCTYPE = 'DOCTYPE'\n  var XML_NAMESPACE = 'http://www.w3.org/XML/1998/namespace'\n  var XMLNS_NAMESPACE = 'http://www.w3.org/2000/xmlns/'\n  var rootNS = { xml: XML_NAMESPACE, xmlns: XMLNS_NAMESPACE }\n\n  // turn all the string character sets into character class objects.\n  whitespace = charClass(whitespace)\n  number = charClass(number)\n  letter = charClass(letter)\n\n  // http://www.w3.org/TR/REC-xml/#NT-NameStartChar\n  // This implementation works on strings, a single character at a time\n  // as such, it cannot ever support astral-plane characters (10000-EFFFF)\n  // without a significant breaking change to either this  parser, or the\n  // JavaScript language.  Implementation of an emoji-capable xml parser\n  // is left as an exercise for the reader.\n  var nameStart = /[:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]/\n\n  var nameBody = /[:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\u00B7\\u0300-\\u036F\\u203F-\\u2040\\.\\d-]/\n\n  var entityStart = /[#:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]/\n  var entityBody = /[#:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\u00B7\\u0300-\\u036F\\u203F-\\u2040\\.\\d-]/\n\n  quote = charClass(quote)\n  attribEnd = charClass(attribEnd)\n\n  function charClass (str) {\n    return str.split('').reduce(function (s, c) {\n      s[c] = true\n      return s\n    }, {})\n  }\n\n  function isRegExp (c) {\n    return Object.prototype.toString.call(c) === '[object RegExp]'\n  }\n\n  function is (charclass, c) {\n    return isRegExp(charclass) ? !!c.match(charclass) : charclass[c]\n  }\n\n  function not (charclass, c) {\n    return !is(charclass, c)\n  }\n\n  var S = 0\n  sax.STATE = {\n    BEGIN: S++, // leading byte order mark or whitespace\n    BEGIN_WHITESPACE: S++, // leading whitespace\n    TEXT: S++, // general stuff\n    TEXT_ENTITY: S++, // &amp and such.\n    OPEN_WAKA: S++, // <\n    SGML_DECL: S++, // <!BLARG\n    SGML_DECL_QUOTED: S++, // <!BLARG foo \"bar\n    DOCTYPE: S++, // <!DOCTYPE\n    DOCTYPE_QUOTED: S++, // <!DOCTYPE \"//blah\n    DOCTYPE_DTD: S++, // <!DOCTYPE \"//blah\" [ ...\n    DOCTYPE_DTD_QUOTED: S++, // <!DOCTYPE \"//blah\" [ \"foo\n    COMMENT_STARTING: S++, // <!-\n    COMMENT: S++, // <!--\n    COMMENT_ENDING: S++, // <!-- blah -\n    COMMENT_ENDED: S++, // <!-- blah --\n    CDATA: S++, // <![CDATA[ something\n    CDATA_ENDING: S++, // ]\n    CDATA_ENDING_2: S++, // ]]\n    PROC_INST: S++, // <?hi\n    PROC_INST_BODY: S++, // <?hi there\n    PROC_INST_ENDING: S++, // <?hi \"there\" ?\n    OPEN_TAG: S++, // <strong\n    OPEN_TAG_SLASH: S++, // <strong /\n    ATTRIB: S++, // <a\n    ATTRIB_NAME: S++, // <a foo\n    ATTRIB_NAME_SAW_WHITE: S++, // <a foo _\n    ATTRIB_VALUE: S++, // <a foo=\n    ATTRIB_VALUE_QUOTED: S++, // <a foo=\"bar\n    ATTRIB_VALUE_CLOSED: S++, // <a foo=\"bar\"\n    ATTRIB_VALUE_UNQUOTED: S++, // <a foo=bar\n    ATTRIB_VALUE_ENTITY_Q: S++, // <foo bar=\"&quot;\"\n    ATTRIB_VALUE_ENTITY_U: S++, // <foo bar=&quot\n    CLOSE_TAG: S++, // </a\n    CLOSE_TAG_SAW_WHITE: S++, // </a   >\n    SCRIPT: S++, // <script> ...\n    SCRIPT_ENDING: S++ // <script> ... <\n  }\n\n  sax.XML_ENTITIES = {\n    'amp': '&',\n    'gt': '>',\n    'lt': '<',\n    'quot': '\"',\n    'apos': \"'\"\n  }\n\n  sax.ENTITIES = {\n    'amp': '&',\n    'gt': '>',\n    'lt': '<',\n    'quot': '\"',\n    'apos': \"'\",\n    'AElig': 198,\n    'Aacute': 193,\n    'Acirc': 194,\n    'Agrave': 192,\n    'Aring': 197,\n    'Atilde': 195,\n    'Auml': 196,\n    'Ccedil': 199,\n    'ETH': 208,\n    'Eacute': 201,\n    'Ecirc': 202,\n    'Egrave': 200,\n    'Euml': 203,\n    'Iacute': 205,\n    'Icirc': 206,\n    'Igrave': 204,\n    'Iuml': 207,\n    'Ntilde': 209,\n    'Oacute': 211,\n    'Ocirc': 212,\n    'Ograve': 210,\n    'Oslash': 216,\n    'Otilde': 213,\n    'Ouml': 214,\n    'THORN': 222,\n    'Uacute': 218,\n    'Ucirc': 219,\n    'Ugrave': 217,\n    'Uuml': 220,\n    'Yacute': 221,\n    'aacute': 225,\n    'acirc': 226,\n    'aelig': 230,\n    'agrave': 224,\n    'aring': 229,\n    'atilde': 227,\n    'auml': 228,\n    'ccedil': 231,\n    'eacute': 233,\n    'ecirc': 234,\n    'egrave': 232,\n    'eth': 240,\n    'euml': 235,\n    'iacute': 237,\n    'icirc': 238,\n    'igrave': 236,\n    'iuml': 239,\n    'ntilde': 241,\n    'oacute': 243,\n    'ocirc': 244,\n    'ograve': 242,\n    'oslash': 248,\n    'otilde': 245,\n    'ouml': 246,\n    'szlig': 223,\n    'thorn': 254,\n    'uacute': 250,\n    'ucirc': 251,\n    'ugrave': 249,\n    'uuml': 252,\n    'yacute': 253,\n    'yuml': 255,\n    'copy': 169,\n    'reg': 174,\n    'nbsp': 160,\n    'iexcl': 161,\n    'cent': 162,\n    'pound': 163,\n    'curren': 164,\n    'yen': 165,\n    'brvbar': 166,\n    'sect': 167,\n    'uml': 168,\n    'ordf': 170,\n    'laquo': 171,\n    'not': 172,\n    'shy': 173,\n    'macr': 175,\n    'deg': 176,\n    'plusmn': 177,\n    'sup1': 185,\n    'sup2': 178,\n    'sup3': 179,\n    'acute': 180,\n    'micro': 181,\n    'para': 182,\n    'middot': 183,\n    'cedil': 184,\n    'ordm': 186,\n    'raquo': 187,\n    'frac14': 188,\n    'frac12': 189,\n    'frac34': 190,\n    'iquest': 191,\n    'times': 215,\n    'divide': 247,\n    'OElig': 338,\n    'oelig': 339,\n    'Scaron': 352,\n    'scaron': 353,\n    'Yuml': 376,\n    'fnof': 402,\n    'circ': 710,\n    'tilde': 732,\n    'Alpha': 913,\n    'Beta': 914,\n    'Gamma': 915,\n    'Delta': 916,\n    'Epsilon': 917,\n    'Zeta': 918,\n    'Eta': 919,\n    'Theta': 920,\n    'Iota': 921,\n    'Kappa': 922,\n    'Lambda': 923,\n    'Mu': 924,\n    'Nu': 925,\n    'Xi': 926,\n    'Omicron': 927,\n    'Pi': 928,\n    'Rho': 929,\n    'Sigma': 931,\n    'Tau': 932,\n    'Upsilon': 933,\n    'Phi': 934,\n    'Chi': 935,\n    'Psi': 936,\n    'Omega': 937,\n    'alpha': 945,\n    'beta': 946,\n    'gamma': 947,\n    'delta': 948,\n    'epsilon': 949,\n    'zeta': 950,\n    'eta': 951,\n    'theta': 952,\n    'iota': 953,\n    'kappa': 954,\n    'lambda': 955,\n    'mu': 956,\n    'nu': 957,\n    'xi': 958,\n    'omicron': 959,\n    'pi': 960,\n    'rho': 961,\n    'sigmaf': 962,\n    'sigma': 963,\n    'tau': 964,\n    'upsilon': 965,\n    'phi': 966,\n    'chi': 967,\n    'psi': 968,\n    'omega': 969,\n    'thetasym': 977,\n    'upsih': 978,\n    'piv': 982,\n    'ensp': 8194,\n    'emsp': 8195,\n    'thinsp': 8201,\n    'zwnj': 8204,\n    'zwj': 8205,\n    'lrm': 8206,\n    'rlm': 8207,\n    'ndash': 8211,\n    'mdash': 8212,\n    'lsquo': 8216,\n    'rsquo': 8217,\n    'sbquo': 8218,\n    'ldquo': 8220,\n    'rdquo': 8221,\n    'bdquo': 8222,\n    'dagger': 8224,\n    'Dagger': 8225,\n    'bull': 8226,\n    'hellip': 8230,\n    'permil': 8240,\n    'prime': 8242,\n    'Prime': 8243,\n    'lsaquo': 8249,\n    'rsaquo': 8250,\n    'oline': 8254,\n    'frasl': 8260,\n    'euro': 8364,\n    'image': 8465,\n    'weierp': 8472,\n    'real': 8476,\n    'trade': 8482,\n    'alefsym': 8501,\n    'larr': 8592,\n    'uarr': 8593,\n    'rarr': 8594,\n    'darr': 8595,\n    'harr': 8596,\n    'crarr': 8629,\n    'lArr': 8656,\n    'uArr': 8657,\n    'rArr': 8658,\n    'dArr': 8659,\n    'hArr': 8660,\n    'forall': 8704,\n    'part': 8706,\n    'exist': 8707,\n    'empty': 8709,\n    'nabla': 8711,\n    'isin': 8712,\n    'notin': 8713,\n    'ni': 8715,\n    'prod': 8719,\n    'sum': 8721,\n    'minus': 8722,\n    'lowast': 8727,\n    'radic': 8730,\n    'prop': 8733,\n    'infin': 8734,\n    'ang': 8736,\n    'and': 8743,\n    'or': 8744,\n    'cap': 8745,\n    'cup': 8746,\n    'int': 8747,\n    'there4': 8756,\n    'sim': 8764,\n    'cong': 8773,\n    'asymp': 8776,\n    'ne': 8800,\n    'equiv': 8801,\n    'le': 8804,\n    'ge': 8805,\n    'sub': 8834,\n    'sup': 8835,\n    'nsub': 8836,\n    'sube': 8838,\n    'supe': 8839,\n    'oplus': 8853,\n    'otimes': 8855,\n    'perp': 8869,\n    'sdot': 8901,\n    'lceil': 8968,\n    'rceil': 8969,\n    'lfloor': 8970,\n    'rfloor': 8971,\n    'lang': 9001,\n    'rang': 9002,\n    'loz': 9674,\n    'spades': 9824,\n    'clubs': 9827,\n    'hearts': 9829,\n    'diams': 9830\n  }\n\n  Object.keys(sax.ENTITIES).forEach(function (key) {\n    var e = sax.ENTITIES[key]\n    var s = typeof e === 'number' ? String.fromCharCode(e) : e\n    sax.ENTITIES[key] = s\n  })\n\n  for (var s in sax.STATE) {\n    sax.STATE[sax.STATE[s]] = s\n  }\n\n  // shorthand\n  S = sax.STATE\n\n  function emit (parser, event, data) {\n    parser[event] && parser[event](data)\n  }\n\n  function emitNode (parser, nodeType, data) {\n    if (parser.textNode) closeText(parser)\n    emit(parser, nodeType, data)\n  }\n\n  function closeText (parser) {\n    parser.textNode = textopts(parser.opt, parser.textNode)\n    if (parser.textNode) emit(parser, 'ontext', parser.textNode)\n    parser.textNode = ''\n  }\n\n  function textopts (opt, text) {\n    if (opt.trim) text = text.trim()\n    if (opt.normalize) text = text.replace(/\\s+/g, ' ')\n    return text\n  }\n\n  function error (parser, er) {\n    closeText(parser)\n    if (parser.trackPosition) {\n      er += '\\nLine: ' + parser.line +\n        '\\nColumn: ' + parser.column +\n        '\\nChar: ' + parser.c\n    }\n    er = new Error(er)\n    parser.error = er\n    emit(parser, 'onerror', er)\n    return parser\n  }\n\n  function end (parser) {\n    if (parser.sawRoot && !parser.closedRoot) strictFail(parser, 'Unclosed root tag')\n    if ((parser.state !== S.BEGIN) &&\n      (parser.state !== S.BEGIN_WHITESPACE) &&\n      (parser.state !== S.TEXT)) {\n      error(parser, 'Unexpected end')\n    }\n    closeText(parser)\n    parser.c = ''\n    parser.closed = true\n    emit(parser, 'onend')\n    SAXParser.call(parser, parser.strict, parser.opt)\n    return parser\n  }\n\n  function strictFail (parser, message) {\n    if (typeof parser !== 'object' || !(parser instanceof SAXParser)) {\n      throw new Error('bad call to strictFail')\n    }\n    if (parser.strict) {\n      error(parser, message)\n    }\n  }\n\n  function newTag (parser) {\n    if (!parser.strict) parser.tagName = parser.tagName[parser.looseCase]()\n    var parent = parser.tags[parser.tags.length - 1] || parser\n    var tag = parser.tag = { name: parser.tagName, attributes: {} }\n\n    // will be overridden if tag contails an xmlns=\"foo\" or xmlns:foo=\"bar\"\n    if (parser.opt.xmlns) {\n      tag.ns = parent.ns\n    }\n    parser.attribList.length = 0\n    emitNode(parser, 'onopentagstart', tag)\n  }\n\n  function qname (name, attribute) {\n    var i = name.indexOf(':')\n    var qualName = i < 0 ? [ '', name ] : name.split(':')\n    var prefix = qualName[0]\n    var local = qualName[1]\n\n    // <x \"xmlns\"=\"http://foo\">\n    if (attribute && name === 'xmlns') {\n      prefix = 'xmlns'\n      local = ''\n    }\n\n    return { prefix: prefix, local: local }\n  }\n\n  function attrib (parser) {\n    if (!parser.strict) {\n      parser.attribName = parser.attribName[parser.looseCase]()\n    }\n\n    if (parser.attribList.indexOf(parser.attribName) !== -1 ||\n      parser.tag.attributes.hasOwnProperty(parser.attribName)) {\n      parser.attribName = parser.attribValue = ''\n      return\n    }\n\n    if (parser.opt.xmlns) {\n      var qn = qname(parser.attribName, true)\n      var prefix = qn.prefix\n      var local = qn.local\n\n      if (prefix === 'xmlns') {\n        // namespace binding attribute. push the binding into scope\n        if (local === 'xml' && parser.attribValue !== XML_NAMESPACE) {\n          strictFail(parser,\n            'xml: prefix must be bound to ' + XML_NAMESPACE + '\\n' +\n            'Actual: ' + parser.attribValue)\n        } else if (local === 'xmlns' && parser.attribValue !== XMLNS_NAMESPACE) {\n          strictFail(parser,\n            'xmlns: prefix must be bound to ' + XMLNS_NAMESPACE + '\\n' +\n            'Actual: ' + parser.attribValue)\n        } else {\n          var tag = parser.tag\n          var parent = parser.tags[parser.tags.length - 1] || parser\n          if (tag.ns === parent.ns) {\n            tag.ns = Object.create(parent.ns)\n          }\n          tag.ns[local] = parser.attribValue\n        }\n      }\n\n      // defer onattribute events until all attributes have been seen\n      // so any new bindings can take effect. preserve attribute order\n      // so deferred events can be emitted in document order\n      parser.attribList.push([parser.attribName, parser.attribValue])\n    } else {\n      // in non-xmlns mode, we can emit the event right away\n      parser.tag.attributes[parser.attribName] = parser.attribValue\n      emitNode(parser, 'onattribute', {\n        name: parser.attribName,\n        value: parser.attribValue\n      })\n    }\n\n    parser.attribName = parser.attribValue = ''\n  }\n\n  function openTag (parser, selfClosing) {\n    if (parser.opt.xmlns) {\n      // emit namespace binding events\n      var tag = parser.tag\n\n      // add namespace info to tag\n      var qn = qname(parser.tagName)\n      tag.prefix = qn.prefix\n      tag.local = qn.local\n      tag.uri = tag.ns[qn.prefix] || ''\n\n      if (tag.prefix && !tag.uri) {\n        strictFail(parser, 'Unbound namespace prefix: ' +\n          JSON.stringify(parser.tagName))\n        tag.uri = qn.prefix\n      }\n\n      var parent = parser.tags[parser.tags.length - 1] || parser\n      if (tag.ns && parent.ns !== tag.ns) {\n        Object.keys(tag.ns).forEach(function (p) {\n          emitNode(parser, 'onopennamespace', {\n            prefix: p,\n            uri: tag.ns[p]\n          })\n        })\n      }\n\n      // handle deferred onattribute events\n      // Note: do not apply default ns to attributes:\n      //   http://www.w3.org/TR/REC-xml-names/#defaulting\n      for (var i = 0, l = parser.attribList.length; i < l; i++) {\n        var nv = parser.attribList[i]\n        var name = nv[0]\n        var value = nv[1]\n        var qualName = qname(name, true)\n        var prefix = qualName.prefix\n        var local = qualName.local\n        var uri = prefix === '' ? '' : (tag.ns[prefix] || '')\n        var a = {\n          name: name,\n          value: value,\n          prefix: prefix,\n          local: local,\n          uri: uri\n        }\n\n        // if there's any attributes with an undefined namespace,\n        // then fail on them now.\n        if (prefix && prefix !== 'xmlns' && !uri) {\n          strictFail(parser, 'Unbound namespace prefix: ' +\n            JSON.stringify(prefix))\n          a.uri = prefix\n        }\n        parser.tag.attributes[name] = a\n        emitNode(parser, 'onattribute', a)\n      }\n      parser.attribList.length = 0\n    }\n\n    parser.tag.isSelfClosing = !!selfClosing\n\n    // process the tag\n    parser.sawRoot = true\n    parser.tags.push(parser.tag)\n    emitNode(parser, 'onopentag', parser.tag)\n    if (!selfClosing) {\n      // special case for <script> in non-strict mode.\n      if (!parser.noscript && parser.tagName.toLowerCase() === 'script') {\n        parser.state = S.SCRIPT\n      } else {\n        parser.state = S.TEXT\n      }\n      parser.tag = null\n      parser.tagName = ''\n    }\n    parser.attribName = parser.attribValue = ''\n    parser.attribList.length = 0\n  }\n\n  function closeTag (parser) {\n    if (!parser.tagName) {\n      strictFail(parser, 'Weird empty close tag.')\n      parser.textNode += '</>'\n      parser.state = S.TEXT\n      return\n    }\n\n    if (parser.script) {\n      if (parser.tagName !== 'script') {\n        parser.script += '</' + parser.tagName + '>'\n        parser.tagName = ''\n        parser.state = S.SCRIPT\n        return\n      }\n      emitNode(parser, 'onscript', parser.script)\n      parser.script = ''\n    }\n\n    // first make sure that the closing tag actually exists.\n    // <a><b></c></b></a> will close everything, otherwise.\n    var t = parser.tags.length\n    var tagName = parser.tagName\n    if (!parser.strict) {\n      tagName = tagName[parser.looseCase]()\n    }\n    var closeTo = tagName\n    while (t--) {\n      var close = parser.tags[t]\n      if (close.name !== closeTo) {\n        // fail the first time in strict mode\n        strictFail(parser, 'Unexpected close tag')\n      } else {\n        break\n      }\n    }\n\n    // didn't find it.  we already failed for strict, so just abort.\n    if (t < 0) {\n      strictFail(parser, 'Unmatched closing tag: ' + parser.tagName)\n      parser.textNode += '</' + parser.tagName + '>'\n      parser.state = S.TEXT\n      return\n    }\n    parser.tagName = tagName\n    var s = parser.tags.length\n    while (s-- > t) {\n      var tag = parser.tag = parser.tags.pop()\n      parser.tagName = parser.tag.name\n      emitNode(parser, 'onclosetag', parser.tagName)\n\n      var x = {}\n      for (var i in tag.ns) {\n        x[i] = tag.ns[i]\n      }\n\n      var parent = parser.tags[parser.tags.length - 1] || parser\n      if (parser.opt.xmlns && tag.ns !== parent.ns) {\n        // remove namespace bindings introduced by tag\n        Object.keys(tag.ns).forEach(function (p) {\n          var n = tag.ns[p]\n          emitNode(parser, 'onclosenamespace', { prefix: p, uri: n })\n        })\n      }\n    }\n    if (t === 0) parser.closedRoot = true\n    parser.tagName = parser.attribValue = parser.attribName = ''\n    parser.attribList.length = 0\n    parser.state = S.TEXT\n  }\n\n  function parseEntity (parser) {\n    var entity = parser.entity\n    var entityLC = entity.toLowerCase()\n    var num\n    var numStr = ''\n\n    if (parser.ENTITIES[entity]) {\n      return parser.ENTITIES[entity]\n    }\n    if (parser.ENTITIES[entityLC]) {\n      return parser.ENTITIES[entityLC]\n    }\n    entity = entityLC\n    if (entity.charAt(0) === '#') {\n      if (entity.charAt(1) === 'x') {\n        entity = entity.slice(2)\n        num = parseInt(entity, 16)\n        numStr = num.toString(16)\n      } else {\n        entity = entity.slice(1)\n        num = parseInt(entity, 10)\n        numStr = num.toString(10)\n      }\n    }\n    entity = entity.replace(/^0+/, '')\n    if (numStr.toLowerCase() !== entity) {\n      strictFail(parser, 'Invalid character entity')\n      return '&' + parser.entity + ';'\n    }\n\n    return String.fromCodePoint(num)\n  }\n\n  function beginWhiteSpace (parser, c) {\n    if (c === '<') {\n      parser.state = S.OPEN_WAKA\n      parser.startTagPosition = parser.position\n    } else if (not(whitespace, c)) {\n      // have to process this as a text node.\n      // weird, but happens.\n      strictFail(parser, 'Non-whitespace before first tag.')\n      parser.textNode = c\n      parser.state = S.TEXT\n    }\n  }\n\n  function charAt (chunk, i) {\n    var result = ''\n    if (i < chunk.length) {\n      result = chunk.charAt(i)\n    }\n    return result\n  }\n\n  function write (chunk) {\n    var parser = this\n    if (this.error) {\n      throw this.error\n    }\n    if (parser.closed) {\n      return error(parser,\n        'Cannot write after close. Assign an onready handler.')\n    }\n    if (chunk === null) {\n      return end(parser)\n    }\n    if (typeof chunk === 'object') {\n      chunk = chunk.toString()\n    }\n    var i = 0\n    var c = ''\n    while (true) {\n      c = charAt(chunk, i++)\n      parser.c = c\n      if (!c) {\n        break\n      }\n      if (parser.trackPosition) {\n        parser.position++\n        if (c === '\\n') {\n          parser.line++\n          parser.column = 0\n        } else {\n          parser.column++\n        }\n      }\n      switch (parser.state) {\n        case S.BEGIN:\n          parser.state = S.BEGIN_WHITESPACE\n          if (c === '\\uFEFF') {\n            continue\n          }\n          beginWhiteSpace(parser, c)\n          continue\n\n        case S.BEGIN_WHITESPACE:\n          beginWhiteSpace(parser, c)\n          continue\n\n        case S.TEXT:\n          if (parser.sawRoot && !parser.closedRoot) {\n            var starti = i - 1\n            while (c && c !== '<' && c !== '&') {\n              c = charAt(chunk, i++)\n              if (c && parser.trackPosition) {\n                parser.position++\n                if (c === '\\n') {\n                  parser.line++\n                  parser.column = 0\n                } else {\n                  parser.column++\n                }\n              }\n            }\n            parser.textNode += chunk.substring(starti, i - 1)\n          }\n          if (c === '<' && !(parser.sawRoot && parser.closedRoot && !parser.strict)) {\n            parser.state = S.OPEN_WAKA\n            parser.startTagPosition = parser.position\n          } else {\n            if (not(whitespace, c) && (!parser.sawRoot || parser.closedRoot)) {\n              strictFail(parser, 'Text data outside of root node.')\n            }\n            if (c === '&') {\n              parser.state = S.TEXT_ENTITY\n            } else {\n              parser.textNode += c\n            }\n          }\n          continue\n\n        case S.SCRIPT:\n          // only non-strict\n          if (c === '<') {\n            parser.state = S.SCRIPT_ENDING\n          } else {\n            parser.script += c\n          }\n          continue\n\n        case S.SCRIPT_ENDING:\n          if (c === '/') {\n            parser.state = S.CLOSE_TAG\n          } else {\n            parser.script += '<' + c\n            parser.state = S.SCRIPT\n          }\n          continue\n\n        case S.OPEN_WAKA:\n          // either a /, ?, !, or text is coming next.\n          if (c === '!') {\n            parser.state = S.SGML_DECL\n            parser.sgmlDecl = ''\n          } else if (is(whitespace, c)) {\n            // wait for it...\n          } else if (is(nameStart, c)) {\n            parser.state = S.OPEN_TAG\n            parser.tagName = c\n          } else if (c === '/') {\n            parser.state = S.CLOSE_TAG\n            parser.tagName = ''\n          } else if (c === '?') {\n            parser.state = S.PROC_INST\n            parser.procInstName = parser.procInstBody = ''\n          } else {\n            strictFail(parser, 'Unencoded <')\n            // if there was some whitespace, then add that in.\n            if (parser.startTagPosition + 1 < parser.position) {\n              var pad = parser.position - parser.startTagPosition\n              c = new Array(pad).join(' ') + c\n            }\n            parser.textNode += '<' + c\n            parser.state = S.TEXT\n          }\n          continue\n\n        case S.SGML_DECL:\n          if ((parser.sgmlDecl + c).toUpperCase() === CDATA) {\n            emitNode(parser, 'onopencdata')\n            parser.state = S.CDATA\n            parser.sgmlDecl = ''\n            parser.cdata = ''\n          } else if (parser.sgmlDecl + c === '--') {\n            parser.state = S.COMMENT\n            parser.comment = ''\n            parser.sgmlDecl = ''\n          } else if ((parser.sgmlDecl + c).toUpperCase() === DOCTYPE) {\n            parser.state = S.DOCTYPE\n            if (parser.doctype || parser.sawRoot) {\n              strictFail(parser,\n                'Inappropriately located doctype declaration')\n            }\n            parser.doctype = ''\n            parser.sgmlDecl = ''\n          } else if (c === '>') {\n            emitNode(parser, 'onsgmldeclaration', parser.sgmlDecl)\n            parser.sgmlDecl = ''\n            parser.state = S.TEXT\n          } else if (is(quote, c)) {\n            parser.state = S.SGML_DECL_QUOTED\n            parser.sgmlDecl += c\n          } else {\n            parser.sgmlDecl += c\n          }\n          continue\n\n        case S.SGML_DECL_QUOTED:\n          if (c === parser.q) {\n            parser.state = S.SGML_DECL\n            parser.q = ''\n          }\n          parser.sgmlDecl += c\n          continue\n\n        case S.DOCTYPE:\n          if (c === '>') {\n            parser.state = S.TEXT\n            emitNode(parser, 'ondoctype', parser.doctype)\n            parser.doctype = true // just remember that we saw it.\n          } else {\n            parser.doctype += c\n            if (c === '[') {\n              parser.state = S.DOCTYPE_DTD\n            } else if (is(quote, c)) {\n              parser.state = S.DOCTYPE_QUOTED\n              parser.q = c\n            }\n          }\n          continue\n\n        case S.DOCTYPE_QUOTED:\n          parser.doctype += c\n          if (c === parser.q) {\n            parser.q = ''\n            parser.state = S.DOCTYPE\n          }\n          continue\n\n        case S.DOCTYPE_DTD:\n          parser.doctype += c\n          if (c === ']') {\n            parser.state = S.DOCTYPE\n          } else if (is(quote, c)) {\n            parser.state = S.DOCTYPE_DTD_QUOTED\n            parser.q = c\n          }\n          continue\n\n        case S.DOCTYPE_DTD_QUOTED:\n          parser.doctype += c\n          if (c === parser.q) {\n            parser.state = S.DOCTYPE_DTD\n            parser.q = ''\n          }\n          continue\n\n        case S.COMMENT:\n          if (c === '-') {\n            parser.state = S.COMMENT_ENDING\n          } else {\n            parser.comment += c\n          }\n          continue\n\n        case S.COMMENT_ENDING:\n          if (c === '-') {\n            parser.state = S.COMMENT_ENDED\n            parser.comment = textopts(parser.opt, parser.comment)\n            if (parser.comment) {\n              emitNode(parser, 'oncomment', parser.comment)\n            }\n            parser.comment = ''\n          } else {\n            parser.comment += '-' + c\n            parser.state = S.COMMENT\n          }\n          continue\n\n        case S.COMMENT_ENDED:\n          if (c !== '>') {\n            strictFail(parser, 'Malformed comment')\n            // allow <!-- blah -- bloo --> in non-strict mode,\n            // which is a comment of \" blah -- bloo \"\n            parser.comment += '--' + c\n            parser.state = S.COMMENT\n          } else {\n            parser.state = S.TEXT\n          }\n          continue\n\n        case S.CDATA:\n          if (c === ']') {\n            parser.state = S.CDATA_ENDING\n          } else {\n            parser.cdata += c\n          }\n          continue\n\n        case S.CDATA_ENDING:\n          if (c === ']') {\n            parser.state = S.CDATA_ENDING_2\n          } else {\n            parser.cdata += ']' + c\n            parser.state = S.CDATA\n          }\n          continue\n\n        case S.CDATA_ENDING_2:\n          if (c === '>') {\n            if (parser.cdata) {\n              emitNode(parser, 'oncdata', parser.cdata)\n            }\n            emitNode(parser, 'onclosecdata')\n            parser.cdata = ''\n            parser.state = S.TEXT\n          } else if (c === ']') {\n            parser.cdata += ']'\n          } else {\n            parser.cdata += ']]' + c\n            parser.state = S.CDATA\n          }\n          continue\n\n        case S.PROC_INST:\n          if (c === '?') {\n            parser.state = S.PROC_INST_ENDING\n          } else if (is(whitespace, c)) {\n            parser.state = S.PROC_INST_BODY\n          } else {\n            parser.procInstName += c\n          }\n          continue\n\n        case S.PROC_INST_BODY:\n          if (!parser.procInstBody && is(whitespace, c)) {\n            continue\n          } else if (c === '?') {\n            parser.state = S.PROC_INST_ENDING\n          } else {\n            parser.procInstBody += c\n          }\n          continue\n\n        case S.PROC_INST_ENDING:\n          if (c === '>') {\n            emitNode(parser, 'onprocessinginstruction', {\n              name: parser.procInstName,\n              body: parser.procInstBody\n            })\n            parser.procInstName = parser.procInstBody = ''\n            parser.state = S.TEXT\n          } else {\n            parser.procInstBody += '?' + c\n            parser.state = S.PROC_INST_BODY\n          }\n          continue\n\n        case S.OPEN_TAG:\n          if (is(nameBody, c)) {\n            parser.tagName += c\n          } else {\n            newTag(parser)\n            if (c === '>') {\n              openTag(parser)\n            } else if (c === '/') {\n              parser.state = S.OPEN_TAG_SLASH\n            } else {\n              if (not(whitespace, c)) {\n                strictFail(parser, 'Invalid character in tag name')\n              }\n              parser.state = S.ATTRIB\n            }\n          }\n          continue\n\n        case S.OPEN_TAG_SLASH:\n          if (c === '>') {\n            openTag(parser, true)\n            closeTag(parser)\n          } else {\n            strictFail(parser, 'Forward-slash in opening tag not followed by >')\n            parser.state = S.ATTRIB\n          }\n          continue\n\n        case S.ATTRIB:\n          // haven't read the attribute name yet.\n          if (is(whitespace, c)) {\n            continue\n          } else if (c === '>') {\n            openTag(parser)\n          } else if (c === '/') {\n            parser.state = S.OPEN_TAG_SLASH\n          } else if (is(nameStart, c)) {\n            parser.attribName = c\n            parser.attribValue = ''\n            parser.state = S.ATTRIB_NAME\n          } else {\n            strictFail(parser, 'Invalid attribute name')\n          }\n          continue\n\n        case S.ATTRIB_NAME:\n          if (c === '=') {\n            parser.state = S.ATTRIB_VALUE\n          } else if (c === '>') {\n            strictFail(parser, 'Attribute without value')\n            parser.attribValue = parser.attribName\n            attrib(parser)\n            openTag(parser)\n          } else if (is(whitespace, c)) {\n            parser.state = S.ATTRIB_NAME_SAW_WHITE\n          } else if (is(nameBody, c)) {\n            parser.attribName += c\n          } else {\n            strictFail(parser, 'Invalid attribute name')\n          }\n          continue\n\n        case S.ATTRIB_NAME_SAW_WHITE:\n          if (c === '=') {\n            parser.state = S.ATTRIB_VALUE\n          } else if (is(whitespace, c)) {\n            continue\n          } else {\n            strictFail(parser, 'Attribute without value')\n            parser.tag.attributes[parser.attribName] = ''\n            parser.attribValue = ''\n            emitNode(parser, 'onattribute', {\n              name: parser.attribName,\n              value: ''\n            })\n            parser.attribName = ''\n            if (c === '>') {\n              openTag(parser)\n            } else if (is(nameStart, c)) {\n              parser.attribName = c\n              parser.state = S.ATTRIB_NAME\n            } else {\n              strictFail(parser, 'Invalid attribute name')\n              parser.state = S.ATTRIB\n            }\n          }\n          continue\n\n        case S.ATTRIB_VALUE:\n          if (is(whitespace, c)) {\n            continue\n          } else if (is(quote, c)) {\n            parser.q = c\n            parser.state = S.ATTRIB_VALUE_QUOTED\n          } else {\n            strictFail(parser, 'Unquoted attribute value')\n            parser.state = S.ATTRIB_VALUE_UNQUOTED\n            parser.attribValue = c\n          }\n          continue\n\n        case S.ATTRIB_VALUE_QUOTED:\n          if (c !== parser.q) {\n            if (c === '&') {\n              parser.state = S.ATTRIB_VALUE_ENTITY_Q\n            } else {\n              parser.attribValue += c\n            }\n            continue\n          }\n          attrib(parser)\n          parser.q = ''\n          parser.state = S.ATTRIB_VALUE_CLOSED\n          continue\n\n        case S.ATTRIB_VALUE_CLOSED:\n          if (is(whitespace, c)) {\n            parser.state = S.ATTRIB\n          } else if (c === '>') {\n            openTag(parser)\n          } else if (c === '/') {\n            parser.state = S.OPEN_TAG_SLASH\n          } else if (is(nameStart, c)) {\n            strictFail(parser, 'No whitespace between attributes')\n            parser.attribName = c\n            parser.attribValue = ''\n            parser.state = S.ATTRIB_NAME\n          } else {\n            strictFail(parser, 'Invalid attribute name')\n          }\n          continue\n\n        case S.ATTRIB_VALUE_UNQUOTED:\n          if (not(attribEnd, c)) {\n            if (c === '&') {\n              parser.state = S.ATTRIB_VALUE_ENTITY_U\n            } else {\n              parser.attribValue += c\n            }\n            continue\n          }\n          attrib(parser)\n          if (c === '>') {\n            openTag(parser)\n          } else {\n            parser.state = S.ATTRIB\n          }\n          continue\n\n        case S.CLOSE_TAG:\n          if (!parser.tagName) {\n            if (is(whitespace, c)) {\n              continue\n            } else if (not(nameStart, c)) {\n              if (parser.script) {\n                parser.script += '</' + c\n                parser.state = S.SCRIPT\n              } else {\n                strictFail(parser, 'Invalid tagname in closing tag.')\n              }\n            } else {\n              parser.tagName = c\n            }\n          } else if (c === '>') {\n            closeTag(parser)\n          } else if (is(nameBody, c)) {\n            parser.tagName += c\n          } else if (parser.script) {\n            parser.script += '</' + parser.tagName\n            parser.tagName = ''\n            parser.state = S.SCRIPT\n          } else {\n            if (not(whitespace, c)) {\n              strictFail(parser, 'Invalid tagname in closing tag')\n            }\n            parser.state = S.CLOSE_TAG_SAW_WHITE\n          }\n          continue\n\n        case S.CLOSE_TAG_SAW_WHITE:\n          if (is(whitespace, c)) {\n            continue\n          }\n          if (c === '>') {\n            closeTag(parser)\n          } else {\n            strictFail(parser, 'Invalid characters in closing tag')\n          }\n          continue\n\n        case S.TEXT_ENTITY:\n        case S.ATTRIB_VALUE_ENTITY_Q:\n        case S.ATTRIB_VALUE_ENTITY_U:\n          var returnState\n          var buffer\n          switch (parser.state) {\n            case S.TEXT_ENTITY:\n              returnState = S.TEXT\n              buffer = 'textNode'\n              break\n\n            case S.ATTRIB_VALUE_ENTITY_Q:\n              returnState = S.ATTRIB_VALUE_QUOTED\n              buffer = 'attribValue'\n              break\n\n            case S.ATTRIB_VALUE_ENTITY_U:\n              returnState = S.ATTRIB_VALUE_UNQUOTED\n              buffer = 'attribValue'\n              break\n          }\n\n          if (c === ';') {\n            parser[buffer] += parseEntity(parser)\n            parser.entity = ''\n            parser.state = returnState\n          } else if (is(parser.entity.length ? entityBody : entityStart, c)) {\n            parser.entity += c\n          } else {\n            strictFail(parser, 'Invalid character in entity name')\n            parser[buffer] += '&' + parser.entity + c\n            parser.entity = ''\n            parser.state = returnState\n          }\n\n          continue\n\n        default:\n          throw new Error(parser, 'Unknown state: ' + parser.state)\n      }\n    } // while\n\n    if (parser.position >= parser.bufferCheckPosition) {\n      checkBufferLength(parser)\n    }\n    return parser\n  }\n\n  /*! http://mths.be/fromcodepoint v0.1.0 by @mathias */\n  if (!String.fromCodePoint) {\n    (function () {\n      var stringFromCharCode = String.fromCharCode\n      var floor = Math.floor\n      var fromCodePoint = function () {\n        var MAX_SIZE = 0x4000\n        var codeUnits = []\n        var highSurrogate\n        var lowSurrogate\n        var index = -1\n        var length = arguments.length\n        if (!length) {\n          return ''\n        }\n        var result = ''\n        while (++index < length) {\n          var codePoint = Number(arguments[index])\n          if (\n            !isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`\n            codePoint < 0 || // not a valid Unicode code point\n            codePoint > 0x10FFFF || // not a valid Unicode code point\n            floor(codePoint) !== codePoint // not an integer\n          ) {\n            throw RangeError('Invalid code point: ' + codePoint)\n          }\n          if (codePoint <= 0xFFFF) { // BMP code point\n            codeUnits.push(codePoint)\n          } else { // Astral code point; split in surrogate halves\n            // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n            codePoint -= 0x10000\n            highSurrogate = (codePoint >> 10) + 0xD800\n            lowSurrogate = (codePoint % 0x400) + 0xDC00\n            codeUnits.push(highSurrogate, lowSurrogate)\n          }\n          if (index + 1 === length || codeUnits.length > MAX_SIZE) {\n            result += stringFromCharCode.apply(null, codeUnits)\n            codeUnits.length = 0\n          }\n        }\n        return result\n      }\n      if (Object.defineProperty) {\n        Object.defineProperty(String, 'fromCodePoint', {\n          value: fromCodePoint,\n          configurable: true,\n          writable: true\n        })\n      } else {\n        String.fromCodePoint = fromCodePoint\n      }\n    }())\n  }\n})(typeof exports === 'undefined' ? this.sax = {} : exports)\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nmodule.exports = Stream;\n\nvar EE = require(10).EventEmitter;\nvar inherits = require(43);\n\ninherits(Stream, EE);\nStream.Readable = require(37);\nStream.Writable = require(39);\nStream.Duplex = require(24);\nStream.Transform = require(38);\nStream.PassThrough = require(36);\n\n// Backwards-compat with node 0.4.x\nStream.Stream = Stream;\n\n\n\n// old-style streams.  Note that the pipe method (the only relevant\n// part of this class) is overridden in the Readable class.\n\nfunction Stream() {\n  EE.call(this);\n}\n\nStream.prototype.pipe = function(dest, options) {\n  var source = this;\n\n  function ondata(chunk) {\n    if (dest.writable) {\n      if (false === dest.write(chunk) && source.pause) {\n        source.pause();\n      }\n    }\n  }\n\n  source.on('data', ondata);\n\n  function ondrain() {\n    if (source.readable && source.resume) {\n      source.resume();\n    }\n  }\n\n  dest.on('drain', ondrain);\n\n  // If the 'end' option is not supplied, dest.end() will be called when\n  // source gets the 'end' or 'close' events.  Only dest.end() once.\n  if (!dest._isStdio && (!options || options.end !== false)) {\n    source.on('end', onend);\n    source.on('close', onclose);\n  }\n\n  var didOnEnd = false;\n  function onend() {\n    if (didOnEnd) return;\n    didOnEnd = true;\n\n    dest.end();\n  }\n\n\n  function onclose() {\n    if (didOnEnd) return;\n    didOnEnd = true;\n\n    if (typeof dest.destroy === 'function') dest.destroy();\n  }\n\n  // don't leave dangling pipes when there are errors.\n  function onerror(er) {\n    cleanup();\n    if (EE.listenerCount(this, 'error') === 0) {\n      throw er; // Unhandled stream error in pipe.\n    }\n  }\n\n  source.on('error', onerror);\n  dest.on('error', onerror);\n\n  // remove all the event listeners that were added.\n  function cleanup() {\n    source.removeListener('data', ondata);\n    dest.removeListener('drain', ondrain);\n\n    source.removeListener('end', onend);\n    source.removeListener('close', onclose);\n\n    source.removeListener('error', onerror);\n    dest.removeListener('error', onerror);\n\n    source.removeListener('end', cleanup);\n    source.removeListener('close', cleanup);\n\n    dest.removeListener('close', cleanup);\n  }\n\n  source.on('end', cleanup);\n  source.on('close', cleanup);\n\n  dest.on('close', cleanup);\n\n  dest.emit('pipe', source);\n\n  // Allow for unix-like usage: A.pipe(B).pipe(C)\n  return dest;\n};\n","var nextTick = require('process/browser.js').nextTick;\nvar apply = Function.prototype.apply;\nvar slice = Array.prototype.slice;\nvar immediateIds = {};\nvar nextImmediateId = 0;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) { timeout.close(); };\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(window, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// That's not how node.js implements it but the exposed api is the same.\nexports.setImmediate = typeof setImmediate === \"function\" ? setImmediate : function(fn) {\n  var id = nextImmediateId++;\n  var args = arguments.length < 2 ? false : slice.call(arguments, 1);\n\n  immediateIds[id] = true;\n\n  nextTick(function onNextTick() {\n    if (immediateIds[id]) {\n      // fn.call() is faster so we optimize for the common use-case\n      // @see http://jsperf.com/call-apply-segu\n      if (args) {\n        fn.apply(null, args);\n      } else {\n        fn.call(null);\n      }\n      // Prevent ids from leaking\n      exports.clearImmediate(id);\n    }\n  });\n\n  return id;\n};\n\nexports.clearImmediate = typeof clearImmediate === \"function\" ? clearImmediate : function(id) {\n  delete immediateIds[id];\n};","\n/**\n * Module exports.\n */\n\nmodule.exports = deprecate;\n\n/**\n * Mark that a method should not be used.\n * Returns a modified function which warns once by default.\n *\n * If `localStorage.noDeprecation = true` is set, then it is a no-op.\n *\n * If `localStorage.throwDeprecation = true` is set, then deprecated functions\n * will throw an Error when invoked.\n *\n * If `localStorage.traceDeprecation = true` is set, then deprecated functions\n * will invoke `console.trace()` instead of `console.error()`.\n *\n * @param {Function} fn - the function to deprecate\n * @param {String} msg - the string to print to the console when `fn` is invoked\n * @returns {Function} a new \"deprecated\" version of `fn`\n * @api public\n */\n\nfunction deprecate (fn, msg) {\n  if (config('noDeprecation')) {\n    return fn;\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (config('throwDeprecation')) {\n        throw new Error(msg);\n      } else if (config('traceDeprecation')) {\n        console.trace(msg);\n      } else {\n        console.warn(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n}\n\n/**\n * Checks `localStorage` for boolean values for the given `name`.\n *\n * @param {String} name\n * @returns {Boolean}\n * @api private\n */\n\nfunction config (name) {\n  // accessing global.localStorage can trigger a DOMException in sandboxed iframes\n  try {\n    if (!global.localStorage) return false;\n  } catch (_) {\n    return false;\n  }\n  var val = global.localStorage[name];\n  if (null == val) return false;\n  return String(val).toLowerCase() === 'true';\n}\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport EventBus from './EventBus';\r\nimport Events from './events/Events';\r\nimport FactoryMaker from './FactoryMaker';\r\n\r\nconst LOG_LEVEL_NONE = 0;\r\nconst LOG_LEVEL_FATAL = 1;\r\nconst LOG_LEVEL_ERROR = 2;\r\nconst LOG_LEVEL_WARNING = 3;\r\nconst LOG_LEVEL_INFO = 4;\r\nconst LOG_LEVEL_DEBUG = 5;\r\n\r\n/**\r\n * @module Debug\r\n * @param {object} config\r\n * @ignore\r\n */\r\nfunction Debug(config) {\r\n\r\n    config = config || {};\r\n    const context = this.context;\r\n    const eventBus = EventBus(context).getInstance();\r\n    const settings = config.settings;\r\n\r\n    const logFn = [];\r\n\r\n    let instance,\r\n        showLogTimestamp,\r\n        showCalleeName,\r\n        startTime;\r\n\r\n    function setup() {\r\n        showLogTimestamp = true;\r\n        showCalleeName = true;\r\n        startTime = new Date().getTime();\r\n\r\n        if (typeof window !== 'undefined' && window.console) {\r\n            logFn[LOG_LEVEL_FATAL] = getLogFn(window.console.error);\r\n            logFn[LOG_LEVEL_ERROR] = getLogFn(window.console.error);\r\n            logFn[LOG_LEVEL_WARNING] = getLogFn(window.console.warn);\r\n            logFn[LOG_LEVEL_INFO] = getLogFn(window.console.info);\r\n            logFn[LOG_LEVEL_DEBUG] = getLogFn(window.console.debug);\r\n        }\r\n    }\r\n\r\n    function getLogFn(fn) {\r\n        if (fn && fn.bind) {\r\n            return fn.bind(window.console);\r\n        }\r\n        // if not define, return the default function for reporting logs\r\n        return window.console.log.bind(window.console);\r\n    }\r\n\r\n    /**\r\n     * Retrieves a logger which can be used to write logging information in browser console.\r\n     * @param {object} instance Object for which the logger is created. It is used\r\n     * to include calle object information in log messages.\r\n     * @memberof module:Debug\r\n     * @returns {Logger}\r\n     * @instance\r\n     */\r\n    function getLogger(instance) {\r\n        return {\r\n            fatal: fatal.bind(instance),\r\n            error: error.bind(instance),\r\n            warn: warn.bind(instance),\r\n            info: info.bind(instance),\r\n            debug: debug.bind(instance)\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Prepends a timestamp in milliseconds to each log message.\r\n     * @param {boolean} value Set to true if you want to see a timestamp in each log message.\r\n     * @default LOG_LEVEL_WARNING\r\n     * @memberof module:Debug\r\n     * @instance\r\n     */\r\n    function setLogTimestampVisible(value) {\r\n        showLogTimestamp = value;\r\n    }\r\n\r\n    /**\r\n     * Prepends the callee object name, and media type if available, to each log message.\r\n     * @param {boolean} value Set to true if you want to see the callee object name and media type in each log message.\r\n     * @default true\r\n     * @memberof module:Debug\r\n     * @instance\r\n     */\r\n    function setCalleeNameVisible(value) {\r\n        showCalleeName = value;\r\n    }\r\n\r\n    function fatal(...params) {\r\n        doLog(LOG_LEVEL_FATAL, this, ...params);\r\n    }\r\n\r\n    function error(...params) {\r\n        doLog(LOG_LEVEL_ERROR, this, ...params);\r\n    }\r\n\r\n    function warn(...params) {\r\n        doLog(LOG_LEVEL_WARNING, this, ...params);\r\n    }\r\n\r\n    function info(...params) {\r\n        doLog(LOG_LEVEL_INFO, this, ...params);\r\n    }\r\n\r\n    function debug(...params) {\r\n        doLog(LOG_LEVEL_DEBUG, this, ...params);\r\n    }\r\n\r\n    function doLog(level, _this, ...params) {\r\n        let message = '';\r\n        let logTime = null;\r\n\r\n        if (showLogTimestamp) {\r\n            logTime = new Date().getTime();\r\n            message += '[' + (logTime - startTime) + ']';\r\n        }\r\n\r\n        if (showCalleeName && _this && _this.getClassName) {\r\n            message += '[' + _this.getClassName() + ']';\r\n            if (_this.getType) {\r\n                message += '[' + _this.getType() + ']';\r\n            }\r\n        }\r\n\r\n        if (message.length > 0) {\r\n            message += ' ';\r\n        }\r\n\r\n        Array.apply(null, params).forEach(function (item) {\r\n            message += item + ' ';\r\n        });\r\n\r\n        // log to console if the log level is high enough\r\n        if (logFn[level] && settings.get().debug.logLevel >= level) {\r\n            logFn[level](message);\r\n        }\r\n\r\n        // send log event regardless of log level\r\n        if (settings && settings.get().debug.dispatchEvent) {\r\n            eventBus.trigger(Events.LOG, { message: message, level: level });\r\n        }\r\n    }\r\n\r\n    instance = {\r\n        getLogger: getLogger,\r\n        setLogTimestampVisible: setLogTimestampVisible,\r\n        setCalleeNameVisible: setCalleeNameVisible\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\nDebug.__dashjs_factory_name = 'Debug';\r\n\r\nconst factory = FactoryMaker.getSingletonFactory(Debug);\r\nfactory.LOG_LEVEL_NONE = LOG_LEVEL_NONE;\r\nfactory.LOG_LEVEL_FATAL = LOG_LEVEL_FATAL;\r\nfactory.LOG_LEVEL_ERROR = LOG_LEVEL_ERROR;\r\nfactory.LOG_LEVEL_WARNING = LOG_LEVEL_WARNING;\r\nfactory.LOG_LEVEL_INFO = LOG_LEVEL_INFO;\r\nfactory.LOG_LEVEL_DEBUG = LOG_LEVEL_DEBUG;\r\nFactoryMaker.updateSingletonFactory(Debug.__dashjs_factory_name, factory);\r\nexport default factory;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport FactoryMaker from './FactoryMaker';\r\nimport {EVENT_MODE_ON_RECEIVE} from '../streaming/MediaPlayerEvents';\r\n\r\nconst EVENT_PRIORITY_LOW = 0;\r\nconst EVENT_PRIORITY_HIGH = 5000;\r\n\r\nfunction EventBus() {\r\n\r\n    let handlers = {};\r\n\r\n    function on(type, listener, scope, options = {}) {\r\n\r\n        if (!type) {\r\n            throw new Error('event type cannot be null or undefined');\r\n        }\r\n        if (!listener || typeof (listener) !== 'function') {\r\n            throw new Error('listener must be a function: ' + listener);\r\n        }\r\n\r\n        let priority = options.priority || EVENT_PRIORITY_LOW;\r\n\r\n        if (getHandlerIdx(type, listener, scope) >= 0) return;\r\n\r\n        handlers[type] = handlers[type] || [];\r\n\r\n        const handler = {\r\n            callback: listener,\r\n            scope,\r\n            priority\r\n        };\r\n\r\n        if (scope && scope.getStreamId) {\r\n            handler.streamId = scope.getStreamId();\r\n        }\r\n        if (scope && scope.getType) {\r\n            handler.mediaType = scope.getType();\r\n        }\r\n        if (options && options.mode) {\r\n            handler.mode = options.mode;\r\n        }\r\n\r\n        const inserted = handlers[type].some((item, idx) => {\r\n            if (item && priority > item.priority) {\r\n                handlers[type].splice(idx, 0, handler);\r\n                return true;\r\n            }\r\n        });\r\n\r\n        if (!inserted) {\r\n            handlers[type].push(handler);\r\n        }\r\n    }\r\n\r\n    function off(type, listener, scope) {\r\n        if (!type || !listener || !handlers[type]) return;\r\n        const idx = getHandlerIdx(type, listener, scope);\r\n        if (idx < 0) return;\r\n        handlers[type][idx] = null;\r\n    }\r\n\r\n    function trigger(type, payload = {}, filters = {}) {\r\n        if (!type || !handlers[type]) return;\r\n\r\n        payload = payload || {};\r\n\r\n        if (payload.hasOwnProperty('type')) throw new Error('\\'type\\' is a reserved word for event dispatching');\r\n\r\n        payload.type = type;\r\n\r\n        if (filters.streamId) {\r\n            payload.streamId = filters.streamId;\r\n        }\r\n        if (filters.mediaType) {\r\n            payload.mediaType = filters.mediaType;\r\n        }\r\n\r\n        handlers[type]\r\n            .filter((handler) => {\r\n                if (!handler) {\r\n                    return false;\r\n                }\r\n                if (filters.streamId && handler.streamId && handler.streamId !== filters.streamId) {\r\n                    return false;\r\n                }\r\n                if (filters.mediaType && handler.mediaType && handler.mediaType !== filters.mediaType) {\r\n                    return false;\r\n                }\r\n                // This is used for dispatching DASH events. By default we use the onStart mode. Consequently we filter everything that has a non matching mode and the onReceive events for handlers that did not specify a mode.\r\n                if ((filters.mode && handler.mode && handler.mode !== filters.mode) || (!handler.mode && filters.mode && filters.mode === EVENT_MODE_ON_RECEIVE)) {\r\n                    return false;\r\n                }\r\n                return true;\r\n            })\r\n            .forEach(handler => handler && handler.callback.call(handler.scope, payload));\r\n    }\r\n\r\n    function getHandlerIdx(type, listener, scope) {\r\n\r\n        let idx = -1;\r\n\r\n        if (!handlers[type]) return idx;\r\n\r\n        handlers[type].some((item, index) => {\r\n            if (item && item.callback === listener && (!scope || scope === item.scope)) {\r\n                idx = index;\r\n                return true;\r\n            }\r\n        });\r\n        return idx;\r\n    }\r\n\r\n    function reset() {\r\n        handlers = {};\r\n    }\r\n\r\n    const instance = {\r\n        on: on,\r\n        off: off,\r\n        trigger: trigger,\r\n        reset: reset\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nEventBus.__dashjs_factory_name = 'EventBus';\r\nconst factory = FactoryMaker.getSingletonFactory(EventBus);\r\nfactory.EVENT_PRIORITY_LOW = EVENT_PRIORITY_LOW;\r\nfactory.EVENT_PRIORITY_HIGH = EVENT_PRIORITY_HIGH;\r\nFactoryMaker.updateSingletonFactory(EventBus.__dashjs_factory_name, factory);\r\nexport default factory;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @module FactoryMaker\r\n * @ignore\r\n */\r\nconst FactoryMaker = (function () {\r\n\r\n    let instance;\r\n    let singletonContexts = [];\r\n    const singletonFactories = {};\r\n    const classFactories = {};\r\n\r\n    function extend(name, childInstance, override, context) {\r\n        if (!context[name] && childInstance) {\r\n            context[name] = {\r\n                instance: childInstance,\r\n                override: override\r\n            };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Use this method from your extended object.  this.factory is injected into your object.\r\n     * this.factory.getSingletonInstance(this.context, 'VideoModel')\r\n     * will return the video model for use in the extended object.\r\n     *\r\n     * @param {Object} context - injected into extended object as this.context\r\n     * @param {string} className - string name found in all dash.js objects\r\n     * with name __dashjs_factory_name Will be at the bottom. Will be the same as the object's name.\r\n     * @returns {*} Context aware instance of specified singleton name.\r\n     * @memberof module:FactoryMaker\r\n     * @instance\r\n     */\r\n    function getSingletonInstance(context, className) {\r\n        for (const i in singletonContexts) {\r\n            const obj = singletonContexts[i];\r\n            if (obj.context === context && obj.name === className) {\r\n                return obj.instance;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Use this method to add an singleton instance to the system.  Useful for unit testing to mock objects etc.\r\n     *\r\n     * @param {Object} context\r\n     * @param {string} className\r\n     * @param {Object} instance\r\n     * @memberof module:FactoryMaker\r\n     * @instance\r\n     */\r\n    function setSingletonInstance(context, className, instance) {\r\n        for (const i in singletonContexts) {\r\n            const obj = singletonContexts[i];\r\n            if (obj.context === context && obj.name === className) {\r\n                singletonContexts[i].instance = instance;\r\n                return;\r\n            }\r\n        }\r\n        singletonContexts.push({\r\n            name: className,\r\n            context: context,\r\n            instance: instance\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Use this method to remove all singleton instances associated with a particular context.\r\n     *\r\n     * @param {Object} context\r\n     * @memberof module:FactoryMaker\r\n     * @instance\r\n     */\r\n    function deleteSingletonInstances(context) {\r\n        singletonContexts = singletonContexts.filter(x => x.context !== context);\r\n    }\r\n\r\n    /*------------------------------------------------------------------------------------------*/\r\n\r\n    // Factories storage Management\r\n\r\n    /*------------------------------------------------------------------------------------------*/\r\n\r\n    function getFactoryByName(name, factoriesArray) {\r\n        return factoriesArray[name];\r\n    }\r\n\r\n    function updateFactory(name, factory, factoriesArray) {\r\n        if (name in factoriesArray) {\r\n            factoriesArray[name] = factory;\r\n        }\r\n    }\r\n\r\n    /*------------------------------------------------------------------------------------------*/\r\n\r\n    // Class Factories Management\r\n\r\n    /*------------------------------------------------------------------------------------------*/\r\n\r\n    function updateClassFactory(name, factory) {\r\n        updateFactory(name, factory, classFactories);\r\n    }\r\n\r\n    function getClassFactoryByName(name) {\r\n        return getFactoryByName(name, classFactories);\r\n    }\r\n\r\n    function getClassFactory(classConstructor) {\r\n        let factory = getFactoryByName(classConstructor.__dashjs_factory_name, classFactories);\r\n\r\n        if (!factory) {\r\n            factory = function (context) {\r\n                if (context === undefined) {\r\n                    context = {};\r\n                }\r\n                return {\r\n                    create: function () {\r\n                        return merge(classConstructor, context, arguments);\r\n                    }\r\n                };\r\n            };\r\n\r\n            classFactories[classConstructor.__dashjs_factory_name] = factory; // store factory\r\n        }\r\n        return factory;\r\n    }\r\n\r\n    /*------------------------------------------------------------------------------------------*/\r\n\r\n    // Singleton Factory MAangement\r\n\r\n    /*------------------------------------------------------------------------------------------*/\r\n\r\n    function updateSingletonFactory(name, factory) {\r\n        updateFactory(name, factory, singletonFactories);\r\n    }\r\n\r\n    function getSingletonFactoryByName(name) {\r\n        return getFactoryByName(name, singletonFactories);\r\n    }\r\n\r\n    function getSingletonFactory(classConstructor) {\r\n        let factory = getFactoryByName(classConstructor.__dashjs_factory_name, singletonFactories);\r\n        if (!factory) {\r\n            factory = function (context) {\r\n                let instance;\r\n                if (context === undefined) {\r\n                    context = {};\r\n                }\r\n                return {\r\n                    getInstance: function () {\r\n                        // If we don't have an instance yet check for one on the context\r\n                        if (!instance) {\r\n                            instance = getSingletonInstance(context, classConstructor.__dashjs_factory_name);\r\n                        }\r\n                        // If there's no instance on the context then create one\r\n                        if (!instance) {\r\n                            instance = merge(classConstructor, context, arguments);\r\n                            singletonContexts.push({\r\n                                name: classConstructor.__dashjs_factory_name,\r\n                                context: context,\r\n                                instance: instance\r\n                            });\r\n                        }\r\n                        return instance;\r\n                    }\r\n                };\r\n            };\r\n            singletonFactories[classConstructor.__dashjs_factory_name] = factory; // store factory\r\n        }\r\n\r\n        return factory;\r\n    }\r\n\r\n    function merge(classConstructor, context, args) {\r\n\r\n        let classInstance;\r\n        const className = classConstructor.__dashjs_factory_name;\r\n        const extensionObject = context[className];\r\n\r\n        if (extensionObject) {\r\n\r\n            let extension = extensionObject.instance;\r\n\r\n            if (extensionObject.override) { //Override public methods in parent but keep parent.\r\n\r\n                classInstance = classConstructor.apply({context}, args);\r\n                extension = extension.apply({\r\n                    context,\r\n                    factory: instance,\r\n                    parent: classInstance\r\n                }, args);\r\n\r\n                for (const prop in extension) {\r\n                    if (classInstance.hasOwnProperty(prop)) {\r\n                        classInstance[prop] = extension[prop];\r\n                    }\r\n                }\r\n\r\n            } else { //replace parent object completely with new object. Same as dijon.\r\n\r\n                return extension.apply({\r\n                    context,\r\n                    factory: instance\r\n                }, args);\r\n\r\n            }\r\n        } else {\r\n            // Create new instance of the class\r\n            classInstance = classConstructor.apply({context}, args);\r\n        }\r\n\r\n        // Add getClassName function to class instance prototype (used by Debug)\r\n        classInstance.getClassName = function () {return className;};\r\n\r\n        return classInstance;\r\n    }\r\n\r\n    instance = {\r\n        extend: extend,\r\n        getSingletonInstance: getSingletonInstance,\r\n        setSingletonInstance: setSingletonInstance,\r\n        deleteSingletonInstances: deleteSingletonInstances,\r\n        getSingletonFactory: getSingletonFactory,\r\n        getSingletonFactoryByName: getSingletonFactoryByName,\r\n        updateSingletonFactory: updateSingletonFactory,\r\n        getClassFactory: getClassFactory,\r\n        getClassFactoryByName: getClassFactoryByName,\r\n        updateClassFactory: updateClassFactory\r\n    };\r\n\r\n    return instance;\r\n\r\n}());\r\n\r\nexport default FactoryMaker;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport FactoryMaker from './FactoryMaker';\r\nimport Utils from './Utils.js';\r\nimport Debug from '../core/Debug';\r\nimport Constants from '../streaming/constants/Constants';\r\nimport {HTTPRequest} from '../streaming/vo/metrics/HTTPRequest';\r\n\r\n/** @module Settings\r\n * @description Define the configuration parameters of Dash.js MediaPlayer.\r\n * @see {@link module:Settings~PlayerSettings PlayerSettings} for further information about the supported configuration properties\r\n */\r\n\r\n\r\n/**\r\n * @typedef {Object} PlayerSettings\r\n * @property {module:Settings~DebugSettings} [debug] Debug related settings\r\n * @property {module:Settings~StreamingSettings} [streaming] Streaming related settings\r\n * @example\r\n *\r\n * // Full settings object\r\n * settings = {\r\n *      debug: {\r\n *          logLevel: Debug.LOG_LEVEL_WARNING,\r\n *          dispatchEvent: false\r\n *      },\r\n *      streaming: {\r\n *          metricsMaxListDepth: 1000,\r\n *          abandonLoadTimeout: 10000,\r\n *          liveDelayFragmentCount: NaN,\r\n *          liveDelay: null,\r\n *          scheduleWhilePaused: true,\r\n *          fastSwitchEnabled: false,\r\n *          flushBufferAtTrackSwitch: false,\r\n *          calcSegmentAvailabilityRangeFromTimeline: false,\r\n *          reuseExistingSourceBuffers: true,\r\n *          bufferPruningInterval: 10,\r\n *          bufferToKeep: 20,\r\n *          jumpGaps: true,\r\n *          jumpLargeGaps: true,\r\n *          smallGapLimit: 1.5,\r\n *          stableBufferTime: 12,\r\n *          bufferTimeAtTopQuality: 30,\r\n *          bufferTimeAtTopQualityLongForm: 60,\r\n *          longFormContentDurationThreshold: 600,\r\n *          wallclockTimeUpdateInterval: 50,\r\n *          lowLatencyEnabled: false,\r\n *          keepProtectionMediaKeys: false,\r\n *          useManifestDateHeaderTimeSource: true,\r\n *          useSuggestedPresentationDelay: true,\r\n *          useAppendWindow: true,\r\n *          manifestUpdateRetryInterval: 100,\r\n *          liveCatchup: {\r\n *              minDrift: 0.02,\r\n *              maxDrift: 0,\r\n *              playbackRate: 0.5,\r\n *              latencyThreshold: NaN,\r\n *              playbackBufferMin: NaN,\r\n *              enabled: false,\r\n *              mode: Constants.LIVE_CATCHUP_MODE_DEFAULT\r\n *           },\r\n *          lastBitrateCachingInfo: { enabled: true, ttl: 360000 },\r\n *          lastMediaSettingsCachingInfo: { enabled: true, ttl: 360000 },\r\n *          cacheLoadThresholds: { video: 50, audio: 5 },\r\n *          fragmentRequestTimeout: 0,\r\n *          retryIntervals: {\r\n *              MPD: 500,\r\n *              XLinkExpansion: 500,\r\n *              InitializationSegment: 1000,\r\n *              IndexSegment: 1000,\r\n *              MediaSegment: 1000,\r\n *              BitstreamSwitchingSegment: 1000,\r\n *              other: 1000,\r\n *              lowLatencyReductionFactor: 10\r\n *          },\r\n *          retryAttempts: {\r\n *              MPD: 3,\r\n *              XLinkExpansion: 1,\r\n *              InitializationSegment: 3,\r\n *              IndexSegment: 3,\r\n *              MediaSegment: 3,\r\n *              BitstreamSwitchingSegment: 3,\r\n *              other: 3,\r\n *              lowLatencyMultiplyFactor: 5\r\n *          },\r\n *          abr: {\r\n *              movingAverageMethod: Constants.MOVING_AVERAGE_SLIDING_WINDOW,\r\n *              ABRStrategy: Constants.ABR_STRATEGY_DYNAMIC,\r\n *              bandwidthSafetyFactor: 0.9,\r\n *              useDefaultABRRules: true,\r\n *              useBufferOccupancyABR: false,\r\n *              useDeadTimeLatency: true,\r\n *              limitBitrateByPortal: false,\r\n *              usePixelRatioInLimitBitrateByPortal: false,\r\n *              maxBitrate: { audio: -1, video: -1 },\r\n *              minBitrate: { audio: -1, video: -1 },\r\n *              maxRepresentationRatio: { audio: 1, video: 1 },\r\n *              initialBitrate: { audio: -1, video: -1 },\r\n *              initialRepresentationRatio: { audio: -1, video: -1 },\r\n *              autoSwitchBitrate: { audio: true, video: true },\r\n *              fetchThroughputCalculationMode: Constants.ABR_FETCH_THROUGHPUT_CALCULATION_DOWNLOADED_DATA\r\n *          },\r\n *          cmcd: {\r\n *              enabled: false,\r\n *              sid: null,\r\n *              cid: null,\r\n *              did: null\r\n *          }\r\n *      }\r\n * }\r\n */\r\n\r\n\r\n/**\r\n * @typedef {Object} DebugSettings\r\n * @property {number} [logLevel=dashjs.Debug.LOG_LEVEL_WARNING]\r\n * Sets up the log level. The levels are cumulative. For example, if you set the log level\r\n * to dashjs.Debug.LOG_LEVEL_WARNING all warnings, errors and fatals will be logged. Possible values.\r\n *\r\n * <ul>\r\n * <li>dashjs.Debug.LOG_LEVEL_NONE<br/>\r\n * No message is written in the browser console.\r\n *\r\n * <li>dashjs.Debug.LOG_LEVEL_FATAL<br/>\r\n * Log fatal errors. An error is considered fatal when it causes playback to fail completely.\r\n *\r\n * <li>dashjs.Debug.LOG_LEVEL_ERROR<br/>\r\n * Log error messages.\r\n *\r\n * <li>dashjs.Debug.LOG_LEVEL_WARNING<br/>\r\n * Log warning messages.\r\n *\r\n * <li>dashjs.Debug.LOG_LEVEL_INFO<br/>\r\n * Log info messages.\r\n *\r\n * <li>dashjs.Debug.LOG_LEVEL_DEBUG<br/>\r\n * Log debug messages.\r\n * </ul>\r\n * @property {boolean} [dispatchEvent=false]\r\n * Enable to trigger a Events.LOG event whenever log output is generated. Note this will be dispatched regardless of log level\r\n */\r\n\r\n/**\r\n * @typedef {Object} AbrSettings\r\n * @property {string} [movingAverageMethod=\"slidingWindow\"]\r\n * Sets the moving average method used for smoothing throughput estimates. Valid methods are\r\n * \"slidingWindow\" and \"ewma\". The call has no effect if an invalid method is passed.\r\n *\r\n * The sliding window moving average method computes the average throughput using the last four segments downloaded.\r\n * If the stream is live (as opposed to VOD), then only the last three segments are used.\r\n * If wide variations in throughput are detected, the number of segments can be dynamically increased to avoid oscillations.\r\n *\r\n * The exponentially weighted moving average (EWMA) method computes the average using exponential smoothing.\r\n * Two separate estimates are maintained, a fast one with a three-second half life and a slow one with an eight-second half life.\r\n * The throughput estimate at any time is the minimum of the fast and slow estimates.\r\n * This allows a fast reaction to a bandwidth drop and prevents oscillations on bandwidth spikes.\r\n * @property {string} [ABRStrategy=\"abrDynamic\"] Returns the current ABR strategy being used: \"abrDynamic\", \"abrBola\" or \"abrThroughput\".\r\n * @property {number} [bandwidthSafetyFactor=0.9]\r\n * Standard ABR throughput rules multiply the throughput by this value. It should be between 0 and 1,\r\n * with lower values giving less rebuffering (but also lower quality).\r\n * @property {boolean} [useDefaultABRRules=true] Should the default ABR rules be used, or the custom ones added.\r\n * @property {boolean} [useDeadTimeLatency=true]\r\n * If true, only the download portion will be considered part of the download bitrate\r\n * and latency will be regarded as static. If false, the reciprocal of the whole\r\n * transfer time will be used.\r\n * @property {boolean} [limitBitrateByPortal=false] If true, the size of the video portal will limit the max chosen video resolution.\r\n * @property {boolean} [usePixelRatioInLimitBitrateByPortal=false]\r\n * Sets whether to take into account the device's pixel ratio when defining the portal dimensions.\r\n * Useful on, for example, retina displays.\r\n * @property {module:Settings~AudioVideoSettings} [maxBitrate={audio: -1, video: -1}] The maximum bitrate that the ABR algorithms will choose. Use NaN for no limit.\r\n * @property {module:Settings~AudioVideoSettings} [minBitrate={audio: -1, video: -1}] The minimum bitrate that the ABR algorithms will choose. Use NaN for no limit.\r\n * @property {module:Settings~AudioVideoSettings} [maxRepresentationRatio={audio: 1, video: 1}]\r\n * When switching multi-bitrate content (auto or manual mode) this property specifies the maximum representation allowed,\r\n * as a proportion of the size of the representation set.\r\n *\r\n * You can set or remove this cap at anytime before or during playback. To clear this setting you set the value to 1.\r\n *\r\n * If both this and maxAllowedBitrate are defined, maxAllowedBitrate is evaluated first, then maxAllowedRepresentation,\r\n * i.e. the lowest value from executing these rules is used.\r\n *\r\n * This feature is typically used to reserve higher representations for playback only when connected over a fast connection.\r\n * @property {module:Settings~AudioVideoSettings} [initialBitrate={audio: -1, video: -1}] Explicitly set the starting bitrate for audio or video\r\n * @property {module:Settings~AudioVideoSettings} [initialRepresentationRatio={audio: -1, video: -1}] Explicitly set the initial representation ratio. If initalBitrate is specified, this is ignored.\r\n * @property {module:Settings~AudioVideoSettings} [autoSwitchBitrate={audio: true, video: true}] Indicates whether the player should enable ABR algorithms to switch the bitrate.\r\n *\r\n * @property {boolean} [fetchThroughputCalculationMode=Constants.ABR_FETCH_THROUGHPUT_CALCULATION_DOWNLOADED_DATA]\r\n * Algorithm to determine the throughput in case the Fetch API is used for low latency streaming. For details please check the samples section and FetchLoader.js\r\n */\r\n\r\n/**\r\n * @typedef {Object} StreamingSettings\r\n * @property {number} [metricsMaxListDepth=1000] Maximum list depth of metrics.\r\n * @property {number} [abandonLoadTimeout=10000]\r\n * A timeout value in seconds, which during the ABRController will block switch-up events.\r\n * This will only take effect after an abandoned fragment event occurs.\r\n * @property {number} [liveDelayFragmentCount=NaN]\r\n * Changing this value will lower or increase live stream latency.  The detected segment duration will be multiplied by this value\r\n * to define a time in seconds to delay a live stream from the live edge. Lowering this value will lower latency but may decrease\r\n * the player's ability to build a stable buffer.\r\n * @property {number} [liveDelay]\r\n * <p>Equivalent in seconds of setLiveDelayFragmentCount</p>\r\n * <p>Lowering this value will lower latency but may decrease the player's ability to build a stable buffer.</p>\r\n * <p>This value should be less than the manifest duration by a couple of segment durations to avoid playback issues</p>\r\n * <p>If set, this parameter will take precedence over setLiveDelayFragmentCount and manifest info</p>\r\n * @property {boolean} [scheduleWhilePaused=true]\r\n * Set to true if you would like dash.js to keep downloading fragments in the background\r\n * when the video element is paused.\r\n * @property {boolean} [fastSwitchEnabled=false]\r\n * When enabled, after an ABR up-switch in quality, instead of requesting and appending the next fragment\r\n * at the end of the current buffer range it is requested and appended closer to the current time\r\n * When enabled, The maximum time to render a higher quality is current time + (1.5 * fragment duration).\r\n *\r\n * Note, When ABR down-switch is detected, we appended the lower quality at the end of the buffer range to preserve the\r\n * higher quality media for as long as possible.\r\n *\r\n * If enabled, it should be noted there are a few cases when the client will not replace inside buffer range but rather\r\n * just append at the end.  1. When the buffer level is less than one fragment duration 2.  The client\r\n * is in an Abandonment State due to recent fragment abandonment event.\r\n *\r\n * Known issues:\r\n * 1. In IE11 with auto switching off, if a user switches to a quality they can not download in time the\r\n * fragment may be appended in the same range as the playhead or even in the past, in IE11 it may cause a stutter\r\n * or stall in playback.\r\n * @property {boolean} [flushBufferAtTrackSwitch=false]\r\n * When enabled, after a track switch and in case buffer is being replaced (see MEdiaPlayer.setTrackSwitchModeFor(Constants.TRACK_SWITCH_MODE_ALWAYS_REPLACE)),\r\n * the video element is flushed (seek at current playback time) once a segment of the new track is appended in buffer in order to force video decoder to play new track.\r\n * This can be required on some devices like GoogleCast devices to make track switching functional. Otherwise track switching will be effective only once after previous\r\n * buffered track is fully consumed.\r\n * @property {boolean} [calcSegmentAvailabilityRangeFromTimeline=false] Enable calculation of the DVR window for SegmentTimeline manifests based on the entries in <SegmentTimeline>\r\n * @property {boolean} [reuseExistingSourceBuffers=true] Enable reuse of existing MediaSource Sourcebuffers during period transition\r\n * @property {number} [bufferPruningInterval=10] The interval of pruning buffer in sconds.\r\n * @property {number} [bufferToKeep=20]\r\n * This value influences the buffer pruning logic.\r\n * Allows you to modify the buffer that is kept in source buffer in seconds.\r\n *  0|-----------bufferToPrune-----------|-----bufferToKeep-----|currentTime|\r\n * @property {boolean} [jumpGaps=true] Sets whether player should jump small gaps (discontinuities) in the buffer.\r\n * @property {boolean} [jumpLargeGaps=true] Sets whether player should jump large gaps (discontinuities) in the buffer.\r\n * @property {number} [smallGapLimit=1.8] Time in seconds for a gap to be considered small.\r\n * @property {number} [stableBufferTime=12]\r\n * The time that the internal buffer target will be set to post startup/seeks (NOT top quality).\r\n *\r\n * When the time is set higher than the default you will have to wait longer\r\n * to see automatic bitrate switches but will have a larger buffer which\r\n * will increase stability.\r\n * @property {number} [bufferTimeAtTopQuality=30]\r\n * The time that the internal buffer target will be set to once playing the top quality.\r\n * If there are multiple bitrates in your adaptation, and the media is playing at the highest\r\n * bitrate, then we try to build a larger buffer at the top quality to increase stability\r\n * and to maintain media quality.\r\n * @property {number} [bufferTimeAtTopQualityLongForm=60] The time that the internal buffer target will be set to once playing the top quality for long form content.\r\n * @property {number} [longFormContentDurationThreshold=600]\r\n * The threshold which defines if the media is considered long form content.\r\n * This will directly affect the buffer targets when playing back at the top quality.\r\n * @property {number} [wallclockTimeUpdateInterval=50] How frequently the wallclockTimeUpdated internal event is triggered (in milliseconds).\r\n * @property {boolean} [lowLatencyEnabled=false] Enable or disable low latency mode\r\n * @property {boolean} [keepProtectionMediaKeys=false]\r\n * Set the value for the ProtectionController and MediaKeys life cycle. If true, the\r\n * ProtectionController and then created MediaKeys and MediaKeySessions will be preserved during\r\n * the MediaPlayer lifetime.\r\n * @property {boolean} [useManifestDateHeaderTimeSource=true]\r\n * <p>Allows you to enable the use of the Date Header, if exposed with CORS, as a timing source for live edge detection. The\r\n * use of the date header will happen only after the other timing source that take precedence fail or are omitted as described.\r\n * @property {boolean} [useSuggestedPresentationDelay=true]\r\n * <p>Set to true if you would like to override the default live delay and honor the SuggestedPresentationDelay attribute in by the manifest.</p>\r\n * @property {boolean} [useAppendWindow=true]\r\n * Specifies if the appendWindow attributes of the MSE SourceBuffers should be set according to content duration from manifest.\r\n * @property {number} [manifestUpdateRetryInterval=100]\r\n * For live streams, set the interval-frequency in milliseconds at which\r\n * dash.js will check if the current manifest is still processed before\r\n * downloading the next manifest once the minimumUpdatePeriod time has\r\n * @property {number} [stallThreshold=0.5]\r\n * Stall threshold used in BufferController.js to determine whether a track should still be changed and which buffer range to prune.\r\n * @property {module:Settings~CachingInfoSettings} [lastBitrateCachingInfo={enabled: true, ttl: 360000}]\r\n * Set to false if you would like to disable the last known bit rate from being stored during playback and used\r\n * to set the initial bit rate for subsequent playback within the expiration window.\r\n *\r\n * The default expiration is one hour, defined in milliseconds. If expired, the default initial bit rate (closest to 1000 kbps) will be used\r\n * for that session and a new bit rate will be stored during that session.\r\n * @property {module:Settings~CachingInfoSettings} [lastMediaSettingsCachingInfo={enabled: true, ttl: 360000}]\r\n * Set to false if you would like to disable the last known lang for audio (or camera angle for video) from being stored during playback and used\r\n * to set the initial settings for subsequent playback within the expiration window.\r\n *\r\n * The default expiration is one hour, defined in milliseconds. If expired, the default settings will be used\r\n * for that session and a new settings will be stored during that session.\r\n * @property {module:Settings~AudioVideoSettings} [cacheLoadThresholds={video: 50, audio: 5}]\r\n * For a given media type, the threshold which defines if the response to a fragment\r\n * request is coming from browser cache or not.\r\n * @property {module:Settings~RequestTypeSettings} [fragmentRequestTimeout] Time in milliseconds before timing out on loading a media fragment. Fragments that timeout are retried as if they failed.\r\n * @property {module:Settings~RequestTypeSettings} [retryIntervals] Time in milliseconds of which to reload a failed file load attempt. For low latency mode these values are divided by lowLatencyReductionFactor.\r\n * @property {module:Settings~RequestTypeSettings} [retryAttempts] Total number of retry attempts that will occur on a file load before it fails. For low latency mode these values are multiplied by lowLatencyMultiplyFactor.\r\n * @property {module:Settings~AbrSettings} abr Adaptive Bitrate algorithm related settings.\r\n * @property {module:Settings~CmcdSettings} cmcd  Settings related to Common Media Client Data reporting.\r\n * @property {module:Settings~LiveCatchupSettings} liveCatchup  Settings related to live catchup.\r\n */\r\n\r\n/**\r\n * @typedef {Object} CachingInfoSettings\r\n * @property {boolean} [enable] Enable or disable the caching feature.\r\n * @property {number} [ttl] Time to live. A value defined in milliseconds representing how log to cache the settings for.\r\n */\r\n\r\n/**\r\n * @typedef {Object} module:Settings~AudioVideoSettings\r\n * @property {number|boolean} [audio] Configuration for audio media type of tracks.\r\n * @property {number|boolean} [video] Configuration for video media type of tracks.\r\n */\r\n\r\n/**\r\n * @typedef {Object} RequestTypeSettings\r\n * @property {number} [MPD] Manifest type of requests\r\n * @property {number} [XLinkExpansion] XLink expansion type of requests\r\n * @property {number} [InitializationSegment] Request to retrieve an initialization segment\r\n * @property {number} [IndexSegment] Request to retrieve an index segment (SegmentBase)\r\n * @property {number} [MediaSegment] Request to retrieve a media segment (video/audio/image/text chunk)\r\n * @property {number} [BitstreamSwitchingSegment] Bitrate stream switching type of request\r\n * @property {number} [other] Other type of request\r\n *\r\n */\r\n\r\n/**\r\n * @typedef {Object} module:Settings~CmcdSettings\r\n * @property {boolean} [enable=false] Enable or disable the CMCD reporting.\r\n * @property {string} [sid] GUID identifying the current playback session. Should be in UUID format. If not specified a UUID will be automatically generated.\r\n * @property {string} [cid] A unique string to identify the current content. If not specified it will be a hash of the MPD url.\r\n * @property {string} [did=dash.js-cmcd-default-id] A unique string identifying the current device.\r\n */\r\n\r\n/**\r\n * @typedef {Object} module:Settings~LiveCatchupSettings\r\n @property {number} [minDrift=0.02]\r\n * Use this method to set the minimum latency deviation allowed before activating catch-up mechanism. In low latency mode,\r\n * when the difference between the measured latency and the target one,\r\n * as an absolute number, is higher than the one sets with this method, then dash.js increases/decreases\r\n * playback rate until target latency is reached.\r\n *\r\n * LowLatencyMinDrift should be provided in seconds, and it uses values between 0.0 and 0.5.\r\n *\r\n * Note: Catch-up mechanism is only applied when playing low latency live streams.\r\n * @property {number} [maxDrift=0]\r\n * Use this method to set the maximum latency deviation allowed before dash.js to do a seeking to live position. In low latency mode,\r\n * when the difference between the measured latency and the target one,\r\n * as an absolute number, is higher than the one sets with this method, then dash.js does a seek to live edge position minus\r\n * the target live delay.\r\n *\r\n * LowLatencyMaxDriftBeforeSeeking should be provided in seconds. If 0, then seeking operations won't be used for\r\n * fixing latency deviations.\r\n *\r\n * Note: Catch-up mechanism is only applied when playing low latency live streams.\r\n * @property {number} [playbackRate=0.5]\r\n * Use this parameter to set the maximum catch up rate, as a percentage, for low latency live streams. In low latency mode,\r\n * when measured latency is higher/lower than the target one,\r\n * dash.js increases/decreases playback rate respectively up to (+/-) the percentage defined with this method until target is reached.\r\n *\r\n * Valid values for catch up rate are in range 0-0.5 (0-50%). Set it to 0 to turn off live catch up feature.\r\n *\r\n * Note: Catch-up mechanism is only applied when playing low latency live streams.\r\n * @property {number} [latencyThreshold=NaN]\r\n * Use this parameter to set the maximum threshold for which live catch up is applied. For instance, if this value is set to 8 seconds,\r\n * then live catchup is only applied if the current live latency is equal or below 8 seconds. The reason behind this parameter is to avoid an increase\r\n * of the playback rate if the user seeks within the DVR window.\r\n *\r\n * If no value is specified this will be twice the maximum live delay. The maximum live delay is either specified in the manifest as part of a ServiceDescriptor or calculated the following:\r\n * maximumLiveDelay = targetDelay + liveCatchupMinDrift\r\n *\r\n * @property {number} [playbackBufferMin=NaN]\r\n * Use this parameter to specify the minimum buffer which is used for LoL+ based playback rate reduction\r\n *\r\n *\r\n * @property {boolean} [enabled=false]\r\n * Use this parameter to enable the catchup mode for non low-latency streams\r\n *\r\n * @property {String} [mode=Constants.LIVE_CATCHUP_MODE_DEFAULT]\r\n * Use this parameter to switch between different catchup modes. Options: \"liveCatchupModeDefault\" or \"liveCatchupModeLOLP\"\r\n *\r\n * Note: Catch-up mechanism is automatically applied when playing low latency live streams.\r\n */\r\n\r\n\r\n/**\r\n * @class\r\n * @ignore\r\n */\r\nfunction Settings() {\r\n    let instance;\r\n\r\n    /**\r\n     * @const {PlayerSettings} defaultSettings\r\n     * @ignore\r\n     */\r\n    const defaultSettings = {\r\n        debug: {\r\n            logLevel: Debug.LOG_LEVEL_WARNING,\r\n            dispatchEvent: false\r\n        },\r\n        streaming: {\r\n            metricsMaxListDepth: 1000,\r\n            abandonLoadTimeout: 10000,\r\n            liveDelayFragmentCount: NaN,\r\n            liveDelay: null,\r\n            scheduleWhilePaused: true,\r\n            fastSwitchEnabled: false,\r\n            flushBufferAtTrackSwitch: false,\r\n            calcSegmentAvailabilityRangeFromTimeline: false,\r\n            reuseExistingSourceBuffers: true,\r\n            bufferPruningInterval: 10,\r\n            bufferToKeep: 20,\r\n            jumpGaps: true,\r\n            jumpLargeGaps: true,\r\n            smallGapLimit: 1.5,\r\n            stableBufferTime: 12,\r\n            bufferTimeAtTopQuality: 30,\r\n            bufferTimeAtTopQualityLongForm: 60,\r\n            longFormContentDurationThreshold: 600,\r\n            wallclockTimeUpdateInterval: 50,\r\n            lowLatencyEnabled: false,\r\n            keepProtectionMediaKeys: false,\r\n            useManifestDateHeaderTimeSource: true,\r\n            useSuggestedPresentationDelay: true,\r\n            useAppendWindow: true,\r\n            manifestUpdateRetryInterval: 100,\r\n            stallThreshold: 0.5,\r\n            liveCatchup: {\r\n                minDrift: 0.02,\r\n                maxDrift: 0,\r\n                playbackRate: 0.5,\r\n                latencyThreshold: 60,\r\n                playbackBufferMin: 0.5,\r\n                enabled: false,\r\n                mode: Constants.LIVE_CATCHUP_MODE_DEFAULT\r\n            },\r\n            lastBitrateCachingInfo: { enabled: true, ttl: 360000 },\r\n            lastMediaSettingsCachingInfo: { enabled: true, ttl: 360000 },\r\n            cacheLoadThresholds: { video: 50, audio: 5 },\r\n            trackSwitchMode: {\r\n                audio: Constants.TRACK_SWITCH_MODE_ALWAYS_REPLACE,\r\n                video: Constants.TRACK_SWITCH_MODE_NEVER_REPLACE\r\n            },\r\n            selectionModeForInitialTrack: Constants.TRACK_SELECTION_MODE_HIGHEST_BITRATE,\r\n            fragmentRequestTimeout: 0,\r\n            retryIntervals: {\r\n                [HTTPRequest.MPD_TYPE]: 500,\r\n                [HTTPRequest.XLINK_EXPANSION_TYPE]: 500,\r\n                [HTTPRequest.MEDIA_SEGMENT_TYPE]: 1000,\r\n                [HTTPRequest.INIT_SEGMENT_TYPE]: 1000,\r\n                [HTTPRequest.BITSTREAM_SWITCHING_SEGMENT_TYPE]: 1000,\r\n                [HTTPRequest.INDEX_SEGMENT_TYPE]: 1000,\r\n                [HTTPRequest.OTHER_TYPE]: 1000,\r\n                lowLatencyReductionFactor: 10\r\n            },\r\n            retryAttempts: {\r\n                [HTTPRequest.MPD_TYPE]: 3,\r\n                [HTTPRequest.XLINK_EXPANSION_TYPE]: 1,\r\n                [HTTPRequest.MEDIA_SEGMENT_TYPE]: 3,\r\n                [HTTPRequest.INIT_SEGMENT_TYPE]: 3,\r\n                [HTTPRequest.BITSTREAM_SWITCHING_SEGMENT_TYPE]: 3,\r\n                [HTTPRequest.INDEX_SEGMENT_TYPE]: 3,\r\n                [HTTPRequest.OTHER_TYPE]: 3,\r\n                lowLatencyMultiplyFactor: 5\r\n            },\r\n            abr: {\r\n                movingAverageMethod: Constants.MOVING_AVERAGE_SLIDING_WINDOW,\r\n                ABRStrategy: Constants.ABR_STRATEGY_DYNAMIC,\r\n                bandwidthSafetyFactor: 0.9,\r\n                useDefaultABRRules: true,\r\n                useDeadTimeLatency: true,\r\n                limitBitrateByPortal: false,\r\n                usePixelRatioInLimitBitrateByPortal: false,\r\n                maxBitrate: { audio: -1, video: -1 },\r\n                minBitrate: { audio: -1, video: -1 },\r\n                maxRepresentationRatio: { audio: 1, video: 1 },\r\n                initialBitrate: { audio: -1, video: -1 },\r\n                initialRepresentationRatio: { audio: -1, video: -1 },\r\n                autoSwitchBitrate: { audio: true, video: true },\r\n                fetchThroughputCalculationMode: Constants.ABR_FETCH_THROUGHPUT_CALCULATION_DOWNLOADED_DATA\r\n            },\r\n            cmcd: {\r\n                enabled: false,\r\n                sid: null,\r\n                cid: null\r\n            }\r\n        }\r\n    };\r\n\r\n    let settings = Utils.clone(defaultSettings);\r\n\r\n    //Merge in the settings. If something exists in the new config that doesn't match the schema of the default config,\r\n    //regard it as an error and log it.\r\n    function mixinSettings(source, dest, path) {\r\n        for (let n in source) {\r\n            if (source.hasOwnProperty(n)) {\r\n                if (dest.hasOwnProperty(n)) {\r\n                    if (typeof source[n] === 'object' && source[n] !== null) {\r\n                        mixinSettings(source[n], dest[n], path.slice() + n + '.');\r\n                    } else {\r\n                        dest[n] = Utils.clone(source[n]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Return the settings object. Don't copy/store this object, you won't get updates.\r\n     * @func\r\n     * @instance\r\n     */\r\n    function get() {\r\n        return settings;\r\n    }\r\n\r\n    /**\r\n     * @func\r\n     * @instance\r\n     * @param {object} settingsObj - This should be a partial object of the Settings.Schema type. That is, fields defined should match the path (e.g.\r\n     * settingsObj.streaming.abr.autoSwitchBitrate.audio -> defaultSettings.streaming.abr.autoSwitchBitrate.audio). Where an element's path does\r\n     * not match it is ignored, and a warning is logged.\r\n     *\r\n     * Use to change the settings object. Any new values defined will overwrite the settings and anything undefined will not change.\r\n     * Implementers of new settings should add it in an approriate namespace to the defaultSettings object and give it a default value (that is not undefined).\r\n     *\r\n     */\r\n    function update(settingsObj) {\r\n        if (typeof settingsObj === 'object') {\r\n            mixinSettings(settingsObj, settings, '');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Resets the settings object. Everything is set to its default value.\r\n     * @func\r\n     * @instance\r\n     *\r\n     */\r\n    function reset() {\r\n        settings = Utils.clone(defaultSettings);\r\n    }\r\n\r\n    instance = {\r\n        get: get,\r\n        update: update,\r\n        reset: reset\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\n\r\nSettings.__dashjs_factory_name = 'Settings';\r\nlet factory = FactoryMaker.getSingletonFactory(Settings);\r\nexport default factory;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n/**\r\n * @class\r\n * @ignore\r\n */\r\n\r\nclass Utils {\r\n    static mixin(dest, source, copy) {\r\n        let s;\r\n        let empty = {};\r\n        if (dest) {\r\n            for (let name in source) {\r\n                if (source.hasOwnProperty(name)) {\r\n                    s = source[name];\r\n                    if (!(name in dest) || (dest[name] !== s && (!(name in empty) || empty[name] !== s))) {\r\n                        if (typeof dest[name] === 'object' && dest[name] !== null) {\r\n                            dest[name] = Utils.mixin(dest[name], s, copy);\r\n                        } else {\r\n                            dest[name] = copy(s);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return dest;\r\n    }\r\n\r\n    static clone(src) {\r\n        if (!src || typeof src !== 'object') {\r\n            return src; // anything\r\n        }\r\n        let r;\r\n        if (src instanceof Array) {\r\n            // array\r\n            r = [];\r\n            for (let i = 0, l = src.length; i < l; ++i) {\r\n                if (i in src) {\r\n                    r.push(Utils.clone(src[i]));\r\n                }\r\n            }\r\n        } else {\r\n            r = {};\r\n        }\r\n        return Utils.mixin(r, src, Utils.clone);\r\n    }\r\n\r\n    static addAditionalQueryParameterToUrl(url, params) {\r\n        try {\r\n            if (!params || params.length === 0) {\r\n                return url;\r\n            }\r\n\r\n            let modifiedUrl = new URL(url);\r\n\r\n            params.forEach((param) => {\r\n                if (param.key && param.value) {\r\n                    modifiedUrl.searchParams.set(param.key, param.value);\r\n                }\r\n            });\r\n\r\n            return modifiedUrl.href;\r\n\r\n\r\n        } catch (e) {\r\n            return url;\r\n        }\r\n    }\r\n\r\n    static generateUuid() {\r\n        let dt = new Date().getTime();\r\n        const uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r\n            const r = (dt + Math.random() * 16) % 16 | 0;\r\n            dt = Math.floor(dt / 16);\r\n            return (c == 'x' ? r : (r & 0x3 | 0x8)).toString(16);\r\n        });\r\n        return uuid;\r\n    }\r\n\r\n    static generateHashCode(string) {\r\n        let hash = 0;\r\n\r\n        if (string.length === 0) {\r\n            return hash;\r\n        }\r\n\r\n        for (let i = 0; i < string.length; i++) {\r\n            const chr = string.charCodeAt(i);\r\n            hash = ((hash << 5) - hash) + chr;\r\n            hash |= 0;\r\n        }\r\n        return hash;\r\n    }\r\n}\r\n\r\nexport default Utils;\r\n","const VERSION = '3.2.0';\r\nexport function getVersionString() {\r\n    return VERSION;\r\n}\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport ErrorsBase from './ErrorsBase';\r\n/**\r\n * Errors declaration\r\n * @class\r\n */\r\nclass Errors extends ErrorsBase {\r\n    constructor () {\r\n        super();\r\n        /**\r\n         * Error code returned when a manifest parsing error occurs\r\n         */\r\n        this.MANIFEST_LOADER_PARSING_FAILURE_ERROR_CODE = 10;\r\n        /**\r\n         * Error code returned when a manifest loading error occurs\r\n         */\r\n        this.MANIFEST_LOADER_LOADING_FAILURE_ERROR_CODE = 11;\r\n        /**\r\n         * Error code returned when a xlink loading error occurs\r\n         */\r\n        this.XLINK_LOADER_LOADING_FAILURE_ERROR_CODE = 12;\r\n        /**\r\n         * Error code returned when the update of segments list has failed\r\n         */\r\n        this.SEGMENTS_UPDATE_FAILED_ERROR_CODE = 13;\r\n        this.SEGMENTS_UNAVAILABLE_ERROR_CODE = 14;\r\n        this.SEGMENT_BASE_LOADER_ERROR_CODE = 15;\r\n        this.TIME_SYNC_FAILED_ERROR_CODE = 16;\r\n        this.FRAGMENT_LOADER_LOADING_FAILURE_ERROR_CODE = 17;\r\n        this.FRAGMENT_LOADER_NULL_REQUEST_ERROR_CODE = 18;\r\n        this.URL_RESOLUTION_FAILED_GENERIC_ERROR_CODE = 19;\r\n        this.APPEND_ERROR_CODE = 20;\r\n        this.REMOVE_ERROR_CODE = 21;\r\n        this.DATA_UPDATE_FAILED_ERROR_CODE = 22;\r\n        /**\r\n         * Error code returned when MediaSource is not supported by the browser\r\n         */\r\n        this.CAPABILITY_MEDIASOURCE_ERROR_CODE = 23;\r\n        /**\r\n         * Error code returned when Protected contents are not supported\r\n         */\r\n        this.CAPABILITY_MEDIAKEYS_ERROR_CODE   = 24;\r\n\r\n        this.DOWNLOAD_ERROR_ID_MANIFEST_CODE   = 25;\r\n\r\n        this.DOWNLOAD_ERROR_ID_SIDX_CODE            = 26;\r\n        this.DOWNLOAD_ERROR_ID_CONTENT_CODE         = 27;\r\n\r\n        this.DOWNLOAD_ERROR_ID_INITIALIZATION_CODE  = 28;\r\n\r\n        this.DOWNLOAD_ERROR_ID_XLINK_CODE           = 29;\r\n\r\n        this.MANIFEST_ERROR_ID_CODEC_CODE           = 30;\r\n        this.MANIFEST_ERROR_ID_PARSE_CODE           = 31;\r\n\r\n        /**\r\n         * Error code returned when no stream (period) has been detected in the manifest\r\n         */\r\n        this.MANIFEST_ERROR_ID_NOSTREAMS_CODE       = 32;\r\n        /**\r\n         * Error code returned when something wrong has append during subtitles parsing (TTML or VTT)\r\n         */\r\n        this.TIMED_TEXT_ERROR_ID_PARSE_CODE         = 33;\r\n        /**\r\n         * Error code returned when a 'muxed' media type has been detected in the manifest. This type is not supported\r\n         */\r\n        this.MANIFEST_ERROR_ID_MULTIPLEXED_CODE     = 34;\r\n        /**\r\n         * Error code returned when a media source type is not supported\r\n         */\r\n        this.MEDIASOURCE_TYPE_UNSUPPORTED_CODE = 35;\r\n\r\n        this.MANIFEST_LOADER_PARSING_FAILURE_ERROR_MESSAGE = 'parsing failed for ';\r\n        this.MANIFEST_LOADER_LOADING_FAILURE_ERROR_MESSAGE = 'Failed loading manifest: ';\r\n        this.XLINK_LOADER_LOADING_FAILURE_ERROR_MESSAGE = 'Failed loading Xlink element: ';\r\n        this.SEGMENTS_UPDATE_FAILED_ERROR_MESSAGE = 'Segments update failed';\r\n        this.SEGMENTS_UNAVAILABLE_ERROR_MESSAGE = 'no segments are available yet';\r\n        this.SEGMENT_BASE_LOADER_ERROR_MESSAGE = 'error loading segments';\r\n        this.TIME_SYNC_FAILED_ERROR_MESSAGE = 'Failed to synchronize time';\r\n        this.FRAGMENT_LOADER_NULL_REQUEST_ERROR_MESSAGE = 'request is null';\r\n        this.URL_RESOLUTION_FAILED_GENERIC_ERROR_MESSAGE = 'Failed to resolve a valid URL';\r\n        this.APPEND_ERROR_MESSAGE = 'chunk is not defined';\r\n        this.REMOVE_ERROR_MESSAGE = 'buffer is not defined';\r\n        this.DATA_UPDATE_FAILED_ERROR_MESSAGE = 'Data update failed';\r\n\r\n        this.CAPABILITY_MEDIASOURCE_ERROR_MESSAGE = 'mediasource is not supported';\r\n        this.CAPABILITY_MEDIAKEYS_ERROR_MESSAGE = 'mediakeys is not supported';\r\n        this.TIMED_TEXT_ERROR_MESSAGE_PARSE = 'parsing error :';\r\n        this.MEDIASOURCE_TYPE_UNSUPPORTED_MESSAGE = 'Error creating source buffer of type : ';\r\n    }\r\n}\r\n\r\nlet errors = new Errors();\r\nexport default errors;","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @class\r\n * @ignore\r\n */\r\nclass ErrorsBase {\r\n    extend (errors, config) {\r\n        if (!errors) return;\r\n\r\n        let override = config ? config.override : false;\r\n        let publicOnly = config ? config.publicOnly : false;\r\n\r\n\r\n        for (const err in errors) {\r\n            if (!errors.hasOwnProperty(err) || (this[err] && !override)) continue;\r\n            if (publicOnly && errors[err].indexOf('public_') === -1) continue;\r\n            this[err] = errors[err];\r\n\r\n        }\r\n    }\r\n}\r\n\r\nexport default ErrorsBase;","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport EventsBase from './EventsBase';\r\n\r\n/**\r\n * These are internal events that should not be needed at the player level.\r\n * If you find and event in here that you would like access to from MediaPlayer level\r\n * please add an issue at https://github.com/Dash-Industry-Forum/dash.js/issues/new\r\n * @class\r\n * @ignore\r\n */\r\nclass CoreEvents extends EventsBase {\r\n    constructor () {\r\n        super();\r\n        this.BUFFERING_COMPLETED = 'bufferingCompleted';\r\n        this.BUFFER_CLEARED = 'bufferCleared';\r\n        this.BUFFER_LEVEL_UPDATED = 'bufferLevelUpdated';\r\n        this.BYTES_APPENDED = 'bytesAppended';\r\n        this.BYTES_APPENDED_END_FRAGMENT = 'bytesAppendedEndFragment';\r\n        this.CHECK_FOR_EXISTENCE_COMPLETED = 'checkForExistenceCompleted';\r\n        this.CURRENT_TRACK_CHANGED = 'currentTrackChanged';\r\n        this.DATA_UPDATE_COMPLETED = 'dataUpdateCompleted';\r\n        this.DATA_UPDATE_STARTED = 'dataUpdateStarted';\r\n        this.INBAND_EVENTS = 'inbandEvents';\r\n        this.INITIALIZATION_LOADED = 'initializationLoaded';\r\n        this.INIT_FRAGMENT_LOADED = 'initFragmentLoaded';\r\n        this.INIT_FRAGMENT_NEEDED = 'initFragmentNeeded';\r\n        this.INTERNAL_MANIFEST_LOADED = 'internalManifestLoaded';\r\n        this.ORIGINAL_MANIFEST_LOADED = 'originalManifestLoaded';\r\n        this.LIVE_EDGE_SEARCH_COMPLETED = 'liveEdgeSearchCompleted';\r\n        this.LOADING_COMPLETED = 'loadingCompleted';\r\n        this.LOADING_PROGRESS = 'loadingProgress';\r\n        this.LOADING_DATA_PROGRESS = 'loadingDataProgress';\r\n        this.LOADING_ABANDONED = 'loadingAborted';\r\n        this.MANIFEST_UPDATED = 'manifestUpdated';\r\n        this.MEDIA_FRAGMENT_LOADED = 'mediaFragmentLoaded';\r\n        this.MEDIA_FRAGMENT_NEEDED = 'mediaFragmentNeeded';\r\n        this.QUOTA_EXCEEDED = 'quotaExceeded';\r\n        this.REPRESENTATION_UPDATE_STARTED = 'representationUpdateStarted';\r\n        this.REPRESENTATION_UPDATE_COMPLETED = 'representationUpdateCompleted';\r\n        this.SEGMENTS_LOADED = 'segmentsLoaded';\r\n        this.SERVICE_LOCATION_BLACKLIST_ADD = 'serviceLocationBlacklistAdd';\r\n        this.SERVICE_LOCATION_BLACKLIST_CHANGED = 'serviceLocationBlacklistChanged';\r\n        this.SOURCEBUFFER_REMOVE_COMPLETED = 'sourceBufferRemoveCompleted';\r\n        this.STREAMS_COMPOSED = 'streamsComposed';\r\n        this.STREAM_BUFFERING_COMPLETED = 'streamBufferingCompleted';\r\n        this.STREAM_COMPLETED = 'streamCompleted';\r\n        this.TEXT_TRACKS_QUEUE_INITIALIZED = 'textTracksQueueInitialized';\r\n        this.TIME_SYNCHRONIZATION_COMPLETED = 'timeSynchronizationComplete';\r\n        this.URL_RESOLUTION_FAILED = 'urlResolutionFailed';\r\n        this.VIDEO_CHUNK_RECEIVED = 'videoChunkReceived';\r\n        this.WALLCLOCK_TIME_UPDATED = 'wallclockTimeUpdated';\r\n        this.XLINK_ELEMENT_LOADED = 'xlinkElementLoaded';\r\n        this.XLINK_READY = 'xlinkReady';\r\n        this.SEGMENTBASE_INIT_REQUEST_NEEDED = 'segmentBaseInitRequestNeeded';\r\n        this.SEGMENTBASE_SEGMENTSLIST_REQUEST_NEEDED = 'segmentBaseSegmentsListRequestNeeded';\r\n        this.SEEK_TARGET = 'seekTarget';\r\n    }\r\n}\r\n\r\nexport default CoreEvents;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @class\r\n * @ignore\r\n */\r\nimport CoreEvents from './CoreEvents';\r\nclass Events extends CoreEvents {\r\n}\r\nlet events = new Events();\r\nexport default events;","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @class\r\n * @ignore\r\n */\r\nclass EventsBase {\r\n    extend (events, config) {\r\n        if (!events) return;\r\n\r\n        let override = config ? config.override : false;\r\n        let publicOnly = config ? config.publicOnly : false;\r\n\r\n\r\n        for (const evt in events) {\r\n            if (!events.hasOwnProperty(evt) || (this[evt] && !override)) continue;\r\n            if (publicOnly && events[evt].indexOf('public_') === -1) continue;\r\n            this[evt] = events[evt];\r\n\r\n        }\r\n    }\r\n}\r\n\r\nexport default EventsBase;","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport DashConstants from './constants/DashConstants';\r\nimport RepresentationInfo from './vo/RepresentationInfo';\r\nimport MediaInfo from './vo/MediaInfo';\r\nimport StreamInfo from './vo/StreamInfo';\r\nimport ManifestInfo from './vo/ManifestInfo';\r\nimport Event from './vo/Event';\r\nimport FactoryMaker from '../core/FactoryMaker';\r\nimport DashManifestModel from './models/DashManifestModel';\r\n\r\n/**\r\n * @module DashAdapter\r\n */\r\n\r\nfunction DashAdapter() {\r\n    let instance,\r\n        dashManifestModel,\r\n        voPeriods,\r\n        voAdaptations,\r\n        currentMediaInfo,\r\n        constants,\r\n        cea608parser;\r\n\r\n    const context = this.context;\r\n\r\n    const PROFILE_DVB = 'urn:dvb:dash:profile:dvb-dash:2014';\r\n\r\n    function setup() {\r\n        dashManifestModel = DashManifestModel(context).getInstance();\r\n        reset();\r\n    }\r\n\r\n    // #region PUBLIC FUNCTIONS\r\n    // --------------------------------------------------\r\n    function getVoAdaptations() {\r\n        return voAdaptations;\r\n    }\r\n\r\n    function getVoPeriods() {\r\n        return voPeriods;\r\n    }\r\n\r\n    function setConfig(config) {\r\n        if (!config) return;\r\n\r\n        if (config.constants) {\r\n            constants = config.constants;\r\n        }\r\n\r\n        if (config.cea608parser) {\r\n            cea608parser = config.cea608parser;\r\n        }\r\n\r\n        if (config.errHandler) {\r\n            dashManifestModel.setConfig({ errHandler: config.errHandler });\r\n        }\r\n\r\n        if (config.BASE64) {\r\n            dashManifestModel.setConfig({ BASE64: config.BASE64 });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of RepresentationInfo based on a representation value object\r\n     * @param {object} voRepresentation\r\n     * @returns {RepresentationInfo|null} representationInfo\r\n     * @memberOf module:DashAdapter\r\n     * @instance\r\n     * @ignore\r\n     */\r\n    function convertRepresentationToRepresentationInfo(voRepresentation) {\r\n        if (voRepresentation) {\r\n            let representationInfo = new RepresentationInfo();\r\n            const realAdaptation = voRepresentation.adaptation.period.mpd.manifest.Period_asArray[voRepresentation.adaptation.period.index].AdaptationSet_asArray[voRepresentation.adaptation.index];\r\n            const realRepresentation = dashManifestModel.getRepresentationFor(voRepresentation.index, realAdaptation);\r\n\r\n            representationInfo.id = voRepresentation.id;\r\n            representationInfo.quality = voRepresentation.index;\r\n            representationInfo.bandwidth = dashManifestModel.getBandwidth(realRepresentation);\r\n            representationInfo.DVRWindow = voRepresentation.segmentAvailabilityRange;\r\n            representationInfo.fragmentDuration = voRepresentation.segmentDuration || (voRepresentation.segments && voRepresentation.segments.length > 0 ? voRepresentation.segments[0].duration : NaN);\r\n            representationInfo.MSETimeOffset = voRepresentation.MSETimeOffset;\r\n            representationInfo.mediaInfo = convertAdaptationToMediaInfo(voRepresentation.adaptation);\r\n\r\n            return representationInfo;\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns a MediaInfo object for a given media type.\r\n     * @param {object} streamInfo\r\n     * @param {MediaType }type\r\n     * @returns {null|MediaInfo} mediaInfo\r\n     * @memberOf module:DashAdapter\r\n     * @instance\r\n     */\r\n    function getMediaInfoForType(streamInfo, type) {\r\n        if (voPeriods.length === 0 || !streamInfo) {\r\n            return null;\r\n        }\r\n\r\n        let selectedVoPeriod = getPeriodForStreamInfo(streamInfo, voPeriods);\r\n        if (!selectedVoPeriod) return null;\r\n\r\n        let periodId = selectedVoPeriod.id;\r\n        voAdaptations[periodId] = voAdaptations[periodId] || dashManifestModel.getAdaptationsForPeriod(selectedVoPeriod);\r\n\r\n        let realAdaptation = getAdaptationForType(streamInfo.index, type, streamInfo);\r\n        if (!realAdaptation) return null;\r\n        let idx = dashManifestModel.getIndexForAdaptation(realAdaptation, voPeriods[0].mpd.manifest, streamInfo.index);\r\n\r\n        return convertAdaptationToMediaInfo(voAdaptations[periodId][idx]);\r\n    }\r\n\r\n    /**\r\n     * Checks if the role of the specified AdaptationSet is set to main\r\n     * @param {object} adaptation\r\n     * @returns {boolean}\r\n     * @memberOf module:DashAdapter\r\n     * @instance\r\n     */\r\n    function getIsMain(adaptation) {\r\n        return dashManifestModel.getRolesForAdaptation(adaptation).filter(function (role) {\r\n            return role.value === DashConstants.MAIN;\r\n        })[0];\r\n    }\r\n\r\n    /**\r\n     * Returns the AdaptationSet for a given period and a given mediaType.\r\n     * @param {number} periodIndex\r\n     * @param {MediaType} type\r\n     * @param {object} streamInfo\r\n     * @returns {null|object} adaptation\r\n     * @memberOf module:DashAdapter\r\n     * @instance\r\n     */\r\n    function getAdaptationForType(periodIndex, type, streamInfo) {\r\n        const adaptations = dashManifestModel.getAdaptationsForType(voPeriods[0].mpd.manifest, periodIndex, type);\r\n\r\n        if (!adaptations || adaptations.length === 0) return null;\r\n\r\n        if (adaptations.length > 1 && streamInfo) {\r\n            const allMediaInfoForType = getAllMediaInfoForType(streamInfo, type);\r\n\r\n            if (currentMediaInfo[streamInfo.id] && currentMediaInfo[streamInfo.id][type]) {\r\n                for (let i = 0, ln = adaptations.length; i < ln; i++) {\r\n                    if (areMediaInfosEqual(currentMediaInfo[streamInfo.id][type], allMediaInfoForType[i])) {\r\n                        return adaptations[i];\r\n                    }\r\n                }\r\n            }\r\n\r\n            for (let i = 0, ln = adaptations.length; i < ln; i++) {\r\n                if (getIsMain(adaptations[i])) {\r\n                    return adaptations[i];\r\n                }\r\n            }\r\n        }\r\n\r\n        return adaptations[0];\r\n    }\r\n\r\n    /**\r\n     * Compares two mediaInfo objects\r\n     * @param {MediaInfo} mInfoOne\r\n     * @param {MediaInfo} mInfoTwo\r\n     * @returns {boolean}\r\n     */\r\n    function areMediaInfosEqual(mInfoOne, mInfoTwo) {\r\n        if (!mInfoOne || !mInfoTwo) {\r\n            return false;\r\n        }\r\n\r\n        const sameId = mInfoOne.id === mInfoTwo.id;\r\n        const sameViewpoint = mInfoOne.viewpoint === mInfoTwo.viewpoint;\r\n        const sameLang = mInfoOne.lang === mInfoTwo.lang;\r\n        const sameRoles = mInfoOne.roles.toString() === mInfoTwo.roles.toString();\r\n        const sameAccessibility = mInfoOne.accessibility.toString() === mInfoTwo.accessibility.toString();\r\n        const sameAudioChannelConfiguration = mInfoOne.audioChannelConfiguration.toString() === mInfoTwo.audioChannelConfiguration.toString();\r\n\r\n        return (sameId && sameViewpoint && sameLang && sameRoles && sameAccessibility && sameAudioChannelConfiguration);\r\n    }\r\n\r\n    /**\r\n     * Returns the mediaInfo for a given mediaType\r\n     * @param {object} streamInfo\r\n     * @param {MediaType} type\r\n     * @param {object} externalManifest Set to null or undefined if no external manifest is to be used\r\n     * @returns {Array} mediaArr\r\n     * @memberOf module:DashAdapter\r\n     * @instance\r\n     */\r\n    function getAllMediaInfoForType(streamInfo, type, externalManifest) {\r\n        let voLocalPeriods = voPeriods;\r\n        let manifest = externalManifest;\r\n        let mediaArr = [];\r\n        let data,\r\n            media,\r\n            idx,\r\n            i,\r\n            j,\r\n            ln,\r\n            periodId;\r\n\r\n        if (manifest) {\r\n            checkConfig();\r\n\r\n            voLocalPeriods = getRegularPeriods(manifest);\r\n        } else {\r\n            if (voPeriods.length > 0) {\r\n                manifest = voPeriods[0].mpd.manifest;\r\n            } else {\r\n                return mediaArr;\r\n            }\r\n        }\r\n\r\n        const selectedVoPeriod = getPeriodForStreamInfo(streamInfo, voLocalPeriods);\r\n        if (selectedVoPeriod) {\r\n            periodId = selectedVoPeriod.id;\r\n        }\r\n        const adaptationsForType = dashManifestModel.getAdaptationsForType(manifest, streamInfo ? streamInfo.index : null, type !== constants.EMBEDDED_TEXT ? type : constants.VIDEO);\r\n\r\n        if (!adaptationsForType || adaptationsForType.length === 0) return mediaArr;\r\n\r\n        voAdaptations[periodId] = voAdaptations[periodId] || dashManifestModel.getAdaptationsForPeriod(selectedVoPeriod);\r\n\r\n        for (i = 0, ln = adaptationsForType.length; i < ln; i++) {\r\n            data = adaptationsForType[i];\r\n            idx = dashManifestModel.getIndexForAdaptation(data, manifest, streamInfo.index);\r\n            media = convertAdaptationToMediaInfo(voAdaptations[periodId][idx]);\r\n\r\n            if (type === constants.EMBEDDED_TEXT) {\r\n                let accessibilityLength = media.accessibility.length;\r\n                for (j = 0; j < accessibilityLength; j++) {\r\n                    if (!media) {\r\n                        continue;\r\n                    }\r\n                    let accessibility = media.accessibility[j];\r\n                    if (accessibility.indexOf('cea-608:') === 0) {\r\n                        let value = accessibility.substring(8);\r\n                        let parts = value.split(';');\r\n                        if (parts[0].substring(0, 2) === 'CC') {\r\n                            for (j = 0; j < parts.length; j++) {\r\n                                if (!media) {\r\n                                    media = convertAdaptationToMediaInfo.call(this, voAdaptations[periodId][idx]);\r\n                                }\r\n                                convertVideoInfoToEmbeddedTextInfo(media, parts[j].substring(0, 3), parts[j].substring(4));\r\n                                mediaArr.push(media);\r\n                                media = null;\r\n                            }\r\n                        } else {\r\n                            for (j = 0; j < parts.length; j++) { // Only languages for CC1, CC2, ...\r\n                                if (!media) {\r\n                                    media = convertAdaptationToMediaInfo.call(this, voAdaptations[periodId][idx]);\r\n                                }\r\n                                convertVideoInfoToEmbeddedTextInfo(media, 'CC' + (j + 1), parts[j]);\r\n                                mediaArr.push(media);\r\n                                media = null;\r\n                            }\r\n                        }\r\n                    } else if (accessibility.indexOf('cea-608') === 0) { // Nothing known. We interpret it as CC1=eng\r\n                        convertVideoInfoToEmbeddedTextInfo(media, constants.CC1, 'eng');\r\n                        mediaArr.push(media);\r\n                        media = null;\r\n                    }\r\n                }\r\n            } else if (type === constants.IMAGE) {\r\n                convertVideoInfoToThumbnailInfo(media);\r\n                mediaArr.push(media);\r\n                media = null;\r\n            } else if (media) {\r\n                mediaArr.push(media);\r\n            }\r\n        }\r\n\r\n        return mediaArr;\r\n    }\r\n\r\n    /**\r\n     * @param {object} newManifest\r\n     * @returns {*}\r\n     * @memberOf module:DashAdapter\r\n     * @instance\r\n     * @ignore\r\n     */\r\n    function updatePeriods(newManifest) {\r\n        if (!newManifest) return null;\r\n\r\n        checkConfig();\r\n\r\n        voPeriods = getRegularPeriods(newManifest);\r\n\r\n        voAdaptations = {};\r\n    }\r\n\r\n    /**\r\n     * @param {object} externalManifest\r\n     * @param {number} maxStreamsInfo\r\n     * @returns {Array} streams\r\n     * @memberOf module:DashAdapter\r\n     * @instance\r\n     * @ignore\r\n     */\r\n    function getStreamsInfo(externalManifest, maxStreamsInfo) {\r\n        const streams = [];\r\n        let voLocalPeriods = voPeriods;\r\n\r\n        //if manifest is defined, getStreamsInfo is for an outside manifest, not the current one\r\n        if (externalManifest) {\r\n            checkConfig();\r\n            voLocalPeriods = getRegularPeriods(externalManifest);\r\n        }\r\n\r\n        if (voLocalPeriods.length > 0) {\r\n            if (!maxStreamsInfo || maxStreamsInfo > voLocalPeriods.length) {\r\n                maxStreamsInfo = voLocalPeriods.length;\r\n            }\r\n            for (let i = 0; i < maxStreamsInfo; i++) {\r\n                streams.push(convertPeriodToStreamInfo(voLocalPeriods[i]));\r\n            }\r\n        }\r\n\r\n        return streams;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {object} streamInfo\r\n     * @param {object} mediaInfo\r\n     * @returns {object} realAdaptation\r\n     * @memberOf module:DashAdapter\r\n     * @instance\r\n     */\r\n    function getRealAdaptation(streamInfo, mediaInfo) {\r\n        let id,\r\n            realAdaptation;\r\n\r\n        const selectedVoPeriod = getPeriodForStreamInfo(streamInfo, voPeriods);\r\n\r\n        id = mediaInfo ? mediaInfo.id : null;\r\n\r\n        if (voPeriods.length > 0 && selectedVoPeriod) {\r\n            realAdaptation = id ? dashManifestModel.getAdaptationForId(id, voPeriods[0].mpd.manifest, selectedVoPeriod.index) : dashManifestModel.getAdaptationForIndex(mediaInfo ? mediaInfo.index : null, voPeriods[0].mpd.manifest, selectedVoPeriod.index);\r\n        }\r\n\r\n        return realAdaptation;\r\n    }\r\n\r\n    /**\r\n     * Returns all voRepresentations for a given mediaInfo\r\n     * @param {object} mediaInfo\r\n     * @returns {Array} voReps\r\n     * @memberOf module:DashAdapter\r\n     * @instance\r\n     */\r\n    function getVoRepresentations(mediaInfo) {\r\n        let voReps;\r\n\r\n        const voAdaptation = getAdaptationForMediaInfo(mediaInfo);\r\n        voReps = dashManifestModel.getRepresentationsForAdaptation(voAdaptation);\r\n\r\n        return voReps;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {object} eventBox\r\n     * @param {object} eventStreams\r\n     * @param {number} mediaStartTime\r\n     * @param {object} voRepresentation\r\n     * @returns {null|Event}\r\n     * @memberOf module:DashAdapter\r\n     * @instance\r\n     * @ignore\r\n     */\r\n    function getEvent(eventBox, eventStreams, mediaStartTime, voRepresentation) {\r\n        try {\r\n            if (!eventBox || !eventStreams || isNaN(mediaStartTime) || !voRepresentation) {\r\n                return null;\r\n            }\r\n            const event = new Event();\r\n            const schemeIdUri = eventBox.scheme_id_uri;\r\n            const value = eventBox.value;\r\n            const timescale = eventBox.timescale || 1;\r\n            const presentationTimeOffset = voRepresentation.presentationTimeOffset || 0;\r\n            const periodStart = voRepresentation.adaptation.period.start;\r\n            let presentationTimeDelta = eventBox.presentation_time_delta / timescale; // In case of version 1 events the presentation_time is parsed as presentation_time_delta\r\n            let calculatedPresentationTime;\r\n\r\n            if (eventBox.version === 0) {\r\n                calculatedPresentationTime = periodStart + mediaStartTime - presentationTimeOffset + presentationTimeDelta;\r\n            } else {\r\n                calculatedPresentationTime = periodStart - presentationTimeOffset + presentationTimeDelta;\r\n            }\r\n\r\n            const duration = eventBox.event_duration;\r\n            const id = eventBox.id;\r\n            const messageData = eventBox.message_data;\r\n\r\n            if (!eventStreams[schemeIdUri + '/' + value]) {\r\n                return null;\r\n            }\r\n\r\n            event.eventStream = eventStreams[schemeIdUri + '/' + value];\r\n            event.eventStream.value = value;\r\n            event.eventStream.timescale = timescale;\r\n            event.duration = duration;\r\n            event.id = id;\r\n            event.calculatedPresentationTime = calculatedPresentationTime;\r\n            event.messageData = messageData;\r\n            event.presentationTimeDelta = presentationTimeDelta;\r\n\r\n            return event;\r\n        } catch (e) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {object} info\r\n     * @param {object} voRepresentation\r\n     * @returns {Array}\r\n     * @memberOf module:DashAdapter\r\n     * @instance\r\n     * @ignore\r\n     */\r\n    function getEventsFor(info, voRepresentation) {\r\n        let events = [];\r\n\r\n        if (voPeriods.length > 0) {\r\n            const manifest = voPeriods[0].mpd.manifest;\r\n\r\n            if (info instanceof StreamInfo) {\r\n                events = dashManifestModel.getEventsForPeriod(getPeriodForStreamInfo(info, voPeriods));\r\n            } else if (info instanceof MediaInfo) {\r\n                events = dashManifestModel.getEventStreamForAdaptationSet(manifest, getAdaptationForMediaInfo(info));\r\n            } else if (info instanceof RepresentationInfo) {\r\n                events = dashManifestModel.getEventStreamForRepresentation(manifest, voRepresentation);\r\n            }\r\n        }\r\n\r\n        return events;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {number} streamId\r\n     * @param {MediaType} type\r\n     * @param {object} mediaInfo\r\n     * @memberOf module:DashAdapter\r\n     * @instance\r\n     * @ignore\r\n     */\r\n    function setCurrentMediaInfo(streamId, type, mediaInfo) {\r\n        currentMediaInfo[streamId] = currentMediaInfo[streamId] || {};\r\n        currentMediaInfo[streamId][type] = currentMediaInfo[streamId][type] || {};\r\n        currentMediaInfo[streamId][type] = mediaInfo;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {String} type\r\n     * @returns {boolean}\r\n     * @memberOf module:DashAdapter\r\n     * @instance\r\n     * @ignore\r\n     */\r\n    function getIsTextTrack(type) {\r\n        return dashManifestModel.getIsTextTrack(type);\r\n    }\r\n\r\n    /**\r\n     * Returns the UTC Timing Sources specified in the manifest\r\n     * @returns {Array} utcTimingSources\r\n     * @memberOf module:DashAdapter\r\n     * @instance\r\n     */\r\n    function getUTCTimingSources() {\r\n        const manifest = getManifest();\r\n        return dashManifestModel.getUTCTimingSources(manifest);\r\n    }\r\n\r\n    /**\r\n     * Returns the suggestedPresentationDelay as specified in the manifest\r\n     * @returns {String} suggestedPresentationDelay\r\n     * @memberOf module:DashAdapter\r\n     * @instance\r\n     */\r\n    function getSuggestedPresentationDelay() {\r\n        const mpd = voPeriods.length > 0 ? voPeriods[0].mpd : null;\r\n        return dashManifestModel.getSuggestedPresentationDelay(mpd);\r\n    }\r\n\r\n    /**\r\n     * Returns the availabilityStartTime as specified in the manifest\r\n     * @param {object} externalManifest Omit this value if no external manifest should be used\r\n     * @returns {string} availabilityStartTime\r\n     * @memberOf module:DashAdapter\r\n     * @instance\r\n     */\r\n    function getAvailabilityStartTime(externalManifest) {\r\n        const mpd = getMpd(externalManifest);\r\n        return dashManifestModel.getAvailabilityStartTime(mpd);\r\n    }\r\n\r\n    /**\r\n     * Returns a boolean indicating if the manifest is dynamic or not\r\n     * @param {object} externalManifest Omit this value if no external manifest should be used\r\n     * @returns {boolean}\r\n     * @memberOf module:DashAdapter\r\n     * @instance\r\n     */\r\n    function getIsDynamic(externalManifest) {\r\n        const manifest = getManifest(externalManifest);\r\n        return dashManifestModel.getIsDynamic(manifest);\r\n    }\r\n\r\n    /**\r\n     * Returns the duration of the MPD\r\n     * @param {object} externalManifest Omit this value if no external manifest should be used\r\n     * @returns {number} duration\r\n     * @memberOf module:DashAdapter\r\n     * @instance\r\n     */\r\n    function getDuration(externalManifest) {\r\n        const manifest = getManifest(externalManifest);\r\n        return dashManifestModel.getDuration(manifest);\r\n    }\r\n\r\n    /**\r\n     * Returns all periods of the MPD\r\n     * @param {object} externalManifest Omit this value if no external manifest should be used\r\n     * @returns {Array} periods\r\n     * @memberOf module:DashAdapter\r\n     * @instance\r\n     */\r\n    function getRegularPeriods(externalManifest) {\r\n        const mpd = getMpd(externalManifest);\r\n        return dashManifestModel.getRegularPeriods(mpd);\r\n    }\r\n\r\n    /**\r\n     * Returns an MPD object\r\n     * @param {object} externalManifest Omit this value if no external manifest should be used\r\n     * @returns {object} MPD\r\n     * @memberOf module:DashAdapter\r\n     * @instance\r\n     */\r\n    function getMpd(externalManifest) {\r\n        const manifest = getManifest(externalManifest);\r\n        return dashManifestModel.getMpd(manifest);\r\n    }\r\n\r\n    /**\r\n     * Returns the location element of the MPD\r\n     * @param {object} manifest\r\n     * @returns {String} location\r\n     * @memberOf module:DashAdapter\r\n     * @instance\r\n     */\r\n    function getLocation(manifest) {\r\n        return dashManifestModel.getLocation(manifest);\r\n    }\r\n\r\n    /**\r\n     * Returns the manifest update period used for dynamic manifests\r\n     * @param {object} manifest\r\n     * @param {number} latencyOfLastUpdate\r\n     * @returns {NaN|number} manifestUpdatePeriod\r\n     * @memberOf module:DashAdapter\r\n     * @instance\r\n     */\r\n    function getManifestUpdatePeriod(manifest, latencyOfLastUpdate = 0) {\r\n        return dashManifestModel.getManifestUpdatePeriod(manifest, latencyOfLastUpdate);\r\n    }\r\n\r\n    /**\r\n     * Checks if the manifest has a DVB profile\r\n     * @param {object} manifest\r\n     * @returns {boolean}\r\n     * @memberOf module:DashAdapter\r\n     * @instance\r\n     * @ignore\r\n     */\r\n    function getIsDVB(manifest) {\r\n        return dashManifestModel.hasProfile(manifest, PROFILE_DVB);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {object} node\r\n     * @returns {Array}\r\n     * @memberOf module:DashAdapter\r\n     * @instance\r\n     * @ignore\r\n     */\r\n    function getBaseURLsFromElement(node) {\r\n        return dashManifestModel.getBaseURLsFromElement(node);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @returns {*}\r\n     * @memberOf module:DashAdapter\r\n     * @instance\r\n     * @ignore\r\n     */\r\n    function getRepresentationSortFunction() {\r\n        return dashManifestModel.getRepresentationSortFunction();\r\n    }\r\n\r\n    /**\r\n     * Returns the codec for a given adaptation set and a given representation id.\r\n     * @param {object} adaptation\r\n     * @param {number} representationId\r\n     * @param {boolean} addResolutionInfo Defines whether to include resolution information in the output\r\n     * @returns {String} codec\r\n     * @memberOf module:DashAdapter\r\n     * @instance\r\n     */\r\n    function getCodec(adaptation, representationId, addResolutionInfo) {\r\n        return dashManifestModel.getCodec(adaptation, representationId, addResolutionInfo);\r\n    }\r\n\r\n    /**\r\n     * Returns the bandwidth for a given representation id\r\n     * @param {number} representationId\r\n     * @param {number} periodIdx\r\n     * @returns {number} bandwidth\r\n     * @memberOf module:DashAdapter\r\n     * @instance\r\n     */\r\n    function getBandwidthForRepresentation(representationId, periodIdx) {\r\n        let representation;\r\n        let period = getPeriod(periodIdx);\r\n\r\n        representation = findRepresentation(period, representationId);\r\n\r\n        return representation ? representation.bandwidth : null;\r\n    }\r\n\r\n    /**\r\n     * Returns the index for a given representation id\r\n     * @param {string} representationId\r\n     * @param {number} periodIdx\r\n     * @returns {number} index\r\n     * @memberOf module:DashAdapter\r\n     * @instance\r\n     */\r\n    function getIndexForRepresentation(representationId, periodIdx) {\r\n        let period = getPeriod(periodIdx);\r\n\r\n        return findRepresentationIndex(period, representationId);\r\n    }\r\n\r\n    /**\r\n     * This method returns the current max index based on what is defined in the MPD.\r\n     *\r\n     * @param {string} bufferType - String 'audio' or 'video',\r\n     * @param {number} periodIdx - Make sure this is the period index not id\r\n     * @return {number}\r\n     * @memberof module:DashAdapter\r\n     * @instance\r\n     */\r\n    function getMaxIndexForBufferType(bufferType, periodIdx) {\r\n        let period = getPeriod(periodIdx);\r\n\r\n        return findMaxBufferIndex(period, bufferType);\r\n    }\r\n\r\n    /**\r\n     * Returns the voPeriod object for a given id\r\n     * @param {String} id\r\n     * @returns {object|null}\r\n     */\r\n    function getPeriodById(id) {\r\n        if (!id || voPeriods.length === 0) {\r\n            return null;\r\n        }\r\n        const periods = voPeriods.filter((p) => {\r\n            return p.id === id;\r\n        });\r\n\r\n        if (periods && periods.length > 0) {\r\n            return periods[0];\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    function reset() {\r\n        voPeriods = [];\r\n        voAdaptations = {};\r\n        currentMediaInfo = {};\r\n    }\r\n\r\n    // #endregion PUBLIC FUNCTIONS\r\n\r\n    // #region PRIVATE FUNCTIONS\r\n    // --------------------------------------------------\r\n    function getManifest(externalManifest) {\r\n        return externalManifest ? externalManifest : voPeriods.length > 0 ? voPeriods[0].mpd.manifest : null;\r\n    }\r\n\r\n    function getAdaptationForMediaInfo(mediaInfo) {\r\n        if (!mediaInfo || !mediaInfo.streamInfo || mediaInfo.streamInfo.id === undefined || !voAdaptations[mediaInfo.streamInfo.id]) return null;\r\n        return voAdaptations[mediaInfo.streamInfo.id][mediaInfo.index];\r\n    }\r\n\r\n    function getPeriodForStreamInfo(streamInfo, voPeriodsArray) {\r\n        const ln = voPeriodsArray.length;\r\n\r\n        for (let i = 0; i < ln; i++) {\r\n            let voPeriod = voPeriodsArray[i];\r\n\r\n            if (streamInfo && streamInfo.id === voPeriod.id) return voPeriod;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    function convertAdaptationToMediaInfo(adaptation) {\r\n        if (!adaptation) {\r\n            return null;\r\n        }\r\n\r\n        let mediaInfo = new MediaInfo();\r\n        const realAdaptation = adaptation.period.mpd.manifest.Period_asArray[adaptation.period.index].AdaptationSet_asArray[adaptation.index];\r\n        let viewpoint;\r\n\r\n        mediaInfo.id = adaptation.id;\r\n        mediaInfo.index = adaptation.index;\r\n        mediaInfo.type = adaptation.type;\r\n        mediaInfo.streamInfo = convertPeriodToStreamInfo(adaptation.period);\r\n        mediaInfo.representationCount = dashManifestModel.getRepresentationCount(realAdaptation);\r\n        mediaInfo.labels = dashManifestModel.getLabelsForAdaptation(realAdaptation);\r\n        mediaInfo.lang = dashManifestModel.getLanguageForAdaptation(realAdaptation);\r\n        viewpoint = dashManifestModel.getViewpointForAdaptation(realAdaptation);\r\n        mediaInfo.viewpoint = viewpoint ? viewpoint.value : undefined;\r\n        mediaInfo.accessibility = dashManifestModel.getAccessibilityForAdaptation(realAdaptation).map(function (accessibility) {\r\n            let accessibilityValue = accessibility.value;\r\n            let accessibilityData = accessibilityValue;\r\n            if (accessibility.schemeIdUri && (accessibility.schemeIdUri.search('cea-608') >= 0) && typeof (cea608parser) !== 'undefined') {\r\n                if (accessibilityValue) {\r\n                    accessibilityData = 'cea-608:' + accessibilityValue;\r\n                } else {\r\n                    accessibilityData = 'cea-608';\r\n                }\r\n                mediaInfo.embeddedCaptions = true;\r\n            }\r\n            return accessibilityData;\r\n        });\r\n\r\n        mediaInfo.audioChannelConfiguration = dashManifestModel.getAudioChannelConfigurationForAdaptation(realAdaptation).map(function (audioChannelConfiguration) {\r\n            return audioChannelConfiguration.value;\r\n        });\r\n\r\n        if (mediaInfo.audioChannelConfiguration.length === 0 && Array.isArray(realAdaptation.Representation_asArray) && realAdaptation.Representation_asArray.length > 0) {\r\n            mediaInfo.audioChannelConfiguration = dashManifestModel.getAudioChannelConfigurationForRepresentation(realAdaptation.Representation_asArray[0]).map(function (audioChannelConfiguration) {\r\n                return audioChannelConfiguration.value;\r\n            });\r\n        }\r\n        mediaInfo.roles = dashManifestModel.getRolesForAdaptation(realAdaptation).map(function (role) {\r\n            return role.value;\r\n        });\r\n        mediaInfo.codec = dashManifestModel.getCodec(realAdaptation);\r\n        mediaInfo.mimeType = dashManifestModel.getMimeType(realAdaptation);\r\n        mediaInfo.contentProtection = dashManifestModel.getContentProtectionData(realAdaptation);\r\n        mediaInfo.bitrateList = dashManifestModel.getBitrateListForAdaptation(realAdaptation);\r\n\r\n        if (mediaInfo.contentProtection) {\r\n            mediaInfo.contentProtection.forEach(function (item) {\r\n                item.KID = dashManifestModel.getKID(item);\r\n            });\r\n        }\r\n\r\n        mediaInfo.isText = dashManifestModel.getIsTextTrack(mediaInfo.mimeType);\r\n        mediaInfo.supplementalProperties = dashManifestModel.getSupplementalPropperties(realAdaptation);\r\n\r\n        return mediaInfo;\r\n    }\r\n\r\n    function convertVideoInfoToEmbeddedTextInfo(mediaInfo, channel, lang) {\r\n        mediaInfo.id = channel; // CC1, CC2, CC3, or CC4\r\n        mediaInfo.index = 100 + parseInt(channel.substring(2, 3));\r\n        mediaInfo.type = constants.EMBEDDED_TEXT;\r\n        mediaInfo.codec = 'cea-608-in-SEI';\r\n        mediaInfo.isText = true;\r\n        mediaInfo.isEmbedded = true;\r\n        mediaInfo.lang = lang;\r\n        mediaInfo.roles = ['caption'];\r\n    }\r\n\r\n    function convertVideoInfoToThumbnailInfo(mediaInfo) {\r\n        mediaInfo.type = constants.IMAGE;\r\n    }\r\n\r\n    function convertPeriodToStreamInfo(period) {\r\n        let streamInfo = new StreamInfo();\r\n        const THRESHOLD = 1;\r\n\r\n        streamInfo.id = period.id;\r\n        streamInfo.index = period.index;\r\n        streamInfo.start = period.start;\r\n        streamInfo.duration = period.duration;\r\n        streamInfo.manifestInfo = convertMpdToManifestInfo(period.mpd);\r\n        streamInfo.isLast = period.mpd.manifest.Period_asArray.length === 1 || Math.abs((streamInfo.start + streamInfo.duration) - streamInfo.manifestInfo.duration) < THRESHOLD;\r\n\r\n        return streamInfo;\r\n    }\r\n\r\n    function convertMpdToManifestInfo(mpd) {\r\n        let manifestInfo = new ManifestInfo();\r\n\r\n        manifestInfo.DVRWindowSize = mpd.timeShiftBufferDepth;\r\n        manifestInfo.loadedTime = mpd.manifest.loadedTime;\r\n        manifestInfo.availableFrom = mpd.availabilityStartTime;\r\n        manifestInfo.minBufferTime = mpd.manifest.minBufferTime;\r\n        manifestInfo.maxFragmentDuration = mpd.maxSegmentDuration;\r\n        manifestInfo.duration = dashManifestModel.getDuration(mpd.manifest);\r\n        manifestInfo.isDynamic = dashManifestModel.getIsDynamic(mpd.manifest);\r\n        manifestInfo.serviceDescriptions = dashManifestModel.getServiceDescriptions(mpd.manifest);\r\n        manifestInfo.protocol = mpd.manifest.protocol;\r\n\r\n        return manifestInfo;\r\n    }\r\n\r\n    function checkConfig() {\r\n        if (!constants) {\r\n            throw new Error('setConfig function has to be called previously');\r\n        }\r\n    }\r\n\r\n    function getPeriod(periodIdx) {\r\n        return voPeriods.length > 0 ? voPeriods[0].mpd.manifest.Period_asArray[periodIdx] : null;\r\n    }\r\n\r\n    function findRepresentationIndex(period, representationId) {\r\n        const index = findRepresentation(period, representationId, true);\r\n\r\n        return index !== null ? index : -1;\r\n    }\r\n\r\n    function findRepresentation(period, representationId, returnIndex) {\r\n        let adaptationSet,\r\n            adaptationSetArray,\r\n            representation,\r\n            representationArray,\r\n            adaptationSetArrayIndex,\r\n            representationArrayIndex;\r\n\r\n        if (period) {\r\n            adaptationSetArray = period.AdaptationSet_asArray;\r\n            for (adaptationSetArrayIndex = 0; adaptationSetArrayIndex < adaptationSetArray.length; adaptationSetArrayIndex = adaptationSetArrayIndex + 1) {\r\n                adaptationSet = adaptationSetArray[adaptationSetArrayIndex];\r\n                representationArray = adaptationSet.Representation_asArray;\r\n                for (representationArrayIndex = 0; representationArrayIndex < representationArray.length; representationArrayIndex = representationArrayIndex + 1) {\r\n                    representation = representationArray[representationArrayIndex];\r\n                    if (representationId === representation.id) {\r\n                        if (returnIndex) {\r\n                            return representationArrayIndex;\r\n                        } else {\r\n                            return representation;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    function findMaxBufferIndex(period, bufferType) {\r\n        let adaptationSet,\r\n            adaptationSetArray,\r\n            representationArray,\r\n            adaptationSetArrayIndex;\r\n\r\n        if (!period || !bufferType) return -1;\r\n\r\n        adaptationSetArray = period.AdaptationSet_asArray;\r\n        for (adaptationSetArrayIndex = 0; adaptationSetArrayIndex < adaptationSetArray.length; adaptationSetArrayIndex = adaptationSetArrayIndex + 1) {\r\n            adaptationSet = adaptationSetArray[adaptationSetArrayIndex];\r\n            representationArray = adaptationSet.Representation_asArray;\r\n            if (dashManifestModel.getIsTypeOf(adaptationSet, bufferType)) {\r\n                return representationArray.length;\r\n            }\r\n        }\r\n\r\n        return -1;\r\n    }\r\n\r\n    // #endregion PRIVATE FUNCTIONS\r\n\r\n    instance = {\r\n        getBandwidthForRepresentation: getBandwidthForRepresentation,\r\n        getIndexForRepresentation: getIndexForRepresentation,\r\n        getMaxIndexForBufferType: getMaxIndexForBufferType,\r\n        convertDataToRepresentationInfo: convertRepresentationToRepresentationInfo,\r\n        getDataForMedia: getAdaptationForMediaInfo,\r\n        getStreamsInfo: getStreamsInfo,\r\n        getMediaInfoForType: getMediaInfoForType,\r\n        getAllMediaInfoForType: getAllMediaInfoForType,\r\n        getAdaptationForType: getAdaptationForType,\r\n        getRealAdaptation: getRealAdaptation,\r\n        getVoRepresentations: getVoRepresentations,\r\n        getEventsFor: getEventsFor,\r\n        getEvent: getEvent,\r\n        getMpd,\r\n        setConfig: setConfig,\r\n        updatePeriods: updatePeriods,\r\n        getIsTextTrack: getIsTextTrack,\r\n        getUTCTimingSources: getUTCTimingSources,\r\n        getSuggestedPresentationDelay: getSuggestedPresentationDelay,\r\n        getAvailabilityStartTime: getAvailabilityStartTime,\r\n        getIsDynamic: getIsDynamic,\r\n        getDuration: getDuration,\r\n        getRegularPeriods: getRegularPeriods,\r\n        getLocation: getLocation,\r\n        getManifestUpdatePeriod: getManifestUpdatePeriod,\r\n        getIsDVB: getIsDVB,\r\n        getBaseURLsFromElement: getBaseURLsFromElement,\r\n        getRepresentationSortFunction: getRepresentationSortFunction,\r\n        getCodec: getCodec,\r\n        getVoAdaptations: getVoAdaptations,\r\n        getVoPeriods: getVoPeriods,\r\n        getPeriodById,\r\n        setCurrentMediaInfo: setCurrentMediaInfo,\r\n        reset: reset\r\n    };\r\n\r\n    setup();\r\n    return instance;\r\n}\r\n\r\nDashAdapter.__dashjs_factory_name = 'DashAdapter';\r\nexport default FactoryMaker.getSingletonFactory(DashAdapter);\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport FragmentRequest from '../streaming/vo/FragmentRequest';\r\nimport {HTTPRequest} from '../streaming/vo/metrics/HTTPRequest';\r\nimport FactoryMaker from '../core/FactoryMaker';\r\nimport {\r\n    replaceIDForTemplate,\r\n    unescapeDollarsInTemplate,\r\n    replaceTokenForTemplate,\r\n    getTimeBasedSegment\r\n} from './utils/SegmentsUtils';\r\n\r\nimport SegmentsController from './controllers/SegmentsController';\r\n\r\nfunction DashHandler(config) {\r\n\r\n    config = config || {};\r\n    const context = this.context;\r\n\r\n    const eventBus = config.eventBus;\r\n    const events = config.events;\r\n    const debug = config.debug;\r\n    const dashConstants = config.dashConstants;\r\n    const urlUtils = config.urlUtils;\r\n    const type = config.type;\r\n    const streamInfo = config.streamInfo;\r\n\r\n    const timelineConverter = config.timelineConverter;\r\n    const dashMetrics = config.dashMetrics;\r\n    const baseURLController = config.baseURLController;\r\n\r\n    let instance,\r\n        logger,\r\n        segmentIndex,\r\n        lastSegment,\r\n        requestedTime,\r\n        isDynamicManifest,\r\n        dynamicStreamCompleted,\r\n        selectedMimeType,\r\n        segmentsController;\r\n\r\n    function setup() {\r\n        logger = debug.getLogger(instance);\r\n        resetInitialSettings();\r\n\r\n        segmentsController = SegmentsController(context).create(config);\r\n\r\n        eventBus.on(events.INITIALIZATION_LOADED, onInitializationLoaded, instance);\r\n        eventBus.on(events.SEGMENTS_LOADED, onSegmentsLoaded, instance);\r\n        eventBus.on(events.REPRESENTATION_UPDATE_STARTED, onRepresentationUpdateStarted, instance);\r\n        eventBus.on(events.DYNAMIC_TO_STATIC, onDynamicToStatic, instance);\r\n    }\r\n\r\n    function initialize(isDynamic) {\r\n        isDynamicManifest = isDynamic;\r\n        dynamicStreamCompleted = false;\r\n        segmentsController.initialize(isDynamic);\r\n    }\r\n\r\n    function getStreamId() {\r\n        return streamInfo.id;\r\n    }\r\n\r\n    function getType() {\r\n        return type;\r\n    }\r\n\r\n    function getStreamInfo() {\r\n        return streamInfo;\r\n    }\r\n\r\n    function setCurrentIndex(value) {\r\n        segmentIndex = value;\r\n    }\r\n\r\n    function getCurrentIndex() {\r\n        return segmentIndex;\r\n    }\r\n\r\n    function resetIndex() {\r\n        segmentIndex = -1;\r\n        lastSegment = null;\r\n    }\r\n\r\n    function resetInitialSettings() {\r\n        resetIndex();\r\n        requestedTime = null;\r\n        segmentsController = null;\r\n        selectedMimeType = null;\r\n    }\r\n\r\n    function reset() {\r\n        resetInitialSettings();\r\n\r\n        eventBus.off(events.INITIALIZATION_LOADED, onInitializationLoaded, instance);\r\n        eventBus.off(events.SEGMENTS_LOADED, onSegmentsLoaded, instance);\r\n        eventBus.off(events.REPRESENTATION_UPDATE_STARTED, onRepresentationUpdateStarted, instance);\r\n        eventBus.off(events.DYNAMIC_TO_STATIC, onDynamicToStatic, instance);\r\n    }\r\n\r\n    function setRequestUrl(request, destination, representation) {\r\n        const baseURL = baseURLController.resolve(representation.path);\r\n        let url,\r\n            serviceLocation;\r\n\r\n        if (!baseURL || (destination === baseURL.url) || (!urlUtils.isRelative(destination))) {\r\n            url = destination;\r\n        } else {\r\n            url = baseURL.url;\r\n            serviceLocation = baseURL.serviceLocation;\r\n\r\n            if (destination) {\r\n                url = urlUtils.resolve(destination, url);\r\n            }\r\n        }\r\n\r\n        if (urlUtils.isRelative(url)) {\r\n            return false;\r\n        }\r\n\r\n        request.url = url;\r\n        request.serviceLocation = serviceLocation;\r\n\r\n        return true;\r\n    }\r\n\r\n    function generateInitRequest(mediaInfo, representation, mediaType) {\r\n        const request = new FragmentRequest();\r\n        const period = representation.adaptation.period;\r\n        const presentationStartTime = period.start;\r\n\r\n        request.mediaType = mediaType;\r\n        request.type = HTTPRequest.INIT_SEGMENT_TYPE;\r\n        request.range = representation.range;\r\n        request.availabilityStartTime = timelineConverter.calcAvailabilityStartTimeFromPresentationTime(presentationStartTime, period.mpd, isDynamicManifest);\r\n        request.availabilityEndTime = timelineConverter.calcAvailabilityEndTimeFromPresentationTime(presentationStartTime + period.duration, period.mpd, isDynamicManifest);\r\n        request.quality = representation.index;\r\n        request.mediaInfo = mediaInfo;\r\n        request.representationId = representation.id;\r\n\r\n        if (setRequestUrl(request, representation.initialization, representation)) {\r\n            request.url = replaceTokenForTemplate(request.url, 'Bandwidth', representation.bandwidth);\r\n            return request;\r\n        }\r\n    }\r\n\r\n    function getInitRequest(mediaInfo, representation) {\r\n        if (!representation) return null;\r\n        const request = generateInitRequest(mediaInfo, representation, getType());\r\n        return request;\r\n    }\r\n\r\n    function setMimeType(newMimeType) {\r\n        selectedMimeType = newMimeType;\r\n    }\r\n\r\n    function setExpectedLiveEdge(liveEdge) {\r\n        timelineConverter.setExpectedLiveEdge(liveEdge);\r\n        dashMetrics.updateManifestUpdateInfo({presentationStartTime: liveEdge});\r\n    }\r\n\r\n    function onRepresentationUpdateStarted(e) {\r\n        processRepresentation(e.representation);\r\n    }\r\n\r\n    function processRepresentation(voRepresentation) {\r\n        const hasInitialization = voRepresentation.hasInitialization();\r\n        const hasSegments = voRepresentation.hasSegments();\r\n\r\n        // If representation has initialization and segments information, REPRESENTATION_UPDATE_COMPLETED can be triggered immediately\r\n        // otherwise, it means that a request has to be made to get initialization and/or segments informations\r\n        if (hasInitialization && hasSegments) {\r\n            eventBus.trigger(events.REPRESENTATION_UPDATE_COMPLETED,\r\n                { representation: voRepresentation },\r\n                { streamId: streamInfo.id, mediaType: type }\r\n            );\r\n        } else {\r\n            segmentsController.update(voRepresentation, selectedMimeType, hasInitialization, hasSegments);\r\n        }\r\n    }\r\n\r\n    function getRequestForSegment(mediaInfo, segment) {\r\n        if (segment === null || segment === undefined) {\r\n            return null;\r\n        }\r\n\r\n        const request = new FragmentRequest();\r\n        const representation = segment.representation;\r\n        const bandwidth = representation.adaptation.period.mpd.manifest.Period_asArray[representation.adaptation.period.index].AdaptationSet_asArray[representation.adaptation.index].Representation_asArray[representation.index].bandwidth;\r\n        let url = segment.media;\r\n\r\n        url = replaceTokenForTemplate(url, 'Number', segment.replacementNumber);\r\n        url = replaceTokenForTemplate(url, 'Time', segment.replacementTime);\r\n        url = replaceTokenForTemplate(url, 'Bandwidth', bandwidth);\r\n        url = replaceIDForTemplate(url, representation.id);\r\n        url = unescapeDollarsInTemplate(url);\r\n\r\n        request.mediaType = getType();\r\n        request.type = HTTPRequest.MEDIA_SEGMENT_TYPE;\r\n        request.range = segment.mediaRange;\r\n        request.startTime = segment.presentationStartTime;\r\n        request.mediaStartTime = segment.mediaStartTime;\r\n        request.duration = segment.duration;\r\n        request.timescale = representation.timescale;\r\n        request.availabilityStartTime = segment.availabilityStartTime;\r\n        request.availabilityEndTime = segment.availabilityEndTime;\r\n        request.wallStartTime = segment.wallStartTime;\r\n        request.quality = representation.index;\r\n        request.index = segment.availabilityIdx;\r\n        request.mediaInfo = mediaInfo;\r\n        request.adaptationIndex = representation.adaptation.index;\r\n        request.representationId = representation.id;\r\n\r\n        if (setRequestUrl(request, url, representation)) {\r\n            return request;\r\n        }\r\n    }\r\n\r\n    function isMediaFinished(representation) {\r\n        let isFinished = false;\r\n\r\n        if (!representation) return isFinished;\r\n\r\n        if (!isDynamicManifest) {\r\n            if (segmentIndex >= representation.availableSegmentsNumber) {\r\n                isFinished = true;\r\n            }\r\n        } else {\r\n            if (dynamicStreamCompleted) {\r\n                isFinished = true;\r\n            } else if (lastSegment) {\r\n                const time = parseFloat((lastSegment.presentationStartTime - representation.adaptation.period.start).toFixed(5));\r\n                const endTime = lastSegment.duration > 0 ? time + 1.5 * lastSegment.duration : time;\r\n                const duration = representation.adaptation.period.duration;\r\n\r\n                isFinished = endTime >= duration;\r\n            }\r\n        }\r\n        return isFinished;\r\n    }\r\n\r\n    function getSegmentRequestForTime(mediaInfo, representation, time, options) {\r\n        let request = null;\r\n\r\n        if (!representation || !representation.segmentInfoType) {\r\n            return request;\r\n        }\r\n\r\n        const idx = segmentIndex;\r\n        const keepIdx = options ? options.keepIdx : false;\r\n        const ignoreIsFinished = (options && options.ignoreIsFinished) ? true : false;\r\n\r\n        if (requestedTime !== time) { // When playing at live edge with 0 delay we may loop back with same time and index until it is available. Reduces verboseness of logs.\r\n            requestedTime = time;\r\n            logger.debug('Getting the request for time : ' + time);\r\n        }\r\n\r\n        const segment = segmentsController.getSegmentByTime(representation, time);\r\n        if (segment) {\r\n            segmentIndex = segment.availabilityIdx;\r\n            lastSegment = segment;\r\n            logger.debug('Index for time ' + time + ' is ' + segmentIndex);\r\n            request = getRequestForSegment(mediaInfo, segment);\r\n        } else {\r\n            const finished = !ignoreIsFinished ? isMediaFinished(representation) : false;\r\n            if (finished) {\r\n                request = new FragmentRequest();\r\n                request.action = FragmentRequest.ACTION_COMPLETE;\r\n                request.index = segmentIndex - 1;\r\n                request.mediaType = type;\r\n                request.mediaInfo = mediaInfo;\r\n                logger.debug('Signal complete in getSegmentRequestForTime');\r\n            }\r\n        }\r\n\r\n        if (keepIdx && idx >= 0) {\r\n            segmentIndex = representation.segmentInfoType === dashConstants.SEGMENT_TIMELINE && isDynamicManifest ? segmentIndex : idx;\r\n        }\r\n\r\n        return request;\r\n    }\r\n\r\n    function getNextSegmentRequest(mediaInfo, representation) {\r\n        let request = null;\r\n\r\n        if (!representation || !representation.segmentInfoType) {\r\n            return null;\r\n        }\r\n\r\n        requestedTime = null;\r\n\r\n        let indexToRequest = segmentIndex + 1;\r\n\r\n        logger.debug('Getting the next request at index: ' + indexToRequest);\r\n        // check that there is a segment in this index\r\n        const segment = segmentsController.getSegmentByIndex(representation, indexToRequest, lastSegment ? lastSegment.mediaStartTime : -1);\r\n        if (!segment && isEndlessMedia(representation) && !dynamicStreamCompleted) {\r\n            logger.debug(getType() + ' No segment found at index: ' + indexToRequest + '. Wait for next loop');\r\n            return null;\r\n        } else {\r\n            if (segment) {\r\n                request = getRequestForSegment(mediaInfo, segment);\r\n                segmentIndex = segment.availabilityIdx;\r\n            } else {\r\n                if (isDynamicManifest) {\r\n                    segmentIndex = indexToRequest - 1;\r\n                } else {\r\n                    segmentIndex = indexToRequest;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (segment) {\r\n            lastSegment = segment;\r\n        } else {\r\n            const finished = isMediaFinished(representation, segment);\r\n            if (finished) {\r\n                request = new FragmentRequest();\r\n                request.action = FragmentRequest.ACTION_COMPLETE;\r\n                request.index = segmentIndex - 1;\r\n                request.mediaType = getType();\r\n                request.mediaInfo = mediaInfo;\r\n                logger.debug('Signal complete');\r\n            }\r\n        }\r\n\r\n        return request;\r\n    }\r\n\r\n    function isEndlessMedia(representation) {\r\n        return !isFinite(representation.adaptation.period.duration);\r\n    }\r\n\r\n    function onInitializationLoaded(e) {\r\n        const representation = e.representation;\r\n        if (!representation.segments) return;\r\n\r\n        eventBus.trigger(events.REPRESENTATION_UPDATE_COMPLETED,\r\n            { representation: representation },\r\n            { streamId: streamInfo.id, mediaType: type }\r\n        );\r\n    }\r\n\r\n    function onSegmentsLoaded(e) {\r\n        if (e.error) return;\r\n\r\n        const fragments = e.segments;\r\n        const representation = e.representation;\r\n        const segments = [];\r\n        let count = 0;\r\n\r\n        let i,\r\n            len,\r\n            s,\r\n            seg;\r\n\r\n        for (i = 0, len = fragments ? fragments.length : 0; i < len; i++) {\r\n            s = fragments[i];\r\n\r\n            seg = getTimeBasedSegment(\r\n                timelineConverter,\r\n                isDynamicManifest,\r\n                representation,\r\n                s.startTime,\r\n                s.duration,\r\n                s.timescale,\r\n                s.media,\r\n                s.mediaRange,\r\n                count);\r\n\r\n            if (seg) {\r\n                segments.push(seg);\r\n                seg = null;\r\n                count++;\r\n            }\r\n        }\r\n\r\n        if (segments.length > 0) {\r\n            representation.segmentAvailabilityRange = {\r\n                start: segments[0].presentationStartTime,\r\n                end: segments[segments.length - 1].presentationStartTime\r\n            };\r\n            representation.availableSegmentsNumber = segments.length;\r\n            representation.segments = segments;\r\n\r\n            if (isDynamicManifest) {\r\n                const lastSegment = segments[segments.length - 1];\r\n                const liveEdge = lastSegment.presentationStartTime - 8;\r\n                // the last segment is the Expected, not calculated, live edge.\r\n                setExpectedLiveEdge(liveEdge);\r\n            }\r\n        }\r\n\r\n        if (!representation.hasInitialization()) {\r\n            return;\r\n        }\r\n\r\n        eventBus.trigger(events.REPRESENTATION_UPDATE_COMPLETED,\r\n            { representation: representation },\r\n            { streamId: streamInfo.id, mediaType: type }\r\n        );\r\n    }\r\n\r\n    function onDynamicToStatic() {\r\n        logger.debug('Dynamic stream complete');\r\n        dynamicStreamCompleted = true;\r\n    }\r\n\r\n    instance = {\r\n        initialize: initialize,\r\n        getStreamId: getStreamId,\r\n        getType: getType,\r\n        getStreamInfo: getStreamInfo,\r\n        getInitRequest: getInitRequest,\r\n        getRequestForSegment: getRequestForSegment,\r\n        getSegmentRequestForTime: getSegmentRequestForTime,\r\n        getNextSegmentRequest: getNextSegmentRequest,\r\n        setCurrentIndex: setCurrentIndex,\r\n        getCurrentIndex: getCurrentIndex,\r\n        isMediaFinished: isMediaFinished,\r\n        reset: reset,\r\n        resetIndex: resetIndex,\r\n        setMimeType: setMimeType\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\nDashHandler.__dashjs_factory_name = 'DashHandler';\r\nexport default FactoryMaker.getClassFactory(DashHandler);\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport Constants from '../streaming/constants/Constants';\r\nimport { HTTPRequest } from '../streaming/vo/metrics/HTTPRequest';\r\nimport FactoryMaker from '../core/FactoryMaker';\r\nimport MetricsConstants from '../streaming/constants/MetricsConstants';\r\nimport Round10 from './utils/Round10';\r\nimport MetricsModel from '../streaming/models/MetricsModel';\r\nimport {\r\n    PlayList,\r\n    PlayListTrace\r\n} from '../streaming/vo/metrics/PlayList';\r\n\r\n/**\r\n * @module DashMetrics\r\n * @param {object} config\r\n */\r\n\r\nfunction DashMetrics(config) {\r\n\r\n    config = config || {};\r\n\r\n    const context = this.context;\r\n    let instance,\r\n        playListTraceMetricsClosed,\r\n        playListTraceMetrics,\r\n        playListMetrics;\r\n\r\n    let metricsModel = config.metricsModel;\r\n\r\n    function setup() {\r\n        metricsModel = metricsModel || MetricsModel(context).getInstance({settings: config.settings});\r\n        resetInitialSettings();\r\n    }\r\n\r\n    function resetInitialSettings() {\r\n        playListTraceMetricsClosed = true;\r\n        playListTraceMetrics = null;\r\n        playListMetrics = null;\r\n    }\r\n\r\n    /**\r\n     * @param {MediaType} mediaType\r\n     * @returns {*}\r\n     * @memberof module:DashMetrics\r\n     * @instance\r\n     */\r\n    function getCurrentRepresentationSwitch(mediaType) {\r\n        const metrics = metricsModel.getMetricsFor(mediaType, true);\r\n        return getCurrent(metrics, MetricsConstants.TRACK_SWITCH);\r\n    }\r\n\r\n    /**\r\n     * @param {MediaType} mediaType\r\n     * @param {Date} t time of the switch event\r\n     * @param {Date} mt media presentation time\r\n     * @param {string} to id of representation\r\n     * @param {string} lto if present, subrepresentation reference\r\n     * @memberof module:DashMetrics\r\n     * @instance\r\n     * @ignore\r\n     */\r\n    function addRepresentationSwitch(mediaType, t, mt, to, lto) {\r\n        metricsModel.addRepresentationSwitch(mediaType, t, mt, to, lto);\r\n    }\r\n\r\n    /**\r\n     * @param {MediaType} type\r\n     * @returns {number}\r\n     * @memberof module:DashMetrics\r\n     * @instance\r\n     */\r\n    function getCurrentBufferState(type) {\r\n        const metrics = metricsModel.getMetricsFor(type, true);\r\n        return getCurrent(metrics, MetricsConstants.BUFFER_STATE);\r\n    }\r\n\r\n    /**\r\n     * @param {MediaType} type\r\n     * @returns {number}\r\n     * @memberof module:DashMetrics\r\n     * @instance\r\n     */\r\n    function getCurrentBufferLevel(type) {\r\n        const metrics = metricsModel.getMetricsFor(type, true);\r\n        const metric = getCurrent(metrics, MetricsConstants.BUFFER_LEVEL);\r\n\r\n        if (metric) {\r\n            return Round10.round10(metric.level / 1000, -3);\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * @param {MediaType} mediaType\r\n     * @param {number} t\r\n     * @param {number} level\r\n     * @memberof module:DashMetrics\r\n     * @instance\r\n     * @ignore\r\n     */\r\n    function addBufferLevel(mediaType, t, level) {\r\n        metricsModel.addBufferLevel(mediaType, t, level);\r\n    }\r\n\r\n    /**\r\n     * @param {MediaType} mediaType\r\n     * @param {string} state\r\n     * @param {number} target\r\n     * @memberof module:DashMetrics\r\n     * @instance\r\n     * @ignore\r\n     */\r\n    function addBufferState(mediaType, state, target) {\r\n        metricsModel.addBufferState(mediaType, state, target);\r\n    }\r\n\r\n    /**\r\n     * @memberof module:DashMetrics\r\n     * @instance\r\n     * @ignore\r\n     */\r\n    function clearAllCurrentMetrics () {\r\n        metricsModel.clearAllCurrentMetrics();\r\n    }\r\n\r\n    /**\r\n     * @param {MediaType} mediaType\r\n     * @returns {*}\r\n     * @memberof module:DashMetrics\r\n     * @instance\r\n     */\r\n    function getCurrentHttpRequest(mediaType) {\r\n        const metrics = metricsModel.getMetricsFor(mediaType, true);\r\n\r\n        if (!metrics) {\r\n            return null;\r\n        }\r\n\r\n        const httpList = metrics.HttpList;\r\n        let currentHttpList = null;\r\n\r\n        let httpListLastIndex;\r\n\r\n        if (!httpList || httpList.length <= 0) {\r\n            return null;\r\n        }\r\n\r\n        httpListLastIndex = httpList.length - 1;\r\n\r\n        while (httpListLastIndex >= 0) {\r\n            if (httpList[httpListLastIndex].responsecode) {\r\n                currentHttpList = httpList[httpListLastIndex];\r\n                break;\r\n            }\r\n            httpListLastIndex--;\r\n        }\r\n        return currentHttpList;\r\n    }\r\n\r\n    /**\r\n     * @param {MediaType} mediaType\r\n     * @returns {*}\r\n     * @memberof module:DashMetrics\r\n     * @instance\r\n     */\r\n    function getHttpRequests(mediaType) {\r\n        const metrics = metricsModel.getMetricsFor(mediaType, true);\r\n        if (!metrics) {\r\n            return [];\r\n        }\r\n\r\n        return !!metrics.HttpList ? metrics.HttpList : [];\r\n    }\r\n\r\n    /**\r\n     * @param {MediaType} mediaType\r\n     * @param {Array} loadingRequests\r\n     * @param {Array} executedRequests\r\n     * @memberof module:DashMetrics\r\n     * @instance\r\n     * @ignore\r\n     */\r\n    function addRequestsQueue(mediaType, loadingRequests, executedRequests) {\r\n        metricsModel.addRequestsQueue(mediaType, loadingRequests, executedRequests);\r\n    }\r\n\r\n    /**\r\n     * @param {MetricsList} metrics\r\n     * @param {string} metricName\r\n     * @returns {*}\r\n     * @memberof module:DashMetrics\r\n     * @instance\r\n     */\r\n    function getCurrent(metrics, metricName) {\r\n        if (!metrics) {\r\n            return null;\r\n        }\r\n        const list = metrics[metricName];\r\n        return (!list || list.length === 0) ? null : list[list.length - 1];\r\n    }\r\n\r\n    /**\r\n     * @returns {*}\r\n     * @memberof module:DashMetrics\r\n     * @instance\r\n     * @ignore\r\n     */\r\n    function getCurrentDroppedFrames() {\r\n        const metrics = metricsModel.getMetricsFor(Constants.VIDEO, true);\r\n        return getCurrent(metrics, MetricsConstants.DROPPED_FRAMES);\r\n    }\r\n\r\n    /**\r\n     * @param {number} quality\r\n     * @memberof module:DashMetrics\r\n     * @instance\r\n     * @ignore\r\n     */\r\n    function addDroppedFrames(quality) {\r\n        metricsModel.addDroppedFrames(Constants.VIDEO, quality);\r\n    }\r\n\r\n    /**\r\n     * @param {MediaType} mediaType\r\n     * @returns {*}\r\n     * @memberof module:DashMetrics\r\n     * @instance\r\n     */\r\n    function getCurrentSchedulingInfo(mediaType) {\r\n        const metrics = metricsModel.getMetricsFor(mediaType, true);\r\n        return getCurrent(metrics, MetricsConstants.SCHEDULING_INFO);\r\n    }\r\n\r\n    /**\r\n     * @param {object} request\r\n     * @param {string} state\r\n     * @memberof module:DashMetrics\r\n     * @instance\r\n     * @ignore\r\n     */\r\n    function addSchedulingInfo(request, state) {\r\n        metricsModel.addSchedulingInfo(\r\n            request.mediaType,\r\n            new Date(),\r\n            request.type,\r\n            request.startTime,\r\n            request.availabilityStartTime,\r\n            request.duration,\r\n            request.quality,\r\n            request.range,\r\n            state);\r\n    }\r\n\r\n    /**\r\n     * @returns {*}\r\n     * @memberof module:DashMetrics\r\n     * @instance\r\n     */\r\n    function getCurrentManifestUpdate() {\r\n        const streamMetrics = metricsModel.getMetricsFor(Constants.STREAM);\r\n        return getCurrent(streamMetrics, MetricsConstants.MANIFEST_UPDATE);\r\n    }\r\n\r\n    /**\r\n     * @param {object} updatedFields fields to be updated\r\n     * @memberof module:DashMetrics\r\n     * @instance\r\n     * @ignore\r\n     */\r\n    function updateManifestUpdateInfo(updatedFields) {\r\n        const manifestUpdate = this.getCurrentManifestUpdate();\r\n        metricsModel.updateManifestUpdateInfo(manifestUpdate, updatedFields);\r\n    }\r\n\r\n    /**\r\n     * @param {object} streamInfo\r\n     * @memberof module:DashMetrics\r\n     * @instance\r\n     * @ignore\r\n     */\r\n    function addManifestUpdateStreamInfo(streamInfo) {\r\n        if (streamInfo) {\r\n            const manifestUpdate = this.getCurrentManifestUpdate();\r\n            metricsModel.addManifestUpdateStreamInfo(manifestUpdate, streamInfo.id, streamInfo.index, streamInfo.start, streamInfo.duration);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param {object} request\r\n     * @memberof module:DashMetrics\r\n     * @instance\r\n     * @ignore\r\n     */\r\n    function addManifestUpdate(request) {\r\n        metricsModel.addManifestUpdate(Constants.STREAM, request.type, request.requestStartDate, request.requestEndDate);\r\n    }\r\n\r\n    /**\r\n     * @param {object} request\r\n     * @param {string} responseURL\r\n     * @param {number} responseStatus\r\n     * @param {object} responseHeaders\r\n     * @param {object} traces\r\n     * @memberof module:DashMetrics\r\n     * @instance\r\n     * @ignore\r\n     */\r\n    function addHttpRequest(request, responseURL, responseStatus, responseHeaders, traces) {\r\n        metricsModel.addHttpRequest(request.mediaType,\r\n            null,\r\n            request.type,\r\n            request.url,\r\n            request.quality,\r\n            responseURL,\r\n            request.serviceLocation || null,\r\n            request.range || null,\r\n            request.requestStartDate,\r\n            request.firstByteDate,\r\n            request.requestEndDate,\r\n            responseStatus,\r\n            request.duration,\r\n            responseHeaders,\r\n            traces);\r\n    }\r\n\r\n    /**\r\n     * @param {object} representation\r\n     * @param {MediaType} mediaType\r\n     * @memberof module:DashMetrics\r\n     * @instance\r\n     * @ignore\r\n     */\r\n    function addManifestUpdateRepresentationInfo(representation, mediaType) {\r\n        if (representation) {\r\n            const manifestUpdateInfo = this.getCurrentManifestUpdate();\r\n            metricsModel.addManifestUpdateRepresentationInfo(manifestUpdateInfo, representation.id, representation.index, representation.streamIndex, mediaType, representation.presentationTimeOffset, representation.startNumber, representation.fragmentInfoType);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param {MediaType} mediaType\r\n     * @returns {*}\r\n     * @memberof module:DashMetrics\r\n     * @instance\r\n     */\r\n    function getCurrentDVRInfo(mediaType) {\r\n        const metrics = mediaType ? metricsModel.getMetricsFor(mediaType, true) :\r\n            metricsModel.getMetricsFor(Constants.VIDEO, true) || metricsModel.getMetricsFor(Constants.AUDIO, true);\r\n        return getCurrent(metrics, MetricsConstants.DVR_INFO);\r\n    }\r\n\r\n    /**\r\n     * @param {MediaType} mediaType\r\n     * @param {Date} currentTime time of the switch event\r\n     * @param {object} mpd mpd reference\r\n     * @param {object} range range of the dvr info\r\n     * @memberof module:DashMetrics\r\n     * @instance\r\n     * @ignore\r\n     */\r\n    function addDVRInfo(mediaType, currentTime, mpd, range) {\r\n        metricsModel.addDVRInfo(mediaType, currentTime, mpd, range);\r\n    }\r\n\r\n    /**\r\n     * @param {string} id\r\n     * @returns {*}\r\n     * @memberof module:DashMetrics\r\n     * @instance\r\n     */\r\n    function getLatestMPDRequestHeaderValueByID(id) {\r\n        let headers = {};\r\n        let httpRequestList,\r\n            httpRequest,\r\n            i;\r\n\r\n        httpRequestList = getHttpRequests(Constants.STREAM);\r\n\r\n        for (i = httpRequestList.length - 1; i >= 0; i--) {\r\n            httpRequest = httpRequestList[i];\r\n\r\n            if (httpRequest.type === HTTPRequest.MPD_TYPE) {\r\n                headers = parseResponseHeaders(httpRequest._responseHeaders);\r\n                break;\r\n            }\r\n        }\r\n\r\n        return headers[id] === undefined ? null :  headers[id];\r\n    }\r\n\r\n    /**\r\n     * @param {string} type\r\n     * @param {string} id\r\n     * @returns {*}\r\n     * @memberof module:DashMetrics\r\n     * @instance\r\n     */\r\n    function getLatestFragmentRequestHeaderValueByID(type, id) {\r\n        let headers = {};\r\n        let httpRequest = getCurrentHttpRequest(type, true);\r\n        if (httpRequest) {\r\n            headers = parseResponseHeaders(httpRequest._responseHeaders);\r\n        }\r\n        return headers[id] === undefined ? null :  headers[id];\r\n    }\r\n\r\n    function parseResponseHeaders(headerStr) {\r\n        let headers = {};\r\n        if (!headerStr) {\r\n            return headers;\r\n        }\r\n\r\n        // Trim headerStr to fix a MS Edge bug with xhr.getAllResponseHeaders method\r\n        // which send a string starting with a \"\\n\" character\r\n        let headerPairs = headerStr.trim().split('\\u000d\\u000a');\r\n        for (let i = 0, ilen = headerPairs.length; i < ilen; i++) {\r\n            let headerPair = headerPairs[i];\r\n            let index = headerPair.indexOf('\\u003a\\u0020');\r\n            if (index > 0) {\r\n                headers[headerPair.substring(0, index)] = headerPair.substring(index + 2);\r\n            }\r\n        }\r\n        return headers;\r\n    }\r\n\r\n    /**\r\n     * @memberof module:DashMetrics\r\n     * @instance\r\n     * @ignore\r\n     */\r\n    function addPlayList() {\r\n        if (playListMetrics) {\r\n            metricsModel.addPlayList(playListMetrics);\r\n            playListMetrics = null;\r\n        }\r\n    }\r\n\r\n    function createPlaylistMetrics(mediaStartTime, startReason) {\r\n        playListMetrics = new PlayList();\r\n\r\n        playListMetrics.start = new Date();\r\n        playListMetrics.mstart = mediaStartTime;\r\n        playListMetrics.starttype = startReason;\r\n    }\r\n\r\n    function createPlaylistTraceMetrics(representationId, mediaStartTime, speed) {\r\n        if (playListTraceMetricsClosed === true ) {\r\n            playListTraceMetricsClosed = false;\r\n            playListTraceMetrics = new PlayListTrace();\r\n\r\n            playListTraceMetrics.representationid = representationId;\r\n            playListTraceMetrics.start = new Date();\r\n            playListTraceMetrics.mstart = mediaStartTime;\r\n            playListTraceMetrics.playbackspeed = speed !== null ? speed.toString() : null;\r\n        }\r\n    }\r\n\r\n    function updatePlayListTraceMetrics(traceToUpdate) {\r\n        if (playListTraceMetrics) {\r\n            for (let field in playListTraceMetrics) {\r\n                playListTraceMetrics[field] = traceToUpdate[field];\r\n            }\r\n        }\r\n    }\r\n\r\n    function pushPlayListTraceMetrics(endTime, reason) {\r\n        if (playListTraceMetricsClosed === false && playListMetrics && playListTraceMetrics && playListTraceMetrics.start) {\r\n            const startTime = playListTraceMetrics.start;\r\n            const duration = endTime.getTime() - startTime.getTime();\r\n            playListTraceMetrics.duration = duration;\r\n            playListTraceMetrics.stopreason = reason;\r\n            playListMetrics.trace.push(playListTraceMetrics);\r\n            playListTraceMetricsClosed = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param {object} errors\r\n     * @memberof module:DashMetrics\r\n     * @instance\r\n     * @ignore\r\n     */\r\n    function addDVBErrors(errors) {\r\n        metricsModel.addDVBErrors(errors);\r\n    }\r\n\r\n    instance = {\r\n        getCurrentRepresentationSwitch: getCurrentRepresentationSwitch,\r\n        getCurrentBufferState: getCurrentBufferState,\r\n        getCurrentBufferLevel: getCurrentBufferLevel,\r\n        getCurrentHttpRequest: getCurrentHttpRequest,\r\n        getHttpRequests: getHttpRequests,\r\n        getCurrentDroppedFrames: getCurrentDroppedFrames,\r\n        getCurrentSchedulingInfo: getCurrentSchedulingInfo,\r\n        getCurrentDVRInfo: getCurrentDVRInfo,\r\n        getCurrentManifestUpdate: getCurrentManifestUpdate,\r\n        getLatestFragmentRequestHeaderValueByID: getLatestFragmentRequestHeaderValueByID,\r\n        getLatestMPDRequestHeaderValueByID: getLatestMPDRequestHeaderValueByID,\r\n        addRepresentationSwitch: addRepresentationSwitch,\r\n        addDVRInfo: addDVRInfo,\r\n        updateManifestUpdateInfo: updateManifestUpdateInfo,\r\n        addManifestUpdateStreamInfo: addManifestUpdateStreamInfo,\r\n        addManifestUpdateRepresentationInfo: addManifestUpdateRepresentationInfo,\r\n        addManifestUpdate: addManifestUpdate,\r\n        addHttpRequest: addHttpRequest,\r\n        addSchedulingInfo: addSchedulingInfo,\r\n        addRequestsQueue: addRequestsQueue,\r\n        addBufferLevel: addBufferLevel,\r\n        addBufferState: addBufferState,\r\n        addDroppedFrames: addDroppedFrames,\r\n        addPlayList: addPlayList,\r\n        addDVBErrors: addDVBErrors,\r\n        createPlaylistMetrics: createPlaylistMetrics,\r\n        createPlaylistTraceMetrics: createPlaylistTraceMetrics,\r\n        updatePlayListTraceMetrics: updatePlayListTraceMetrics,\r\n        pushPlayListTraceMetrics: pushPlayListTraceMetrics,\r\n        clearAllCurrentMetrics: clearAllCurrentMetrics\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\nDashMetrics.__dashjs_factory_name = 'DashMetrics';\r\nexport default FactoryMaker.getSingletonFactory(DashMetrics);\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport Segment from './vo/Segment';\r\nimport DashJSError from '../streaming/vo/DashJSError';\r\nimport FactoryMaker from '../core/FactoryMaker';\r\nimport FragmentRequest from '../streaming/vo/FragmentRequest';\r\nimport URLLoader from '../streaming/net/URLLoader';\r\n\r\nfunction SegmentBaseLoader() {\r\n\r\n    const context = this.context;\r\n\r\n    let instance,\r\n        logger,\r\n        errHandler,\r\n        boxParser,\r\n        requestModifier,\r\n        dashMetrics,\r\n        settings,\r\n        mediaPlayerModel,\r\n        urlLoader,\r\n        events,\r\n        eventBus,\r\n        errors,\r\n        constants,\r\n        dashConstants,\r\n        urlUtils,\r\n        baseURLController;\r\n\r\n    function setup() {\r\n    }\r\n\r\n    function initialize() {\r\n        urlLoader = URLLoader(context).create({\r\n            errHandler: errHandler,\r\n            dashMetrics: dashMetrics,\r\n            mediaPlayerModel: mediaPlayerModel,\r\n            requestModifier: requestModifier,\r\n            useFetch: settings ? settings.get().streaming.lowLatencyEnabled : null,\r\n            boxParser: boxParser,\r\n            errors: errors,\r\n            urlUtils: urlUtils,\r\n            constants: constants,\r\n            dashConstants: dashConstants\r\n        });\r\n    }\r\n\r\n    function setConfig(config) {\r\n        if (config.baseURLController) {\r\n            baseURLController = config.baseURLController;\r\n        }\r\n\r\n        if (config.dashMetrics) {\r\n            dashMetrics = config.dashMetrics;\r\n        }\r\n\r\n        if (config.mediaPlayerModel) {\r\n            mediaPlayerModel = config.mediaPlayerModel;\r\n        }\r\n\r\n        if (config.errHandler) {\r\n            errHandler = config.errHandler;\r\n        }\r\n\r\n        if (config.settings) {\r\n            settings = config.settings;\r\n        }\r\n\r\n        if (config.boxParser) {\r\n            boxParser = config.boxParser;\r\n        }\r\n\r\n        if (config.events) {\r\n            events = config.events;\r\n        }\r\n\r\n        if (config.eventBus) {\r\n            eventBus = config.eventBus;\r\n        }\r\n\r\n        if (config.debug) {\r\n            logger = config.debug.getLogger(instance);\r\n        }\r\n\r\n        if (config.requestModifier) {\r\n            requestModifier = config.requestModifier;\r\n        }\r\n\r\n        if (config.errors) {\r\n            errors = config.errors;\r\n        }\r\n\r\n        if (config.urlUtils) {\r\n            urlUtils = config.urlUtils;\r\n        }\r\n\r\n        if (config.constants) {\r\n            constants = config.constants;\r\n        }\r\n\r\n        if (config.dashConstants) {\r\n            dashConstants = config.dashConstants;\r\n        }\r\n    }\r\n\r\n    function checkConfig() {\r\n        if (!baseURLController || !baseURLController.hasOwnProperty('resolve')) {\r\n            throw new Error('setConfig function has to be called previously');\r\n        }\r\n    }\r\n\r\n    function loadInitialization(streamId, mediaType, representation, loadingInfo) {\r\n        checkConfig();\r\n        let initRange = null;\r\n        const baseUrl = representation ? baseURLController.resolve(representation.path) : null;\r\n        const info = loadingInfo || {\r\n            init: true,\r\n            url: baseUrl ? baseUrl.url : undefined,\r\n            range: {\r\n                start: 0,\r\n                end: 1500\r\n            },\r\n            searching: false,\r\n            bytesLoaded: 0,\r\n            bytesToLoad: 1500,\r\n            mediaType: mediaType\r\n        };\r\n\r\n        logger.debug('Start searching for initialization.');\r\n\r\n        const request = getFragmentRequest(info);\r\n\r\n        const onload = function (response) {\r\n            info.bytesLoaded = info.range.end;\r\n            initRange = boxParser.findInitRange(response);\r\n\r\n            if (initRange) {\r\n                representation.range = initRange;\r\n                // note that we don't explicitly set rep.initialization as this\r\n                // will be computed when all BaseURLs are resolved later\r\n                eventBus.trigger(events.INITIALIZATION_LOADED,\r\n                    { representation: representation },\r\n                    { streamId: streamId, mediaType: mediaType }\r\n                );\r\n            } else {\r\n                info.range.end = info.bytesLoaded + info.bytesToLoad;\r\n                loadInitialization(streamId, mediaType, representation, info);\r\n            }\r\n        };\r\n\r\n        const onerror = function () {\r\n            eventBus.trigger(events.INITIALIZATION_LOADED,\r\n                { representation: representation },\r\n                { streamId: streamId, mediaType: mediaType }\r\n            );\r\n        };\r\n\r\n        urlLoader.load({request: request, success: onload, error: onerror});\r\n\r\n        logger.debug('Perform init search: ' + info.url);\r\n    }\r\n\r\n    function loadSegments(streamId, mediaType, representation, range, callback, loadingInfo) {\r\n        checkConfig();\r\n        if (range && (range.start === undefined || range.end === undefined)) {\r\n            const parts = range ? range.toString().split('-') : null;\r\n            range = parts ? {start: parseFloat(parts[0]), end: parseFloat(parts[1])} : null;\r\n        }\r\n\r\n        callback = !callback ? onLoaded : callback;\r\n        let isoFile = null;\r\n        let sidx = null;\r\n        const hasRange = !!range;\r\n        const baseUrl = representation ? baseURLController.resolve(representation.path) : null;\r\n        const info = {\r\n            init: false,\r\n            url: baseUrl ? baseUrl.url : undefined,\r\n            range: hasRange ? range : { start: 0, end: 1500 },\r\n            searching: !hasRange,\r\n            bytesLoaded: loadingInfo ? loadingInfo.bytesLoaded : 0,\r\n            bytesToLoad: 1500,\r\n            mediaType: mediaType\r\n        };\r\n\r\n        const request = getFragmentRequest(info);\r\n\r\n        const onload = function (response) {\r\n            const extraBytes = info.bytesToLoad;\r\n            const loadedLength = response.byteLength;\r\n\r\n            info.bytesLoaded = info.range.end - info.range.start;\r\n            isoFile = boxParser.parse(response);\r\n            sidx = isoFile.getBox('sidx');\r\n\r\n            if (!sidx || !sidx.isComplete) {\r\n                if (sidx) {\r\n                    info.range.start = sidx.offset || info.range.start;\r\n                    info.range.end = info.range.start + (sidx.size || extraBytes);\r\n                } else if (loadedLength < info.bytesLoaded) {\r\n                    // if we have reached a search limit or if we have reached the end of the file we have to stop trying to find sidx\r\n                    callback(streamId, mediaType, null, representation);\r\n                    return;\r\n                } else {\r\n                    const lastBox = isoFile.getLastBox();\r\n\r\n                    if (lastBox && lastBox.size) {\r\n                        info.range.start = lastBox.offset + lastBox.size;\r\n                        info.range.end = info.range.start + extraBytes;\r\n                    } else {\r\n                        info.range.end += extraBytes;\r\n                    }\r\n                }\r\n                loadSegments(streamId, mediaType, representation, info.range, callback, info);\r\n            } else {\r\n                const ref = sidx.references;\r\n                let loadMultiSidx,\r\n                    segments;\r\n\r\n                if (ref !== null && ref !== undefined && ref.length > 0) {\r\n                    loadMultiSidx = (ref[0].reference_type === 1);\r\n                }\r\n\r\n                if (loadMultiSidx) {\r\n                    logger.debug('Initiate multiple SIDX load.');\r\n                    info.range.end = info.range.start + sidx.size;\r\n\r\n                    let j, len, ss, se, r;\r\n                    let segs = [];\r\n                    let count = 0;\r\n                    let offset = (sidx.offset || info.range.start) + sidx.size;\r\n                    const tmpCallback = function (streamId, mediaType, result) {\r\n                        if (result) {\r\n                            segs = segs.concat(result);\r\n                            count++;\r\n\r\n                            if (count >= len) {\r\n                                // http requests can be processed in a wrong order, so, we have to reorder segments with an ascending start Time order\r\n                                segs.sort(function (a, b) {\r\n                                    return a.startTime - b.startTime < 0 ? -1 : 0;\r\n                                });\r\n                                callback(streamId, mediaType, segs, representation);\r\n                            }\r\n                        } else {\r\n                            callback(streamId, mediaType, null, representation);\r\n                        }\r\n                    };\r\n\r\n                    for (j = 0, len = ref.length; j < len; j++) {\r\n                        ss = offset;\r\n                        se = offset + ref[j].referenced_size - 1;\r\n                        offset = offset + ref[j].referenced_size;\r\n                        r = {start: ss, end: se};\r\n                        loadSegments(streamId, mediaType, representation, r, tmpCallback, info);\r\n                    }\r\n\r\n                } else {\r\n                    logger.debug('Parsing segments from SIDX. representation ' + mediaType + ' - id: ' + representation.id + ' for range : ' + info.range.start + ' - ' + info.range.end);\r\n                    segments = getSegmentsForSidx(sidx, info);\r\n                    callback(streamId, mediaType, segments, representation);\r\n                }\r\n            }\r\n        };\r\n\r\n        const onerror = function () {\r\n            callback(streamId, mediaType, null, representation);\r\n        };\r\n\r\n        urlLoader.load({request: request, success: onload, error: onerror});\r\n        logger.debug('Perform SIDX load: ' + info.url + ' with range : ' + info.range.start + ' - ' + info.range.end);\r\n    }\r\n\r\n    function reset() {\r\n        urlLoader.abort();\r\n        urlLoader = null;\r\n        errHandler = null;\r\n        boxParser = null;\r\n        requestModifier = null;\r\n    }\r\n\r\n    function getSegmentsForSidx(sidx, info) {\r\n        const refs = sidx.references;\r\n        const len = refs.length;\r\n        const timescale = sidx.timescale;\r\n        let time = sidx.earliest_presentation_time;\r\n        let start = info.range.start + sidx.offset + sidx.first_offset + sidx.size;\r\n        const segments = [];\r\n        let segment,\r\n            end,\r\n            duration,\r\n            size;\r\n\r\n        for (let i = 0; i < len; i++) {\r\n            duration = refs[i].subsegment_duration;\r\n            size = refs[i].referenced_size;\r\n\r\n            segment = new Segment();\r\n            // note that we don't explicitly set segment.media as this will be\r\n            // computed when all BaseURLs are resolved later\r\n            segment.duration = duration;\r\n            segment.startTime = time;\r\n            segment.timescale = timescale;\r\n            end = start + size - 1;\r\n            segment.mediaRange = start + '-' + end;\r\n            segments.push(segment);\r\n            time += duration;\r\n            start += size;\r\n        }\r\n\r\n        return segments;\r\n    }\r\n\r\n    function getFragmentRequest(info) {\r\n        if (!info.url) {\r\n            return;\r\n        }\r\n        const request = new FragmentRequest();\r\n        request.setInfo(info);\r\n        return request;\r\n    }\r\n\r\n    function onLoaded(streamId, mediaType, segments, representation) {\r\n        eventBus.trigger(events.SEGMENTS_LOADED,\r\n            {\r\n                segments: segments,\r\n                representation: representation,\r\n                error: segments ? undefined : new DashJSError(errors.SEGMENT_BASE_LOADER_ERROR_CODE, errors.SEGMENT_BASE_LOADER_ERROR_MESSAGE)\r\n            },\r\n            { streamId: streamId, mediaType: mediaType }\r\n        );\r\n    }\r\n\r\n    instance = {\r\n        setConfig: setConfig,\r\n        initialize: initialize,\r\n        loadInitialization: loadInitialization,\r\n        loadSegments: loadSegments,\r\n        reset: reset\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\nSegmentBaseLoader.__dashjs_factory_name = 'SegmentBaseLoader';\r\nexport default FactoryMaker.getSingletonFactory(SegmentBaseLoader);\r\n","import EBMLParser from '../streaming/utils/EBMLParser';\r\nimport Constants from '../streaming/constants/Constants';\r\nimport FactoryMaker from '../core/FactoryMaker';\r\nimport Segment from './vo/Segment';\r\nimport FragmentRequest from '../streaming/vo/FragmentRequest';\r\nimport URLLoader from '../streaming/net/URLLoader';\r\nimport DashJSError from '../streaming/vo/DashJSError';\r\n\r\nfunction WebmSegmentBaseLoader() {\r\n\r\n    const context = this.context;\r\n\r\n    let instance,\r\n        logger,\r\n        WebM,\r\n        errHandler,\r\n        requestModifier,\r\n        dashMetrics,\r\n        mediaPlayerModel,\r\n        urlLoader,\r\n        settings,\r\n        eventBus,\r\n        events,\r\n        errors,\r\n        baseURLController;\r\n\r\n    function setup() {\r\n        WebM = {\r\n            EBML: {\r\n                tag: 0x1A45DFA3,\r\n                required: true\r\n            },\r\n            Segment: {\r\n                tag: 0x18538067,\r\n                required: true,\r\n                SeekHead: {\r\n                    tag: 0x114D9B74,\r\n                    required: true\r\n                },\r\n                Info: {\r\n                    tag: 0x1549A966,\r\n                    required: true,\r\n                    TimecodeScale: {\r\n                        tag: 0x2AD7B1,\r\n                        required: true,\r\n                        parse: 'getMatroskaUint'\r\n                    },\r\n                    Duration: {\r\n                        tag: 0x4489,\r\n                        required: true,\r\n                        parse: 'getMatroskaFloat'\r\n                    }\r\n                },\r\n                Tracks: {\r\n                    tag: 0x1654AE6B,\r\n                    required: true\r\n                },\r\n                Cues: {\r\n                    tag: 0x1C53BB6B,\r\n                    required: true,\r\n                    CuePoint: {\r\n                        tag: 0xBB,\r\n                        required: true,\r\n                        CueTime: {\r\n                            tag: 0xB3,\r\n                            required: true,\r\n                            parse: 'getMatroskaUint'\r\n                        },\r\n                        CueTrackPositions: {\r\n                            tag: 0xB7,\r\n                            required: true,\r\n                            CueTrack: {\r\n                                tag: 0xF7,\r\n                                required: true,\r\n                                parse: 'getMatroskaUint'\r\n                            },\r\n                            CueClusterPosition: {\r\n                                tag: 0xF1,\r\n                                required: true,\r\n                                parse: 'getMatroskaUint'\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            Void: {\r\n                tag: 0xEC,\r\n                required: true\r\n            }\r\n        };\r\n    }\r\n\r\n    function initialize() {\r\n        urlLoader = URLLoader(context).create({\r\n            errHandler: errHandler,\r\n            dashMetrics: dashMetrics,\r\n            mediaPlayerModel: mediaPlayerModel,\r\n            requestModifier: requestModifier,\r\n            useFetch: settings ? settings.get().streaming.lowLatencyEnabled : null,\r\n            errors: errors\r\n        });\r\n    }\r\n\r\n    function setConfig(config) {\r\n        if (!config.baseURLController || !config.dashMetrics || !config.mediaPlayerModel || !config.errHandler) {\r\n            throw new Error(Constants.MISSING_CONFIG_ERROR);\r\n        }\r\n        baseURLController = config.baseURLController;\r\n        dashMetrics = config.dashMetrics;\r\n        mediaPlayerModel = config.mediaPlayerModel;\r\n        errHandler = config.errHandler;\r\n        settings = config.settings;\r\n        events = config.events;\r\n        eventBus = config.eventBus;\r\n        errors = config.errors;\r\n        logger = config.debug.getLogger(instance);\r\n        requestModifier = config.requestModifier;\r\n    }\r\n\r\n    function parseCues(ab) {\r\n        let cues = [];\r\n        let ebmlParser = EBMLParser(context).create({\r\n            data: ab\r\n        });\r\n        let cue,\r\n            cueTrack;\r\n\r\n        ebmlParser.consumeTagAndSize(WebM.Segment.Cues);\r\n\r\n        while (ebmlParser.moreData() &&\r\n            ebmlParser.consumeTagAndSize(WebM.Segment.Cues.CuePoint, true)) {\r\n            cue = {};\r\n\r\n            cue.CueTime = ebmlParser.parseTag(WebM.Segment.Cues.CuePoint.CueTime);\r\n\r\n            cue.CueTracks = [];\r\n            while (ebmlParser.moreData() &&\r\n                ebmlParser.consumeTag(WebM.Segment.Cues.CuePoint.CueTrackPositions, true)) {\r\n                const cueTrackPositionSize = ebmlParser.getMatroskaCodedNum();\r\n                const startPos = ebmlParser.getPos();\r\n                cueTrack = {};\r\n\r\n                cueTrack.Track = ebmlParser.parseTag(WebM.Segment.Cues.CuePoint.CueTrackPositions.CueTrack);\r\n                if (cueTrack.Track === 0) {\r\n                    throw new Error('Cue track cannot be 0');\r\n                }\r\n\r\n                cueTrack.ClusterPosition =\r\n                    ebmlParser.parseTag(WebM.Segment.Cues.CuePoint.CueTrackPositions.CueClusterPosition);\r\n\r\n                cue.CueTracks.push(cueTrack);\r\n\r\n                // we're not interested any other elements - skip remaining bytes\r\n                ebmlParser.setPos(startPos + cueTrackPositionSize);\r\n            }\r\n\r\n            if (cue.CueTracks.length === 0) {\r\n                throw new Error('Mandatory cuetrack not found');\r\n            }\r\n            cues.push(cue);\r\n        }\r\n\r\n        if (cues.length === 0) {\r\n            throw new Error('mandatory cuepoint not found');\r\n        }\r\n        return cues;\r\n    }\r\n\r\n    function parseSegments(data, segmentStart, segmentEnd, segmentDuration) {\r\n        let duration,\r\n            parsed,\r\n            segments,\r\n            segment,\r\n            i,\r\n            len,\r\n            start,\r\n            end;\r\n\r\n        parsed = parseCues(data);\r\n        segments = [];\r\n\r\n        // we are assuming one cue track per cue point\r\n        // both duration and media range require the i + 1 segment\r\n        // the final segment has to use global segment parameters\r\n        for (i = 0, len = parsed.length; i < len; i += 1) {\r\n            segment = new Segment();\r\n            duration = 0;\r\n\r\n            if (i < parsed.length - 1) {\r\n                duration = parsed[i + 1].CueTime - parsed[i].CueTime;\r\n            } else {\r\n                duration = segmentDuration - parsed[i].CueTime;\r\n            }\r\n\r\n            // note that we don't explicitly set segment.media as this will be\r\n            // computed when all BaseURLs are resolved later\r\n            segment.duration = duration;\r\n            segment.startTime = parsed[i].CueTime;\r\n            segment.timescale = 1000; // hardcoded for ms\r\n            start = parsed[i].CueTracks[0].ClusterPosition + segmentStart;\r\n\r\n            if (i < parsed.length - 1) {\r\n                end = parsed[i + 1].CueTracks[0].ClusterPosition + segmentStart - 1;\r\n            } else {\r\n                end = segmentEnd - 1;\r\n            }\r\n\r\n            segment.mediaRange = start + '-' + end;\r\n            segments.push(segment);\r\n        }\r\n\r\n        logger.debug('Parsed cues: ' + segments.length + ' cues.');\r\n\r\n        return segments;\r\n    }\r\n\r\n    function parseEbmlHeader(data, media, theRange, callback) {\r\n        if (!data || data.byteLength === 0) {\r\n            callback(null);\r\n            return;\r\n        }\r\n        let ebmlParser = EBMLParser(context).create({\r\n            data: data\r\n        });\r\n        let duration,\r\n            segments,\r\n            segmentEnd,\r\n            segmentStart;\r\n        let parts = theRange ? theRange.split('-') : null;\r\n        let request = null;\r\n        let info = {\r\n            url: media,\r\n            range: {\r\n                start: parts ? parseFloat(parts[0]) : null,\r\n                end: parts ? parseFloat(parts[1]) : null\r\n            },\r\n            request: request\r\n        };\r\n\r\n        logger.debug('Parse EBML header: ' + info.url);\r\n\r\n        // skip over the header itself\r\n        ebmlParser.skipOverElement(WebM.EBML);\r\n        ebmlParser.consumeTag(WebM.Segment);\r\n\r\n        // segments start here\r\n        segmentEnd = ebmlParser.getMatroskaCodedNum();\r\n        segmentEnd += ebmlParser.getPos();\r\n        segmentStart = ebmlParser.getPos();\r\n\r\n        // skip over any top level elements to get to the segment info\r\n        while (ebmlParser.moreData() &&\r\n            !ebmlParser.consumeTagAndSize(WebM.Segment.Info, true)) {\r\n            if (!(ebmlParser.skipOverElement(WebM.Segment.SeekHead, true) ||\r\n                    ebmlParser.skipOverElement(WebM.Segment.Tracks, true) ||\r\n                    ebmlParser.skipOverElement(WebM.Segment.Cues, true) ||\r\n                    ebmlParser.skipOverElement(WebM.Void, true))) {\r\n                throw new Error('no valid top level element found');\r\n            }\r\n        }\r\n\r\n        // we only need one thing in segment info, duration\r\n        while (duration === undefined) {\r\n            let infoTag = ebmlParser.getMatroskaCodedNum(true);\r\n            let infoElementSize = ebmlParser.getMatroskaCodedNum();\r\n\r\n            switch (infoTag) {\r\n                case WebM.Segment.Info.Duration.tag:\r\n                    duration = ebmlParser[WebM.Segment.Info.Duration.parse](infoElementSize);\r\n                    break;\r\n                default:\r\n                    ebmlParser.setPos(ebmlParser.getPos() + infoElementSize);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        // once we have what we need from segment info, we jump right to the\r\n        // cues\r\n\r\n        request = getFragmentRequest(info);\r\n\r\n        const onload = function (response) {\r\n            segments = parseSegments(response, segmentStart, segmentEnd, duration);\r\n            callback(segments);\r\n        };\r\n\r\n        const onloadend = function () {\r\n            logger.error('Download Error: Cues ' + info.url);\r\n            callback(null);\r\n        };\r\n\r\n        urlLoader.load({\r\n            request: request,\r\n            success: onload,\r\n            error: onloadend\r\n        });\r\n\r\n        logger.debug('Perform cues load: ' + info.url + ' bytes=' + info.range.start + '-' + info.range.end);\r\n    }\r\n\r\n    function checkConfig() {\r\n        if (!baseURLController || !baseURLController.hasOwnProperty('resolve')) {\r\n            throw new Error('setConfig function has to be called previously');\r\n        }\r\n    }\r\n\r\n    function loadInitialization(streamId, mediaType, representation, loadingInfo) {\r\n        checkConfig();\r\n        let request = null;\r\n        let baseUrl = representation ? baseURLController.resolve(representation.path) : null;\r\n        let initRange = representation ? representation.range.split('-') : null;\r\n        let info = loadingInfo || {\r\n            range: {\r\n                start: initRange ? parseFloat(initRange[0]) : null,\r\n                end: initRange ? parseFloat(initRange[1]) : null\r\n            },\r\n            request: request,\r\n            url: baseUrl ? baseUrl.url : undefined,\r\n            init: true,\r\n            mediaType: mediaType\r\n        };\r\n\r\n        logger.info('Start loading initialization.');\r\n\r\n        request = getFragmentRequest(info);\r\n\r\n        const onload = function () {\r\n            // note that we don't explicitly set rep.initialization as this\r\n            // will be computed when all BaseURLs are resolved later\r\n            eventBus.trigger(events.INITIALIZATION_LOADED,\r\n                { representation: representation },\r\n                { streamId: streamId, mediaType: mediaType }\r\n            );\r\n        };\r\n\r\n        const onloadend = function () {\r\n            eventBus.trigger(events.INITIALIZATION_LOADED,\r\n                { representation: representation },\r\n                { streamId: streamId, mediaType: mediaType }\r\n            );\r\n        };\r\n\r\n        urlLoader.load({\r\n            request: request,\r\n            success: onload,\r\n            error: onloadend\r\n        });\r\n\r\n        logger.debug('Perform init load: ' + info.url);\r\n    }\r\n\r\n    function loadSegments(streamId, mediaType, representation, theRange, callback) {\r\n        checkConfig();\r\n        let request = null;\r\n        let baseUrl = representation ? baseURLController.resolve(representation.path) : null;\r\n        let media = baseUrl ? baseUrl.url : undefined;\r\n        let bytesToLoad = 8192;\r\n        let info = {\r\n            bytesLoaded: 0,\r\n            bytesToLoad: bytesToLoad,\r\n            range: {\r\n                start: 0,\r\n                end: bytesToLoad\r\n            },\r\n            request: request,\r\n            url: media,\r\n            init: false,\r\n            mediaType: mediaType\r\n        };\r\n\r\n        callback = !callback ? onLoaded : callback;\r\n        request = getFragmentRequest(info);\r\n\r\n        // first load the header, but preserve the manifest range so we can\r\n        // load the cues after parsing the header\r\n        // NOTE: we expect segment info to appear in the first 8192 bytes\r\n        logger.debug('Parsing ebml header');\r\n\r\n        const onload = function (response) {\r\n            parseEbmlHeader(response, media, theRange, function (segments) {\r\n                callback(streamId, mediaType, segments, representation);\r\n            });\r\n        };\r\n\r\n        const onloadend = function () {\r\n            callback(streamId, mediaType, null, representation);\r\n        };\r\n\r\n        urlLoader.load({\r\n            request: request,\r\n            success: onload,\r\n            error: onloadend\r\n        });\r\n    }\r\n\r\n    function onLoaded(streamId, mediaType, segments, representation) {\r\n        eventBus.trigger(events.SEGMENTS_LOADED,\r\n            {\r\n                segments: segments,\r\n                representation: representation,\r\n                error: segments ? undefined : new DashJSError(errors.SEGMENT_BASE_LOADER_ERROR_CODE, errors.SEGMENT_BASE_LOADER_ERROR_MESSAGE)\r\n            },\r\n            { streamId: streamId, mediaType: mediaType }\r\n        );\r\n    }\r\n\r\n    function getFragmentRequest(info) {\r\n        const request = new FragmentRequest();\r\n        request.setInfo(info);\r\n        return request;\r\n    }\r\n\r\n    function reset() {\r\n        errHandler = null;\r\n        requestModifier = null;\r\n    }\r\n\r\n    instance = {\r\n        setConfig: setConfig,\r\n        initialize: initialize,\r\n        loadInitialization: loadInitialization,\r\n        loadSegments: loadSegments,\r\n        reset: reset\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\nWebmSegmentBaseLoader.__dashjs_factory_name = 'WebmSegmentBaseLoader';\r\nexport default FactoryMaker.getSingletonFactory(WebmSegmentBaseLoader);\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n/**\r\n * Dash constants declaration\r\n * @class\r\n * @ignore\r\n */\r\nclass DashConstants {\r\n\r\n    init() {\r\n        this.BASE_URL = 'BaseURL';\r\n        this.SEGMENT_BASE = 'SegmentBase';\r\n        this.SEGMENT_TEMPLATE = 'SegmentTemplate';\r\n        this.SEGMENT_LIST = 'SegmentList';\r\n        this.SEGMENT_URL = 'SegmentURL';\r\n        this.SEGMENT_TIMELINE = 'SegmentTimeline';\r\n        this.SEGMENT_PROFILES = 'segmentProfiles';\r\n        this.ADAPTATION_SET = 'AdaptationSet';\r\n        this.REPRESENTATION = 'Representation';\r\n        this.REPRESENTATION_INDEX = 'RepresentationIndex';\r\n        this.SUB_REPRESENTATION = 'SubRepresentation';\r\n        this.INITIALIZATION = 'Initialization';\r\n        this.INITIALIZATION_MINUS = 'initialization';\r\n        this.MPD = 'MPD';\r\n        this.PERIOD = 'Period';\r\n        this.ASSET_IDENTIFIER = 'AssetIdentifier';\r\n        this.EVENT_STREAM = 'EventStream';\r\n        this.ID = 'id';\r\n        this.PROFILES = 'profiles';\r\n        this.SERVICE_LOCATION = 'serviceLocation';\r\n        this.RANGE = 'range';\r\n        this.INDEX = 'index';\r\n        this.MEDIA = 'media';\r\n        this.BYTE_RANGE = 'byteRange';\r\n        this.INDEX_RANGE = 'indexRange';\r\n        this.MEDIA_RANGE = 'mediaRange';\r\n        this.VALUE = 'value';\r\n        this.CONTENT_TYPE = 'contentType';\r\n        this.MIME_TYPE = 'mimeType';\r\n        this.BITSTREAM_SWITCHING = 'BitstreamSwitching';\r\n        this.BITSTREAM_SWITCHING_MINUS = 'bitstreamSwitching';\r\n        this.CODECS = 'codecs';\r\n        this.DEPENDENCY_ID = 'dependencyId';\r\n        this.MEDIA_STREAM_STRUCTURE_ID = 'mediaStreamStructureId';\r\n        this.METRICS = 'Metrics';\r\n        this.METRICS_MINUS = 'metrics';\r\n        this.REPORTING = 'Reporting';\r\n        this.WIDTH = 'width';\r\n        this.HEIGHT = 'height';\r\n        this.SAR = 'sar';\r\n        this.FRAMERATE = 'frameRate';\r\n        this.AUDIO_SAMPLING_RATE = 'audioSamplingRate';\r\n        this.MAXIMUM_SAP_PERIOD = 'maximumSAPPeriod';\r\n        this.START_WITH_SAP = 'startWithSAP';\r\n        this.MAX_PLAYOUT_RATE = 'maxPlayoutRate';\r\n        this.CODING_DEPENDENCY = 'codingDependency';\r\n        this.SCAN_TYPE = 'scanType';\r\n        this.FRAME_PACKING = 'FramePacking';\r\n        this.AUDIO_CHANNEL_CONFIGURATION = 'AudioChannelConfiguration';\r\n        this.CONTENT_PROTECTION = 'ContentProtection';\r\n        this.ESSENTIAL_PROPERTY = 'EssentialProperty';\r\n        this.SUPPLEMENTAL_PROPERTY = 'SupplementalProperty';\r\n        this.INBAND_EVENT_STREAM = 'InbandEventStream';\r\n        this.ACCESSIBILITY = 'Accessibility';\r\n        this.ROLE = 'Role';\r\n        this.RATING = 'Rating';\r\n        this.CONTENT_COMPONENT = 'ContentComponent';\r\n        this.SUBSET = 'Subset';\r\n        this.LANG = 'lang';\r\n        this.VIEWPOINT = 'Viewpoint';\r\n        this.ROLE_ASARRAY = 'Role_asArray';\r\n        this.ACCESSIBILITY_ASARRAY = 'Accessibility_asArray';\r\n        this.AUDIOCHANNELCONFIGURATION_ASARRAY = 'AudioChannelConfiguration_asArray';\r\n        this.CONTENTPROTECTION_ASARRAY = 'ContentProtection_asArray';\r\n        this.MAIN = 'main';\r\n        this.DYNAMIC = 'dynamic';\r\n        this.STATIC = 'static';\r\n        this.MEDIA_PRESENTATION_DURATION = 'mediaPresentationDuration';\r\n        this.MINIMUM_UPDATE_PERIOD = 'minimumUpdatePeriod';\r\n        this.CODEC_PRIVATE_DATA = 'codecPrivateData';\r\n        this.BANDWITH = 'bandwidth';\r\n        this.SOURCE_URL = 'sourceURL';\r\n        this.TIMESCALE = 'timescale';\r\n        this.DURATION = 'duration';\r\n        this.START_NUMBER = 'startNumber';\r\n        this.PRESENTATION_TIME_OFFSET = 'presentationTimeOffset';\r\n        this.AVAILABILITY_START_TIME = 'availabilityStartTime';\r\n        this.AVAILABILITY_END_TIME = 'availabilityEndTime';\r\n        this.TIMESHIFT_BUFFER_DEPTH = 'timeShiftBufferDepth';\r\n        this.MAX_SEGMENT_DURATION = 'maxSegmentDuration';\r\n        this.PRESENTATION_TIME = 'presentationTime';\r\n        this.MIN_BUFFER_TIME = 'minBufferTime';\r\n        this.MAX_SUBSEGMENT_DURATION = 'maxSubsegmentDuration';\r\n        this.START = 'start';\r\n        this.AVAILABILITY_TIME_OFFSET = 'availabilityTimeOffset';\r\n        this.AVAILABILITY_TIME_COMPLETE = 'availabilityTimeComplete';\r\n        this.CENC_DEFAULT_KID = 'cenc:default_KID';\r\n        this.DVB_PRIORITY = 'dvb:priority';\r\n        this.DVB_WEIGHT = 'dvb:weight';\r\n        this.SUGGESTED_PRESENTATION_DELAY = 'suggestedPresentationDelay';\r\n        this.SERVICE_DESCRIPTION = 'ServiceDescription';\r\n        this.SERVICE_DESCRIPTION_SCOPE = 'Scope';\r\n        this.SERVICE_DESCRIPTION_LATENCY = 'Latency';\r\n        this.SERVICE_DESCRIPTION_PLAYBACK_RATE = 'PlaybackRate';\r\n    }\r\n\r\n    constructor () {\r\n        this.init();\r\n    }\r\n}\r\n\r\nlet constants = new DashConstants();\r\nexport default constants;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport Constants from '../../streaming/constants/Constants';\r\nimport DashJSError from '../../streaming/vo/DashJSError';\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\n\r\nfunction RepresentationController(config) {\r\n\r\n    config = config || {};\r\n    const eventBus = config.eventBus;\r\n    const events = config.events;\r\n    const errors = config.errors;\r\n    const abrController = config.abrController;\r\n    const dashMetrics = config.dashMetrics;\r\n    const playbackController = config.playbackController;\r\n    const timelineConverter = config.timelineConverter;\r\n    const type = config.type;\r\n    const streamInfo = config.streamInfo;\r\n    const dashConstants = config.dashConstants;\r\n\r\n    let instance,\r\n        realAdaptation,\r\n        updating,\r\n        voAvailableRepresentations,\r\n        currentVoRepresentation;\r\n\r\n    function setup() {\r\n        resetInitialSettings();\r\n\r\n        eventBus.on(events.QUALITY_CHANGE_REQUESTED, onQualityChanged, instance);\r\n        eventBus.on(events.REPRESENTATION_UPDATE_COMPLETED, onRepresentationUpdated, instance);\r\n        eventBus.on(events.WALLCLOCK_TIME_UPDATED, onWallclockTimeUpdated, instance);\r\n        eventBus.on(events.MANIFEST_VALIDITY_CHANGED, onManifestValidityChanged, instance);\r\n    }\r\n\r\n    function getStreamId() {\r\n        return streamInfo.id;\r\n    }\r\n\r\n    function getType() {\r\n        return type;\r\n    }\r\n\r\n    function checkConfig() {\r\n        if (!abrController || !dashMetrics || !playbackController || !timelineConverter) {\r\n            throw new Error(Constants.MISSING_CONFIG_ERROR);\r\n        }\r\n    }\r\n\r\n    function getData() {\r\n        return realAdaptation;\r\n    }\r\n\r\n    function isUpdating() {\r\n        return updating;\r\n    }\r\n\r\n    function getCurrentRepresentation() {\r\n        return currentVoRepresentation;\r\n    }\r\n\r\n    function resetInitialSettings() {\r\n        realAdaptation = null;\r\n        updating = true;\r\n        voAvailableRepresentations = [];\r\n    }\r\n\r\n    function reset() {\r\n        eventBus.off(events.QUALITY_CHANGE_REQUESTED, onQualityChanged, instance);\r\n        eventBus.off(events.REPRESENTATION_UPDATE_COMPLETED, onRepresentationUpdated, instance);\r\n        eventBus.off(events.WALLCLOCK_TIME_UPDATED, onWallclockTimeUpdated, instance);\r\n        eventBus.off(events.MANIFEST_VALIDITY_CHANGED, onManifestValidityChanged, instance);\r\n\r\n        resetInitialSettings();\r\n    }\r\n\r\n    function updateData(newRealAdaptation, availableRepresentations, type, quality) {\r\n        checkConfig();\r\n\r\n        startDataUpdate();\r\n\r\n        voAvailableRepresentations = availableRepresentations;\r\n\r\n        currentVoRepresentation = getRepresentationForQuality(quality);\r\n        realAdaptation = newRealAdaptation;\r\n\r\n        if (type !== Constants.VIDEO && type !== Constants.AUDIO && type !== Constants.FRAGMENTED_TEXT) {\r\n            endDataUpdate();\r\n            return;\r\n        }\r\n\r\n        updateAvailabilityWindow(playbackController.getIsDynamic(), true);\r\n    }\r\n\r\n    function addRepresentationSwitch() {\r\n        checkConfig();\r\n        const now = new Date();\r\n        const currentRepresentation = getCurrentRepresentation();\r\n        const currentVideoTimeMs = playbackController.getTime() * 1000;\r\n        if (currentRepresentation) {\r\n            dashMetrics.addRepresentationSwitch(currentRepresentation.adaptation.type, now, currentVideoTimeMs, currentRepresentation.id);\r\n        }\r\n    }\r\n\r\n    function getRepresentationForQuality(quality) {\r\n        return quality === null || quality === undefined || quality >= voAvailableRepresentations.length ? null : voAvailableRepresentations[quality];\r\n    }\r\n\r\n    function getQualityForRepresentation(voRepresentation) {\r\n        return voAvailableRepresentations.indexOf(voRepresentation);\r\n    }\r\n\r\n    function isAllRepresentationsUpdated() {\r\n        for (let i = 0, ln = voAvailableRepresentations.length; i < ln; i++) {\r\n            let segmentInfoType = voAvailableRepresentations[i].segmentInfoType;\r\n            if (voAvailableRepresentations[i].segmentAvailabilityRange === null || !voAvailableRepresentations[i].hasInitialization() ||\r\n                ((segmentInfoType === dashConstants.SEGMENT_BASE || segmentInfoType === dashConstants.BASE_URL) && !voAvailableRepresentations[i].segments)\r\n            ) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function setExpectedLiveEdge(liveEdge) {\r\n        timelineConverter.setExpectedLiveEdge(liveEdge);\r\n        dashMetrics.updateManifestUpdateInfo({presentationStartTime: liveEdge});\r\n    }\r\n\r\n    function updateRepresentation(representation, isDynamic) {\r\n        representation.segmentAvailabilityRange = timelineConverter.calcSegmentAvailabilityRange(representation, isDynamic);\r\n\r\n        if (representation.segmentAvailabilityRange.end < representation.segmentAvailabilityRange.start) {\r\n            let error = new DashJSError(errors.SEGMENTS_UNAVAILABLE_ERROR_CODE, errors.SEGMENTS_UNAVAILABLE_ERROR_MESSAGE, {availabilityDelay: representation.segmentAvailabilityRange.start - representation.segmentAvailabilityRange.end});\r\n            endDataUpdate(error);\r\n            return;\r\n        }\r\n\r\n        if (isDynamic) {\r\n            setExpectedLiveEdge(representation.segmentAvailabilityRange.end);\r\n        }\r\n    }\r\n\r\n    function updateAvailabilityWindow(isDynamic, notifyUpdate) {\r\n        checkConfig();\r\n\r\n        for (let i = 0, ln = voAvailableRepresentations.length; i < ln; i++) {\r\n            updateRepresentation(voAvailableRepresentations[i], isDynamic);\r\n            if (notifyUpdate) {\r\n                eventBus.trigger(events.REPRESENTATION_UPDATE_STARTED,\r\n                    { representation: voAvailableRepresentations[i] },\r\n                    { streamId: streamInfo.id, mediaType: type }\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    function resetAvailabilityWindow() {\r\n        voAvailableRepresentations.forEach(rep => {\r\n            rep.segmentAvailabilityRange = null;\r\n        });\r\n    }\r\n\r\n    function startDataUpdate() {\r\n        updating = true;\r\n        eventBus.trigger(events.DATA_UPDATE_STARTED,\r\n            {},\r\n            { streamId: streamInfo.id, mediaType: type }\r\n        );\r\n    }\r\n\r\n    function endDataUpdate(error) {\r\n        updating = false;\r\n        eventBus.trigger(events.DATA_UPDATE_COMPLETED,\r\n            {\r\n                data: realAdaptation,\r\n                currentRepresentation: currentVoRepresentation,\r\n                error: error\r\n            },\r\n            { streamId: streamInfo.id, mediaType: type }\r\n        );\r\n    }\r\n\r\n    function postponeUpdate(postponeTimePeriod) {\r\n        let delay = postponeTimePeriod;\r\n        let update = function () {\r\n            if (isUpdating()) return;\r\n\r\n            startDataUpdate();\r\n\r\n            // clear the segmentAvailabilityRange for all reps.\r\n            // this ensures all are updated before the live edge search starts\r\n            resetAvailabilityWindow();\r\n\r\n            updateAvailabilityWindow(playbackController.getIsDynamic(), true);\r\n        };\r\n        eventBus.trigger(events.AST_IN_FUTURE, { delay: delay });\r\n        setTimeout(update, delay);\r\n    }\r\n\r\n    function onRepresentationUpdated(e) {\r\n        if (!isUpdating()) return;\r\n\r\n        if (e.error) {\r\n            endDataUpdate(e.error);\r\n            return;\r\n        }\r\n\r\n        let r = e.representation;\r\n        let manifestUpdateInfo = dashMetrics.getCurrentManifestUpdate();\r\n        let alreadyAdded = false;\r\n        let postponeTimePeriod = 0;\r\n        let repInfo,\r\n            err,\r\n            repSwitch;\r\n\r\n        if (r.adaptation.period.mpd.manifest.type === dashConstants.DYNAMIC && !r.adaptation.period.mpd.manifest.ignorePostponeTimePeriod && playbackController.getStreamController().getStreams().length <= 1) {\r\n            // We must put things to sleep unless till e.g. the startTime calculation in ScheduleController.onLiveEdgeSearchCompleted fall after the segmentAvailabilityRange.start\r\n            postponeTimePeriod = getRepresentationUpdatePostponeTimePeriod(r);\r\n        }\r\n\r\n        if (postponeTimePeriod > 0) {\r\n            postponeUpdate(postponeTimePeriod);\r\n            err = new DashJSError(errors.SEGMENTS_UPDATE_FAILED_ERROR_CODE, errors.SEGMENTS_UPDATE_FAILED_ERROR_MESSAGE);\r\n            endDataUpdate(err);\r\n            return;\r\n        }\r\n\r\n        if (manifestUpdateInfo) {\r\n            for (let i = 0; i < manifestUpdateInfo.representationInfo.length; i++) {\r\n                repInfo = manifestUpdateInfo.representationInfo[i];\r\n                if (repInfo.index === r.index && repInfo.mediaType === getType()) {\r\n                    alreadyAdded = true;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (!alreadyAdded) {\r\n                dashMetrics.addManifestUpdateRepresentationInfo(r, getType());\r\n            }\r\n        }\r\n\r\n        if (isAllRepresentationsUpdated()) {\r\n            abrController.setPlaybackQuality(getType(), streamInfo, getQualityForRepresentation(currentVoRepresentation));\r\n            dashMetrics.updateManifestUpdateInfo({latency: currentVoRepresentation.segmentAvailabilityRange.end - playbackController.getTime()});\r\n\r\n            repSwitch = dashMetrics.getCurrentRepresentationSwitch(getCurrentRepresentation().adaptation.type);\r\n\r\n            if (!repSwitch) {\r\n                addRepresentationSwitch();\r\n            }\r\n            endDataUpdate();\r\n        }\r\n    }\r\n\r\n    function getRepresentationUpdatePostponeTimePeriod(representation) {\r\n        try {\r\n            const streamController = playbackController.getStreamController();\r\n            const activeStreamInfo = streamController.getActiveStreamInfo();\r\n            let startTimeAnchor = representation.segmentAvailabilityRange.start;\r\n\r\n            if (activeStreamInfo && activeStreamInfo.id && activeStreamInfo.id !== streamInfo.id) {\r\n                // We need to consider the currently playing period if a period switch is performed.\r\n                startTimeAnchor = Math.min(playbackController.getTime(), startTimeAnchor);\r\n            }\r\n\r\n            let segmentAvailabilityTimePeriod = representation.segmentAvailabilityRange.end - startTimeAnchor;\r\n            let liveDelay = playbackController.getLiveDelay();\r\n\r\n            return (liveDelay - segmentAvailabilityTimePeriod) * 1000;\r\n        } catch (e) {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function onWallclockTimeUpdated(e) {\r\n        if (e.isDynamic) {\r\n            updateAvailabilityWindow(e.isDynamic);\r\n        }\r\n    }\r\n\r\n    function onQualityChanged(e) {\r\n        currentVoRepresentation = getRepresentationForQuality(e.newQuality);\r\n        addRepresentationSwitch();\r\n    }\r\n\r\n    function onManifestValidityChanged(e) {\r\n        if (e.newDuration) {\r\n            const representation = getCurrentRepresentation();\r\n            if (representation && representation.adaptation.period) {\r\n                const period = representation.adaptation.period;\r\n                period.duration = e.newDuration;\r\n            }\r\n        }\r\n    }\r\n\r\n    instance = {\r\n        getStreamId: getStreamId,\r\n        getType: getType,\r\n        getData: getData,\r\n        isUpdating: isUpdating,\r\n        updateData: updateData,\r\n        updateRepresentation: updateRepresentation,\r\n        getCurrentRepresentation: getCurrentRepresentation,\r\n        getRepresentationForQuality: getRepresentationForQuality,\r\n        reset: reset\r\n    };\r\n\r\n    setup();\r\n    return instance;\r\n}\r\n\r\nRepresentationController.__dashjs_factory_name = 'RepresentationController';\r\nexport default FactoryMaker.getClassFactory(RepresentationController);\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\n\r\nimport SegmentBaseLoader from '../SegmentBaseLoader';\r\nimport WebmSegmentBaseLoader from '../WebmSegmentBaseLoader';\r\n\r\nfunction SegmentBaseController(config) {\r\n    config = config || {};\r\n\r\n    const context = this.context;\r\n    const eventBus = config.eventBus;\r\n    const events = config.events;\r\n    const dashMetrics = config.dashMetrics;\r\n    const mediaPlayerModel = config.mediaPlayerModel;\r\n    const errHandler = config.errHandler;\r\n    const baseURLController = config.baseURLController;\r\n    const debug = config.debug;\r\n    const boxParser = config.boxParser;\r\n    const requestModifier = config.requestModifier;\r\n    const errors = config.errors;\r\n\r\n    let instance,\r\n        segmentBaseLoader,\r\n        webmSegmentBaseLoader;\r\n\r\n    function setup() {\r\n        segmentBaseLoader = SegmentBaseLoader(context).getInstance();\r\n        webmSegmentBaseLoader = WebmSegmentBaseLoader(context).getInstance();\r\n\r\n        segmentBaseLoader.setConfig({\r\n            baseURLController: baseURLController,\r\n            dashMetrics: dashMetrics,\r\n            mediaPlayerModel: mediaPlayerModel,\r\n            errHandler: errHandler,\r\n            eventBus: eventBus,\r\n            events: events,\r\n            errors: errors,\r\n            debug: debug,\r\n            boxParser: boxParser,\r\n            requestModifier: requestModifier\r\n        });\r\n\r\n        webmSegmentBaseLoader.setConfig({\r\n            baseURLController: baseURLController,\r\n            dashMetrics: dashMetrics,\r\n            mediaPlayerModel: mediaPlayerModel,\r\n            errHandler: errHandler,\r\n            eventBus: eventBus,\r\n            events: events,\r\n            errors: errors,\r\n            debug: debug,\r\n            requestModifier: requestModifier\r\n        });\r\n    }\r\n\r\n    function isWebM(mimeType) {\r\n        const type = mimeType ? mimeType.split('/')[1] : '';\r\n        return 'webm' === type.toLowerCase();\r\n    }\r\n\r\n    function initialize() {\r\n        eventBus.on(events.SEGMENTBASE_INIT_REQUEST_NEEDED, onInitSegmentBaseNeeded, instance);\r\n        eventBus.on(events.SEGMENTBASE_SEGMENTSLIST_REQUEST_NEEDED, onSegmentsListSegmentBaseNeeded, instance);\r\n\r\n        segmentBaseLoader.initialize();\r\n        webmSegmentBaseLoader.initialize();\r\n    }\r\n\r\n    function onInitSegmentBaseNeeded(e) {\r\n        if (isWebM(e.mimeType)) {\r\n            webmSegmentBaseLoader.loadInitialization(e.streamId, e.mediaType, e.representation);\r\n        } else {\r\n            segmentBaseLoader.loadInitialization(e.streamId, e.mediaType, e.representation);\r\n        }\r\n    }\r\n\r\n    function onSegmentsListSegmentBaseNeeded(e) {\r\n        if (isWebM(e.mimeType)) {\r\n            webmSegmentBaseLoader.loadSegments(e.streamId, e.mediaType, e.representation, e.representation ? e.representation.indexRange : null, e.callback);\r\n        } else {\r\n            segmentBaseLoader.loadSegments(e.streamId, e.mediaType, e.representation, e.representation ? e.representation.indexRange : null, e.callback);\r\n        }\r\n    }\r\n\r\n    function reset() {\r\n        eventBus.off(events.SEGMENTBASE_INIT_REQUEST_NEEDED, onInitSegmentBaseNeeded, instance);\r\n        eventBus.off(events.SEGMENTBASE_SEGMENTSLIST_REQUEST_NEEDED, onSegmentsListSegmentBaseNeeded, instance);\r\n    }\r\n\r\n    instance = {\r\n        initialize: initialize,\r\n        reset: reset\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\nSegmentBaseController.__dashjs_factory_name = 'SegmentBaseController';\r\nconst factory = FactoryMaker.getSingletonFactory(SegmentBaseController);\r\nexport default factory;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\nimport TimelineSegmentsGetter from '../utils/TimelineSegmentsGetter';\r\nimport TemplateSegmentsGetter from '../utils/TemplateSegmentsGetter';\r\nimport ListSegmentsGetter from '../utils/ListSegmentsGetter';\r\nimport SegmentBaseGetter from '../utils/SegmentBaseGetter';\r\n\r\nfunction SegmentsController(config) {\r\n    config = config || {};\r\n\r\n    const context = this.context;\r\n    const events = config.events;\r\n    const eventBus = config.eventBus;\r\n    const dashConstants = config.dashConstants;\r\n    const streamInfo = config.streamInfo;\r\n    const type = config.type;\r\n\r\n    let instance,\r\n        getters;\r\n\r\n    function setup() {\r\n        getters = {};\r\n    }\r\n\r\n    function initialize(isDynamic) {\r\n        getters[dashConstants.SEGMENT_TIMELINE] = TimelineSegmentsGetter(context).create(config, isDynamic);\r\n        getters[dashConstants.SEGMENT_TEMPLATE] = TemplateSegmentsGetter(context).create(config, isDynamic);\r\n        getters[dashConstants.SEGMENT_LIST] = ListSegmentsGetter(context).create(config, isDynamic);\r\n        getters[dashConstants.SEGMENT_BASE] = SegmentBaseGetter(context).create(config, isDynamic);\r\n    }\r\n\r\n    function update(voRepresentation, mimeType, hasInitialization, hasSegments) {\r\n        if (!hasInitialization) {\r\n            eventBus.trigger(events.SEGMENTBASE_INIT_REQUEST_NEEDED, {\r\n                streamId: streamInfo.id,\r\n                mediaType: type,\r\n                mimeType: mimeType,\r\n                representation: voRepresentation\r\n            });\r\n        }\r\n\r\n        if (!hasSegments) {\r\n            eventBus.trigger(events.SEGMENTBASE_SEGMENTSLIST_REQUEST_NEEDED, {\r\n                streamId: streamInfo.id,\r\n                mediaType: type,\r\n                mimeType: mimeType,\r\n                representation: voRepresentation\r\n            });\r\n        }\r\n    }\r\n\r\n    function getSegmentsGetter(representation) {\r\n        return representation ? representation.segments ? getters[dashConstants.SEGMENT_BASE] : getters[representation.segmentInfoType] : null;\r\n    }\r\n\r\n    function getSegmentByIndex(representation, index, lastSegmentTime) {\r\n        const getter = getSegmentsGetter(representation);\r\n        return getter ? getter.getSegmentByIndex(representation, index, lastSegmentTime) : null;\r\n    }\r\n\r\n    function getSegmentByTime(representation, time) {\r\n        const getter = getSegmentsGetter(representation);\r\n        return getter ? getter.getSegmentByTime(representation, time) : null;\r\n    }\r\n\r\n    instance = {\r\n        initialize: initialize,\r\n        update: update,\r\n        getSegmentByIndex: getSegmentByIndex,\r\n        getSegmentByTime: getSegmentByTime\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\nSegmentsController.__dashjs_factory_name = 'SegmentsController';\r\nconst factory = FactoryMaker.getClassFactory(SegmentsController);\r\nexport default factory;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport Constants from '../../streaming/constants/Constants';\r\nimport DashConstants from '../constants/DashConstants';\r\nimport Representation from '../vo/Representation';\r\nimport AdaptationSet from '../vo/AdaptationSet';\r\nimport Period from '../vo/Period';\r\nimport Mpd from '../vo/Mpd';\r\nimport UTCTiming from '../vo/UTCTiming';\r\nimport Event from '../vo/Event';\r\nimport BaseURL from '../vo/BaseURL';\r\nimport EventStream from '../vo/EventStream';\r\nimport ObjectUtils from '../../streaming/utils/ObjectUtils';\r\nimport URLUtils from '../../streaming/utils/URLUtils';\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\nimport Debug from '../../core/Debug';\r\nimport DashJSError from '../../streaming/vo/DashJSError';\r\nimport Errors from '../../core/errors/Errors';\r\nimport {THUMBNAILS_SCHEME_ID_URIS} from '../../streaming/thumbnail/ThumbnailTracks';\r\n\r\nfunction DashManifestModel() {\r\n    let instance,\r\n        logger,\r\n        errHandler,\r\n        BASE64;\r\n\r\n    const context = this.context;\r\n    const urlUtils = URLUtils(context).getInstance();\r\n\r\n    const isInteger = Number.isInteger || function (value) {\r\n        return typeof value === 'number' &&\r\n            isFinite(value) &&\r\n            Math.floor(value) === value;\r\n    };\r\n\r\n    function setup() {\r\n        logger = Debug(context).getInstance().getLogger(instance);\r\n    }\r\n\r\n    function getIsTypeOf(adaptation, type) {\r\n\r\n        let i,\r\n            len,\r\n            representation,\r\n            col,\r\n            mimeTypeRegEx,\r\n            codecs;\r\n        let result = false;\r\n        let found = false;\r\n\r\n        if (!adaptation) {\r\n            throw new Error('adaptation is not defined');\r\n        }\r\n\r\n        if (!type) {\r\n            throw new Error('type is not defined');\r\n        }\r\n\r\n        if (adaptation.hasOwnProperty('ContentComponent_asArray')) {\r\n            col = adaptation.ContentComponent_asArray;\r\n        }\r\n\r\n        mimeTypeRegEx = (type !== Constants.TEXT) ? new RegExp(type) : new RegExp('(vtt|ttml)');\r\n\r\n        if (adaptation.Representation_asArray && adaptation.Representation_asArray.length && adaptation.Representation_asArray.length > 0) {\r\n            let essentialProperties = getEssentialPropertiesForRepresentation(adaptation.Representation_asArray[0]);\r\n            if (essentialProperties && essentialProperties.length > 0 && THUMBNAILS_SCHEME_ID_URIS.indexOf(essentialProperties[0].schemeIdUri) >= 0) {\r\n                return type === Constants.IMAGE;\r\n            }\r\n            if (adaptation.Representation_asArray[0].hasOwnProperty(DashConstants.CODECS)) {\r\n                // Just check the start of the codecs string\r\n                codecs = adaptation.Representation_asArray[0].codecs;\r\n                if (codecs.search(Constants.STPP) === 0 || codecs.search(Constants.WVTT) === 0) {\r\n                    return type === Constants.FRAGMENTED_TEXT;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (col) {\r\n            if (col.length > 1) {\r\n                return (type === Constants.MUXED);\r\n            } else if (col[0] && col[0].contentType === type) {\r\n                result = true;\r\n                found = true;\r\n            }\r\n        }\r\n\r\n        if (adaptation.hasOwnProperty(DashConstants.MIME_TYPE)) {\r\n            result = mimeTypeRegEx.test(adaptation.mimeType);\r\n            found = true;\r\n        }\r\n\r\n        // couldn't find on adaptationset, so check a representation\r\n        if (!found) {\r\n            i = 0;\r\n            len = adaptation.Representation_asArray && adaptation.Representation_asArray.length ? adaptation.Representation_asArray.length : 0;\r\n            while (!found && i < len) {\r\n                representation = adaptation.Representation_asArray[i];\r\n\r\n                if (representation.hasOwnProperty(DashConstants.MIME_TYPE)) {\r\n                    result = mimeTypeRegEx.test(representation.mimeType);\r\n                    found = true;\r\n                }\r\n\r\n                i++;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    function getIsAudio(adaptation) {\r\n        return getIsTypeOf(adaptation, Constants.AUDIO);\r\n    }\r\n\r\n    function getIsVideo(adaptation) {\r\n        return getIsTypeOf(adaptation, Constants.VIDEO);\r\n    }\r\n\r\n    function getIsFragmentedText(adaptation) {\r\n        return getIsTypeOf(adaptation, Constants.FRAGMENTED_TEXT);\r\n    }\r\n\r\n    function getIsMuxed(adaptation) {\r\n        return getIsTypeOf(adaptation, Constants.MUXED);\r\n    }\r\n\r\n    function getIsImage(adaptation) {\r\n        return getIsTypeOf(adaptation, Constants.IMAGE);\r\n    }\r\n\r\n    function getIsTextTrack(type) {\r\n        return (type === 'text/vtt' || type === 'application/ttml+xml');\r\n    }\r\n\r\n    function getLanguageForAdaptation(adaptation) {\r\n        let lang = '';\r\n\r\n        if (adaptation && adaptation.hasOwnProperty(DashConstants.LANG)) {\r\n            //Filter out any other characters not allowed according to RFC5646\r\n            lang = adaptation.lang.replace(/[^A-Za-z0-9-]/g, '');\r\n        }\r\n\r\n        return lang;\r\n    }\r\n\r\n    function getViewpointForAdaptation(adaptation) {\r\n        return adaptation && adaptation.hasOwnProperty(DashConstants.VIEWPOINT) ? adaptation.Viewpoint : null;\r\n    }\r\n\r\n    function getRolesForAdaptation(adaptation) {\r\n        return adaptation && adaptation.hasOwnProperty(DashConstants.ROLE_ASARRAY) ? adaptation.Role_asArray : [];\r\n    }\r\n\r\n    function getAccessibilityForAdaptation(adaptation) {\r\n        return adaptation && adaptation.hasOwnProperty(DashConstants.ACCESSIBILITY_ASARRAY) ? adaptation.Accessibility_asArray : [];\r\n    }\r\n\r\n    function getAudioChannelConfigurationForAdaptation(adaptation) {\r\n        return adaptation && adaptation.hasOwnProperty(DashConstants.AUDIOCHANNELCONFIGURATION_ASARRAY) ? adaptation.AudioChannelConfiguration_asArray : [];\r\n    }\r\n\r\n    function getAudioChannelConfigurationForRepresentation(representation) {\r\n        return representation && representation.hasOwnProperty(DashConstants.AUDIOCHANNELCONFIGURATION_ASARRAY) ? representation.AudioChannelConfiguration_asArray : [];\r\n    }\r\n\r\n    function getRepresentationSortFunction() {\r\n        return (a, b) => a.bandwidth - b.bandwidth;\r\n    }\r\n\r\n    function processAdaptation(realAdaptation) {\r\n        if (realAdaptation && Array.isArray(realAdaptation.Representation_asArray)) {\r\n            realAdaptation.Representation_asArray.sort(getRepresentationSortFunction());\r\n        }\r\n\r\n        return realAdaptation;\r\n    }\r\n\r\n    function getRealAdaptations(manifest, periodIndex) {\r\n        return manifest && manifest.Period_asArray && isInteger(periodIndex) ? manifest.Period_asArray[periodIndex] ? manifest.Period_asArray[periodIndex].AdaptationSet_asArray : [] : [];\r\n    }\r\n\r\n    function getAdaptationForId(id, manifest, periodIndex) {\r\n        const realAdaptations = getRealAdaptations(manifest, periodIndex);\r\n        let i,\r\n            len;\r\n\r\n        for (i = 0, len = realAdaptations.length; i < len; i++) {\r\n            if (realAdaptations[i].hasOwnProperty(DashConstants.ID) && realAdaptations[i].id === id) {\r\n                return realAdaptations[i];\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    function getAdaptationForIndex(index, manifest, periodIndex) {\r\n        const realAdaptations = getRealAdaptations(manifest, periodIndex);\r\n        if (realAdaptations.length > 0 && isInteger(index)) {\r\n            return realAdaptations[index];\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    function getIndexForAdaptation(realAdaptation, manifest, periodIndex) {\r\n        if (!realAdaptation) {\r\n            return -1;\r\n        }\r\n\r\n        const realAdaptations = getRealAdaptations(manifest, periodIndex);\r\n\r\n        for (let i = 0; i < realAdaptations.length; i++) {\r\n            let objectUtils = ObjectUtils(context).getInstance();\r\n            if (objectUtils.areEqual(realAdaptations[i], realAdaptation)) {\r\n                return i;\r\n            }\r\n        }\r\n\r\n        return -1;\r\n    }\r\n\r\n    function getAdaptationsForType(manifest, periodIndex, type) {\r\n        const realAdaptations = getRealAdaptations(manifest, periodIndex);\r\n        let i,\r\n            len;\r\n        const adaptations = [];\r\n\r\n        for (i = 0, len = realAdaptations.length; i < len; i++) {\r\n            if (getIsTypeOf(realAdaptations[i], type)) {\r\n                adaptations.push(processAdaptation(realAdaptations[i]));\r\n            }\r\n        }\r\n\r\n        return adaptations;\r\n    }\r\n\r\n    function getCodec(adaptation, representationId, addResolutionInfo) {\r\n        let codec = null;\r\n\r\n        if (adaptation && adaptation.Representation_asArray && adaptation.Representation_asArray.length > 0) {\r\n            const representation = isInteger(representationId) && representationId >= 0 && representationId < adaptation.Representation_asArray.length ?\r\n                adaptation.Representation_asArray[representationId] : adaptation.Representation_asArray[0];\r\n            if (representation) {\r\n                codec = representation.mimeType + ';codecs=\"' + representation.codecs + '\"';\r\n                if (addResolutionInfo && representation.width !== undefined) {\r\n                    codec += ';width=\"' + representation.width + '\";height=\"' + representation.height + '\"';\r\n                }\r\n            }\r\n        }\r\n\r\n        // If the codec contains a profiles parameter we remove it. Otherwise it will cause problems when checking for codec capabilities of the platform\r\n        if (codec) {\r\n            codec = codec.replace(/\\sprofiles=[^;]*/g, '');\r\n        }\r\n\r\n        return codec;\r\n    }\r\n\r\n    function getMimeType(adaptation) {\r\n        return adaptation && adaptation.Representation_asArray && adaptation.Representation_asArray.length > 0 ? adaptation.Representation_asArray[0].mimeType : null;\r\n    }\r\n\r\n    function getKID(adaptation) {\r\n        if (!adaptation || !adaptation.hasOwnProperty(DashConstants.CENC_DEFAULT_KID)) {\r\n            return null;\r\n        }\r\n        return adaptation[DashConstants.CENC_DEFAULT_KID];\r\n    }\r\n\r\n    function getLabelsForAdaptation(adaptation) {\r\n        if (!adaptation || !Array.isArray(adaptation.Label_asArray)) {\r\n            return [];\r\n        }\r\n\r\n        const labelArray = [];\r\n\r\n        for (let i = 0; i < adaptation.Label_asArray.length; i++) {\r\n            labelArray.push({\r\n                lang: adaptation.Label_asArray[i].lang,\r\n                text: adaptation.Label_asArray[i].__text || adaptation.Label_asArray[i]\r\n            });\r\n        }\r\n\r\n        return labelArray;\r\n    }\r\n\r\n    function getContentProtectionData(adaptation) {\r\n        if (!adaptation || !adaptation.hasOwnProperty(DashConstants.CONTENTPROTECTION_ASARRAY) || adaptation.ContentProtection_asArray.length === 0) {\r\n            return null;\r\n        }\r\n        return adaptation.ContentProtection_asArray;\r\n    }\r\n\r\n    function getIsDynamic(manifest) {\r\n        let isDynamic = false;\r\n        if (manifest && manifest.hasOwnProperty('type')) {\r\n            isDynamic = (manifest.type === DashConstants.DYNAMIC);\r\n        }\r\n        return isDynamic;\r\n    }\r\n\r\n    function hasProfile(manifest, profile) {\r\n        let has = false;\r\n\r\n        if (manifest && manifest.profiles && manifest.profiles.length > 0) {\r\n            has = (manifest.profiles.indexOf(profile) !== -1);\r\n        }\r\n\r\n        return has;\r\n    }\r\n\r\n    function getDuration(manifest) {\r\n        let mpdDuration;\r\n        //@mediaPresentationDuration specifies the duration of the entire Media Presentation.\r\n        //If the attribute is not present, the duration of the Media Presentation is unknown.\r\n        if (manifest && manifest.hasOwnProperty(DashConstants.MEDIA_PRESENTATION_DURATION)) {\r\n            mpdDuration = manifest.mediaPresentationDuration;\r\n        } else if (manifest && manifest.type == 'dynamic') {\r\n            mpdDuration = Number.POSITIVE_INFINITY;\r\n        } else {\r\n            mpdDuration = Number.MAX_SAFE_INTEGER || Number.MAX_VALUE;\r\n        }\r\n\r\n        return mpdDuration;\r\n    }\r\n\r\n    function getBandwidth(representation) {\r\n        return representation && representation.bandwidth ? representation.bandwidth : NaN;\r\n    }\r\n\r\n    function getManifestUpdatePeriod(manifest, latencyOfLastUpdate = 0) {\r\n        let delay = NaN;\r\n        if (manifest && manifest.hasOwnProperty(DashConstants.MINIMUM_UPDATE_PERIOD)) {\r\n            delay = manifest.minimumUpdatePeriod;\r\n        }\r\n        return isNaN(delay) ? delay : Math.max(delay - latencyOfLastUpdate, 1);\r\n    }\r\n\r\n    function getRepresentationCount(adaptation) {\r\n        return adaptation && Array.isArray(adaptation.Representation_asArray) ? adaptation.Representation_asArray.length : 0;\r\n    }\r\n\r\n    function getBitrateListForAdaptation(realAdaptation) {\r\n        const processedRealAdaptation = processAdaptation(realAdaptation);\r\n        const realRepresentations = processedRealAdaptation && Array.isArray(processedRealAdaptation.Representation_asArray) ? processedRealAdaptation.Representation_asArray : [];\r\n\r\n        return realRepresentations.map((realRepresentation) => {\r\n            return {\r\n                bandwidth: realRepresentation.bandwidth,\r\n                width: realRepresentation.width || 0,\r\n                height: realRepresentation.height || 0,\r\n                scanType: realRepresentation.scanType || null,\r\n                id: realRepresentation.id || null\r\n            };\r\n        });\r\n    }\r\n\r\n    function getEssentialPropertiesForRepresentation(realRepresentation) {\r\n        if (!realRepresentation || !realRepresentation.EssentialProperty_asArray || !realRepresentation.EssentialProperty_asArray.length) return null;\r\n\r\n        return realRepresentation.EssentialProperty_asArray.map((prop) => {\r\n            return {\r\n                schemeIdUri: prop.schemeIdUri,\r\n                value: prop.value\r\n            };\r\n        });\r\n    }\r\n\r\n    function getRepresentationFor(index, adaptation) {\r\n        return adaptation && adaptation.Representation_asArray && adaptation.Representation_asArray.length > 0 &&\r\n        isInteger(index) ? adaptation.Representation_asArray[index] : null;\r\n    }\r\n\r\n    function getRealAdaptationFor(voAdaptation) {\r\n        if (voAdaptation && voAdaptation.period && isInteger(voAdaptation.period.index)) {\r\n            const periodArray = voAdaptation.period.mpd.manifest.Period_asArray[voAdaptation.period.index];\r\n            if (periodArray && periodArray.AdaptationSet_asArray && isInteger(voAdaptation.index)) {\r\n                return processAdaptation(periodArray.AdaptationSet_asArray[voAdaptation.index]);\r\n            }\r\n        }\r\n    }\r\n\r\n    function getRepresentationsForAdaptation(voAdaptation) {\r\n        const voRepresentations = [];\r\n        const processedRealAdaptation = getRealAdaptationFor(voAdaptation);\r\n        let segmentInfo,\r\n            baseUrl;\r\n\r\n        if (processedRealAdaptation && processedRealAdaptation.Representation_asArray) {\r\n            // TODO: TO BE REMOVED. We should get just the baseUrl elements that affects to the representations\r\n            // that we are processing. Making it works properly will require much further changes and given\r\n            // parsing base Urls parameters is needed for our ultra low latency examples, we will\r\n            // keep this \"tricky\" code until the real (and good) solution comes\r\n            if (voAdaptation && voAdaptation.period && isInteger(voAdaptation.period.index)) {\r\n                const baseUrls = getBaseURLsFromElement(voAdaptation.period.mpd.manifest);\r\n                if (baseUrls) {\r\n                    baseUrl = baseUrls[0];\r\n                }\r\n            }\r\n            for (let i = 0, len = processedRealAdaptation.Representation_asArray.length; i < len; ++i) {\r\n                const realRepresentation = processedRealAdaptation.Representation_asArray[i];\r\n                const voRepresentation = new Representation();\r\n                voRepresentation.index = i;\r\n                voRepresentation.adaptation = voAdaptation;\r\n\r\n                if (realRepresentation.hasOwnProperty(DashConstants.ID)) {\r\n                    voRepresentation.id = realRepresentation.id;\r\n                }\r\n                if (realRepresentation.hasOwnProperty(DashConstants.CODECS)) {\r\n                    voRepresentation.codecs = realRepresentation.codecs;\r\n                }\r\n                if (realRepresentation.hasOwnProperty(DashConstants.CODEC_PRIVATE_DATA)) {\r\n                    voRepresentation.codecPrivateData = realRepresentation.codecPrivateData;\r\n                }\r\n                if (realRepresentation.hasOwnProperty(DashConstants.BANDWITH)) {\r\n                    voRepresentation.bandwidth = realRepresentation.bandwidth;\r\n                }\r\n                if (realRepresentation.hasOwnProperty(DashConstants.WIDTH)) {\r\n                    voRepresentation.width = realRepresentation.width;\r\n                }\r\n                if (realRepresentation.hasOwnProperty(DashConstants.HEIGHT)) {\r\n                    voRepresentation.height = realRepresentation.height;\r\n                }\r\n                if (realRepresentation.hasOwnProperty(DashConstants.SCAN_TYPE)) {\r\n                    voRepresentation.scanType = realRepresentation.scanType;\r\n                }\r\n                if (realRepresentation.hasOwnProperty(DashConstants.MAX_PLAYOUT_RATE)) {\r\n                    voRepresentation.maxPlayoutRate = realRepresentation.maxPlayoutRate;\r\n                }\r\n\r\n                if (realRepresentation.hasOwnProperty(DashConstants.SEGMENT_BASE)) {\r\n                    segmentInfo = realRepresentation.SegmentBase;\r\n                    voRepresentation.segmentInfoType = DashConstants.SEGMENT_BASE;\r\n                } else if (realRepresentation.hasOwnProperty(DashConstants.SEGMENT_LIST)) {\r\n                    segmentInfo = realRepresentation.SegmentList;\r\n\r\n                    if (segmentInfo.hasOwnProperty(DashConstants.SEGMENT_TIMELINE)) {\r\n                        voRepresentation.segmentInfoType = DashConstants.SEGMENT_TIMELINE;\r\n                    } else {\r\n                        voRepresentation.segmentInfoType = DashConstants.SEGMENT_LIST;\r\n                    }\r\n                } else if (realRepresentation.hasOwnProperty(DashConstants.SEGMENT_TEMPLATE)) {\r\n                    segmentInfo = realRepresentation.SegmentTemplate;\r\n\r\n                    if (segmentInfo.hasOwnProperty(DashConstants.SEGMENT_TIMELINE)) {\r\n                        voRepresentation.segmentInfoType = DashConstants.SEGMENT_TIMELINE;\r\n                    } else {\r\n                        voRepresentation.segmentInfoType = DashConstants.SEGMENT_TEMPLATE;\r\n                    }\r\n\r\n                    if (segmentInfo.hasOwnProperty(DashConstants.INITIALIZATION_MINUS)) {\r\n                        voRepresentation.initialization = segmentInfo.initialization.split('$Bandwidth$')\r\n                            .join(realRepresentation.bandwidth).split('$RepresentationID$').join(realRepresentation.id);\r\n                    }\r\n                } else {\r\n                    voRepresentation.segmentInfoType = DashConstants.BASE_URL;\r\n                }\r\n\r\n                voRepresentation.essentialProperties = getEssentialPropertiesForRepresentation(realRepresentation);\r\n\r\n                if (segmentInfo) {\r\n                    if (segmentInfo.hasOwnProperty(DashConstants.INITIALIZATION)) {\r\n                        const initialization = segmentInfo.Initialization;\r\n\r\n                        if (initialization.hasOwnProperty(DashConstants.SOURCE_URL)) {\r\n                            voRepresentation.initialization = initialization.sourceURL;\r\n                        }\r\n\r\n                        if (initialization.hasOwnProperty(DashConstants.RANGE)) {\r\n                            voRepresentation.range = initialization.range;\r\n                            // initialization source url will be determined from\r\n                            // BaseURL when resolved at load time.\r\n                        }\r\n                    } else if (realRepresentation.hasOwnProperty(DashConstants.MIME_TYPE) && getIsTextTrack(realRepresentation.mimeType)) {\r\n                        voRepresentation.range = 0;\r\n                    }\r\n\r\n                    if (segmentInfo.hasOwnProperty(DashConstants.TIMESCALE)) {\r\n                        voRepresentation.timescale = segmentInfo.timescale;\r\n                    }\r\n                    if (segmentInfo.hasOwnProperty(DashConstants.DURATION)) {\r\n                        // TODO according to the spec @maxSegmentDuration specifies the maximum duration of any Segment in any Representation in the Media Presentation\r\n                        // It is also said that for a SegmentTimeline any @d value shall not exceed the value of MPD@maxSegmentDuration, but nothing is said about\r\n                        // SegmentTemplate @duration attribute. We need to find out if @maxSegmentDuration should be used instead of calculated duration if the the duration\r\n                        // exceeds @maxSegmentDuration\r\n                        voRepresentation.segmentDuration = segmentInfo.duration / voRepresentation.timescale;\r\n                    } else if (realRepresentation.hasOwnProperty(DashConstants.SEGMENT_TEMPLATE)) {\r\n                        segmentInfo = realRepresentation.SegmentTemplate;\r\n\r\n                        if (segmentInfo.hasOwnProperty(DashConstants.SEGMENT_TIMELINE)) {\r\n                            voRepresentation.segmentDuration = calcSegmentDuration(segmentInfo.SegmentTimeline) / voRepresentation.timescale;\r\n                        }\r\n                    }\r\n                    if (segmentInfo.hasOwnProperty(DashConstants.MEDIA)) {\r\n                        voRepresentation.media = segmentInfo.media;\r\n                    }\r\n                    if (segmentInfo.hasOwnProperty(DashConstants.START_NUMBER)) {\r\n                        voRepresentation.startNumber = segmentInfo.startNumber;\r\n                    }\r\n                    if (segmentInfo.hasOwnProperty(DashConstants.INDEX_RANGE)) {\r\n                        voRepresentation.indexRange = segmentInfo.indexRange;\r\n                    }\r\n                    if (segmentInfo.hasOwnProperty(DashConstants.PRESENTATION_TIME_OFFSET)) {\r\n                        voRepresentation.presentationTimeOffset = segmentInfo.presentationTimeOffset / voRepresentation.timescale;\r\n                    }\r\n                    if (segmentInfo.hasOwnProperty(DashConstants.AVAILABILITY_TIME_OFFSET)) {\r\n                        voRepresentation.availabilityTimeOffset = segmentInfo.availabilityTimeOffset;\r\n                    } else if (baseUrl && baseUrl.availabilityTimeOffset !== undefined) {\r\n                        voRepresentation.availabilityTimeOffset = baseUrl.availabilityTimeOffset;\r\n                    }\r\n                    if (segmentInfo.hasOwnProperty(DashConstants.AVAILABILITY_TIME_COMPLETE)) {\r\n                        voRepresentation.availabilityTimeComplete = segmentInfo.availabilityTimeComplete !== 'false';\r\n                    } else if (baseUrl && baseUrl.availabilityTimeComplete !== undefined) {\r\n                        voRepresentation.availabilityTimeComplete = baseUrl.availabilityTimeComplete;\r\n                    }\r\n                }\r\n\r\n                voRepresentation.MSETimeOffset = calcMSETimeOffset(voRepresentation);\r\n                voRepresentation.path = [voAdaptation.period.index, voAdaptation.index, i];\r\n                voRepresentations.push(voRepresentation);\r\n            }\r\n        }\r\n\r\n        return voRepresentations;\r\n    }\r\n\r\n    function calcSegmentDuration(segmentTimeline) {\r\n        let s0 = segmentTimeline.S_asArray[0];\r\n        let s1 = segmentTimeline.S_asArray[1];\r\n        return s0.hasOwnProperty('d') ? s0.d : (s1.t - s0.t);\r\n    }\r\n\r\n    function calcMSETimeOffset(representation) {\r\n        // The MSEOffset is offset from AST for media. It is Period@start - presentationTimeOffset\r\n        const presentationOffset = representation.presentationTimeOffset;\r\n        const periodStart = representation.adaptation.period.start;\r\n        return (periodStart - presentationOffset);\r\n    }\r\n\r\n    function getAdaptationsForPeriod(voPeriod) {\r\n        const realPeriod = voPeriod && isInteger(voPeriod.index) ? voPeriod.mpd.manifest.Period_asArray[voPeriod.index] : null;\r\n        const voAdaptations = [];\r\n        let voAdaptationSet,\r\n            realAdaptationSet,\r\n            i;\r\n\r\n        if (realPeriod && realPeriod.AdaptationSet_asArray) {\r\n            for (i = 0; i < realPeriod.AdaptationSet_asArray.length; i++) {\r\n                realAdaptationSet = realPeriod.AdaptationSet_asArray[i];\r\n                voAdaptationSet = new AdaptationSet();\r\n                if (realAdaptationSet.hasOwnProperty(DashConstants.ID)) {\r\n                    voAdaptationSet.id = realAdaptationSet.id;\r\n                }\r\n                voAdaptationSet.index = i;\r\n                voAdaptationSet.period = voPeriod;\r\n\r\n                if (getIsMuxed(realAdaptationSet)) {\r\n                    voAdaptationSet.type = Constants.MUXED;\r\n                } else if (getIsAudio(realAdaptationSet)) {\r\n                    voAdaptationSet.type = Constants.AUDIO;\r\n                } else if (getIsVideo(realAdaptationSet)) {\r\n                    voAdaptationSet.type = Constants.VIDEO;\r\n                } else if (getIsFragmentedText(realAdaptationSet)) {\r\n                    voAdaptationSet.type = Constants.FRAGMENTED_TEXT;\r\n                } else if (getIsImage(realAdaptationSet)) {\r\n                    voAdaptationSet.type = Constants.IMAGE;\r\n                } else {\r\n                    voAdaptationSet.type = Constants.TEXT;\r\n                }\r\n                voAdaptations.push(voAdaptationSet);\r\n            }\r\n        }\r\n\r\n        return voAdaptations;\r\n    }\r\n\r\n    function getRegularPeriods(mpd) {\r\n        const isDynamic = mpd ? getIsDynamic(mpd.manifest) : false;\r\n        const voPeriods = [];\r\n        let realPreviousPeriod = null;\r\n        let realPeriod = null;\r\n        let voPreviousPeriod = null;\r\n        let voPeriod = null;\r\n        let len,\r\n            i;\r\n\r\n        for (i = 0, len = mpd && mpd.manifest && mpd.manifest.Period_asArray ? mpd.manifest.Period_asArray.length : 0; i < len; i++) {\r\n            realPeriod = mpd.manifest.Period_asArray[i];\r\n\r\n            // If the attribute @start is present in the Period, then the\r\n            // Period is a regular Period and the PeriodStart is equal\r\n            // to the value of this attribute.\r\n            if (realPeriod.hasOwnProperty(DashConstants.START)) {\r\n                voPeriod = new Period();\r\n                voPeriod.start = realPeriod.start;\r\n            }\r\n            // If the @start attribute is absent, but the previous Period\r\n            // element contains a @duration attribute then then this new\r\n            // Period is also a regular Period. The start time of the new\r\n            // Period PeriodStart is the sum of the start time of the previous\r\n            // Period PeriodStart and the value of the attribute @duration\r\n            // of the previous Period.\r\n            else if (realPreviousPeriod !== null && realPreviousPeriod.hasOwnProperty(DashConstants.DURATION) && voPreviousPeriod !== null) {\r\n                voPeriod = new Period();\r\n                voPeriod.start = parseFloat((voPreviousPeriod.start + voPreviousPeriod.duration).toFixed(5));\r\n            }\r\n            // If (i) @start attribute is absent, and (ii) the Period element\r\n            // is the first in the MPD, and (iii) the MPD@type is 'static',\r\n            // then the PeriodStart time shall be set to zero.\r\n            else if (i === 0 && !isDynamic) {\r\n                voPeriod = new Period();\r\n                voPeriod.start = 0;\r\n            }\r\n\r\n            // The Period extends until the PeriodStart of the next Period.\r\n            // The difference between the PeriodStart time of a Period and\r\n            // the PeriodStart time of the following Period.\r\n            if (voPreviousPeriod !== null && isNaN(voPreviousPeriod.duration)) {\r\n                if (voPeriod !== null) {\r\n                    voPreviousPeriod.duration = parseFloat((voPeriod.start - voPreviousPeriod.start).toFixed(5));\r\n                } else {\r\n                    logger.warn('First period duration could not be calculated because lack of start and duration period properties. This will cause timing issues during playback');\r\n                }\r\n            }\r\n\r\n            if (voPeriod !== null) {\r\n                voPeriod.id = getPeriodId(realPeriod, i);\r\n                voPeriod.index = i;\r\n                voPeriod.mpd = mpd;\r\n\r\n                if (realPeriod.hasOwnProperty(DashConstants.DURATION)) {\r\n                    voPeriod.duration = realPeriod.duration;\r\n                }\r\n\r\n                voPeriods.push(voPeriod);\r\n                realPreviousPeriod = realPeriod;\r\n                voPreviousPeriod = voPeriod;\r\n            }\r\n\r\n            realPeriod = null;\r\n            voPeriod = null;\r\n        }\r\n\r\n        if (voPeriods.length === 0) {\r\n            return voPeriods;\r\n        }\r\n\r\n        // The last Period extends until the end of the Media Presentation.\r\n        // The difference between the PeriodStart time of the last Period\r\n        // and the mpd duration\r\n        if (voPreviousPeriod !== null && isNaN(voPreviousPeriod.duration)) {\r\n            voPreviousPeriod.duration = parseFloat((getEndTimeForLastPeriod(voPreviousPeriod) - voPreviousPeriod.start).toFixed(5));\r\n        }\r\n\r\n        return voPeriods;\r\n    }\r\n\r\n    function getPeriodId(realPeriod, i) {\r\n        if (!realPeriod) {\r\n            throw new Error('Period cannot be null or undefined');\r\n        }\r\n\r\n        let id = Period.DEFAULT_ID + '_' + i;\r\n\r\n        if (realPeriod.hasOwnProperty(DashConstants.ID) && realPeriod.id.length > 0 && realPeriod.id !== '__proto__') {\r\n            id = realPeriod.id;\r\n        }\r\n\r\n        return id;\r\n    }\r\n\r\n    function getMpd(manifest) {\r\n        const mpd = new Mpd();\r\n\r\n        if (manifest) {\r\n            mpd.manifest = manifest;\r\n\r\n            if (manifest.hasOwnProperty(DashConstants.AVAILABILITY_START_TIME)) {\r\n                mpd.availabilityStartTime = new Date(manifest.availabilityStartTime.getTime());\r\n            } else {\r\n                if (manifest.loadedTime) {\r\n                    mpd.availabilityStartTime = new Date(manifest.loadedTime.getTime());\r\n                }\r\n            }\r\n\r\n            if (manifest.hasOwnProperty(DashConstants.AVAILABILITY_END_TIME)) {\r\n                mpd.availabilityEndTime = new Date(manifest.availabilityEndTime.getTime());\r\n            }\r\n\r\n            if (manifest.hasOwnProperty(DashConstants.MINIMUM_UPDATE_PERIOD)) {\r\n                mpd.minimumUpdatePeriod = manifest.minimumUpdatePeriod;\r\n            }\r\n\r\n            if (manifest.hasOwnProperty(DashConstants.MEDIA_PRESENTATION_DURATION)) {\r\n                mpd.mediaPresentationDuration = manifest.mediaPresentationDuration;\r\n            }\r\n\r\n            if (manifest.hasOwnProperty(DashConstants.SUGGESTED_PRESENTATION_DELAY)) {\r\n                mpd.suggestedPresentationDelay = manifest.suggestedPresentationDelay;\r\n            }\r\n\r\n            if (manifest.hasOwnProperty(DashConstants.TIMESHIFT_BUFFER_DEPTH)) {\r\n                mpd.timeShiftBufferDepth = manifest.timeShiftBufferDepth;\r\n            }\r\n\r\n            if (manifest.hasOwnProperty(DashConstants.MAX_SEGMENT_DURATION)) {\r\n                mpd.maxSegmentDuration = manifest.maxSegmentDuration;\r\n            }\r\n        }\r\n\r\n        return mpd;\r\n    }\r\n\r\n    function checkConfig() {\r\n        if (!errHandler || !errHandler.hasOwnProperty('error')) {\r\n            throw new Error(Constants.MISSING_CONFIG_ERROR);\r\n        }\r\n    }\r\n\r\n    function getEndTimeForLastPeriod(voPeriod) {\r\n        checkConfig();\r\n        const isDynamic = getIsDynamic(voPeriod.mpd.manifest);\r\n\r\n        let periodEnd;\r\n        if (voPeriod.mpd.manifest.mediaPresentationDuration) {\r\n            periodEnd = voPeriod.mpd.manifest.mediaPresentationDuration;\r\n        } else if (voPeriod.duration) {\r\n            periodEnd = voPeriod.duration;\r\n        } else if (isDynamic) {\r\n            periodEnd = Number.POSITIVE_INFINITY;\r\n        } else {\r\n            errHandler.error(new DashJSError(Errors.MANIFEST_ERROR_ID_PARSE_CODE, 'Must have @mediaPresentationDuration on MPD or an explicit @duration on the last period.', voPeriod));\r\n        }\r\n\r\n        return periodEnd;\r\n    }\r\n\r\n    function getEventsForPeriod(period) {\r\n        const manifest = period && period.mpd && period.mpd.manifest ? period.mpd.manifest : null;\r\n        const periodArray = manifest ? manifest.Period_asArray : null;\r\n        const eventStreams = periodArray && period && isInteger(period.index) ? periodArray[period.index].EventStream_asArray : null;\r\n        const events = [];\r\n        let i,\r\n            j;\r\n\r\n        if (eventStreams) {\r\n            for (i = 0; i < eventStreams.length; i++) {\r\n                const eventStream = new EventStream();\r\n                eventStream.period = period;\r\n                eventStream.timescale = 1;\r\n\r\n                if (eventStreams[i].hasOwnProperty(Constants.SCHEME_ID_URI)) {\r\n                    eventStream.schemeIdUri = eventStreams[i][Constants.SCHEME_ID_URI];\r\n                } else {\r\n                    throw new Error('Invalid EventStream. SchemeIdUri has to be set');\r\n                }\r\n                if (eventStreams[i].hasOwnProperty(DashConstants.TIMESCALE)) {\r\n                    eventStream.timescale = eventStreams[i][DashConstants.TIMESCALE];\r\n                }\r\n                if (eventStreams[i].hasOwnProperty(DashConstants.VALUE)) {\r\n                    eventStream.value = eventStreams[i][DashConstants.VALUE];\r\n                }\r\n                if (eventStreams[i].hasOwnProperty(DashConstants.PRESENTATION_TIME_OFFSET)) {\r\n                    eventStream.presentationTimeOffset = eventStreams[i][DashConstants.PRESENTATION_TIME_OFFSET];\r\n                }\r\n                for (j = 0; eventStreams[i].Event_asArray && j < eventStreams[i].Event_asArray.length; j++) {\r\n                    const currentMpdEvent = eventStreams[i].Event_asArray[j];\r\n                    const event = new Event();\r\n                    event.presentationTime = 0;\r\n                    event.eventStream = eventStream;\r\n\r\n                    if (currentMpdEvent.hasOwnProperty(DashConstants.PRESENTATION_TIME)) {\r\n                        event.presentationTime = currentMpdEvent.presentationTime;\r\n                        const presentationTimeOffset = eventStream.presentationTimeOffset ? eventStream.presentationTimeOffset / eventStream.timescale : 0;\r\n                        event.calculatedPresentationTime = event.presentationTime / eventStream.timescale + period.start - presentationTimeOffset;\r\n                    }\r\n                    if (currentMpdEvent.hasOwnProperty(DashConstants.DURATION)) {\r\n                        event.duration = currentMpdEvent.duration / eventStream.timescale;\r\n                    }\r\n                    if (currentMpdEvent.hasOwnProperty(DashConstants.ID)) {\r\n                        event.id = currentMpdEvent.id;\r\n                    }\r\n\r\n                    if (currentMpdEvent.Signal && currentMpdEvent.Signal.Binary) {\r\n                        // toString is used to manage both regular and namespaced tags\r\n                        event.messageData = BASE64.decodeArray(currentMpdEvent.Signal.Binary.toString());\r\n                    } else {\r\n                        // From Cor.1: 'NOTE: this attribute is an alternative\r\n                        // to specifying a complete XML element(s) in the Event.\r\n                        // It is useful when an event leans itself to a compact\r\n                        // string representation'.\r\n                        event.messageData =\r\n                            currentMpdEvent.messageData ||\r\n                            currentMpdEvent.__text;\r\n                    }\r\n\r\n                    events.push(event);\r\n                }\r\n            }\r\n        }\r\n\r\n        return events;\r\n    }\r\n\r\n    function getEventStreams(inbandStreams, representation) {\r\n        const eventStreams = [];\r\n        let i;\r\n\r\n        if (!inbandStreams) return eventStreams;\r\n\r\n        for (i = 0; i < inbandStreams.length; i++) {\r\n            const eventStream = new EventStream();\r\n            eventStream.timescale = 1;\r\n            eventStream.representation = representation;\r\n\r\n            if (inbandStreams[i].hasOwnProperty(Constants.SCHEME_ID_URI)) {\r\n                eventStream.schemeIdUri = inbandStreams[i].schemeIdUri;\r\n            } else {\r\n                throw new Error('Invalid EventStream. SchemeIdUri has to be set');\r\n            }\r\n            if (inbandStreams[i].hasOwnProperty(DashConstants.TIMESCALE)) {\r\n                eventStream.timescale = inbandStreams[i].timescale;\r\n            }\r\n            if (inbandStreams[i].hasOwnProperty(DashConstants.VALUE)) {\r\n                eventStream.value = inbandStreams[i].value;\r\n            }\r\n            eventStreams.push(eventStream);\r\n        }\r\n\r\n        return eventStreams;\r\n    }\r\n\r\n    function getEventStreamForAdaptationSet(manifest, adaptation) {\r\n        let inbandStreams,\r\n            periodArray,\r\n            adaptationArray;\r\n\r\n        if (manifest && manifest.Period_asArray && adaptation && adaptation.period && isInteger(adaptation.period.index)) {\r\n            periodArray = manifest.Period_asArray[adaptation.period.index];\r\n            if (periodArray && periodArray.AdaptationSet_asArray && isInteger(adaptation.index)) {\r\n                adaptationArray = periodArray.AdaptationSet_asArray[adaptation.index];\r\n                if (adaptationArray) {\r\n                    inbandStreams = adaptationArray.InbandEventStream_asArray;\r\n                }\r\n            }\r\n        }\r\n\r\n        return getEventStreams(inbandStreams, null);\r\n    }\r\n\r\n    function getEventStreamForRepresentation(manifest, representation) {\r\n        let inbandStreams,\r\n            periodArray,\r\n            adaptationArray,\r\n            representationArray;\r\n\r\n        if (manifest && manifest.Period_asArray && representation && representation.adaptation && representation.adaptation.period && isInteger(representation.adaptation.period.index)) {\r\n            periodArray = manifest.Period_asArray[representation.adaptation.period.index];\r\n            if (periodArray && periodArray.AdaptationSet_asArray && isInteger(representation.adaptation.index)) {\r\n                adaptationArray = periodArray.AdaptationSet_asArray[representation.adaptation.index];\r\n                if (adaptationArray && adaptationArray.Representation_asArray && isInteger(representation.index)) {\r\n                    representationArray = adaptationArray.Representation_asArray[representation.index];\r\n                    if (representationArray) {\r\n                        inbandStreams = representationArray.InbandEventStream_asArray;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return getEventStreams(inbandStreams, representation);\r\n    }\r\n\r\n    function getUTCTimingSources(manifest) {\r\n        const isDynamic = getIsDynamic(manifest);\r\n        const hasAST = manifest ? manifest.hasOwnProperty(DashConstants.AVAILABILITY_START_TIME) : false;\r\n        const utcTimingsArray = manifest ? manifest.UTCTiming_asArray : null;\r\n        const utcTimingEntries = [];\r\n\r\n        // do not bother synchronizing the clock unless MPD is live,\r\n        // or it is static and has availabilityStartTime attribute\r\n        if ((isDynamic || hasAST)) {\r\n            if (utcTimingsArray) {\r\n                // the order is important here - 23009-1 states that the order\r\n                // in the manifest \"indicates relative preference, first having\r\n                // the highest, and the last the lowest priority\".\r\n                utcTimingsArray.forEach(function (utcTiming) {\r\n                    const entry = new UTCTiming();\r\n\r\n                    if (utcTiming.hasOwnProperty(Constants.SCHEME_ID_URI)) {\r\n                        entry.schemeIdUri = utcTiming.schemeIdUri;\r\n                    } else {\r\n                        // entries of type DescriptorType with no schemeIdUri\r\n                        // are meaningless. let's just ignore this entry and\r\n                        // move on.\r\n                        return;\r\n                    }\r\n\r\n                    // this is (incorrectly) interpreted as a number - schema\r\n                    // defines it as a string\r\n                    if (utcTiming.hasOwnProperty(DashConstants.VALUE)) {\r\n                        entry.value = utcTiming.value.toString();\r\n                    } else {\r\n                        // without a value, there's not a lot we can do with\r\n                        // this entry. let's just ignore this one and move on\r\n                        return;\r\n                    }\r\n\r\n                    // we're not interested in the optional id or any other\r\n                    // attributes which might be attached to the entry\r\n\r\n                    utcTimingEntries.push(entry);\r\n                });\r\n            }\r\n        }\r\n\r\n        return utcTimingEntries;\r\n    }\r\n\r\n    function getBaseURLsFromElement(node) {\r\n        const baseUrls = [];\r\n        // if node.BaseURL_asArray and node.baseUri are undefined entries\r\n        // will be [undefined] which entries.some will just skip\r\n        const entries = node.BaseURL_asArray || [node.baseUri];\r\n        let earlyReturn = false;\r\n\r\n        entries.some(entry => {\r\n            if (entry) {\r\n                const baseUrl = new BaseURL();\r\n                let text = entry.__text || entry;\r\n\r\n                if (urlUtils.isRelative(text)) {\r\n                    // it doesn't really make sense to have relative and\r\n                    // absolute URLs at the same level, or multiple\r\n                    // relative URLs at the same level, so assume we are\r\n                    // done from this level of the MPD\r\n                    earlyReturn = true;\r\n\r\n                    // deal with the specific case where the MPD@BaseURL\r\n                    // is specified and is relative. when no MPD@BaseURL\r\n                    // entries exist, that case is handled by the\r\n                    // [node.baseUri] in the entries definition.\r\n                    if (node.baseUri) {\r\n                        text = urlUtils.resolve(text, node.baseUri);\r\n                    }\r\n                }\r\n\r\n                baseUrl.url = text;\r\n\r\n                // serviceLocation is optional, but we need it in order\r\n                // to blacklist correctly. if it's not available, use\r\n                // anything unique since there's no relationship to any\r\n                // other BaseURL and, in theory, the url should be\r\n                // unique so use this instead.\r\n                if (entry.hasOwnProperty(DashConstants.SERVICE_LOCATION) &&\r\n                    entry.serviceLocation.length) {\r\n                    baseUrl.serviceLocation = entry.serviceLocation;\r\n                } else {\r\n                    baseUrl.serviceLocation = text;\r\n                }\r\n\r\n                if (entry.hasOwnProperty(DashConstants.DVB_PRIORITY)) {\r\n                    baseUrl.dvb_priority = entry[DashConstants.DVB_PRIORITY];\r\n                }\r\n\r\n                if (entry.hasOwnProperty(DashConstants.DVB_WEIGHT)) {\r\n                    baseUrl.dvb_weight = entry[DashConstants.DVB_WEIGHT];\r\n                }\r\n\r\n                if (entry.hasOwnProperty(DashConstants.AVAILABILITY_TIME_OFFSET)) {\r\n                    baseUrl.availabilityTimeOffset = entry[DashConstants.AVAILABILITY_TIME_OFFSET];\r\n                }\r\n\r\n                if (entry.hasOwnProperty(DashConstants.AVAILABILITY_TIME_COMPLETE)) {\r\n                    baseUrl.availabilityTimeComplete = entry[DashConstants.AVAILABILITY_TIME_COMPLETE] !== 'false';\r\n                }\r\n                /* NOTE: byteRange currently unused\r\n                 */\r\n\r\n                baseUrls.push(baseUrl);\r\n\r\n                return earlyReturn;\r\n            }\r\n        });\r\n\r\n        return baseUrls;\r\n    }\r\n\r\n    function getLocation(manifest) {\r\n        if (manifest && manifest.hasOwnProperty(Constants.LOCATION)) {\r\n            // for now, do not support multiple Locations -\r\n            // just set Location to the first Location.\r\n            manifest.Location = manifest.Location_asArray[0];\r\n\r\n            return manifest.Location;\r\n        }\r\n\r\n        // may well be undefined\r\n        return undefined;\r\n    }\r\n\r\n    function getSuggestedPresentationDelay(mpd) {\r\n        return mpd && mpd.hasOwnProperty(DashConstants.SUGGESTED_PRESENTATION_DELAY) ? mpd.suggestedPresentationDelay : null;\r\n    }\r\n\r\n    function getAvailabilityStartTime(mpd) {\r\n        return mpd && mpd.hasOwnProperty(DashConstants.AVAILABILITY_START_TIME) && mpd.availabilityStartTime !== null ? mpd.availabilityStartTime.getTime() : null;\r\n    }\r\n\r\n    function getServiceDescriptions(manifest) {\r\n        const serviceDescriptions = [];\r\n        if (manifest && manifest.hasOwnProperty(DashConstants.SERVICE_DESCRIPTION)) {\r\n            for (const sd of manifest.ServiceDescription_asArray) {\r\n                // Convert each of the properties defined in\r\n                let id, schemeIdUri, latency, playbackRate;\r\n                for (const prop in sd) {\r\n                    if (sd.hasOwnProperty(prop)) {\r\n                        if (prop === DashConstants.ID) {\r\n                            id = sd[prop];\r\n                        } else if (prop === DashConstants.SERVICE_DESCRIPTION_SCOPE) {\r\n                            schemeIdUri = sd[prop].schemeIdUri;\r\n                        } else if (prop === DashConstants.SERVICE_DESCRIPTION_LATENCY) {\r\n                            latency = {\r\n                                target: sd[prop].target,\r\n                                max: sd[prop].max,\r\n                                min: sd[prop].min\r\n                            };\r\n                        } else if (prop === DashConstants.SERVICE_DESCRIPTION_PLAYBACK_RATE) {\r\n                            playbackRate = {\r\n                                max: sd[prop].max,\r\n                                min: sd[prop].min\r\n                            };\r\n                        }\r\n                    }\r\n                }\r\n                // we have a ServiceDescription for low latency. Add it if it really has parameters defined\r\n                if (schemeIdUri === Constants.SERVICE_DESCRIPTION_LL_SCHEME && (latency || playbackRate)) {\r\n                    serviceDescriptions.push({\r\n                        id,\r\n                        schemeIdUri,\r\n                        latency,\r\n                        playbackRate\r\n                    });\r\n                }\r\n            }\r\n        }\r\n\r\n        return serviceDescriptions;\r\n    }\r\n\r\n    function getSupplementalPropperties(adaptation) {\r\n        const supplementalProperties = {};\r\n\r\n        if (adaptation && adaptation.hasOwnProperty(DashConstants.SUPPLEMENTAL_PROPERTY)) {\r\n            for (const sp of adaptation.SupplementalProperty_asArray) {\r\n                if (sp.hasOwnProperty(Constants.SCHEME_ID_URI) && sp.hasOwnProperty(DashConstants.VALUE)) {\r\n                    supplementalProperties[sp[Constants.SCHEME_ID_URI]] = sp[DashConstants.VALUE];\r\n                }\r\n            }\r\n        }\r\n        return supplementalProperties;\r\n    }\r\n\r\n    function setConfig(config) {\r\n        if (!config) return;\r\n\r\n        if (config.errHandler) {\r\n            errHandler = config.errHandler;\r\n        }\r\n\r\n        if (config.BASE64) {\r\n            BASE64 = config.BASE64;\r\n        }\r\n    }\r\n\r\n    instance = {\r\n        getIsTypeOf: getIsTypeOf,\r\n        getIsTextTrack: getIsTextTrack,\r\n        getLanguageForAdaptation: getLanguageForAdaptation,\r\n        getViewpointForAdaptation: getViewpointForAdaptation,\r\n        getRolesForAdaptation: getRolesForAdaptation,\r\n        getAccessibilityForAdaptation: getAccessibilityForAdaptation,\r\n        getAudioChannelConfigurationForAdaptation: getAudioChannelConfigurationForAdaptation,\r\n        getAudioChannelConfigurationForRepresentation: getAudioChannelConfigurationForRepresentation,\r\n        getAdaptationForIndex: getAdaptationForIndex,\r\n        getIndexForAdaptation: getIndexForAdaptation,\r\n        getAdaptationForId: getAdaptationForId,\r\n        getAdaptationsForType: getAdaptationsForType,\r\n        getCodec: getCodec,\r\n        getMimeType: getMimeType,\r\n        getKID: getKID,\r\n        getLabelsForAdaptation: getLabelsForAdaptation,\r\n        getContentProtectionData: getContentProtectionData,\r\n        getIsDynamic: getIsDynamic,\r\n        hasProfile: hasProfile,\r\n        getDuration: getDuration,\r\n        getBandwidth: getBandwidth,\r\n        getManifestUpdatePeriod: getManifestUpdatePeriod,\r\n        getRepresentationCount: getRepresentationCount,\r\n        getBitrateListForAdaptation: getBitrateListForAdaptation,\r\n        getRepresentationFor: getRepresentationFor,\r\n        getRepresentationsForAdaptation: getRepresentationsForAdaptation,\r\n        getAdaptationsForPeriod: getAdaptationsForPeriod,\r\n        getRegularPeriods: getRegularPeriods,\r\n        getMpd: getMpd,\r\n        getEventsForPeriod: getEventsForPeriod,\r\n        getEventStreamForAdaptationSet: getEventStreamForAdaptationSet,\r\n        getEventStreamForRepresentation: getEventStreamForRepresentation,\r\n        getUTCTimingSources: getUTCTimingSources,\r\n        getBaseURLsFromElement: getBaseURLsFromElement,\r\n        getRepresentationSortFunction: getRepresentationSortFunction,\r\n        getLocation: getLocation,\r\n        getSuggestedPresentationDelay: getSuggestedPresentationDelay,\r\n        getAvailabilityStartTime: getAvailabilityStartTime,\r\n        getServiceDescriptions: getServiceDescriptions,\r\n        getSupplementalPropperties: getSupplementalPropperties,\r\n        setConfig: setConfig\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\nDashManifestModel.__dashjs_factory_name = 'DashManifestModel';\r\nexport default FactoryMaker.getSingletonFactory(DashManifestModel);\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\nimport ObjectIron from './objectiron';\r\nimport X2JS from '../../../externals/xml2json';\r\nimport StringMatcher from './matchers/StringMatcher';\r\nimport DurationMatcher from './matchers/DurationMatcher';\r\nimport DateTimeMatcher from './matchers/DateTimeMatcher';\r\nimport NumericMatcher from './matchers/NumericMatcher';\r\nimport RepresentationBaseValuesMap from './maps/RepresentationBaseValuesMap';\r\nimport SegmentValuesMap from './maps/SegmentValuesMap';\r\n\r\nfunction DashParser(config) {\r\n\r\n    config = config || {};\r\n    const context = this.context;\r\n    const debug = config.debug;\r\n\r\n    let instance,\r\n        logger,\r\n        matchers,\r\n        converter,\r\n        objectIron;\r\n\r\n    function setup() {\r\n        logger = debug.getLogger(instance);\r\n        matchers = [\r\n            new DurationMatcher(),\r\n            new DateTimeMatcher(),\r\n            new NumericMatcher(),\r\n            new StringMatcher()   // last in list to take precedence over NumericMatcher\r\n        ];\r\n\r\n        converter = new X2JS({\r\n            escapeMode:         false,\r\n            attributePrefix:    '',\r\n            arrayAccessForm:    'property',\r\n            emptyNodeForm:      'object',\r\n            stripWhitespaces:   false,\r\n            enableToStringFunc: true,\r\n            ignoreRoot:         true,\r\n            matchers:           matchers\r\n        });\r\n\r\n        objectIron = ObjectIron(context).create({\r\n            adaptationset: new RepresentationBaseValuesMap(),\r\n            period: new SegmentValuesMap()\r\n        });\r\n    }\r\n\r\n    function getMatchers() {\r\n        return matchers;\r\n    }\r\n\r\n    function getIron() {\r\n        return objectIron;\r\n    }\r\n\r\n    function parse(data) {\r\n        let manifest;\r\n        const startTime = window.performance.now();\r\n\r\n        manifest = converter.xml_str2json(data);\r\n\r\n        if (!manifest) {\r\n            throw new Error('parsing the manifest failed');\r\n        }\r\n\r\n        const jsonTime = window.performance.now();\r\n        objectIron.run(manifest);\r\n\r\n        const ironedTime = window.performance.now();\r\n        logger.info('Parsing complete: ( xml2json: ' + (jsonTime - startTime).toPrecision(3) + 'ms, objectiron: ' + (ironedTime - jsonTime).toPrecision(3) + 'ms, total: ' + ((ironedTime - startTime) / 1000).toPrecision(3) + 's)');\r\n\r\n        manifest.protocol = 'DASH';\r\n\r\n        return manifest;\r\n    }\r\n\r\n    instance = {\r\n        parse: parse,\r\n        getMatchers: getMatchers,\r\n        getIron: getIron\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\nDashParser.__dashjs_factory_name = 'DashParser';\r\nexport default FactoryMaker.getClassFactory(DashParser);\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @classdesc a property belonging to a MapNode\r\n * @ignore\r\n */\r\n\r\nclass CommonProperty {\r\n    constructor(name) {\r\n        const getDefaultMergeForName =\r\n              (n) => n && n.length && n.charAt(0) === n.charAt(0).toUpperCase();\r\n\r\n        this._name = name;\r\n        this._merge = getDefaultMergeForName(name);\r\n    }\r\n\r\n    get name() {\r\n        return this._name;\r\n    }\r\n\r\n    get merge() {\r\n        return this._merge;\r\n    }\r\n}\r\n\r\nexport default CommonProperty;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @classdesc a node at some level in a ValueMap\r\n */\r\nimport CommonProperty from './CommonProperty';\r\n\r\nclass MapNode {\r\n    constructor(name, properties, children) {\r\n        this._name = name || '';\r\n        this._properties = [];\r\n        this._children = children || [];\r\n\r\n        if (Array.isArray(properties)) {\r\n            properties.forEach(p => {\r\n                this._properties.push(new CommonProperty(p));\r\n            });\r\n        }\r\n    }\r\n\r\n    get name() {\r\n        return this._name;\r\n    }\r\n\r\n    get children() {\r\n        return this._children;\r\n    }\r\n\r\n    get properties() {\r\n        return this._properties;\r\n    }\r\n}\r\n\r\nexport default MapNode;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @classdesc a RepresentationBaseValuesMap type for input to objectiron\r\n */\r\nimport MapNode from './MapNode';\r\nimport DashConstants from '../../constants/DashConstants';\r\n\r\nclass RepresentationBaseValuesMap extends MapNode {\r\n    constructor() {\r\n        const commonProperties = [\r\n            DashConstants.PROFILES, DashConstants.WIDTH, DashConstants.HEIGHT, DashConstants.SAR, DashConstants.FRAMERATE, DashConstants.AUDIO_SAMPLING_RATE, DashConstants.MIME_TYPE, DashConstants.SEGMENT_PROFILES, DashConstants.CODECS, DashConstants.MAXIMUM_SAP_PERIOD, DashConstants.START_WITH_SAP, DashConstants.MAX_PLAYOUT_RATE, DashConstants.CODING_DEPENDENCY, DashConstants.SCAN_TYPE, DashConstants.FRAME_PACKING, DashConstants.AUDIO_CHANNEL_CONFIGURATION, DashConstants.CONTENT_PROTECTION, DashConstants.ESSENTIAL_PROPERTY, DashConstants.SUPPLEMENTAL_PROPERTY, DashConstants.INBAND_EVENT_STREAM\r\n        ];\r\n\r\n        super(DashConstants.ADAPTATION_SET, commonProperties, [\r\n            new MapNode(DashConstants.REPRESENTATION, commonProperties, [\r\n                new MapNode(DashConstants.SUB_REPRESENTATION, commonProperties)\r\n            ])\r\n        ]);\r\n    }\r\n}\r\n\r\nexport default RepresentationBaseValuesMap;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @classdesc a SegmentValuesMap type for input to objectiron\r\n */\r\nimport MapNode from './MapNode';\r\nimport DashConstants from '../../constants/DashConstants';\r\n\r\nclass SegmentValuesMap extends MapNode {\r\n    constructor() {\r\n        const commonProperties = [\r\n            DashConstants.SEGMENT_BASE, DashConstants.SEGMENT_TEMPLATE, DashConstants.SEGMENT_LIST\r\n        ];\r\n\r\n        super(DashConstants.PERIOD, commonProperties, [\r\n            new MapNode(DashConstants.ADAPTATION_SET, commonProperties, [\r\n                new MapNode(DashConstants.REPRESENTATION, commonProperties)\r\n            ])\r\n        ]);\r\n    }\r\n}\r\n\r\nexport default SegmentValuesMap;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n\r\n/**\r\n * @classdesc a base type for matching and converting types in manifest to\r\n * something more useful\r\n * @ignore\r\n */\r\nclass BaseMatcher {\r\n    constructor(test, converter) {\r\n        this._test = test;\r\n        this._converter = converter;\r\n    }\r\n\r\n    get test() {\r\n        return this._test;\r\n    }\r\n\r\n    get converter() {\r\n        return this._converter;\r\n    }\r\n}\r\n\r\nexport default BaseMatcher;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @classdesc matches and converts xs:datetime to Date\r\n */\r\nimport BaseMatcher from './BaseMatcher';\r\n\r\nconst SECONDS_IN_MIN = 60;\r\nconst MINUTES_IN_HOUR = 60;\r\nconst MILLISECONDS_IN_SECONDS = 1000;\r\n\r\nconst datetimeRegex = /^([0-9]{4})-([0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2})(?::([0-9]*)(\\.[0-9]*)?)?(?:([+-])([0-9]{2})(?::?)([0-9]{2}))?/;\r\n\r\nclass DateTimeMatcher extends BaseMatcher {\r\n    constructor() {\r\n        super(\r\n            attr => datetimeRegex.test(attr.value),\r\n            str => {\r\n                const match = datetimeRegex.exec(str);\r\n                let utcDate;\r\n\r\n                // If the string does not contain a timezone offset different browsers can interpret it either\r\n                // as UTC or as a local time so we have to parse the string manually to normalize the given date value for\r\n                // all browsers\r\n                utcDate = Date.UTC(\r\n                    parseInt(match[1], 10),\r\n                    parseInt(match[2], 10) - 1, // months start from zero\r\n                    parseInt(match[3], 10),\r\n                    parseInt(match[4], 10),\r\n                    parseInt(match[5], 10),\r\n                    (match[6] && parseInt(match[6], 10) || 0),\r\n                    (match[7] && parseFloat(match[7]) * MILLISECONDS_IN_SECONDS) || 0);\r\n\r\n                // If the date has timezone offset take it into account as well\r\n                if (match[9] && match[10]) {\r\n                    const timezoneOffset = parseInt(match[9], 10) * MINUTES_IN_HOUR + parseInt(match[10], 10);\r\n                    utcDate += (match[8] === '+' ? -1 : +1) * timezoneOffset * SECONDS_IN_MIN * MILLISECONDS_IN_SECONDS;\r\n                }\r\n\r\n                return new Date(utcDate);\r\n            }\r\n        );\r\n    }\r\n}\r\n\r\nexport default DateTimeMatcher;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @classdesc matches and converts xs:duration to seconds\r\n */\r\nimport BaseMatcher from './BaseMatcher';\r\nimport Constants from '../../../streaming/constants/Constants';\r\nimport DashConstants from '../../constants/DashConstants';\r\n\r\nconst durationRegex = /^([-])?P(([\\d.]*)Y)?(([\\d.]*)M)?(([\\d.]*)D)?T?(([\\d.]*)H)?(([\\d.]*)M)?(([\\d.]*)S)?/;\r\n\r\nconst SECONDS_IN_YEAR = 365 * 24 * 60 * 60;\r\nconst SECONDS_IN_MONTH = 30 * 24 * 60 * 60;\r\nconst SECONDS_IN_DAY = 24 * 60 * 60;\r\nconst SECONDS_IN_HOUR = 60 * 60;\r\nconst SECONDS_IN_MIN = 60;\r\n\r\nclass DurationMatcher extends BaseMatcher {\r\n    constructor() {\r\n        super(\r\n            attr => {\r\n                const attributeList = [\r\n                    DashConstants.MIN_BUFFER_TIME, DashConstants.MEDIA_PRESENTATION_DURATION,\r\n                    DashConstants.MINIMUM_UPDATE_PERIOD, DashConstants.TIMESHIFT_BUFFER_DEPTH, DashConstants.MAX_SEGMENT_DURATION,\r\n                    DashConstants.MAX_SUBSEGMENT_DURATION, DashConstants.SUGGESTED_PRESENTATION_DELAY, DashConstants.START,\r\n                    Constants.START_TIME, DashConstants.DURATION\r\n                ];\r\n                const len = attributeList.length;\r\n\r\n                for (let i = 0; i < len; i++) {\r\n                    if (attr.nodeName === attributeList[i]) {\r\n                        return durationRegex.test(attr.value);\r\n                    }\r\n                }\r\n\r\n                return false;\r\n            },\r\n            str => {\r\n                //str = \"P10Y10M10DT10H10M10.1S\";\r\n                const match = durationRegex.exec(str);\r\n                let result = (parseFloat(match[3] || 0) * SECONDS_IN_YEAR +\r\n                    parseFloat(match[5] || 0) * SECONDS_IN_MONTH +\r\n                    parseFloat(match[7] || 0) * SECONDS_IN_DAY +\r\n                    parseFloat(match[9] || 0) * SECONDS_IN_HOUR +\r\n                    parseFloat(match[11] || 0) * SECONDS_IN_MIN +\r\n                    parseFloat(match[13] || 0));\r\n\r\n                if (match[1] !== undefined) {\r\n                    result = -result;\r\n                }\r\n\r\n                return result;\r\n            }\r\n        );\r\n    }\r\n}\r\n\r\nexport default DurationMatcher;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @classdesc Matches and converts xs:numeric to float\r\n */\r\nimport BaseMatcher from './BaseMatcher';\r\n\r\nconst numericRegex = /^[-+]?[0-9]+[.]?[0-9]*([eE][-+]?[0-9]+)?$/;\r\n\r\nclass NumericMatcher extends BaseMatcher {\r\n    constructor() {\r\n        super(\r\n            attr => numericRegex.test(attr.value),\r\n            str => parseFloat(str)\r\n        );\r\n    }\r\n}\r\n\r\nexport default NumericMatcher;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @classdesc Matches and converts xs:string to string, but only for specific attributes on specific nodes\r\n */\r\nimport BaseMatcher from './BaseMatcher';\r\nimport DashConstants from '../../constants/DashConstants';\r\n\r\nclass StringMatcher extends BaseMatcher {\r\n    constructor() {\r\n        super(\r\n            (attr, nodeName) => {\r\n                const stringAttrsInElements = {\r\n                    [DashConstants.MPD]:                            [ DashConstants.ID, DashConstants.PROFILES ],\r\n                    [DashConstants.PERIOD]:                         [ DashConstants.ID ],\r\n                    [DashConstants.BASE_URL]:                       [ DashConstants.SERVICE_LOCATION, DashConstants.BYTE_RANGE ],\r\n                    [DashConstants.SEGMENT_BASE]:                   [ DashConstants.INDEX_RANGE ],\r\n                    [DashConstants.INITIALIZATION]:                 [ DashConstants.RANGE ],\r\n                    [DashConstants.REPRESENTATION_INDEX]:           [ DashConstants.RANGE ],\r\n                    [DashConstants.SEGMENT_LIST]:                   [ DashConstants.INDEX_RANGE ],\r\n                    [DashConstants.BITSTREAM_SWITCHING]:            [ DashConstants.RANGE ],\r\n                    [DashConstants.SEGMENT_URL]:                    [ DashConstants.MEDIA_RANGE, DashConstants.INDEX_RANGE ],\r\n                    [DashConstants.SEGMENT_TEMPLATE]:               [ DashConstants.INDEX_RANGE, DashConstants.MEDIA, DashConstants.INDEX, DashConstants.INITIALIZATION_MINUS, DashConstants.BITSTREAM_SWITCHING_MINUS ],\r\n                    [DashConstants.ASSET_IDENTIFIER]:               [ DashConstants.VALUE, DashConstants.ID ],\r\n                    [DashConstants.EVENT_STREAM]:                   [ DashConstants.VALUE ],\r\n                    [DashConstants.ADAPTATION_SET]:                 [ DashConstants.PROFILES, DashConstants.MIME_TYPE, DashConstants.SEGMENT_PROFILES, DashConstants.CODECS, DashConstants.CONTENT_TYPE ],\r\n                    [DashConstants.FRAME_PACKING]:                  [ DashConstants.VALUE, DashConstants.ID ],\r\n                    [DashConstants.AUDIO_CHANNEL_CONFIGURATION]:    [ DashConstants.VALUE, DashConstants.ID ],\r\n                    [DashConstants.CONTENT_PROTECTION]:             [ DashConstants.VALUE, DashConstants.ID ],\r\n                    [DashConstants.ESSENTIAL_PROPERTY]:             [ DashConstants.VALUE, DashConstants.ID ],\r\n                    [DashConstants.SUPPLEMENTAL_PROPERTY]:          [ DashConstants.VALUE, DashConstants.ID ],\r\n                    [DashConstants.INBAND_EVENT_STREAM]:            [ DashConstants.VALUE, DashConstants.ID ],\r\n                    [DashConstants.ACCESSIBILITY]:                  [ DashConstants.VALUE, DashConstants.ID ],\r\n                    [DashConstants.ROLE]:                           [ DashConstants.VALUE, DashConstants.ID ],\r\n                    [DashConstants.RATING]:                         [ DashConstants.VALUE, DashConstants.ID ],\r\n                    [DashConstants.VIEWPOINT]:                      [ DashConstants.VALUE, DashConstants.ID ],\r\n                    [DashConstants.CONTENT_COMPONENT]:              [ DashConstants.CONTENT_TYPE ],\r\n                    [DashConstants.REPRESENTATION]:                 [ DashConstants.ID, DashConstants.DEPENDENCY_ID, DashConstants.MEDIA_STREAM_STRUCTURE_ID ],\r\n                    [DashConstants.SUBSET]:                         [ DashConstants.ID ],\r\n                    [DashConstants.METRICS]:                        [ DashConstants.METRICS_MINUS ],\r\n                    [DashConstants.REPORTING]:                      [ DashConstants.VALUE, DashConstants.ID ]\r\n                };\r\n                if (stringAttrsInElements.hasOwnProperty(nodeName)) {\r\n                    let attrNames = stringAttrsInElements[nodeName];\r\n                    if (attrNames !== undefined) {\r\n                        return attrNames.indexOf(attr.name) >= 0;\r\n                    } else {\r\n                        return false;\r\n                    }\r\n                }\r\n                return false;\r\n            },\r\n            str => String(str)\r\n        );\r\n    }\r\n}\r\n\r\nexport default StringMatcher;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\n\r\nfunction ObjectIron(mappers) {\r\n\r\n    function mergeValues(parentItem, childItem) {\r\n        for (let name in parentItem) {\r\n            if (!childItem.hasOwnProperty(name)) {\r\n                childItem[name] = parentItem[name];\r\n            }\r\n        }\r\n    }\r\n\r\n    function mapProperties(properties, parent, child) {\r\n        for (let i = 0, len = properties.length; i < len; ++i) {\r\n            const property = properties[i];\r\n\r\n            if (parent[property.name]) {\r\n                if (child[property.name]) {\r\n                    // check to see if we should merge\r\n                    if (property.merge) {\r\n                        const parentValue = parent[property.name];\r\n                        const childValue = child[property.name];\r\n\r\n                        // complex objects; merge properties\r\n                        if (typeof parentValue === 'object' && typeof childValue === 'object') {\r\n                            mergeValues(parentValue, childValue);\r\n                        }\r\n                        // simple objects; merge them together\r\n                        else {\r\n                            child[property.name] = parentValue + childValue;\r\n                        }\r\n                    }\r\n                } else {\r\n                    // just add the property\r\n                    child[property.name] = parent[property.name];\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function mapItem(item, node) {\r\n        for (let i = 0, len = item.children.length; i < len; ++i) {\r\n            const childItem = item.children[i];\r\n\r\n            const array = node[childItem.name + '_asArray'];\r\n            if (array) {\r\n                for (let v = 0, len2 = array.length; v < len2; ++v) {\r\n                    const childNode = array[v];\r\n                    mapProperties(item.properties, node, childNode);\r\n                    mapItem(childItem, childNode);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function run(source) {\r\n\r\n        if (source === null || typeof source !== 'object') {\r\n            return source;\r\n        }\r\n\r\n        if ('period' in mappers) {\r\n            const periodMapper = mappers.period;\r\n            const periods = source.Period_asArray;\r\n            for (let i = 0, len = periods.length; i < len; ++i) {\r\n                const period = periods[i];\r\n                mapItem(periodMapper, period);\r\n\r\n                if ('adaptationset' in mappers) {\r\n                    const adaptationSets = period.AdaptationSet_asArray;\r\n                    if (adaptationSets) {\r\n                        const adaptationSetMapper = mappers.adaptationset;\r\n                        for (let i = 0, len = adaptationSets.length; i < len; ++i) {\r\n                            mapItem(adaptationSetMapper, adaptationSets[i]);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return source;\r\n    }\r\n\r\n    return {\r\n        run: run\r\n    };\r\n}\r\n\r\n\r\nObjectIron.__dashjs_factory_name = 'ObjectIron';\r\nconst factory = FactoryMaker.getClassFactory(ObjectIron);\r\nexport default factory;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\nimport Constants from '../../streaming/constants/Constants';\r\n\r\nimport {getIndexBasedSegment} from './SegmentsUtils';\r\n\r\nfunction ListSegmentsGetter(config, isDynamic) {\r\n\r\n    config = config || {};\r\n    const timelineConverter = config.timelineConverter;\r\n\r\n    let instance;\r\n\r\n    function checkConfig() {\r\n        if (!timelineConverter || !timelineConverter.hasOwnProperty('calcPeriodRelativeTimeFromMpdRelativeTime')) {\r\n            throw new Error(Constants.MISSING_CONFIG_ERROR);\r\n        }\r\n    }\r\n\r\n    function getSegmentByIndex(representation, index) {\r\n        checkConfig();\r\n\r\n        if (!representation) {\r\n            return null;\r\n        }\r\n\r\n        const list = representation.adaptation.period.mpd.manifest.Period_asArray[representation.adaptation.period.index].AdaptationSet_asArray[representation.adaptation.index].Representation_asArray[representation.index].SegmentList;\r\n        const len = list.SegmentURL_asArray.length;\r\n\r\n        const startNumber = representation && !isNaN(representation.startNumber) ? representation.startNumber : 1;\r\n        const offsetToSubtract = Math.max(startNumber - 1, 0);\r\n\r\n        const start = representation.startNumber;\r\n        let segment = null;\r\n        if ((index - offsetToSubtract) < len) {\r\n            const s = list.SegmentURL_asArray[index - offsetToSubtract];\r\n\r\n            segment = getIndexBasedSegment(timelineConverter, isDynamic, representation, index);\r\n            if (segment) {\r\n                segment.replacementTime = (start + index - 1) * representation.segmentDuration;\r\n                segment.media = s.media ? s.media : '';\r\n                segment.mediaRange = s.mediaRange;\r\n                segment.index = index;\r\n                segment.indexRange = s.indexRange;\r\n            }\r\n        }\r\n\r\n        representation.availableSegmentsNumber = len;\r\n\r\n        return segment;\r\n    }\r\n\r\n    function getSegmentByTime(representation, requestedTime) {\r\n        checkConfig();\r\n\r\n        if (!representation) {\r\n            return null;\r\n        }\r\n\r\n        const duration = representation.segmentDuration;\r\n\r\n        if (isNaN(duration)) {\r\n            return null;\r\n        }\r\n\r\n\r\n        const periodTime = timelineConverter.calcPeriodRelativeTimeFromMpdRelativeTime(representation, requestedTime);\r\n        const index = Math.floor(periodTime / duration);\r\n\r\n        return getSegmentByIndex(representation, index);\r\n    }\r\n\r\n    instance = {\r\n        getSegmentByIndex: getSegmentByIndex,\r\n        getSegmentByTime: getSegmentByTime\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nListSegmentsGetter.__dashjs_factory_name = 'ListSegmentsGetter';\r\nconst factory = FactoryMaker.getClassFactory(ListSegmentsGetter);\r\nexport default factory;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n/**\r\n * Static methods for rounding decimals\r\n *\r\n * Modified version of the CC0-licenced example at:\r\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/round\r\n *\r\n * @export\r\n * @class Round10\r\n * @ignore\r\n */\r\nexport default class Round10 {\r\n    /**\r\n    * Decimal round.\r\n    *\r\n    * @param {Number}  value The number.\r\n    * @param {Integer} exp   The exponent (the 10 logarithm of the adjustment base).\r\n    * @returns {Number} The adjusted value.\r\n    * @ignore\r\n    */\r\n    static round10(value, exp) {\r\n        return _decimalAdjust('round', value, exp);\r\n    }\r\n}\r\n\r\n/**\r\n * Decimal adjustment of a number.\r\n *\r\n * @param {String}  type  The type of adjustment.\r\n * @param {Number}  value The number.\r\n * @param {Integer} exp   The exponent (the 10 logarithm of the adjustment base).\r\n * @returns {Number} The adjusted value.\r\n * @ignore\r\n */\r\nfunction _decimalAdjust(type, value, exp) {\r\n    // If the exp is undefined or zero...\r\n    if (typeof exp === 'undefined' || +exp === 0) {\r\n        return Math[type](value);\r\n    }\r\n\r\n    value = +value;\r\n    exp = +exp;\r\n\r\n    // If the value is not a number or the exp is not an integer...\r\n    if (value === null || isNaN(value) || !(typeof exp === 'number' && exp % 1 === 0)) {\r\n        return NaN;\r\n    }\r\n\r\n    // Shift\r\n    value = value.toString().split('e');\r\n    value = Math[type](+(value[0] + 'e' + (value[1] ? (+value[1] - exp) : -exp)));\r\n\r\n    // Shift back\r\n    value = value.toString().split('e');\r\n    return +(value[0] + 'e' + (value[1] ? (+value[1] + exp) : exp));\r\n}","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\nimport Constants from '../../streaming/constants/Constants';\r\n\r\n\r\nfunction SegmentBaseGetter(config) {\r\n\r\n    config = config || {};\r\n    const timelineConverter = config.timelineConverter;\r\n\r\n    let instance;\r\n\r\n    function checkConfig() {\r\n        if (!timelineConverter || !timelineConverter.hasOwnProperty('calcPeriodRelativeTimeFromMpdRelativeTime')) {\r\n            throw new Error(Constants.MISSING_CONFIG_ERROR);\r\n        }\r\n    }\r\n\r\n    function getSegmentByIndex(representation, index) {\r\n        checkConfig();\r\n\r\n        if (!representation) {\r\n            return null;\r\n        }\r\n\r\n        const len = representation.segments ? representation.segments.length : -1;\r\n        let seg;\r\n        if (index < len) {\r\n            seg = representation.segments[index];\r\n            if (seg && seg.availabilityIdx === index) {\r\n                return seg;\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < len; i++) {\r\n            seg = representation.segments[i];\r\n\r\n            if (seg && seg.availabilityIdx === index) {\r\n                return seg;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    function getSegmentByTime(representation, requestedTime) {\r\n        checkConfig();\r\n\r\n        const index = getIndexByTime(representation, requestedTime);\r\n\r\n        return getSegmentByIndex(representation, index);\r\n    }\r\n\r\n    function getIndexByTime(representation, time) {\r\n        if (!representation) {\r\n            return -1;\r\n        }\r\n\r\n        const segments = representation.segments;\r\n        const ln = segments ? segments.length : null;\r\n\r\n        let idx = -1;\r\n        let epsilon,\r\n            frag,\r\n            ft,\r\n            fd,\r\n            i;\r\n\r\n        if (segments && ln > 0) {\r\n            for (i = 0; i < ln; i++) {\r\n                frag = segments[i];\r\n                ft = frag.presentationStartTime;\r\n                fd = frag.duration;\r\n\r\n                epsilon = fd / 2;\r\n                if ((time + epsilon) >= ft &&\r\n                    (time - epsilon) < (ft + fd)) {\r\n                    idx = frag.availabilityIdx;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return idx;\r\n    }\r\n\r\n    instance = {\r\n        getSegmentByIndex: getSegmentByIndex,\r\n        getSegmentByTime: getSegmentByTime\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nSegmentBaseGetter.__dashjs_factory_name = 'SegmentBaseGetter';\r\nconst factory = FactoryMaker.getClassFactory(SegmentBaseGetter);\r\nexport default factory;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport Segment from './../vo/Segment';\r\n\r\nfunction zeroPadToLength(numStr, minStrLength) {\r\n    while (numStr.length < minStrLength) {\r\n        numStr = '0' + numStr;\r\n    }\r\n    return numStr;\r\n}\r\n\r\nfunction getNumberForSegment(segment, segmentIndex) {\r\n    return segment.representation.startNumber + segmentIndex;\r\n}\r\n\r\nexport function unescapeDollarsInTemplate(url) {\r\n    return url ? url.split('$$').join('$') : url;\r\n}\r\n\r\nexport function replaceIDForTemplate(url, value) {\r\n    if (!value || !url || url.indexOf('$RepresentationID$') === -1) {\r\n        return url;\r\n    }\r\n    let v = value.toString();\r\n    return url.split('$RepresentationID$').join(v);\r\n}\r\n\r\nexport function replaceTokenForTemplate(url, token, value) {\r\n    const formatTag = '%0';\r\n\r\n    let startPos,\r\n        endPos,\r\n        formatTagPos,\r\n        specifier,\r\n        width,\r\n        paddedValue;\r\n\r\n    const tokenLen = token.length;\r\n    const formatTagLen = formatTag.length;\r\n\r\n    if (!url) {\r\n        return url;\r\n    }\r\n\r\n    // keep looping round until all instances of <token> have been\r\n    // replaced. once that has happened, startPos below will be -1\r\n    // and the completed url will be returned.\r\n    while (true) {\r\n\r\n        // check if there is a valid $<token>...$ identifier\r\n        // if not, return the url as is.\r\n        startPos = url.indexOf('$' + token);\r\n        if (startPos < 0) {\r\n            return url;\r\n        }\r\n\r\n        // the next '$' must be the end of the identifier\r\n        // if there isn't one, return the url as is.\r\n        endPos = url.indexOf('$', startPos + tokenLen);\r\n        if (endPos < 0) {\r\n            return url;\r\n        }\r\n\r\n        // now see if there is an additional format tag suffixed to\r\n        // the identifier within the enclosing '$' characters\r\n        formatTagPos = url.indexOf(formatTag, startPos + tokenLen);\r\n        if (formatTagPos > startPos && formatTagPos < endPos) {\r\n\r\n            specifier = url.charAt(endPos - 1);\r\n            width = parseInt(url.substring(formatTagPos + formatTagLen, endPos - 1), 10);\r\n\r\n            // support the minimum specifiers required by IEEE 1003.1\r\n            // (d, i , o, u, x, and X) for completeness\r\n            switch (specifier) {\r\n                // treat all int types as uint,\r\n                // hence deliberate fallthrough\r\n                case 'd':\r\n                case 'i':\r\n                case 'u':\r\n                    paddedValue = zeroPadToLength(value.toString(), width);\r\n                    break;\r\n                case 'x':\r\n                    paddedValue = zeroPadToLength(value.toString(16), width);\r\n                    break;\r\n                case 'X':\r\n                    paddedValue = zeroPadToLength(value.toString(16), width).toUpperCase();\r\n                    break;\r\n                case 'o':\r\n                    paddedValue = zeroPadToLength(value.toString(8), width);\r\n                    break;\r\n                default:\r\n                    return url;\r\n            }\r\n        } else {\r\n            paddedValue = value;\r\n        }\r\n\r\n        url = url.substring(0, startPos) + paddedValue + url.substring(endPos + 1);\r\n    }\r\n}\r\n\r\nfunction getSegment(representation, duration, presentationStartTime, mediaStartTime, availabilityStartTime,\r\n                    timelineConverter, presentationEndTime, isDynamic, index) {\r\n    let seg = new Segment();\r\n\r\n    seg.representation = representation;\r\n    seg.duration = duration;\r\n    seg.presentationStartTime = presentationStartTime;\r\n    seg.mediaStartTime = mediaStartTime;\r\n    seg.availabilityStartTime = availabilityStartTime;\r\n    seg.availabilityEndTime = timelineConverter.calcAvailabilityEndTimeFromPresentationTime(presentationEndTime, representation.adaptation.period.mpd, isDynamic);\r\n    seg.wallStartTime = timelineConverter.calcWallTimeForSegment(seg, isDynamic);\r\n    seg.replacementNumber = getNumberForSegment(seg, index);\r\n    seg.availabilityIdx = index;\r\n\r\n    return seg;\r\n}\r\n\r\nfunction isSegmentAvailable(timelineConverter, representation, segment, isDynamic) {\r\n    const periodEnd = timelineConverter.getPeriodEnd(representation, isDynamic);\r\n    const periodRelativeEnd = timelineConverter.calcPeriodRelativeTimeFromMpdRelativeTime(representation, periodEnd);\r\n\r\n    const segmentTime = timelineConverter.calcPeriodRelativeTimeFromMpdRelativeTime(representation, segment.presentationStartTime);\r\n    if (segmentTime >= periodRelativeEnd) {\r\n        if (isDynamic) {\r\n            // segment is not available in current period, but it may be segment available in another period that current one (in DVR window)\r\n            // if not (time > segmentAvailabilityRange.end), then return false\r\n            if (representation.segmentAvailabilityRange && segment.presentationStartTime >= representation.segmentAvailabilityRange.end) {\r\n                return false;\r\n            }\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nexport function getIndexBasedSegment(timelineConverter, isDynamic, representation, index) {\r\n    let duration,\r\n        presentationStartTime,\r\n        presentationEndTime;\r\n\r\n    duration = representation.segmentDuration;\r\n\r\n    /*\r\n     * From spec - If neither @duration attribute nor SegmentTimeline element is present, then the Representation\r\n     * shall contain exactly one Media Segment. The MPD start time is 0 and the MPD duration is obtained\r\n     * in the same way as for the last Media Segment in the Representation.\r\n     */\r\n    if (isNaN(duration)) {\r\n        duration = representation.adaptation.period.duration;\r\n    }\r\n\r\n    presentationStartTime = parseFloat((representation.adaptation.period.start + (index * duration)).toFixed(5));\r\n    presentationEndTime = parseFloat((presentationStartTime + duration).toFixed(5));\r\n\r\n    const segment = getSegment(representation, duration, presentationStartTime,\r\n        timelineConverter.calcMediaTimeFromPresentationTime(presentationStartTime, representation),\r\n        timelineConverter.calcAvailabilityStartTimeFromPresentationTime(presentationStartTime, representation.adaptation.period.mpd, isDynamic),\r\n        timelineConverter, presentationEndTime, isDynamic, index);\r\n\r\n    if (!isSegmentAvailable(timelineConverter, representation, segment, isDynamic)) {\r\n        return null;\r\n    }\r\n\r\n    return segment;\r\n}\r\n\r\nexport function getTimeBasedSegment(timelineConverter, isDynamic, representation, time, duration, fTimescale, url, range, index, tManifest) {\r\n    const scaledTime = time / fTimescale;\r\n    const scaledDuration = Math.min(duration / fTimescale, representation.adaptation.period.mpd.maxSegmentDuration);\r\n\r\n    let presentationStartTime,\r\n        presentationEndTime,\r\n        seg;\r\n\r\n    presentationStartTime = timelineConverter.calcPresentationTimeFromMediaTime(scaledTime, representation);\r\n    presentationEndTime = presentationStartTime + scaledDuration;\r\n\r\n    seg = getSegment(representation, scaledDuration, presentationStartTime,\r\n        scaledTime,\r\n        representation.adaptation.period.mpd.manifest.loadedTime,\r\n        timelineConverter, presentationEndTime, isDynamic, index);\r\n\r\n    if (!isSegmentAvailable(timelineConverter, representation, seg, isDynamic)) {\r\n        return null;\r\n    }\r\n\r\n    seg.replacementTime = tManifest ? tManifest : time;\r\n\r\n    url = replaceTokenForTemplate(url, 'Number', seg.replacementNumber);\r\n    url = replaceTokenForTemplate(url, 'Time', seg.replacementTime);\r\n    seg.media = url;\r\n    seg.mediaRange = range;\r\n\r\n    return seg;\r\n}\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\nimport Constants from '../../streaming/constants/Constants';\r\n\r\nimport { replaceTokenForTemplate, getIndexBasedSegment } from './SegmentsUtils';\r\n\r\nfunction TemplateSegmentsGetter(config, isDynamic) {\r\n    config = config || {};\r\n    const timelineConverter = config.timelineConverter;\r\n\r\n    let instance;\r\n\r\n    function checkConfig() {\r\n        if (!timelineConverter || !timelineConverter.hasOwnProperty('calcPeriodRelativeTimeFromMpdRelativeTime')) {\r\n            throw new Error(Constants.MISSING_CONFIG_ERROR);\r\n        }\r\n    }\r\n\r\n    function getSegmentByIndex(representation, index) {\r\n        checkConfig();\r\n\r\n        if (!representation) {\r\n            return null;\r\n        }\r\n\r\n        const template = representation.adaptation.period.mpd.manifest.Period_asArray[representation.adaptation.period.index].\r\n            AdaptationSet_asArray[representation.adaptation.index].Representation_asArray[representation.index].SegmentTemplate;\r\n\r\n        index = Math.max(index, 0);\r\n\r\n        const seg = getIndexBasedSegment(timelineConverter, isDynamic, representation, index);\r\n        if (seg) {\r\n            seg.replacementTime = Math.round((index - 1) * representation.segmentDuration * representation.timescale,10);\r\n\r\n            let url = template.media;\r\n            url = replaceTokenForTemplate(url, 'Number', seg.replacementNumber);\r\n            url = replaceTokenForTemplate(url, 'Time', seg.replacementTime);\r\n            seg.media = url;\r\n        }\r\n\r\n        const duration = representation.segmentDuration;\r\n        const availabilityWindow = representation.segmentAvailabilityRange;\r\n        if (isNaN(duration)) {\r\n            representation.availableSegmentsNumber = 1;\r\n        }\r\n        else {\r\n            representation.availableSegmentsNumber = Math.ceil((availabilityWindow.end - availabilityWindow.start) / duration);\r\n        }\r\n\r\n        return seg;\r\n    }\r\n\r\n    function getSegmentByTime(representation, requestedTime) {\r\n        checkConfig();\r\n\r\n        if (!representation) {\r\n            return null;\r\n        }\r\n\r\n        const duration = representation.segmentDuration;\r\n\r\n        if (isNaN(duration)) {\r\n            return null;\r\n        }\r\n\r\n        const periodTime = timelineConverter.calcPeriodRelativeTimeFromMpdRelativeTime(representation, requestedTime);\r\n        const index = Math.floor(periodTime / duration);\r\n\r\n        return getSegmentByIndex(representation, index);\r\n    }\r\n\r\n    instance = {\r\n        getSegmentByIndex: getSegmentByIndex,\r\n        getSegmentByTime: getSegmentByTime\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nTemplateSegmentsGetter.__dashjs_factory_name = 'TemplateSegmentsGetter';\r\nconst factory = FactoryMaker.getClassFactory(TemplateSegmentsGetter);\r\nexport default factory;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport EventBus from '../../core/EventBus';\r\nimport Events from '../../core/events/Events';\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\nimport DashConstants from '../constants/DashConstants';\r\nimport DashManifestModel from '../models/DashManifestModel';\r\nimport Settings from '../../core/Settings';\r\n\r\nfunction TimelineConverter() {\r\n\r\n    const context = this.context;\r\n    const eventBus = EventBus(context).getInstance();\r\n    const settings = Settings(context).getInstance();\r\n\r\n    let instance,\r\n        dashManifestModel,\r\n        clientServerTimeShift,\r\n        isClientServerTimeSyncCompleted,\r\n        expectedLiveEdge;\r\n\r\n    function setup() {\r\n        dashManifestModel = DashManifestModel(context).getInstance();\r\n        reset();\r\n    }\r\n\r\n    function initialize() {\r\n        resetInitialSettings();\r\n        eventBus.on(Events.TIME_SYNCHRONIZATION_COMPLETED, onTimeSyncComplete, this);\r\n    }\r\n\r\n    function isTimeSyncCompleted() {\r\n        return isClientServerTimeSyncCompleted;\r\n    }\r\n\r\n    function setTimeSyncCompleted(value) {\r\n        isClientServerTimeSyncCompleted = value;\r\n    }\r\n\r\n    function getClientTimeOffset() {\r\n        return clientServerTimeShift;\r\n    }\r\n\r\n    function setClientTimeOffset(value) {\r\n        clientServerTimeShift = value;\r\n    }\r\n\r\n    function getExpectedLiveEdge() {\r\n        return expectedLiveEdge;\r\n    }\r\n\r\n    function setExpectedLiveEdge(value) {\r\n        expectedLiveEdge = value;\r\n    }\r\n\r\n    function calcAvailabilityTimeFromPresentationTime(presentationTime, mpd, isDynamic, calculateEnd) {\r\n        let availabilityTime = NaN;\r\n\r\n        if (calculateEnd) {\r\n            //@timeShiftBufferDepth specifies the duration of the time shifting buffer that is guaranteed\r\n            // to be available for a Media Presentation with type 'dynamic'.\r\n            // When not present, the value is infinite.\r\n            if (isDynamic && (mpd.timeShiftBufferDepth != Number.POSITIVE_INFINITY)) {\r\n                availabilityTime = new Date(mpd.availabilityStartTime.getTime() + ((presentationTime + mpd.timeShiftBufferDepth) * 1000));\r\n            } else {\r\n                availabilityTime = mpd.availabilityEndTime;\r\n            }\r\n        } else {\r\n            if (isDynamic) {\r\n                availabilityTime = new Date(mpd.availabilityStartTime.getTime() + (presentationTime - clientServerTimeShift) * 1000);\r\n            } else {\r\n                // in static mpd, all segments are available at the same time\r\n                availabilityTime = mpd.availabilityStartTime;\r\n            }\r\n        }\r\n\r\n        return availabilityTime;\r\n    }\r\n\r\n    function calcAvailabilityStartTimeFromPresentationTime(presentationTime, mpd, isDynamic) {\r\n        return calcAvailabilityTimeFromPresentationTime.call(this, presentationTime, mpd, isDynamic);\r\n    }\r\n\r\n    function calcAvailabilityEndTimeFromPresentationTime(presentationTime, mpd, isDynamic) {\r\n        return calcAvailabilityTimeFromPresentationTime.call(this, presentationTime, mpd, isDynamic, true);\r\n    }\r\n\r\n    function calcPresentationTimeFromWallTime(wallTime, period) {\r\n        return ((wallTime.getTime() - period.mpd.availabilityStartTime.getTime() + clientServerTimeShift * 1000) / 1000);\r\n    }\r\n\r\n    function calcPresentationTimeFromMediaTime(mediaTime, representation) {\r\n        const periodStart = representation.adaptation.period.start;\r\n        const presentationOffset = representation.presentationTimeOffset;\r\n\r\n        return mediaTime + (periodStart - presentationOffset);\r\n    }\r\n\r\n    function calcMediaTimeFromPresentationTime(presentationTime, representation) {\r\n        const periodStart = representation.adaptation.period.start;\r\n        const presentationOffset = representation.presentationTimeOffset;\r\n\r\n        return presentationTime - periodStart + presentationOffset;\r\n    }\r\n\r\n    function calcWallTimeForSegment(segment, isDynamic) {\r\n        let suggestedPresentationDelay,\r\n            displayStartTime,\r\n            wallTime;\r\n\r\n        if (isDynamic) {\r\n            suggestedPresentationDelay = segment.representation.adaptation.period.mpd.suggestedPresentationDelay;\r\n            displayStartTime = segment.presentationStartTime + suggestedPresentationDelay;\r\n            wallTime = new Date(segment.availabilityStartTime.getTime() + (displayStartTime * 1000));\r\n        }\r\n\r\n        return wallTime;\r\n    }\r\n\r\n    function calcSegmentAvailabilityRange(voRepresentation, isDynamic) {\r\n        // Static Range Finder\r\n        const voPeriod = voRepresentation.adaptation.period;\r\n        const range = {start: voPeriod.start, end: voPeriod.start + voPeriod.duration};\r\n        if (!isDynamic) return range;\r\n\r\n        if (!isClientServerTimeSyncCompleted && voRepresentation.segmentAvailabilityRange) {\r\n            return voRepresentation.segmentAvailabilityRange;\r\n        }\r\n\r\n        // Dynamic Range Finder\r\n        const d = voRepresentation.segmentDuration || (voRepresentation.segments && voRepresentation.segments.length ? voRepresentation.segments[voRepresentation.segments.length - 1].duration : 0);\r\n\r\n        // Specific use case of SegmentTimeline without timeShiftBufferDepth\r\n        if (voRepresentation.segmentInfoType === DashConstants.SEGMENT_TIMELINE && settings.get().streaming.calcSegmentAvailabilityRangeFromTimeline) {\r\n            return calcSegmentAvailabilityRangeFromTimeline(voRepresentation);\r\n        }\r\n\r\n        const now = calcPresentationTimeFromWallTime(new Date(), voPeriod);\r\n        const periodEnd = voPeriod.start + voPeriod.duration;\r\n        range.start = Math.max((now - voPeriod.mpd.timeShiftBufferDepth), voPeriod.start);\r\n\r\n        const endOffset = voRepresentation.availabilityTimeOffset !== undefined &&\r\n        voRepresentation.availabilityTimeOffset < d ? d - voRepresentation.availabilityTimeOffset : d;\r\n\r\n        range.end = now >= periodEnd && now - endOffset < periodEnd ? periodEnd : now - endOffset;\r\n\r\n        return range;\r\n    }\r\n\r\n    function calcSegmentAvailabilityRangeFromTimeline(voRepresentation) {\r\n        const adaptation = voRepresentation.adaptation.period.mpd.manifest.Period_asArray[voRepresentation.adaptation.period.index].AdaptationSet_asArray[voRepresentation.adaptation.index];\r\n        const representation = dashManifestModel.getRepresentationFor(voRepresentation.index, adaptation);\r\n        const timeline = representation.SegmentTemplate.SegmentTimeline;\r\n        const timescale = representation.SegmentTemplate.timescale;\r\n        const segments = timeline.S_asArray;\r\n        const range = {start: 0, end: 0};\r\n        let d = 0;\r\n        let segment,\r\n            repeat,\r\n            i,\r\n            len;\r\n\r\n        range.start = calcPresentationTimeFromMediaTime(segments[0].t / timescale, voRepresentation);\r\n\r\n        for (i = 0, len = segments.length; i < len; i++) {\r\n            segment = segments[i];\r\n            repeat = 0;\r\n            if (segment.hasOwnProperty('r')) {\r\n                repeat = segment.r;\r\n            }\r\n            d += (segment.d / timescale) * (1 + repeat);\r\n        }\r\n\r\n        range.end = range.start + d;\r\n\r\n        return range;\r\n    }\r\n\r\n    function getPeriodEnd(voRepresentation, isDynamic) {\r\n        // Static Range Finder\r\n        const voPeriod = voRepresentation.adaptation.period;\r\n        if (!isDynamic) {\r\n            return voPeriod.start + voPeriod.duration;\r\n        }\r\n\r\n        if (!isClientServerTimeSyncCompleted && voRepresentation.segmentAvailabilityRange) {\r\n            return voRepresentation.segmentAvailabilityRange;\r\n        }\r\n\r\n        // Dynamic Range Finder\r\n        const d = voRepresentation.segmentDuration || (voRepresentation.segments && voRepresentation.segments.length ? voRepresentation.segments[voRepresentation.segments.length - 1].duration : 0);\r\n        const now = calcPresentationTimeFromWallTime(new Date(), voPeriod);\r\n        const periodEnd = voPeriod.start + voPeriod.duration;\r\n\r\n        const endOffset = voRepresentation.availabilityTimeOffset !== undefined &&\r\n        voRepresentation.availabilityTimeOffset < d ? d - voRepresentation.availabilityTimeOffset : d;\r\n\r\n        return Math.min(now - endOffset, periodEnd);\r\n    }\r\n\r\n    function calcPeriodRelativeTimeFromMpdRelativeTime(representation, mpdRelativeTime) {\r\n        const periodStartTime = representation.adaptation.period.start;\r\n        return mpdRelativeTime - periodStartTime;\r\n    }\r\n\r\n    /*\r\n    * We need to figure out if we want to timesync for segmentTimeine where useCalculatedLiveEdge = true\r\n    * seems we figure out client offset based on logic in liveEdgeFinder getLiveEdge timelineConverter.setClientTimeOffset(liveEdge - representationInfo.DVRWindow.end);\r\n    * FYI StreamController's onManifestUpdated entry point to timeSync\r\n    * */\r\n    function onTimeSyncComplete(e) {\r\n\r\n        if (isClientServerTimeSyncCompleted) return;\r\n\r\n        if (e.offset !== undefined) {\r\n            setClientTimeOffset(e.offset / 1000);\r\n            isClientServerTimeSyncCompleted = true;\r\n        }\r\n    }\r\n\r\n    function resetInitialSettings() {\r\n        clientServerTimeShift = 0;\r\n        isClientServerTimeSyncCompleted = false;\r\n        expectedLiveEdge = NaN;\r\n    }\r\n\r\n    function reset() {\r\n        eventBus.off(Events.TIME_SYNCHRONIZATION_COMPLETED, onTimeSyncComplete, this);\r\n        resetInitialSettings();\r\n    }\r\n\r\n    instance = {\r\n        initialize: initialize,\r\n        isTimeSyncCompleted: isTimeSyncCompleted,\r\n        setTimeSyncCompleted: setTimeSyncCompleted,\r\n        getClientTimeOffset: getClientTimeOffset,\r\n        setClientTimeOffset: setClientTimeOffset,\r\n        getExpectedLiveEdge: getExpectedLiveEdge,\r\n        setExpectedLiveEdge: setExpectedLiveEdge,\r\n        calcAvailabilityStartTimeFromPresentationTime: calcAvailabilityStartTimeFromPresentationTime,\r\n        calcAvailabilityEndTimeFromPresentationTime: calcAvailabilityEndTimeFromPresentationTime,\r\n        calcPresentationTimeFromWallTime: calcPresentationTimeFromWallTime,\r\n        calcPresentationTimeFromMediaTime: calcPresentationTimeFromMediaTime,\r\n        calcPeriodRelativeTimeFromMpdRelativeTime: calcPeriodRelativeTimeFromMpdRelativeTime,\r\n        calcMediaTimeFromPresentationTime: calcMediaTimeFromPresentationTime,\r\n        calcSegmentAvailabilityRange: calcSegmentAvailabilityRange,\r\n        getPeriodEnd: getPeriodEnd,\r\n        calcWallTimeForSegment: calcWallTimeForSegment,\r\n        reset: reset\r\n    };\r\n\r\n    setup();\r\n    return instance;\r\n}\r\n\r\nTimelineConverter.__dashjs_factory_name = 'TimelineConverter';\r\nexport default FactoryMaker.getSingletonFactory(TimelineConverter);\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\nimport Constants from '../../streaming/constants/Constants';\r\n\r\nimport { getTimeBasedSegment } from './SegmentsUtils';\r\n\r\nfunction TimelineSegmentsGetter(config, isDynamic) {\r\n\r\n    config = config || {};\r\n    const timelineConverter = config.timelineConverter;\r\n\r\n    let instance;\r\n\r\n    function checkConfig() {\r\n        if (!timelineConverter || !timelineConverter.hasOwnProperty('calcMediaTimeFromPresentationTime') ||\r\n            !timelineConverter.hasOwnProperty('calcSegmentAvailabilityRange')) {\r\n            throw new Error(Constants.MISSING_CONFIG_ERROR);\r\n        }\r\n    }\r\n\r\n    function iterateSegments(representation, iterFunc) {\r\n        const base = representation.adaptation.period.mpd.manifest.Period_asArray[representation.adaptation.period.index].\r\n            AdaptationSet_asArray[representation.adaptation.index].Representation_asArray[representation.index].SegmentTemplate ||\r\n            representation.adaptation.period.mpd.manifest.Period_asArray[representation.adaptation.period.index].\r\n                AdaptationSet_asArray[representation.adaptation.index].Representation_asArray[representation.index].SegmentList;\r\n        const timeline = base.SegmentTimeline;\r\n        const list = base.SegmentURL_asArray;\r\n\r\n        let time = 0;\r\n        let scaledTime = 0;\r\n        let availabilityIdx = -1;\r\n\r\n        let fragments,\r\n            frag,\r\n            i,\r\n            len,\r\n            j,\r\n            repeat,\r\n            repeatEndTime,\r\n            nextFrag,\r\n            fTimescale;\r\n\r\n        fTimescale = representation.timescale;\r\n        fragments = timeline.S_asArray;\r\n\r\n        let breakIterator = false;\r\n\r\n        for (i = 0, len = fragments.length; i < len && !breakIterator; i++) {\r\n            frag = fragments[i];\r\n            repeat = 0;\r\n            if (frag.hasOwnProperty('r')) {\r\n                repeat = frag.r;\r\n            }\r\n\r\n            // For a repeated S element, t belongs only to the first segment\r\n            if (frag.hasOwnProperty('t')) {\r\n                time = frag.t;\r\n                scaledTime = time / fTimescale;\r\n            }\r\n\r\n            // This is a special case: \"A negative value of the @r attribute of the S element indicates that the duration indicated in @d attribute repeats until the start of the next S element, the end of the Period or until the\r\n            // next MPD update.\"\r\n            if (repeat < 0) {\r\n                nextFrag = fragments[i + 1];\r\n\r\n                if (nextFrag && nextFrag.hasOwnProperty('t')) {\r\n                    repeatEndTime = nextFrag.t / fTimescale;\r\n                } else {\r\n                    const availabilityEnd = representation.segmentAvailabilityRange ? representation.segmentAvailabilityRange.end : (timelineConverter.calcSegmentAvailabilityRange(representation, isDynamic).end);\r\n                    repeatEndTime = timelineConverter.calcMediaTimeFromPresentationTime(availabilityEnd, representation);\r\n                    representation.segmentDuration = frag.d / fTimescale;\r\n                }\r\n\r\n                repeat = Math.ceil((repeatEndTime - scaledTime) / (frag.d / fTimescale)) - 1;\r\n            }\r\n\r\n            for (j = 0; j <= repeat && !breakIterator; j++) {\r\n                availabilityIdx++;\r\n\r\n                breakIterator = iterFunc(time, scaledTime, base, list, frag, fTimescale, availabilityIdx, i);\r\n\r\n                if (breakIterator) {\r\n                    representation.segmentDuration = frag.d / fTimescale;\r\n\r\n                    // check if there is at least one more segment\r\n                    if (j < repeat - 1 || i < len - 1) {\r\n                        availabilityIdx++;\r\n                    }\r\n                }\r\n\r\n                time += frag.d;\r\n                scaledTime = time / fTimescale;\r\n            }\r\n        }\r\n\r\n        representation.availableSegmentsNumber = availabilityIdx;\r\n    }\r\n\r\n    function getSegmentByIndex(representation, index, lastSegmentTime) {\r\n        checkConfig();\r\n\r\n        if (!representation) {\r\n            return null;\r\n        }\r\n\r\n        let segment = null;\r\n        let found = false;\r\n\r\n        iterateSegments(representation, function (time, scaledTime, base, list, frag, fTimescale, availabilityIdx, i) {\r\n            if (found || lastSegmentTime < 0) {\r\n                let media = base.media;\r\n                let mediaRange = frag.mediaRange;\r\n\r\n                if (list) {\r\n                    media = list[i].media || '';\r\n                    mediaRange = list[i].mediaRange;\r\n                }\r\n\r\n                segment = getTimeBasedSegment(\r\n                    timelineConverter,\r\n                    isDynamic,\r\n                    representation,\r\n                    time,\r\n                    frag.d,\r\n                    fTimescale,\r\n                    media,\r\n                    mediaRange,\r\n                    availabilityIdx,\r\n                    frag.tManifest);\r\n\r\n                return true;\r\n            } else if (scaledTime >= lastSegmentTime - frag.d * 0.5 / fTimescale) { // same logic, if deviation is\r\n                // 50% of segment duration, segment is found if scaledTime is greater than or equal to (startTime of previous segment - half of the previous segment duration)\r\n                found = true;\r\n            }\r\n\r\n            return false;\r\n        });\r\n\r\n        return segment;\r\n    }\r\n\r\n    function getSegmentByTime(representation, requestedTime) {\r\n        checkConfig();\r\n\r\n        if (!representation) {\r\n            return null;\r\n        }\r\n\r\n        if (requestedTime === undefined) {\r\n            requestedTime = null;\r\n        }\r\n\r\n        let segment = null;\r\n        const requiredMediaTime = timelineConverter.calcMediaTimeFromPresentationTime(requestedTime, representation);\r\n\r\n        iterateSegments(representation, function (time, scaledTime, base, list, frag, fTimescale, availabilityIdx, i) {\r\n            // In some cases when requiredMediaTime = actual end time of the last segment\r\n            // it is possible that this time a bit exceeds the declared end time of the last segment.\r\n            // in this case we still need to include the last segment in the segment list.\r\n            if (requiredMediaTime < (scaledTime + (frag.d / fTimescale))) {\r\n                let media = base.media;\r\n                let mediaRange = frag.mediaRange;\r\n\r\n                if (list) {\r\n                    media = list[i].media || '';\r\n                    mediaRange = list[i].mediaRange;\r\n                }\r\n\r\n                segment = getTimeBasedSegment(\r\n                    timelineConverter,\r\n                    isDynamic,\r\n                    representation,\r\n                    time,\r\n                    frag.d,\r\n                    fTimescale,\r\n                    media,\r\n                    mediaRange,\r\n                    availabilityIdx,\r\n                    frag.tManifest);\r\n\r\n                return true;\r\n            }\r\n\r\n            return false;\r\n        });\r\n\r\n        return segment;\r\n    }\r\n\r\n\r\n    instance = {\r\n        getSegmentByIndex: getSegmentByIndex,\r\n        getSegmentByTime: getSegmentByTime\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nTimelineSegmentsGetter.__dashjs_factory_name = 'TimelineSegmentsGetter';\r\nconst factory = FactoryMaker.getClassFactory(TimelineSegmentsGetter);\r\nexport default factory;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @class\r\n * @ignore\r\n */\r\nclass AdaptationSet {\r\n    constructor() {\r\n        this.period = null;\r\n        this.index = -1;\r\n        this.type = null;\r\n    }\r\n}\r\n\r\nexport default AdaptationSet;","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @class\r\n * @ignore\r\n */\r\n\r\nconst DEFAULT_DVB_PRIORITY = 1;\r\nconst DEFAULT_DVB_WEIGHT = 1;\r\n\r\nclass BaseURL {\r\n    constructor(url, serviceLocation, priority, weight) {\r\n        this.url = url || '';\r\n        this.serviceLocation = serviceLocation || url || '';\r\n\r\n        // DVB extensions\r\n        this.dvb_priority = priority || DEFAULT_DVB_PRIORITY;\r\n        this.dvb_weight = weight || DEFAULT_DVB_WEIGHT;\r\n\r\n        this.availabilityTimeOffset = 0;\r\n        this.availabilityTimeComplete = true;\r\n\r\n        /* currently unused:\r\n         * byteRange,\r\n         */\r\n    }\r\n}\r\n\r\nBaseURL.DEFAULT_DVB_PRIORITY = DEFAULT_DVB_PRIORITY;\r\nBaseURL.DEFAULT_DVB_WEIGHT = DEFAULT_DVB_WEIGHT;\r\n\r\nexport default BaseURL;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @class\r\n * @ignore\r\n */\r\nclass Event {\r\n    constructor() {\r\n        this.duration = NaN;\r\n        this.presentationTime = NaN;\r\n        this.id = NaN;\r\n        this.messageData = '';\r\n        this.eventStream = null;\r\n        this.presentationTimeDelta = NaN; // Specific EMSG Box parameter\r\n    }\r\n}\r\n\r\nexport default Event;","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @class\r\n * @ignore\r\n */\r\nclass EventStream {\r\n    constructor() {\r\n        this.adaptionSet = null;\r\n        this.representation = null;\r\n        this.period = null;\r\n        this.timescale = 1;\r\n        this.value = '';\r\n        this.schemeIdUri = '';\r\n        this.presentationTimeOffset = 0;\r\n    }\r\n}\r\n\r\nexport default EventStream;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @class\r\n * @ignore\r\n */\r\nclass ManifestInfo {\r\n    constructor() {\r\n        this.DVRWindowSize = NaN;\r\n        this.loadedTime = null;\r\n        this.availableFrom = null;\r\n        this.minBufferTime = NaN;\r\n        this.duration = NaN;\r\n        this.isDynamic = false;\r\n        this.maxFragmentDuration = null;\r\n    }\r\n}\r\n\r\nexport default ManifestInfo;","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @class\r\n * @ignore\r\n */\r\nclass MediaInfo {\r\n    constructor() {\r\n        this.id = null;\r\n        this.index = null;\r\n        this.type = null;\r\n        this.streamInfo = null;\r\n        this.representationCount = 0;\r\n        this.lang = null;\r\n        this.viewpoint = null;\r\n        this.accessibility = null;\r\n        this.audioChannelConfiguration = null;\r\n        this.roles = null;\r\n        this.codec = null;\r\n        this.mimeType = null;\r\n        this.contentProtection = null;\r\n        this.isText = false;\r\n        this.KID = null;\r\n        this.bitrateList = null;\r\n    }\r\n\r\n}\r\n\r\nexport default MediaInfo;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @class\r\n * @ignore\r\n */\r\nclass Mpd {\r\n    constructor() {\r\n        this.manifest = null;\r\n        this.suggestedPresentationDelay = 0;\r\n        this.availabilityStartTime = null;\r\n        this.availabilityEndTime = Number.POSITIVE_INFINITY;\r\n        this.timeShiftBufferDepth = Number.POSITIVE_INFINITY;\r\n        this.maxSegmentDuration = Number.POSITIVE_INFINITY;\r\n        this.minimumUpdatePeriod = NaN;\r\n        this.mediaPresentationDuration = NaN;\r\n    }\r\n}\r\n\r\nexport default Mpd;","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @class\r\n * @ignore\r\n */\r\nclass Period {\r\n    constructor() {\r\n        this.id = null;\r\n        this.index = -1;\r\n        this.duration = NaN;\r\n        this.start = NaN;\r\n        this.mpd = null;\r\n    }\r\n}\r\n\r\nPeriod.DEFAULT_ID = 'defaultId';\r\n\r\nexport default Period;","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @class\r\n * @ignore\r\n */\r\n\r\nimport DashConstants from '../constants/DashConstants';\r\n\r\nclass Representation {\r\n    constructor() {\r\n        this.id = null;\r\n        this.index = -1;\r\n        this.adaptation = null;\r\n        this.segmentInfoType = null;\r\n        this.initialization = null;\r\n        this.codecs = null;\r\n        this.codecPrivateData = null;\r\n        this.segmentDuration = NaN;\r\n        this.timescale = 1;\r\n        this.startNumber = 1;\r\n        this.indexRange = null;\r\n        this.range = null;\r\n        this.presentationTimeOffset = 0;\r\n        // Set the source buffer timeOffset to this\r\n        this.MSETimeOffset = NaN;\r\n        this.segmentAvailabilityRange = null;\r\n        this.availableSegmentsNumber = 0;\r\n        this.bandwidth = NaN;\r\n        this.width = NaN;\r\n        this.height = NaN;\r\n        this.scanType = null;\r\n        this.maxPlayoutRate = NaN;\r\n        this.availabilityTimeOffset = 0;\r\n        this.availabilityTimeComplete = true;\r\n    }\r\n\r\n    hasInitialization() {\r\n        return (this.initialization !== null || this.range !== null);\r\n    }\r\n\r\n    hasSegments() {\r\n        return this.segmentInfoType !== DashConstants.BASE_URL &&\r\n            this.segmentInfoType !== DashConstants.SEGMENT_BASE &&\r\n            !this.indexRange;\r\n    }\r\n}\r\n\r\nexport default Representation;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @class\r\n * @ignore\r\n */\r\nclass RepresentationInfo {\r\n    constructor() {\r\n        this.id = null;\r\n        this.quality = null;\r\n        this.DVRWindow = null;\r\n        this.fragmentDuration = null;\r\n        this.mediaInfo = null;\r\n        this.MSETimeOffset = null;\r\n    }\r\n}\r\n\r\nexport default RepresentationInfo;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @class\r\n * @ignore\r\n */\r\nclass Segment {\r\n    constructor() {\r\n        this.indexRange = null;\r\n        this.index = null;\r\n        this.mediaRange = null;\r\n        this.media = null;\r\n        this.duration = NaN;\r\n        // this is the time that should be inserted into the media url\r\n        this.replacementTime = null;\r\n        // this is the number that should be inserted into the media url\r\n        this.replacementNumber = NaN;\r\n        // This is supposed to match the time encoded in the media Segment\r\n        this.mediaStartTime = NaN;\r\n        // When the source buffer timeOffset is set to MSETimeOffset this is the\r\n        // time that will match the seekTarget and video.currentTime\r\n        this.presentationStartTime = NaN;\r\n        // Do not schedule this segment until\r\n        this.availabilityStartTime = NaN;\r\n        // Ignore and  discard this segment after\r\n        this.availabilityEndTime = NaN;\r\n        // The index of the segment inside the availability window\r\n        this.availabilityIdx = NaN;\r\n        // For dynamic mpd's, this is the wall clock time that the video\r\n        // element currentTime should be presentationStartTime\r\n        this.wallStartTime = NaN;\r\n        this.representation = null;\r\n    }\r\n}\r\n\r\nexport default Segment;","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @class\r\n * @ignore\r\n */\r\nclass StreamInfo {\r\n    constructor() {\r\n        this.id = null;\r\n        this.index = null;\r\n        this.start = NaN;\r\n        this.duration = NaN;\r\n        this.manifestInfo = null;\r\n        this.isLast = true;\r\n    }\r\n}\r\n\r\nexport default StreamInfo;","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @class\r\n * @ignore\r\n */\r\nclass UTCTiming {\r\n    constructor() {\r\n        // UTCTiming is a DescriptorType and doesn't have any additional fields\r\n        this.schemeIdUri = '';\r\n        this.value = '';\r\n    }\r\n}\r\n\r\nexport default UTCTiming;","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport Constants from './constants/Constants';\r\nimport URLLoader from './net/URLLoader';\r\nimport HeadRequest from './vo/HeadRequest';\r\nimport DashJSError from './vo/DashJSError';\r\nimport FactoryMaker from '../core/FactoryMaker';\r\n\r\nfunction FragmentLoader(config) {\r\n\r\n    config = config || {};\r\n    const context = this.context;\r\n    const eventBus = config.eventBus;\r\n    const events = config.events;\r\n    const urlUtils = config.urlUtils;\r\n    const errors = config.errors;\r\n\r\n    let instance,\r\n        urlLoader;\r\n\r\n    function setup() {\r\n        urlLoader = URLLoader(context).create({\r\n            errHandler: config.errHandler,\r\n            errors: errors,\r\n            dashMetrics: config.dashMetrics,\r\n            mediaPlayerModel: config.mediaPlayerModel,\r\n            requestModifier: config.requestModifier,\r\n            useFetch: config.settings.get().streaming.lowLatencyEnabled,\r\n            urlUtils: urlUtils,\r\n            constants: Constants,\r\n            boxParser: config.boxParser,\r\n            dashConstants: config.dashConstants,\r\n            requestTimeout: config.settings.get().streaming.fragmentRequestTimeout\r\n        });\r\n    }\r\n\r\n    function checkForExistence(request) {\r\n        const report = function (success) {\r\n            eventBus.trigger(events.CHECK_FOR_EXISTENCE_COMPLETED, {\r\n                    request: request,\r\n                    exists: success\r\n                }\r\n            );\r\n        };\r\n\r\n        if (request) {\r\n            let headRequest = new HeadRequest(request.url);\r\n            urlLoader.load({\r\n                request: headRequest,\r\n                success: function () {\r\n                    report(true);\r\n                },\r\n                error: function () {\r\n                    report(false);\r\n                }\r\n            });\r\n        } else {\r\n            report(false);\r\n        }\r\n    }\r\n\r\n    function load(request) {\r\n        const report = function (data, error) {\r\n            eventBus.trigger(events.LOADING_COMPLETED, {\r\n                request: request,\r\n                response: data || null,\r\n                error: error || null,\r\n                sender: instance\r\n            });\r\n        };\r\n\r\n        if (request) {\r\n            urlLoader.load({\r\n                request: request,\r\n                progress: function (event) {\r\n                    eventBus.trigger(events.LOADING_PROGRESS, {\r\n                        request: request,\r\n                        stream: event.stream\r\n                    });\r\n                    if (event.data) {\r\n                        eventBus.trigger(events.LOADING_DATA_PROGRESS, {\r\n                            request: request,\r\n                            response: event.data || null,\r\n                            error: null,\r\n                            sender: instance\r\n                        });\r\n                    }\r\n                },\r\n                success: function (data) {\r\n                    report(data);\r\n                },\r\n                error: function (request, statusText, errorText) {\r\n                    report(\r\n                        undefined,\r\n                        new DashJSError(\r\n                            errors.FRAGMENT_LOADER_LOADING_FAILURE_ERROR_CODE,\r\n                            errorText,\r\n                            statusText\r\n                        )\r\n                    );\r\n                },\r\n                abort: function (request) {\r\n                    if (request) {\r\n                        eventBus.trigger(events.LOADING_ABANDONED, {\r\n                            mediaType: request.mediaType,\r\n                            request: request,\r\n                            sender: instance\r\n                        });\r\n                    }\r\n                }\r\n            });\r\n        } else {\r\n            report(\r\n                undefined,\r\n                new DashJSError(\r\n                    errors.FRAGMENT_LOADER_NULL_REQUEST_ERROR_CODE,\r\n                    errors.FRAGMENT_LOADER_NULL_REQUEST_ERROR_MESSAGE\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n    function abort() {\r\n        if (urlLoader) {\r\n            urlLoader.abort();\r\n        }\r\n    }\r\n\r\n    function reset() {\r\n        if (urlLoader) {\r\n            urlLoader.abort();\r\n            urlLoader = null;\r\n        }\r\n    }\r\n\r\n    instance = {\r\n        checkForExistence: checkForExistence,\r\n        load: load,\r\n        abort: abort,\r\n        reset: reset\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\nFragmentLoader.__dashjs_factory_name = 'FragmentLoader';\r\nexport default FactoryMaker.getClassFactory(FragmentLoader);\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport Constants from './constants/Constants';\r\nimport DashConstants from '../dash/constants/DashConstants';\r\nimport XlinkController from './controllers/XlinkController';\r\nimport URLLoader from './net/URLLoader';\r\nimport URLUtils from './utils/URLUtils';\r\nimport TextRequest from './vo/TextRequest';\r\nimport DashJSError from './vo/DashJSError';\r\nimport {HTTPRequest} from './vo/metrics/HTTPRequest';\r\nimport EventBus from '../core/EventBus';\r\nimport Events from '../core/events/Events';\r\nimport Errors from '../core/errors/Errors';\r\nimport FactoryMaker from '../core/FactoryMaker';\r\nimport DashParser from '../dash/parser/DashParser';\r\n\r\nfunction ManifestLoader(config) {\r\n\r\n    config = config || {};\r\n    const context = this.context;\r\n    const debug = config.debug;\r\n    const eventBus = EventBus(context).getInstance();\r\n    const urlUtils = URLUtils(context).getInstance();\r\n\r\n    let instance,\r\n        logger,\r\n        urlLoader,\r\n        xlinkController,\r\n        parser;\r\n\r\n    let mssHandler = config.mssHandler;\r\n    let errHandler = config.errHandler;\r\n\r\n    function setup() {\r\n        logger = debug.getLogger(instance);\r\n        eventBus.on(Events.XLINK_READY, onXlinkReady, instance);\r\n\r\n        urlLoader = URLLoader(context).create({\r\n            errHandler: config.errHandler,\r\n            dashMetrics: config.dashMetrics,\r\n            mediaPlayerModel: config.mediaPlayerModel,\r\n            requestModifier: config.requestModifier,\r\n            useFetch: config.settings.get().streaming.lowLatencyEnabled,\r\n            urlUtils: urlUtils,\r\n            constants: Constants,\r\n            dashConstants: DashConstants,\r\n            errors: Errors\r\n        });\r\n\r\n        xlinkController = XlinkController(context).create({\r\n            errHandler: errHandler,\r\n            dashMetrics: config.dashMetrics,\r\n            mediaPlayerModel: config.mediaPlayerModel,\r\n            requestModifier: config.requestModifier,\r\n            settings: config.settings\r\n        });\r\n\r\n        parser = null;\r\n    }\r\n\r\n    function onXlinkReady(event) {\r\n        eventBus.trigger(Events.INTERNAL_MANIFEST_LOADED, { manifest: event.manifest });\r\n    }\r\n\r\n    function createParser(data) {\r\n        let parser = null;\r\n        // Analyze manifest content to detect protocol and select appropriate parser\r\n        if (data.indexOf('SmoothStreamingMedia') > -1) {\r\n            //do some business to transform it into a Dash Manifest\r\n            if (mssHandler) {\r\n                parser = mssHandler.createMssParser();\r\n                mssHandler.registerEvents();\r\n            }\r\n            return parser;\r\n        } else if (data.indexOf('MPD') > -1) {\r\n            return DashParser(context).create({debug: debug});\r\n        } else {\r\n            return parser;\r\n        }\r\n    }\r\n\r\n    function load(url) {\r\n\r\n        const request = new TextRequest(url, HTTPRequest.MPD_TYPE);\r\n\r\n        urlLoader.load({\r\n            request: request,\r\n            success: function (data, textStatus, responseURL) {\r\n                // Manage situations in which success is called after calling reset\r\n                if (!xlinkController) return;\r\n\r\n                let actualUrl,\r\n                    baseUri,\r\n                    manifest;\r\n\r\n                // Handle redirects for the MPD - as per RFC3986 Section 5.1.3\r\n                // also handily resolves relative MPD URLs to absolute\r\n                if (responseURL && responseURL !== url) {\r\n                    baseUri = urlUtils.parseBaseUrl(responseURL);\r\n                    actualUrl = responseURL;\r\n                } else {\r\n                    // usually this case will be caught and resolved by\r\n                    // responseURL above but it is not available for IE11 and Edge/12 and Edge/13\r\n                    // baseUri must be absolute for BaseURL resolution later\r\n                    if (urlUtils.isRelative(url)) {\r\n                        url = urlUtils.resolve(url, window.location.href);\r\n                    }\r\n\r\n                    baseUri = urlUtils.parseBaseUrl(url);\r\n                }\r\n\r\n                // Create parser according to manifest type\r\n                if (parser === null) {\r\n                    parser = createParser(data);\r\n                }\r\n\r\n                if (parser === null) {\r\n                    eventBus.trigger(Events.INTERNAL_MANIFEST_LOADED, {\r\n                        manifest: null,\r\n                        error: new DashJSError(\r\n                            Errors.MANIFEST_LOADER_PARSING_FAILURE_ERROR_CODE,\r\n                            Errors.MANIFEST_LOADER_PARSING_FAILURE_ERROR_MESSAGE + `${url}`\r\n                        )\r\n                    });\r\n                    return;\r\n                }\r\n\r\n                // init xlinkcontroller with matchers and iron object from created parser\r\n                xlinkController.setMatchers(parser.getMatchers());\r\n                xlinkController.setIron(parser.getIron());\r\n\r\n                try {\r\n                    manifest = parser.parse(data);\r\n                } catch (e) {\r\n                    eventBus.trigger(Events.INTERNAL_MANIFEST_LOADED, {\r\n                        manifest: null,\r\n                        error: new DashJSError(\r\n                            Errors.MANIFEST_LOADER_PARSING_FAILURE_ERROR_CODE,\r\n                            Errors.MANIFEST_LOADER_PARSING_FAILURE_ERROR_MESSAGE + `${url}`\r\n                        )\r\n                    });\r\n                    return;\r\n                }\r\n\r\n                if (manifest) {\r\n                    manifest.url = actualUrl || url;\r\n\r\n                    // URL from which the MPD was originally retrieved (MPD updates will not change this value)\r\n                    if (!manifest.originalUrl) {\r\n                        manifest.originalUrl = manifest.url;\r\n                    }\r\n\r\n                    // In the following, we only use the first Location entry even if many are available\r\n                    // Compare with ManifestUpdater/DashManifestModel\r\n                    if (manifest.hasOwnProperty(Constants.LOCATION)) {\r\n                        baseUri = urlUtils.parseBaseUrl(manifest.Location_asArray[0]);\r\n                        logger.debug('BaseURI set by Location to: ' + baseUri);\r\n                    }\r\n\r\n                    manifest.baseUri = baseUri;\r\n                    manifest.loadedTime = new Date();\r\n                    xlinkController.resolveManifestOnLoad(manifest);\r\n\r\n                    eventBus.trigger(Events.ORIGINAL_MANIFEST_LOADED, { originalManifest: data });\r\n                } else {\r\n                    eventBus.trigger(Events.INTERNAL_MANIFEST_LOADED, {\r\n                        manifest: null,\r\n                        error: new DashJSError(\r\n                            Errors.MANIFEST_LOADER_PARSING_FAILURE_ERROR_CODE,\r\n                            Errors.MANIFEST_LOADER_PARSING_FAILURE_ERROR_MESSAGE + `${url}`\r\n                        )\r\n                    });\r\n                }\r\n            },\r\n            error: function (request, statusText, errorText) {\r\n                eventBus.trigger(Events.INTERNAL_MANIFEST_LOADED, {\r\n                    manifest: null,\r\n                    error: new DashJSError(\r\n                        Errors.MANIFEST_LOADER_LOADING_FAILURE_ERROR_CODE,\r\n                        Errors.MANIFEST_LOADER_LOADING_FAILURE_ERROR_MESSAGE + `${url}, ${errorText}`\r\n                    )\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    function reset() {\r\n        eventBus.off(Events.XLINK_READY, onXlinkReady, instance);\r\n\r\n        if (xlinkController) {\r\n            xlinkController.reset();\r\n            xlinkController = null;\r\n        }\r\n\r\n        if (urlLoader) {\r\n            urlLoader.abort();\r\n            urlLoader = null;\r\n        }\r\n\r\n        if (mssHandler) {\r\n            mssHandler.reset();\r\n        }\r\n    }\r\n\r\n    instance = {\r\n        load: load,\r\n        reset: reset\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\nManifestLoader.__dashjs_factory_name = 'ManifestLoader';\r\n\r\nconst factory = FactoryMaker.getClassFactory(ManifestLoader);\r\nexport default factory;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport EventBus from '../core/EventBus';\r\nimport Events from '../core/events/Events';\r\nimport FactoryMaker from '../core/FactoryMaker';\r\nimport Debug from '../core/Debug';\r\nimport Errors from '../core/errors/Errors';\r\nimport DashConstants from '../dash/constants/DashConstants';\r\n\r\nfunction ManifestUpdater() {\r\n\r\n    const context = this.context;\r\n    const eventBus = EventBus(context).getInstance();\r\n\r\n    let instance,\r\n        logger,\r\n        refreshDelay,\r\n        refreshTimer,\r\n        isPaused,\r\n        isStopped,\r\n        isUpdating,\r\n        manifestLoader,\r\n        manifestModel,\r\n        adapter,\r\n        errHandler,\r\n        settings;\r\n\r\n    function setup() {\r\n        logger = Debug(context).getInstance().getLogger(instance);\r\n    }\r\n\r\n    function setConfig(config) {\r\n        if (!config) return;\r\n\r\n        if (config.manifestModel) {\r\n            manifestModel = config.manifestModel;\r\n        }\r\n        if (config.adapter) {\r\n            adapter = config.adapter;\r\n        }\r\n        if (config.manifestLoader) {\r\n            manifestLoader = config.manifestLoader;\r\n        }\r\n        if (config.errHandler) {\r\n            errHandler = config.errHandler;\r\n        }\r\n        if (config.settings) {\r\n            settings = config.settings;\r\n        }\r\n    }\r\n\r\n    function initialize() {\r\n        resetInitialSettings();\r\n\r\n        eventBus.on(Events.STREAMS_COMPOSED, onStreamsComposed, this);\r\n        eventBus.on(Events.PLAYBACK_STARTED, onPlaybackStarted, this);\r\n        eventBus.on(Events.PLAYBACK_PAUSED, onPlaybackPaused, this);\r\n        eventBus.on(Events.INTERNAL_MANIFEST_LOADED, onManifestLoaded, this);\r\n    }\r\n\r\n    function setManifest(manifest) {\r\n        update(manifest);\r\n    }\r\n\r\n    function resetInitialSettings() {\r\n        refreshDelay = NaN;\r\n        isUpdating = false;\r\n        isPaused = true;\r\n        isStopped = false;\r\n        stopManifestRefreshTimer();\r\n    }\r\n\r\n    function reset() {\r\n\r\n        eventBus.off(Events.PLAYBACK_STARTED, onPlaybackStarted, this);\r\n        eventBus.off(Events.PLAYBACK_PAUSED, onPlaybackPaused, this);\r\n        eventBus.off(Events.STREAMS_COMPOSED, onStreamsComposed, this);\r\n        eventBus.off(Events.INTERNAL_MANIFEST_LOADED, onManifestLoaded, this);\r\n\r\n        resetInitialSettings();\r\n    }\r\n\r\n    function stopManifestRefreshTimer() {\r\n        if (refreshTimer !== null) {\r\n            clearTimeout(refreshTimer);\r\n            refreshTimer = null;\r\n        }\r\n    }\r\n\r\n    function startManifestRefreshTimer(delay) {\r\n        stopManifestRefreshTimer();\r\n\r\n        if (isStopped) {\r\n            return;\r\n        }\r\n\r\n        if (isNaN(delay) && !isNaN(refreshDelay)) {\r\n            delay = refreshDelay * 1000;\r\n        }\r\n\r\n        if (!isNaN(delay)) {\r\n            logger.debug('Refresh manifest in ' + delay + ' milliseconds.');\r\n            refreshTimer = setTimeout(onRefreshTimer, delay);\r\n        }\r\n    }\r\n\r\n    function refreshManifest() {\r\n        isUpdating = true;\r\n        const manifest = manifestModel.getValue();\r\n        let url = manifest.url;\r\n        const location = adapter.getLocation(manifest);\r\n        if (location) {\r\n            url = location;\r\n        }\r\n        manifestLoader.load(url);\r\n    }\r\n\r\n    function update(manifest) {\r\n\r\n        // See DASH-IF IOP v4.3 section 4.6.4 \"Transition Phase between Live and On-Demand\"\r\n        // Stop manifest update, ignore static manifest and signal end of dynamic stream to detect end of stream\r\n        if (manifestModel.getValue() && manifestModel.getValue().type === DashConstants.DYNAMIC && manifest.type === DashConstants.STATIC) {\r\n            eventBus.trigger(Events.DYNAMIC_TO_STATIC);\r\n            isUpdating = false;\r\n            isStopped = true;\r\n            return;\r\n        }\r\n\r\n        manifestModel.setValue(manifest);\r\n\r\n        const date = new Date();\r\n        const latencyOfLastUpdate = (date.getTime() - manifest.loadedTime.getTime()) / 1000;\r\n        refreshDelay = adapter.getManifestUpdatePeriod(manifest, latencyOfLastUpdate);\r\n        // setTimeout uses a 32 bit number to store the delay. Any number greater than it\r\n        // will cause event associated with setTimeout to trigger immediately\r\n        if (refreshDelay * 1000 > 0x7FFFFFFF) {\r\n            refreshDelay = 0x7FFFFFFF / 1000;\r\n        }\r\n        eventBus.trigger(Events.MANIFEST_UPDATED, { manifest: manifest });\r\n        logger.info('Manifest has been refreshed at ' + date + '[' + date.getTime() / 1000 + '] ');\r\n\r\n        if (!isPaused) {\r\n            startManifestRefreshTimer();\r\n        }\r\n    }\r\n\r\n    function onRefreshTimer() {\r\n        if (isPaused) {\r\n            return;\r\n        }\r\n        if (isUpdating) {\r\n            startManifestRefreshTimer(settings.get().streaming.manifestUpdateRetryInterval);\r\n            return;\r\n        }\r\n        refreshManifest();\r\n    }\r\n\r\n    function onManifestLoaded(e) {\r\n        if (!e.error) {\r\n            update(e.manifest);\r\n        } else if (e.error.code === Errors.MANIFEST_LOADER_PARSING_FAILURE_ERROR_CODE) {\r\n            errHandler.error(e.error);\r\n        }\r\n    }\r\n\r\n    function onPlaybackStarted (/*e*/) {\r\n        isPaused = false;\r\n        startManifestRefreshTimer();\r\n    }\r\n\r\n    function onPlaybackPaused(/*e*/) {\r\n        isPaused = !settings.get().streaming.scheduleWhilePaused;\r\n\r\n        if (isPaused) {\r\n            stopManifestRefreshTimer();\r\n        }\r\n    }\r\n\r\n    function onStreamsComposed(/*e*/) {\r\n        // When streams are ready we can consider manifest update completed. Resolve the update promise.\r\n        isUpdating = false;\r\n    }\r\n\r\n    instance = {\r\n        initialize: initialize,\r\n        setManifest: setManifest,\r\n        refreshManifest: refreshManifest,\r\n        setConfig: setConfig,\r\n        reset: reset\r\n    };\r\n\r\n    setup();\r\n    return instance;\r\n}\r\nManifestUpdater.__dashjs_factory_name = 'ManifestUpdater';\r\nexport default FactoryMaker.getClassFactory(ManifestUpdater);\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport cea608parser from '../../externals/cea608-parser';\r\nimport Constants from './constants/Constants';\r\nimport DashConstants from '../dash/constants/DashConstants';\r\nimport MetricsConstants from './constants/MetricsConstants';\r\nimport PlaybackController from './controllers/PlaybackController';\r\nimport StreamController from './controllers/StreamController';\r\nimport GapController from './controllers/GapController';\r\nimport MediaController from './controllers/MediaController';\r\nimport BaseURLController from './controllers/BaseURLController';\r\nimport ManifestLoader from './ManifestLoader';\r\nimport ErrorHandler from './utils/ErrorHandler';\r\nimport Capabilities from './utils/Capabilities';\r\nimport TextTracks from './text/TextTracks';\r\nimport RequestModifier from './utils/RequestModifier';\r\nimport TextController from './text/TextController';\r\nimport URIFragmentModel from './models/URIFragmentModel';\r\nimport ManifestModel from './models/ManifestModel';\r\nimport MediaPlayerModel from './models/MediaPlayerModel';\r\nimport AbrController from './controllers/AbrController';\r\nimport SchemeLoaderFactory from './net/SchemeLoaderFactory';\r\nimport VideoModel from './models/VideoModel';\r\nimport CmcdModel from './models/CmcdModel';\r\nimport DOMStorage from './utils/DOMStorage';\r\nimport Debug from './../core/Debug';\r\nimport Errors from './../core/errors/Errors';\r\nimport EventBus from './../core/EventBus';\r\nimport Events from './../core/events/Events';\r\nimport MediaPlayerEvents from './MediaPlayerEvents';\r\nimport FactoryMaker from '../core/FactoryMaker';\r\nimport Settings from '../core/Settings';\r\nimport {\r\n    getVersionString\r\n}\r\nfrom './../core/Version';\r\n\r\n//Dash\r\nimport SegmentBaseController from '../dash/controllers/SegmentBaseController';\r\nimport DashAdapter from '../dash/DashAdapter';\r\nimport DashMetrics from '../dash/DashMetrics';\r\nimport TimelineConverter from '../dash/utils/TimelineConverter';\r\nimport {\r\n    HTTPRequest\r\n} from './vo/metrics/HTTPRequest';\r\nimport BASE64 from '../../externals/base64';\r\nimport ISOBoxer from 'codem-isoboxer';\r\nimport DashJSError from './vo/DashJSError';\r\nimport { checkParameterType } from './utils/SupervisorTools';\r\nimport ManifestUpdater from './ManifestUpdater';\r\nimport URLUtils from '../streaming/utils/URLUtils';\r\nimport BoxParser from './utils/BoxParser';\r\n\r\n/* jscs:disable */\r\n/**\r\n * The media types\r\n * @typedef {(\"video\" | \"audio\" | \"text\" | \"fragmentedText\" | \"embeddedText\" | \"image\")} MediaType\r\n */\r\n/* jscs:enable */\r\n\r\n/**\r\n * @module MediaPlayer\r\n * @description The MediaPlayer is the primary dash.js Module and a Facade to build your player around.\r\n * It will allow you access to all the important dash.js properties/methods via the public API and all the\r\n * events to build a robust DASH media player.\r\n */\r\nfunction MediaPlayer() {\r\n    /**\r\n    * @constant {string} STREAMING_NOT_INITIALIZED_ERROR error string thrown when a function is called before the dash.js has been fully initialized\r\n    * @inner\r\n    */\r\n    const STREAMING_NOT_INITIALIZED_ERROR = 'You must first call initialize() and set a source before calling this method';\r\n    /**\r\n    * @constant {string} PLAYBACK_NOT_INITIALIZED_ERROR error string thrown when a function is called before the dash.js has been fully initialized\r\n    * @inner\r\n    */\r\n    const PLAYBACK_NOT_INITIALIZED_ERROR = 'You must first call initialize() and set a valid source and view before calling this method';\r\n    /**\r\n    * @constant {string} ELEMENT_NOT_ATTACHED_ERROR error string thrown when a function is called before the dash.js has received a reference of an HTML5 video element\r\n    * @inner\r\n    */\r\n    const ELEMENT_NOT_ATTACHED_ERROR = 'You must first call attachView() to set the video element before calling this method';\r\n    /**\r\n    * @constant {string} SOURCE_NOT_ATTACHED_ERROR error string thrown when a function is called before the dash.js has received a valid source stream.\r\n    * @inner\r\n    */\r\n    const SOURCE_NOT_ATTACHED_ERROR = 'You must first call attachSource() with a valid source before calling this method';\r\n    /**\r\n    * @constant {string} MEDIA_PLAYER_NOT_INITIALIZED_ERROR error string thrown when a function is called before the dash.js has been fully initialized.\r\n    * @inner\r\n    */\r\n    const MEDIA_PLAYER_NOT_INITIALIZED_ERROR = 'MediaPlayer not initialized!';\r\n\r\n    const context = this.context;\r\n    const eventBus = EventBus(context).getInstance();\r\n    let settings = Settings(context).getInstance();\r\n    const debug = Debug(context).getInstance({settings: settings});\r\n\r\n    let instance,\r\n        logger,\r\n        source,\r\n        protectionData,\r\n        mediaPlayerInitialized,\r\n        streamingInitialized,\r\n        playbackInitialized,\r\n        autoPlay,\r\n        abrController,\r\n        schemeLoaderFactory,\r\n        timelineConverter,\r\n        mediaController,\r\n        protectionController,\r\n        metricsReportingController,\r\n        mssHandler,\r\n        offlineController,\r\n        adapter,\r\n        mediaPlayerModel,\r\n        errHandler,\r\n        baseURLController,\r\n        capabilities,\r\n        streamController,\r\n        gapController,\r\n        playbackController,\r\n        dashMetrics,\r\n        manifestModel,\r\n        cmcdModel,\r\n        videoModel,\r\n        textController,\r\n        uriFragmentModel,\r\n        domStorage,\r\n        segmentBaseController;\r\n\r\n    /*\r\n    ---------------------------------------------------------------------------\r\n\r\n        INIT FUNCTIONS\r\n\r\n    ---------------------------------------------------------------------------\r\n    */\r\n    function setup() {\r\n        logger = debug.getLogger(instance);\r\n        mediaPlayerInitialized = false;\r\n        playbackInitialized = false;\r\n        streamingInitialized = false;\r\n        autoPlay = true;\r\n        protectionController = null;\r\n        offlineController = null;\r\n        protectionData = null;\r\n        adapter = null;\r\n        segmentBaseController = null;\r\n        Events.extend(MediaPlayerEvents);\r\n        mediaPlayerModel = MediaPlayerModel(context).getInstance();\r\n        videoModel = VideoModel(context).getInstance();\r\n        uriFragmentModel = URIFragmentModel(context).getInstance();\r\n    }\r\n\r\n    /**\r\n     * Configure media player with customs controllers. Helpful for tests\r\n     *\r\n     * @param {object=} config controllers configuration\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function setConfig(config) {\r\n        if (!config) {\r\n            return;\r\n        }\r\n        if (config.capabilities) {\r\n            capabilities = config.capabilities;\r\n        }\r\n        if (config.streamController) {\r\n            streamController = config.streamController;\r\n        }\r\n        if (config.gapController) {\r\n            gapController = config.gapController;\r\n        }\r\n        if (config.playbackController) {\r\n            playbackController = config.playbackController;\r\n        }\r\n        if (config.mediaPlayerModel) {\r\n            mediaPlayerModel = config.mediaPlayerModel;\r\n        }\r\n        if (config.abrController) {\r\n            abrController = config.abrController;\r\n        }\r\n        if (config.schemeLoaderFactory) {\r\n            schemeLoaderFactory = config.schemeLoaderFactory;\r\n        }\r\n        if (config.mediaController) {\r\n            mediaController = config.mediaController;\r\n        }\r\n        if (config.settings) {\r\n            settings = config.settings;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Upon creating the MediaPlayer you must call initialize before you call anything else.\r\n     * There is one exception to this rule. It is crucial to call {@link module:MediaPlayer#extend extend()}\r\n     * with all your extensions prior to calling initialize.\r\n     *\r\n     * ALL arguments are optional and there are individual methods to set each argument later on.\r\n     * The args in this method are just for convenience and should only be used for a simple player setup.\r\n     *\r\n     * @param {HTML5MediaElement=} view - Optional arg to set the video element. {@link module:MediaPlayer#attachView attachView()}\r\n     * @param {string=} source - Optional arg to set the media source. {@link module:MediaPlayer#attachSource attachSource()}\r\n     * @param {boolean=} AutoPlay - Optional arg to set auto play. {@link module:MediaPlayer#setAutoPlay setAutoPlay()}\r\n     * @see {@link module:MediaPlayer#attachView attachView()}\r\n     * @see {@link module:MediaPlayer#attachSource attachSource()}\r\n     * @see {@link module:MediaPlayer#setAutoPlay setAutoPlay()}\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function initialize(view, source, AutoPlay) {\r\n        if (!capabilities) {\r\n            capabilities = Capabilities(context).getInstance();\r\n        }\r\n        errHandler = ErrorHandler(context).getInstance();\r\n\r\n        if (!capabilities.supportsMediaSource()) {\r\n            errHandler.error(new DashJSError(Errors.CAPABILITY_MEDIASOURCE_ERROR_CODE, Errors.CAPABILITY_MEDIASOURCE_ERROR_MESSAGE));\r\n            return;\r\n        }\r\n\r\n        if (mediaPlayerInitialized) return;\r\n        mediaPlayerInitialized = true;\r\n\r\n        // init some controllers and models\r\n        timelineConverter = TimelineConverter(context).getInstance();\r\n        if (!abrController) {\r\n            abrController = AbrController(context).getInstance();\r\n            abrController.setConfig({\r\n                settings: settings\r\n            });\r\n        }\r\n\r\n        if (!schemeLoaderFactory) {\r\n            schemeLoaderFactory = SchemeLoaderFactory(context).getInstance();\r\n        }\r\n\r\n        if (!playbackController) {\r\n            playbackController = PlaybackController(context).getInstance();\r\n        }\r\n\r\n        if (!mediaController) {\r\n            mediaController = MediaController(context).getInstance();\r\n        }\r\n\r\n        if (!streamController) {\r\n            streamController = StreamController(context).getInstance();\r\n        }\r\n\r\n        if (!gapController) {\r\n            gapController = GapController(context).getInstance();\r\n        }\r\n\r\n        adapter = DashAdapter(context).getInstance();\r\n\r\n        manifestModel = ManifestModel(context).getInstance();\r\n\r\n        cmcdModel = CmcdModel(context).getInstance();\r\n\r\n        dashMetrics = DashMetrics(context).getInstance({\r\n            settings: settings\r\n        });\r\n        textController = TextController(context).getInstance();\r\n        domStorage = DOMStorage(context).getInstance({\r\n            settings: settings\r\n        });\r\n\r\n        adapter.setConfig({\r\n            constants: Constants,\r\n            cea608parser: cea608parser,\r\n            errHandler: errHandler,\r\n            BASE64: BASE64\r\n        });\r\n\r\n        if (!baseURLController) {\r\n            baseURLController = BaseURLController(context).create();\r\n        }\r\n\r\n        baseURLController.setConfig({\r\n            adapter: adapter\r\n        });\r\n\r\n\r\n        segmentBaseController = SegmentBaseController(context).getInstance({\r\n            dashMetrics: dashMetrics,\r\n            mediaPlayerModel: mediaPlayerModel,\r\n            errHandler: errHandler,\r\n            baseURLController: baseURLController,\r\n            events: Events,\r\n            eventBus: eventBus,\r\n            debug: debug,\r\n            boxParser: BoxParser(context).getInstance(),\r\n            requestModifier: RequestModifier(context).getInstance(),\r\n            errors: Errors\r\n        });\r\n\r\n        segmentBaseController.initialize();\r\n\r\n        // configure controllers\r\n        mediaController.setConfig({\r\n            domStorage: domStorage,\r\n            settings: settings\r\n        });\r\n\r\n        restoreDefaultUTCTimingSources();\r\n        setAutoPlay(AutoPlay !== undefined ? AutoPlay : true);\r\n\r\n        // Detect and initialize offline module to support offline contents playback\r\n        detectOffline();\r\n\r\n        if (view) {\r\n            attachView(view);\r\n        }\r\n\r\n        if (source) {\r\n            attachSource(source);\r\n        }\r\n\r\n        logger.info('[dash.js ' + getVersion() + '] ' + 'MediaPlayer has been initialized');\r\n    }\r\n\r\n    /**\r\n     * Sets the MPD source and the video element to null. You can also reset the MediaPlayer by\r\n     * calling attachSource with a new source file.\r\n     *\r\n     * This call does not destroy the MediaPlayer. To destroy the MediaPlayer and free all of its\r\n     * memory, call destroy().\r\n     *\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function reset() {\r\n        attachSource(null);\r\n        attachView(null);\r\n        protectionData = null;\r\n        if (protectionController) {\r\n            protectionController.reset();\r\n            protectionController = null;\r\n        }\r\n        if (metricsReportingController) {\r\n            metricsReportingController.reset();\r\n            metricsReportingController = null;\r\n        }\r\n\r\n        segmentBaseController.reset();\r\n\r\n        settings.reset();\r\n\r\n        if (offlineController) {\r\n            offlineController.reset();\r\n            offlineController = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Completely destroys the media player and frees all memory.\r\n     *\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function destroy() {\r\n        reset();\r\n        FactoryMaker.deleteSingletonInstances(context);\r\n    }\r\n\r\n    /**\r\n     * The ready state of the MediaPlayer based on both the video element and MPD source being defined.\r\n     *\r\n     * @returns {boolean} The current ready state of the MediaPlayer\r\n     * @see {@link module:MediaPlayer#attachView attachView()}\r\n     * @see {@link module:MediaPlayer#attachSource attachSource()}\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function isReady() {\r\n        return (!!source && !!videoModel.getElement());\r\n    }\r\n\r\n    /**\r\n     * Use the on method to listen for public events found in MediaPlayer.events. {@link MediaPlayerEvents}\r\n     *\r\n     * @param {string} type - {@link MediaPlayerEvents}\r\n     * @param {Function} listener - callback method when the event fires.\r\n     * @param {Object} scope - context of the listener so it can be removed properly.\r\n     * @param {Object} options - object to define various options such as priority and mode\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function on(type, listener, scope, options) {\r\n        eventBus.on(type, listener, scope, options);\r\n    }\r\n\r\n    /**\r\n     * Use the off method to remove listeners for public events found in MediaPlayer.events. {@link MediaPlayerEvents}\r\n     *\r\n     * @param {string} type - {@link MediaPlayerEvents}\r\n     * @param {Function} listener - callback method when the event fires.\r\n     * @param {Object} scope - context of the listener so it can be removed properly.\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function off(type, listener, scope) {\r\n        eventBus.off(type, listener, scope);\r\n    }\r\n\r\n    /**\r\n     * Current version of Dash.js\r\n     * @returns {string} the current dash.js version string.\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function getVersion() {\r\n        return getVersionString();\r\n    }\r\n\r\n    /**\r\n     * Use this method to access the dash.js logging class.\r\n     *\r\n     * @returns {Debug}\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function getDebug() {\r\n        return debug;\r\n    }\r\n\r\n    /*\r\n    ---------------------------------------------------------------------------\r\n\r\n        PLAYBACK FUNCTIONS\r\n\r\n    ---------------------------------------------------------------------------\r\n    */\r\n\r\n    /**\r\n     * Causes the player to begin streaming the media as set by the {@link module:MediaPlayer#attachSource attachSource()}\r\n     * method in preparation for playing. It specifically does not require a view to be attached with {@link module:MediaPlayer#attachSource attachView()} to begin preloading.\r\n     * When a view is attached after preloading, the buffered data is transferred to the attached mediaSource buffers.\r\n     *\r\n     * @see {@link module:MediaPlayer#attachSource attachSource()}\r\n     * @see {@link module:MediaPlayer#attachView attachView()}\r\n     * @memberof module:MediaPlayer\r\n     * @throws {@link module:MediaPlayer~SOURCE_NOT_ATTACHED_ERROR SOURCE_NOT_ATTACHED_ERROR} if called before attachSource function\r\n     * @instance\r\n     */\r\n    function preload() {\r\n        if (videoModel.getElement() || streamingInitialized) {\r\n            return false;\r\n        }\r\n        if (source) {\r\n            initializePlayback();\r\n        } else {\r\n            throw SOURCE_NOT_ATTACHED_ERROR;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The play method initiates playback of the media defined by the {@link module:MediaPlayer#attachSource attachSource()} method.\r\n     * This method will call play on the native Video Element.\r\n     *\r\n     * @see {@link module:MediaPlayer#attachSource attachSource()}\r\n     * @throws {@link module:MediaPlayer~PLAYBACK_NOT_INITIALIZED_ERROR PLAYBACK_NOT_INITIALIZED_ERROR} if called before initializePlayback function\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function play() {\r\n        if (!playbackInitialized) {\r\n            throw PLAYBACK_NOT_INITIALIZED_ERROR;\r\n        }\r\n        if (!autoPlay || (isPaused() && playbackInitialized)) {\r\n            playbackController.play();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This method will call pause on the native Video Element.\r\n     *\r\n     * @throws {@link module:MediaPlayer~PLAYBACK_NOT_INITIALIZED_ERROR PLAYBACK_NOT_INITIALIZED_ERROR} if called before initializePlayback function\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function pause() {\r\n        if (!playbackInitialized) {\r\n            throw PLAYBACK_NOT_INITIALIZED_ERROR;\r\n        }\r\n        playbackController.pause();\r\n    }\r\n\r\n    /**\r\n     * Returns a Boolean that indicates whether the Video Element is paused.\r\n     * @return {boolean}\r\n     * @throws {@link module:MediaPlayer~PLAYBACK_NOT_INITIALIZED_ERROR PLAYBACK_NOT_INITIALIZED_ERROR} if called before initializePlayback function\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function isPaused() {\r\n        if (!playbackInitialized) {\r\n            throw PLAYBACK_NOT_INITIALIZED_ERROR;\r\n        }\r\n        return playbackController.isPaused();\r\n    }\r\n\r\n    /**\r\n     * Sets the currentTime property of the attached video element.  If it is a live stream with a\r\n     * timeShiftBufferLength, then the DVR window offset will be automatically calculated.\r\n     *\r\n     * @param {number} value - A relative time, in seconds, based on the return value of the {@link module:MediaPlayer#duration duration()} method is expected\r\n     * @see {@link module:MediaPlayer#getDVRSeekOffset getDVRSeekOffset()}\r\n     * @throws {@link module:MediaPlayer~PLAYBACK_NOT_INITIALIZED_ERROR PLAYBACK_NOT_INITIALIZED_ERROR} if called before initializePlayback function\r\n     * @throws {@link Constants#BAD_ARGUMENT_ERROR BAD_ARGUMENT_ERROR} if called with an invalid argument, not number type or is NaN.\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function seek(value) {\r\n        if (!playbackInitialized) {\r\n            throw PLAYBACK_NOT_INITIALIZED_ERROR;\r\n        }\r\n\r\n        checkParameterType(value, 'number');\r\n\r\n        if (isNaN(value)) {\r\n            throw Constants.BAD_ARGUMENT_ERROR;\r\n        }\r\n\r\n        let s = playbackController.getIsDynamic() ? getDVRSeekOffset(value) : value;\r\n        playbackController.seek(s);\r\n    }\r\n\r\n    /**\r\n     * Returns a Boolean that indicates whether the media is in the process of seeking to a new position.\r\n     * @return {boolean}\r\n     * @throws {@link module:MediaPlayer~PLAYBACK_NOT_INITIALIZED_ERROR PLAYBACK_NOT_INITIALIZED_ERROR} if called before initializePlayback function\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function isSeeking() {\r\n        if (!playbackInitialized) {\r\n            throw PLAYBACK_NOT_INITIALIZED_ERROR;\r\n        }\r\n        return playbackController.isSeeking();\r\n    }\r\n\r\n    /**\r\n     * Returns a Boolean that indicates whether the media is in the process of dynamic.\r\n     * @return {boolean}\r\n     * @throws {@link module:MediaPlayer~PLAYBACK_NOT_INITIALIZED_ERROR PLAYBACK_NOT_INITIALIZED_ERROR} if called before initializePlayback function\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function isDynamic() {\r\n        if (!playbackInitialized) {\r\n            throw PLAYBACK_NOT_INITIALIZED_ERROR;\r\n        }\r\n        return playbackController.getIsDynamic();\r\n    }\r\n\r\n    /**\r\n     * Use this method to set the native Video Element's playback rate.\r\n     * @param {number} value\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function setPlaybackRate(value) {\r\n        getVideoElement().playbackRate = value;\r\n    }\r\n\r\n    /**\r\n     * Returns the current playback rate.\r\n     * @returns {number}\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function getPlaybackRate() {\r\n        return getVideoElement().playbackRate;\r\n    }\r\n\r\n    /**\r\n     * Use this method to set the native Video Element's muted state. Takes a Boolean that determines whether audio is muted. true if the audio is muted and false otherwise.\r\n     * @param {boolean} value\r\n     * @memberof module:MediaPlayer\r\n     * @throws {@link Constants#BAD_ARGUMENT_ERROR BAD_ARGUMENT_ERROR} if called with an invalid argument, not boolean type.\r\n     * @instance\r\n     */\r\n    function setMute(value) {\r\n        checkParameterType(value, 'boolean');\r\n        getVideoElement().muted = value;\r\n    }\r\n\r\n    /**\r\n     * A Boolean that determines whether audio is muted.\r\n     * @returns {boolean}\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function isMuted() {\r\n        return getVideoElement().muted;\r\n    }\r\n\r\n    /**\r\n     * A double indicating the audio volume, from 0.0 (silent) to 1.0 (loudest).\r\n     * @param {number} value\r\n     * @memberof module:MediaPlayer\r\n     * @throws {@link Constants#BAD_ARGUMENT_ERROR BAD_ARGUMENT_ERROR} if called with an invalid argument, not number type, or is NaN or not between 0 and 1.\r\n     * @instance\r\n     */\r\n    function setVolume(value) {\r\n        if (typeof value !== 'number' || isNaN(value) || value < 0.0 || value > 1.0) {\r\n            throw Constants.BAD_ARGUMENT_ERROR;\r\n        }\r\n        getVideoElement().volume = value;\r\n    }\r\n\r\n    /**\r\n     * Returns the current audio volume, from 0.0 (silent) to 1.0 (loudest).\r\n     * @returns {number}\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function getVolume() {\r\n        return getVideoElement().volume;\r\n    }\r\n\r\n    /**\r\n     * The length of the buffer for a given media type, in seconds. Valid media\r\n     * types are \"video\", \"audio\" and \"fragmentedText\". If no type is passed\r\n     * in, then the minimum of video, audio and fragmentedText buffer length is\r\n     * returned. NaN is returned if an invalid type is requested, the\r\n     * presentation does not contain that type, or if no arguments are passed\r\n     * and the presentation does not include any adaption sets of valid media\r\n     * type.\r\n     *\r\n     * @param {MediaType} type - 'video', 'audio' or 'fragmentedText'\r\n     * @returns {number} The length of the buffer for the given media type, in\r\n     *  seconds, or NaN\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function getBufferLength(type) {\r\n        const types = [Constants.VIDEO, Constants.AUDIO, Constants.FRAGMENTED_TEXT];\r\n        if (!type) {\r\n            const buffer = types.map(\r\n                t => getTracksFor(t).length > 0 ? getDashMetrics().getCurrentBufferLevel(t) : Number.MAX_VALUE\r\n            ).reduce(\r\n                (p, c) => Math.min(p, c)\r\n            );\r\n            return buffer === Number.MAX_VALUE ? NaN : buffer;\r\n        } else {\r\n            if (types.indexOf(type) !== -1) {\r\n                const buffer = getDashMetrics().getCurrentBufferLevel(type);\r\n                return buffer ? buffer : NaN;\r\n            } else {\r\n                logger.warn('getBufferLength requested for invalid type');\r\n                return NaN;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The timeShiftBufferLength (DVR Window), in seconds.\r\n     *\r\n     * @returns {number} The window of allowable play time behind the live point of a live stream.\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function getDVRWindowSize() {\r\n        let metric = dashMetrics.getCurrentDVRInfo();\r\n        if (!metric) {\r\n            return 0;\r\n        }\r\n        return metric.manifestInfo.DVRWindowSize;\r\n    }\r\n\r\n    /**\r\n     * This method should only be used with a live stream that has a valid timeShiftBufferLength (DVR Window).\r\n     * NOTE - If you do not need the raw offset value (i.e. media analytics, tracking, etc) consider using the {@link module:MediaPlayer#seek seek()} method\r\n     * which will calculate this value for you and set the video element's currentTime property all in one simple call.\r\n     *\r\n     * @param {number} value - A relative time, in seconds, based on the return value of the {@link module:MediaPlayer#duration duration()} method is expected.\r\n     * @returns {number} A value that is relative the available range within the timeShiftBufferLength (DVR Window).\r\n     * @see {@link module:MediaPlayer#seek seek()}\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function getDVRSeekOffset(value) {\r\n        let metric = dashMetrics.getCurrentDVRInfo();\r\n        if (!metric) {\r\n            return 0;\r\n        }\r\n\r\n        let liveDelay = playbackController.getLiveDelay();\r\n\r\n        let val = metric.range.start + value;\r\n\r\n        if (val > (metric.range.end - liveDelay)) {\r\n            val = metric.range.end - liveDelay;\r\n        }\r\n\r\n        return val;\r\n    }\r\n\r\n    /**\r\n     * Current time of the playhead, in seconds.\r\n     *\r\n     * If called with no arguments then the returned time value is time elapsed since the start point of the first stream, or if it is a live stream, then the time will be based on the return value of the {@link module:MediaPlayer#duration duration()} method.\r\n     * However if a stream ID is supplied then time is relative to the start of that stream, or is null if there is no such stream id in the manifest.\r\n     *\r\n     * @param {string} streamId - The ID of a stream that the returned playhead time must be relative to the start of. If undefined, then playhead time is relative to the first stream.\r\n     * @returns {number} The current playhead time of the media, or null.\r\n     * @throws {@link module:MediaPlayer~PLAYBACK_NOT_INITIALIZED_ERROR PLAYBACK_NOT_INITIALIZED_ERROR} if called before initializePlayback function\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function time(streamId) {\r\n        if (!playbackInitialized) {\r\n            throw PLAYBACK_NOT_INITIALIZED_ERROR;\r\n        }\r\n        let t = getVideoElement().currentTime;\r\n\r\n        if (streamId !== undefined) {\r\n            t = streamController.getTimeRelativeToStreamId(t, streamId);\r\n        } else if (playbackController.getIsDynamic()) {\r\n            let metric = dashMetrics.getCurrentDVRInfo();\r\n            t = (metric === null) ? 0 : duration() - (metric.range.end - metric.time);\r\n        }\r\n\r\n        return t;\r\n    }\r\n\r\n    /**\r\n     * Duration of the media's playback, in seconds.\r\n     *\r\n     * @returns {number} The current duration of the media.\r\n     * @memberof module:MediaPlayer\r\n     * @throws {@link module:MediaPlayer~PLAYBACK_NOT_INITIALIZED_ERROR PLAYBACK_NOT_INITIALIZED_ERROR} if called before initializePlayback function\r\n     * @instance\r\n     */\r\n    function duration() {\r\n        if (!playbackInitialized) {\r\n            throw PLAYBACK_NOT_INITIALIZED_ERROR;\r\n        }\r\n        let d = getVideoElement().duration;\r\n\r\n        if (playbackController.getIsDynamic()) {\r\n\r\n            let metric = dashMetrics.getCurrentDVRInfo();\r\n            let range;\r\n\r\n            if (!metric) {\r\n                return 0;\r\n            }\r\n\r\n            range = metric.range.end - metric.range.start;\r\n            d = range < metric.manifestInfo.DVRWindowSize ? range : metric.manifestInfo.DVRWindowSize;\r\n        }\r\n        return d;\r\n    }\r\n\r\n    /**\r\n     * Use this method to get the current playhead time as an absolute value, the time in seconds since midnight UTC, Jan 1 1970.\r\n     * Note - this property only has meaning for live streams. If called before play() has begun, it will return a value of NaN.\r\n     *\r\n     * @returns {number} The current playhead time as UTC timestamp.\r\n     * @throws {@link module:MediaPlayer~PLAYBACK_NOT_INITIALIZED_ERROR PLAYBACK_NOT_INITIALIZED_ERROR} if called before initializePlayback function\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function timeAsUTC() {\r\n        if (!playbackInitialized) {\r\n            throw PLAYBACK_NOT_INITIALIZED_ERROR;\r\n        }\r\n        if (time() < 0) {\r\n            return NaN;\r\n        }\r\n        return getAsUTC(time());\r\n    }\r\n\r\n    /**\r\n     * Use this method to get the current duration as an absolute value, the time in seconds since midnight UTC, Jan 1 1970.\r\n     * Note - this property only has meaning for live streams.\r\n     *\r\n     * @returns {number} The current duration as UTC timestamp.\r\n     * @throws {@link module:MediaPlayer~PLAYBACK_NOT_INITIALIZED_ERROR PLAYBACK_NOT_INITIALIZED_ERROR} if called before initializePlayback function\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function durationAsUTC() {\r\n        if (!playbackInitialized) {\r\n            throw PLAYBACK_NOT_INITIALIZED_ERROR;\r\n        }\r\n        return getAsUTC(duration());\r\n    }\r\n\r\n    /*\r\n    ---------------------------------------------------------------------------\r\n\r\n        AUTO BITRATE\r\n\r\n    ---------------------------------------------------------------------------\r\n    */\r\n    /**\r\n     * Gets the top quality BitrateInfo checking portal limit and max allowed.\r\n     * It calls getTopQualityIndexFor internally\r\n     *\r\n     * @param {MediaType} type - 'video' or 'audio'\r\n     * @memberof module:MediaPlayer\r\n     * @returns {BitrateInfo | null}\r\n     * @throws {@link module:MediaPlayer~STREAMING_NOT_INITIALIZED_ERROR STREAMING_NOT_INITIALIZED_ERROR} if called before initializePlayback function\r\n     * @instance\r\n     */\r\n    function getTopBitrateInfoFor(type) {\r\n        if (!streamingInitialized) {\r\n            throw STREAMING_NOT_INITIALIZED_ERROR;\r\n        }\r\n        return abrController.getTopBitrateInfoFor(type);\r\n    }\r\n\r\n    /**\r\n     * Gets the current download quality for media type video, audio or images. For video and audio types the ABR\r\n     * rules update this value before every new download unless setAutoSwitchQualityFor(type, false) is called. For 'image'\r\n     * type, thumbnails, there is no ABR algorithm and quality is set manually.\r\n     *\r\n     * @param {MediaType} type - 'video', 'audio' or 'image' (thumbnails)\r\n     * @returns {number} the quality index, 0 corresponding to the lowest bitrate\r\n     * @memberof module:MediaPlayer\r\n     * @see {@link module:MediaPlayer#setAutoSwitchQualityFor setAutoSwitchQualityFor()}\r\n     * @see {@link module:MediaPlayer#setQualityFor setQualityFor()}\r\n     * @throws {@link module:MediaPlayer~STREAMING_NOT_INITIALIZED_ERROR STREAMING_NOT_INITIALIZED_ERROR} if called before initializePlayback function\r\n     * @instance\r\n     */\r\n    function getQualityFor(type) {\r\n        if (!streamingInitialized) {\r\n            throw STREAMING_NOT_INITIALIZED_ERROR;\r\n        }\r\n        if (type === Constants.IMAGE) {\r\n            const activeStream = getActiveStream();\r\n            if (!activeStream) {\r\n                return -1;\r\n            }\r\n            const thumbnailController = activeStream.getThumbnailController();\r\n\r\n            return !thumbnailController ? -1 : thumbnailController.getCurrentTrackIndex();\r\n        }\r\n        return abrController.getQualityFor(type);\r\n    }\r\n\r\n    /**\r\n     * Sets the current quality for media type instead of letting the ABR Heuristics automatically selecting it.\r\n     * This value will be overwritten by the ABR rules unless setAutoSwitchQualityFor(type, false) is called.\r\n     *\r\n     * @param {MediaType} type - 'video', 'audio' or 'image'\r\n     * @param {number} value - the quality index, 0 corresponding to the lowest bitrate\r\n     * @memberof module:MediaPlayer\r\n     * @see {@link module:MediaPlayer#setAutoSwitchQualityFor setAutoSwitchQualityFor()}\r\n     * @see {@link module:MediaPlayer#getQualityFor getQualityFor()}\r\n     * @throws {@link module:MediaPlayer~STREAMING_NOT_INITIALIZED_ERROR STREAMING_NOT_INITIALIZED_ERROR} if called before initializePlayback function\r\n     * @instance\r\n     */\r\n    function setQualityFor(type, value) {\r\n        if (!streamingInitialized) {\r\n            throw STREAMING_NOT_INITIALIZED_ERROR;\r\n        }\r\n        if (type === Constants.IMAGE) {\r\n            const activeStream = getActiveStream();\r\n            if (!activeStream) {\r\n                return;\r\n            }\r\n            const thumbnailController = activeStream.getThumbnailController();\r\n            if (thumbnailController) {\r\n                thumbnailController.setTrackByIndex(value);\r\n            }\r\n        }\r\n        abrController.setPlaybackQuality(type, streamController.getActiveStreamInfo(), value);\r\n    }\r\n\r\n    /**\r\n     * Update the video element size variables\r\n     * Should be called on window resize (or any other time player is resized). Fullscreen does trigger a window resize event.\r\n     *\r\n     * Once windowResizeEventCalled = true, abrController.checkPortalSize() will use element size variables rather than querying clientWidth every time.\r\n     *\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function updatePortalSize() {\r\n        abrController.setElementSize();\r\n        abrController.setWindowResizeEventCalled(true);\r\n    }\r\n\r\n    /*\r\n    ---------------------------------------------------------------------------\r\n\r\n        MEDIA PLAYER CONFIGURATION\r\n\r\n    ---------------------------------------------------------------------------\r\n    */\r\n    /**\r\n     * <p>Set to false to prevent stream from auto-playing when the view is attached.</p>\r\n     *\r\n     * @param {boolean} value\r\n     * @default true\r\n     * @memberof module:MediaPlayer\r\n     * @see {@link module:MediaPlayer#attachView attachView()}\r\n     * @throws {@link Constants#BAD_ARGUMENT_ERROR BAD_ARGUMENT_ERROR} if called with an invalid argument, not boolean type.\r\n     * @instance\r\n     *\r\n     */\r\n    function setAutoPlay(value) {\r\n        checkParameterType(value, 'boolean');\r\n        autoPlay = value;\r\n    }\r\n\r\n    /**\r\n     * @returns {boolean} The current autoPlay state.\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function getAutoPlay() {\r\n        return autoPlay;\r\n    }\r\n\r\n    /**\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     * @returns {number|NaN} Current live stream latency in seconds. It is the difference between current time and time position at the playback head.\r\n     * @throws {@link module:MediaPlayer~MEDIA_PLAYER_NOT_INITIALIZED_ERROR MEDIA_PLAYER_NOT_INITIALIZED_ERROR} if called before initialize function\r\n     */\r\n    function getCurrentLiveLatency() {\r\n        if (!mediaPlayerInitialized) {\r\n            throw MEDIA_PLAYER_NOT_INITIALIZED_ERROR;\r\n        }\r\n\r\n        if (!playbackInitialized) {\r\n            return NaN;\r\n        }\r\n\r\n        return playbackController.getCurrentLiveLatency();\r\n    }\r\n\r\n    /**\r\n     * Add a custom ABR Rule\r\n     * Rule will be apply on next stream if a stream is being played\r\n     *\r\n     * @param {string} type - rule type (one of ['qualitySwitchRules','abandonFragmentRules'])\r\n     * @param {string} rulename - name of rule (used to identify custom rule). If one rule of same name has been added, then existing rule will be updated\r\n     * @param {object} rule - the rule object instance\r\n     * @memberof module:MediaPlayer\r\n     * @throws {@link Constants#BAD_ARGUMENT_ERROR BAD_ARGUMENT_ERROR} if called with invalid arguments.\r\n     * @instance\r\n     */\r\n    function addABRCustomRule(type, rulename, rule) {\r\n        mediaPlayerModel.addABRCustomRule(type, rulename, rule);\r\n    }\r\n\r\n    /**\r\n     * Remove a custom ABR Rule\r\n     *\r\n     * @param {string} rulename - name of the rule to be removed\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function removeABRCustomRule(rulename) {\r\n        mediaPlayerModel.removeABRCustomRule(rulename);\r\n    }\r\n\r\n    /**\r\n     * Remove all custom rules\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function removeAllABRCustomRule() {\r\n        mediaPlayerModel.removeABRCustomRule();\r\n    }\r\n\r\n    /**\r\n     * <p>Allows you to set a scheme and server source for UTC live edge detection for dynamic streams.\r\n     * If UTCTiming is defined in the manifest, it will take precedence over any time source manually added.</p>\r\n     * <p>If you have exposed the Date header, use the method {@link module:MediaPlayer#clearDefaultUTCTimingSources clearDefaultUTCTimingSources()}.\r\n     * This will allow the date header on the manifest to be used instead of a time server</p>\r\n     * @param {string} schemeIdUri - <ul>\r\n     * <li>urn:mpeg:dash:utc:http-head:2014</li>\r\n     * <li>urn:mpeg:dash:utc:http-xsdate:2014</li>\r\n     * <li>urn:mpeg:dash:utc:http-iso:2014</li>\r\n     * <li>urn:mpeg:dash:utc:direct:2014</li>\r\n     * </ul>\r\n     * <p>Some specs referencing early ISO23009-1 drafts incorrectly use\r\n     * 2012 in the URI, rather than 2014. support these for now.</p>\r\n     * <ul>\r\n     * <li>urn:mpeg:dash:utc:http-head:2012</li>\r\n     * <li>urn:mpeg:dash:utc:http-xsdate:2012</li>\r\n     * <li>urn:mpeg:dash:utc:http-iso:2012</li>\r\n     * <li>urn:mpeg:dash:utc:direct:2012</li>\r\n     * </ul>\r\n     * @param {string} value - Path to a time source.\r\n     * @default\r\n     * <ul>\r\n     *     <li>schemeIdUri:urn:mpeg:dash:utc:http-xsdate:2014</li>\r\n     *     <li>value:http://time.akamai.com/?iso&ms/li>\r\n     * </ul>\r\n     * @memberof module:MediaPlayer\r\n     * @see {@link module:MediaPlayer#removeUTCTimingSource removeUTCTimingSource()}\r\n     * @instance\r\n     */\r\n    function addUTCTimingSource(schemeIdUri, value) {\r\n        mediaPlayerModel.addUTCTimingSource(schemeIdUri, value);\r\n    }\r\n\r\n    /**\r\n     * <p>Allows you to remove a UTC time source. Both schemeIdUri and value need to match the Dash.vo.UTCTiming properties in order for the\r\n     * entry to be removed from the array</p>\r\n     * @param {string} schemeIdUri - see {@link module:MediaPlayer#addUTCTimingSource addUTCTimingSource()}\r\n     * @param {string} value - see {@link module:MediaPlayer#addUTCTimingSource addUTCTimingSource()}\r\n     * @memberof module:MediaPlayer\r\n     * @see {@link module:MediaPlayer#clearDefaultUTCTimingSources clearDefaultUTCTimingSources()}\r\n     * @throws {@link Constants#BAD_ARGUMENT_ERROR BAD_ARGUMENT_ERROR} if called with invalid arguments, schemeIdUri and value are not string type.\r\n     * @instance\r\n     */\r\n    function removeUTCTimingSource(schemeIdUri, value) {\r\n        mediaPlayerModel.removeUTCTimingSource(schemeIdUri, value);\r\n    }\r\n\r\n    /**\r\n     * <p>Allows you to clear the stored array of time sources.</p>\r\n     * <p>Example use: If you have exposed the Date header, calling this method\r\n     * will allow the date header on the manifest to be used instead of the time server.</p>\r\n     * <p>Example use: Calling this method, assuming there is not an exposed date header on the manifest,  will default back\r\n     * to using a binary search to discover the live edge</p>\r\n     *\r\n     * @memberof module:MediaPlayer\r\n     * @see {@link module:MediaPlayer#restoreDefaultUTCTimingSources restoreDefaultUTCTimingSources()}\r\n     * @instance\r\n     */\r\n    function clearDefaultUTCTimingSources() {\r\n        mediaPlayerModel.clearDefaultUTCTimingSources();\r\n    }\r\n\r\n    /**\r\n     * <p>Allows you to restore the default time sources after calling {@link module:MediaPlayer#clearDefaultUTCTimingSources clearDefaultUTCTimingSources()}</p>\r\n     *\r\n     * @default\r\n     * <ul>\r\n     *     <li>schemeIdUri:urn:mpeg:dash:utc:http-xsdate:2014</li>\r\n     *     <li>value:http://time.akamai.com/?iso&ms</li>\r\n     * </ul>\r\n     *\r\n     * @memberof module:MediaPlayer\r\n     * @see {@link module:MediaPlayer#addUTCTimingSource addUTCTimingSource()}\r\n     * @instance\r\n     */\r\n    function restoreDefaultUTCTimingSources() {\r\n        mediaPlayerModel.restoreDefaultUTCTimingSources();\r\n    }\r\n\r\n    /**\r\n     * Returns the average throughput computed in the ABR logic\r\n     *\r\n     * @param {MediaType} type\r\n     * @return {number} value\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function getAverageThroughput(type) {\r\n        const throughputHistory = abrController.getThroughputHistory();\r\n        return throughputHistory ? throughputHistory.getAverageThroughput(type) : 0;\r\n    }\r\n\r\n    /**\r\n     * Sets whether withCredentials on XHR requests for a particular request\r\n     * type is true or false\r\n     *\r\n     * @default false\r\n     * @param {string} type - one of HTTPRequest.*_TYPE\r\n     * @param {boolean} value\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function setXHRWithCredentialsForType(type, value) {\r\n        mediaPlayerModel.setXHRWithCredentialsForType(type, value);\r\n    }\r\n\r\n    /**\r\n     * Gets whether withCredentials on XHR requests for a particular request\r\n     * type is true or false\r\n     *\r\n     * @param {string} type - one of HTTPRequest.*_TYPE\r\n     * @return {boolean}\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function getXHRWithCredentialsForType(type) {\r\n        return mediaPlayerModel.getXHRWithCredentialsForType(type);\r\n    }\r\n\r\n    /*\r\n    ---------------------------------------------------------------------------\r\n\r\n        OFFLINE\r\n\r\n    ---------------------------------------------------------------------------\r\n    */\r\n\r\n    /**\r\n     * Detects if Offline is included and returns an instance of OfflineController.js\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function getOfflineController() {\r\n        return detectOffline();\r\n    }\r\n\r\n    /*\r\n    ---------------------------------------------------------------------------\r\n\r\n        METRICS\r\n\r\n    ---------------------------------------------------------------------------\r\n    */\r\n    /**\r\n     * Returns the DashMetrics.js Module. You use this Module to get access to all the public metrics\r\n     * stored in dash.js\r\n     *\r\n     * @see {@link module:DashMetrics}\r\n     * @returns {Object}\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function getDashMetrics() {\r\n        return dashMetrics;\r\n    }\r\n\r\n    /*\r\n    ---------------------------------------------------------------------------\r\n\r\n        TEXT MANAGEMENT\r\n\r\n    ---------------------------------------------------------------------------\r\n    */\r\n    /**\r\n     * Set default language for text. If default language is not one of text tracks, dash will choose the first one.\r\n     *\r\n     * @param {string} lang - default language\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     * @deprecated will be removed in version 3.2.0. Please use setInitialMediaSettingsFor(\"fragmentedText\", { lang: lang }) instead\r\n     */\r\n    function setTextDefaultLanguage(lang) {\r\n        logger.warn('setTextDefaultLanguage is deprecated and will be removed in version 3.2.0. Please use setInitialMediaSettingsFor(\"fragmentedText\", { lang: lang }) instead');\r\n        if (textController === undefined) {\r\n            textController = TextController(context).getInstance();\r\n        }\r\n        textController.setTextDefaultLanguage(lang);\r\n    }\r\n\r\n    /**\r\n     * Get default language for text.\r\n     *\r\n     * @return {string} the default language if it has been set using setTextDefaultLanguage\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     * @deprecated will be removed in version 3.2.0. Please use getInitialMediaSettingsFor(\"fragmentedText\").lang instead\r\n     */\r\n    function getTextDefaultLanguage() {\r\n        logger.warn('getTextDefaultLanguage is deprecated and will be removed in version 3.2.0. Please use getInitialMediaSettingsFor(\"fragmentedText\").lang instead');\r\n        if (textController === undefined) {\r\n            textController = TextController(context).getInstance();\r\n        }\r\n\r\n        return textController.getTextDefaultLanguage();\r\n    }\r\n\r\n    /**\r\n     * Set enabled default state.\r\n     * This is used to enable/disable text when a file is loaded.\r\n     * During playback, use enableText to enable text for the file\r\n     *\r\n     * @param {boolean} enable - true to enable text, false otherwise\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function setTextDefaultEnabled(enable) {\r\n        if (textController === undefined) {\r\n            textController = TextController(context).getInstance();\r\n        }\r\n\r\n        textController.setTextDefaultEnabled(enable);\r\n    }\r\n\r\n    /**\r\n     * Get enabled default state.\r\n     *\r\n     * @return {boolean}  default enable state\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function getTextDefaultEnabled() {\r\n        if (textController === undefined) {\r\n            textController = TextController(context).getInstance();\r\n        }\r\n\r\n        return textController.getTextDefaultEnabled();\r\n    }\r\n\r\n    /**\r\n     * Enable/disable text\r\n     * When enabling text, dash will choose the previous selected text track\r\n     *\r\n     * @param {boolean} enable - true to enable text, false otherwise (same as setTextTrack(-1))\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function enableText(enable) {\r\n        if (textController === undefined) {\r\n            textController = TextController(context).getInstance();\r\n        }\r\n\r\n        textController.enableText(enable);\r\n    }\r\n\r\n    /**\r\n     * Enable/disable text\r\n     * When enabling dash will keep downloading and process fragmented text tracks even if all tracks are in mode \"hidden\"\r\n     *\r\n     * @param {boolean} enable - true to enable text streaming even if all text tracks are hidden.\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function enableForcedTextStreaming(enable) {\r\n        if (textController === undefined) {\r\n            textController = TextController(context).getInstance();\r\n        }\r\n\r\n        textController.enableForcedTextStreaming(enable);\r\n    }\r\n\r\n    /**\r\n     * Return if text is enabled\r\n     *\r\n     * @return {boolean} return true if text is enabled, false otherwise\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function isTextEnabled() {\r\n        if (textController === undefined) {\r\n            textController = TextController(context).getInstance();\r\n        }\r\n\r\n        return textController.isTextEnabled();\r\n    }\r\n\r\n    /**\r\n     * Use this method to change the current text track for both external time text files and fragmented text tracks. There is no need to\r\n     * set the track mode on the video object to switch a track when using this method.\r\n     * @param {number} idx - Index of track based on the order of the order the tracks are added Use -1 to disable all tracks. (turn captions off).  Use module:MediaPlayer#dashjs.MediaPlayer.events.TEXT_TRACK_ADDED.\r\n     * @see {@link MediaPlayerEvents#event:TEXT_TRACK_ADDED dashjs.MediaPlayer.events.TEXT_TRACK_ADDED}\r\n     * @throws {@link module:MediaPlayer~PLAYBACK_NOT_INITIALIZED_ERROR PLAYBACK_NOT_INITIALIZED_ERROR} if called before initializePlayback function\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function setTextTrack(idx) {\r\n        if (!playbackInitialized) {\r\n            throw PLAYBACK_NOT_INITIALIZED_ERROR;\r\n        }\r\n\r\n        if (textController === undefined) {\r\n            textController = TextController(context).getInstance();\r\n        }\r\n\r\n        textController.setTextTrack(idx);\r\n    }\r\n\r\n    function getCurrentTextTrackIndex() {\r\n        let idx = NaN;\r\n        if (textController) {\r\n            idx = textController.getCurrentTrackIdx();\r\n        }\r\n        return idx;\r\n    }\r\n\r\n    /**\r\n     * This method serves to control captions z-index value. If 'true' is passed, the captions will have the highest z-index and be\r\n     * displayed on top of other html elements. Default value is 'false' (z-index is not set).\r\n     * @param {boolean} value\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function displayCaptionsOnTop(value) {\r\n        let textTracks = TextTracks(context).getInstance();\r\n        textTracks.setConfig({\r\n            videoModel: videoModel\r\n        });\r\n        textTracks.initialize();\r\n        textTracks.setDisplayCConTop(value);\r\n    }\r\n\r\n    /*\r\n    ---------------------------------------------------------------------------\r\n\r\n        VIDEO ELEMENT MANAGEMENT\r\n\r\n    ---------------------------------------------------------------------------\r\n    */\r\n\r\n    /**\r\n     * Returns instance of Video Element that was attached by calling attachView()\r\n     * @returns {Object}\r\n     * @memberof module:MediaPlayer\r\n     * @throws {@link module:MediaPlayer~ELEMENT_NOT_ATTACHED_ERROR ELEMENT_NOT_ATTACHED_ERROR} if called before attachView function\r\n     * @instance\r\n     */\r\n    function getVideoElement() {\r\n        if (!videoModel.getElement()) {\r\n            throw ELEMENT_NOT_ATTACHED_ERROR;\r\n        }\r\n        return videoModel.getElement();\r\n    }\r\n\r\n    /**\r\n     * Use this method to attach an HTML5 VideoElement for dash.js to operate upon.\r\n     *\r\n     * @param {Object} element - An HTMLMediaElement that has already been defined in the DOM (or equivalent stub).\r\n     * @memberof module:MediaPlayer\r\n     * @throws {@link module:MediaPlayer~MEDIA_PLAYER_NOT_INITIALIZED_ERROR MEDIA_PLAYER_NOT_INITIALIZED_ERROR} if called before initialize function\r\n     * @instance\r\n     */\r\n    function attachView(element) {\r\n        if (!mediaPlayerInitialized) {\r\n            throw MEDIA_PLAYER_NOT_INITIALIZED_ERROR;\r\n        }\r\n\r\n        videoModel.setElement(element);\r\n\r\n        if (element) {\r\n            detectProtection();\r\n            detectMetricsReporting();\r\n            detectMss();\r\n\r\n            if (streamController) {\r\n                streamController.switchToVideoElement();\r\n            }\r\n        }\r\n\r\n        if (playbackInitialized) { //Reset if we have been playing before, so this is a new element.\r\n            resetPlaybackControllers();\r\n        }\r\n\r\n        initializePlayback();\r\n    }\r\n\r\n    /**\r\n     * Returns instance of Div that was attached by calling attachTTMLRenderingDiv()\r\n     * @returns {Object}\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function getTTMLRenderingDiv() {\r\n        return videoModel ? videoModel.getTTMLRenderingDiv() : null;\r\n    }\r\n\r\n    /**\r\n     * Use this method to attach an HTML5 div for dash.js to render rich TTML subtitles.\r\n     *\r\n     * @param {HTMLDivElement} div - An unstyled div placed after the video element. It will be styled to match the video size and overlay z-order.\r\n     * @memberof module:MediaPlayer\r\n     * @throws {@link module:MediaPlayer~ELEMENT_NOT_ATTACHED_ERROR ELEMENT_NOT_ATTACHED_ERROR} if called before attachView function\r\n     * @instance\r\n     */\r\n    function attachTTMLRenderingDiv(div) {\r\n        if (!videoModel.getElement()) {\r\n            throw ELEMENT_NOT_ATTACHED_ERROR;\r\n        }\r\n        videoModel.setTTMLRenderingDiv(div);\r\n    }\r\n\r\n    /*\r\n    ---------------------------------------------------------------------------\r\n\r\n        STREAM AND TRACK MANAGEMENT\r\n\r\n    ---------------------------------------------------------------------------\r\n    */\r\n    /**\r\n     * @param {MediaType} type\r\n     * @returns {Array}\r\n     * @memberof module:MediaPlayer\r\n     * @throws {@link module:MediaPlayer~STREAMING_NOT_INITIALIZED_ERROR STREAMING_NOT_INITIALIZED_ERROR} if called before initializePlayback function\r\n     * @instance\r\n     */\r\n    function getBitrateInfoListFor(type) {\r\n        if (!streamingInitialized) {\r\n            throw STREAMING_NOT_INITIALIZED_ERROR;\r\n        }\r\n        let stream = getActiveStream();\r\n        return stream ? stream.getBitrateListFor(type) : [];\r\n    }\r\n\r\n    /**\r\n     * This method returns the list of all available streams from a given manifest\r\n     * @param {Object} manifest\r\n     * @returns {Array} list of {@link StreamInfo}\r\n     * @memberof module:MediaPlayer\r\n     * @throws {@link module:MediaPlayer~STREAMING_NOT_INITIALIZED_ERROR STREAMING_NOT_INITIALIZED_ERROR} if called before initializePlayback function\r\n     * @instance\r\n     */\r\n    function getStreamsFromManifest(manifest) {\r\n        if (!streamingInitialized) {\r\n            throw STREAMING_NOT_INITIALIZED_ERROR;\r\n        }\r\n        return adapter.getStreamsInfo(manifest);\r\n    }\r\n\r\n    /**\r\n     * This method returns the list of all available tracks for a given media type\r\n     * @param {MediaType} type\r\n     * @returns {Array} list of {@link MediaInfo}\r\n     * @memberof module:MediaPlayer\r\n     * @throws {@link module:MediaPlayer~STREAMING_NOT_INITIALIZED_ERROR STREAMING_NOT_INITIALIZED_ERROR} if called before initializePlayback function\r\n     * @instance\r\n     */\r\n    function getTracksFor(type) {\r\n        if (!streamingInitialized) {\r\n            throw STREAMING_NOT_INITIALIZED_ERROR;\r\n        }\r\n        let streamInfo = streamController.getActiveStreamInfo();\r\n        return mediaController.getTracksFor(type, streamInfo);\r\n    }\r\n\r\n    /**\r\n     * This method returns the list of all available tracks for a given media type and streamInfo from a given manifest\r\n     * @param {MediaType} type\r\n     * @param {Object} manifest\r\n     * @param {Object} streamInfo\r\n     * @returns {Array}  list of {@link MediaInfo}\r\n     * @memberof module:MediaPlayer\r\n     * @throws {@link module:MediaPlayer~STREAMING_NOT_INITIALIZED_ERROR STREAMING_NOT_INITIALIZED_ERROR} if called before initializePlayback function\r\n     * @instance\r\n     */\r\n    function getTracksForTypeFromManifest(type, manifest, streamInfo) {\r\n        if (!streamingInitialized) {\r\n            throw STREAMING_NOT_INITIALIZED_ERROR;\r\n        }\r\n\r\n        streamInfo = streamInfo || adapter.getStreamsInfo(manifest, 1)[0];\r\n\r\n        return streamInfo ? adapter.getAllMediaInfoForType(streamInfo, type, manifest) : [];\r\n    }\r\n\r\n    /**\r\n     * @param {MediaType} type\r\n     * @returns {Object|null} {@link MediaInfo}\r\n     *\r\n     * @memberof module:MediaPlayer\r\n     * @throws {@link module:MediaPlayer~STREAMING_NOT_INITIALIZED_ERROR STREAMING_NOT_INITIALIZED_ERROR} if called before initializePlayback function\r\n     * @instance\r\n     */\r\n    function getCurrentTrackFor(type) {\r\n        if (!streamingInitialized) {\r\n            throw STREAMING_NOT_INITIALIZED_ERROR;\r\n        }\r\n        let streamInfo = streamController.getActiveStreamInfo();\r\n        return mediaController.getCurrentTrackFor(type, streamInfo);\r\n    }\r\n\r\n    /**\r\n     * This method allows to set media settings that will be used to pick the initial track. Format of the settings\r\n     * is following: <br />\r\n     * {lang: langValue (can be either a string or a regex to match),\r\n     *  viewpoint: viewpointValue,\r\n     *  audioChannelConfiguration: audioChannelConfigurationValue,\r\n     *  accessibility: accessibilityValue,\r\n     *  role: roleValue}\r\n     *\r\n     * @param {MediaType} type\r\n     * @param {Object} value\r\n     * @memberof module:MediaPlayer\r\n     * @throws {@link module:MediaPlayer~MEDIA_PLAYER_NOT_INITIALIZED_ERROR MEDIA_PLAYER_NOT_INITIALIZED_ERROR} if called before initialize function\r\n     * @instance\r\n     */\r\n    function setInitialMediaSettingsFor(type, value) {\r\n        if (!mediaPlayerInitialized) {\r\n            throw MEDIA_PLAYER_NOT_INITIALIZED_ERROR;\r\n        }\r\n        mediaController.setInitialSettings(type, value);\r\n        if (type === Constants.FRAGMENTED_TEXT) {\r\n            textController.setInitialSettings(value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This method returns media settings that is used to pick the initial track. Format of the settings\r\n     * is following:\r\n     * {lang: langValue,\r\n     *  viewpoint: viewpointValue,\r\n     *  audioChannelConfiguration: audioChannelConfigurationValue,\r\n     *  accessibility: accessibilityValue,\r\n     *  role: roleValue}\r\n     * @param {MediaType} type\r\n     * @returns {Object}\r\n     * @memberof module:MediaPlayer\r\n     * @throws {@link module:MediaPlayer~MEDIA_PLAYER_NOT_INITIALIZED_ERROR MEDIA_PLAYER_NOT_INITIALIZED_ERROR} if called before initialize function\r\n     * @instance\r\n     */\r\n    function getInitialMediaSettingsFor(type) {\r\n        if (!mediaPlayerInitialized) {\r\n            throw MEDIA_PLAYER_NOT_INITIALIZED_ERROR;\r\n        }\r\n        return mediaController.getInitialSettings(type);\r\n    }\r\n\r\n    /**\r\n     * @param {MediaInfo} track - instance of {@link MediaInfo}\r\n     * @memberof module:MediaPlayer\r\n     * @throws {@link module:MediaPlayer~STREAMING_NOT_INITIALIZED_ERROR STREAMING_NOT_INITIALIZED_ERROR} if called before initializePlayback function\r\n     * @instance\r\n     */\r\n    function setCurrentTrack(track) {\r\n        if (!streamingInitialized) {\r\n            throw STREAMING_NOT_INITIALIZED_ERROR;\r\n        }\r\n        mediaController.setTrack(track);\r\n    }\r\n\r\n    /**\r\n     * This method returns the current track switch mode.\r\n     *\r\n     * @param {MediaType} type\r\n     * @returns {string} mode\r\n     * @memberof module:MediaPlayer\r\n     * @throws {@link module:MediaPlayer~MEDIA_PLAYER_NOT_INITIALIZED_ERROR MEDIA_PLAYER_NOT_INITIALIZED_ERROR} if called before initialize function\r\n     * @instance\r\n     */\r\n    function getTrackSwitchModeFor(type) {\r\n        if (!mediaPlayerInitialized) {\r\n            throw MEDIA_PLAYER_NOT_INITIALIZED_ERROR;\r\n        }\r\n        return mediaController.getSwitchMode(type);\r\n    }\r\n\r\n    /**\r\n     * This method sets the current track switch mode. Available options are:\r\n     *\r\n     * Constants.TRACK_SWITCH_MODE_NEVER_REPLACE\r\n     * (used to forbid clearing the buffered data (prior to current playback position) after track switch.\r\n     * Defers to fastSwitchEnabled for placement of new data. Default for video)\r\n     *\r\n     * Constants.TRACK_SWITCH_MODE_ALWAYS_REPLACE\r\n     * (used to clear the buffered data (prior to current playback position) after track switch. Default for audio)\r\n     *\r\n     * @param {MediaType} type\r\n     * @param {string} mode\r\n     * @memberof module:MediaPlayer\r\n     * @throws {@link module:MediaPlayer~MEDIA_PLAYER_NOT_INITIALIZED_ERROR MEDIA_PLAYER_NOT_INITIALIZED_ERROR} if called before initialize function\r\n     * @instance\r\n     */\r\n    function setTrackSwitchModeFor(type, mode) {\r\n        if (!mediaPlayerInitialized) {\r\n            throw MEDIA_PLAYER_NOT_INITIALIZED_ERROR;\r\n        }\r\n        mediaController.setSwitchMode(type, mode);\r\n    }\r\n\r\n    /**\r\n     * This method sets the selection mode for the initial track. This mode defines how the initial track will be selected\r\n     * if no initial media settings are set. If initial media settings are set this parameter will be ignored. Available options are:\r\n     *\r\n     * Constants.TRACK_SELECTION_MODE_HIGHEST_BITRATE\r\n     * this mode makes the player select the track with a highest bitrate. This mode is a default mode.\r\n     *\r\n     * Constants.TRACK_SELECTION_MODE_WIDEST_RANGE\r\n     * this mode makes the player select the track with a widest range of bitrates\r\n     *\r\n     * @param {string} mode\r\n     * @memberof module:MediaPlayer\r\n     * @throws {@link module:MediaPlayer~MEDIA_PLAYER_NOT_INITIALIZED_ERROR MEDIA_PLAYER_NOT_INITIALIZED_ERROR} if called before initialize function\r\n     * @instance\r\n     */\r\n    function setSelectionModeForInitialTrack(mode) {\r\n        if (!mediaPlayerInitialized) {\r\n            throw MEDIA_PLAYER_NOT_INITIALIZED_ERROR;\r\n        }\r\n        mediaController.setSelectionModeForInitialTrack(mode);\r\n    }\r\n\r\n    /**\r\n     * This method returns the track selection mode.\r\n     *\r\n     * @returns {string} mode\r\n     * @memberof module:MediaPlayer\r\n     * @throws {@link module:MediaPlayer~MEDIA_PLAYER_NOT_INITIALIZED_ERROR MEDIA_PLAYER_NOT_INITIALIZED_ERROR} if called before initialize function\r\n     * @instance\r\n     */\r\n    function getSelectionModeForInitialTrack() {\r\n        if (!mediaPlayerInitialized) {\r\n            throw MEDIA_PLAYER_NOT_INITIALIZED_ERROR;\r\n        }\r\n        return mediaController.getSelectionModeForInitialTrack();\r\n    }\r\n\r\n    /*\r\n    ---------------------------------------------------------------------------\r\n\r\n        PROTECTION MANAGEMENT\r\n\r\n    ---------------------------------------------------------------------------\r\n    */\r\n\r\n    /**\r\n     * Detects if Protection is included and returns an instance of ProtectionController.js\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function getProtectionController() {\r\n        return detectProtection();\r\n    }\r\n\r\n    /**\r\n     * Will override dash.js protection controller.\r\n     * @param {ProtectionController} value - valid protection controller instance.\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function attachProtectionController(value) {\r\n        protectionController = value;\r\n    }\r\n\r\n    /**\r\n     * Sets Protection Data required to setup the Protection Module (DRM). Protection Data must\r\n     * be set before initializing MediaPlayer or, once initialized, before PROTECTION_CREATED event is fired.\r\n     * @see {@link module:MediaPlayer#initialize initialize()}\r\n     * @see {@link ProtectionEvents#event:PROTECTION_CREATED dashjs.Protection.events.PROTECTION_CREATED}\r\n     * @param {ProtectionDataSet} value - object containing\r\n     * property names corresponding to key system name strings and associated\r\n     * values being instances of.\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function setProtectionData(value) {\r\n        protectionData = value;\r\n\r\n        // Propagate changes in case StreamController is already created\r\n        if (streamController) {\r\n            streamController.setProtectionData(protectionData);\r\n        }\r\n    }\r\n\r\n    /*\r\n    ---------------------------------------------------------------------------\r\n\r\n        THUMBNAILS MANAGEMENT\r\n\r\n    ---------------------------------------------------------------------------\r\n    */\r\n\r\n    /**\r\n     * Provide the thumbnail at time position. This can be asynchronous, so you must provide a callback ro retrieve thumbnails informations\r\n     * @param {number} time - A relative time, in seconds, based on the return value of the {@link module:MediaPlayer#duration duration()} method is expected\r\n     * @param {function} callback - A Callback function provided when retrieving thumbnail the given time position. Thumbnail object is null in case there are is not a thumbnails representation or\r\n     * if it doesn't contain a thumbnail for the given time position.\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function provideThumbnail(time, callback) {\r\n        if (typeof callback !== 'function') {\r\n            return;\r\n        }\r\n        if (time < 0) {\r\n            callback(null);\r\n            return;\r\n        }\r\n        const s = playbackController.getIsDynamic() ? getDVRSeekOffset(time) : time;\r\n        const stream = streamController.getStreamForTime(s);\r\n        if (stream === null) {\r\n            callback(null);\r\n            return;\r\n        }\r\n\r\n        const thumbnailController = stream.getThumbnailController();\r\n        if (!thumbnailController) {\r\n            callback(null);\r\n            return;\r\n        }\r\n\r\n        const timeInPeriod = streamController.getTimeRelativeToStreamId(s, stream.getId());\r\n        return thumbnailController.provide(timeInPeriod, callback);\r\n    }\r\n\r\n    /*\r\n    ---------------------------------------------------------------------------\r\n\r\n        TOOLS AND OTHERS FUNCTIONS\r\n\r\n    ---------------------------------------------------------------------------\r\n    */\r\n    /**\r\n     * Allows application to retrieve a manifest.  Manifest loading is asynchro\r\n     * nous and\r\n     * requires the app-provided callback function\r\n     *\r\n     * @param {string} url - url the manifest url\r\n     * @param {function} callback - A Callback function provided when retrieving manifests\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function retrieveManifest(url, callback) {\r\n        let manifestLoader = createManifestLoader();\r\n        let self = this;\r\n\r\n        const handler = function (e) {\r\n            if (!e.error) {\r\n                callback(e.manifest);\r\n            } else {\r\n                callback(null, e.error);\r\n            }\r\n            eventBus.off(Events.INTERNAL_MANIFEST_LOADED, handler, self);\r\n            manifestLoader.reset();\r\n        };\r\n\r\n        eventBus.on(Events.INTERNAL_MANIFEST_LOADED, handler, self);\r\n\r\n        uriFragmentModel.initialize(url);\r\n        manifestLoader.load(url);\r\n    }\r\n\r\n    /**\r\n     * Returns the source string or manifest that was attached by calling attachSource()\r\n     * @returns {string | manifest}\r\n     * @memberof module:MediaPlayer\r\n     * @throws {@link module:MediaPlayer~SOURCE_NOT_ATTACHED_ERROR SOURCE_NOT_ATTACHED_ERROR} if called before attachSource function\r\n     * @instance\r\n     */\r\n    function getSource() {\r\n        if (!source) {\r\n            throw SOURCE_NOT_ATTACHED_ERROR;\r\n        }\r\n        return source;\r\n    }\r\n\r\n    /**\r\n     * Use this method to set a source URL to a valid MPD manifest file OR\r\n     * a previously downloaded and parsed manifest object.  Optionally, can\r\n     * also provide protection information\r\n     *\r\n     * @param {string|Object} urlOrManifest - A URL to a valid MPD manifest file, or a\r\n     * parsed manifest object.\r\n     *\r\n     *\r\n     * @throws {@link module:MediaPlayer~MEDIA_PLAYER_NOT_INITIALIZED_ERROR MEDIA_PLAYER_NOT_INITIALIZED_ERROR} if called before initialize function\r\n     *\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function attachSource(urlOrManifest) {\r\n        if (!mediaPlayerInitialized) {\r\n            throw MEDIA_PLAYER_NOT_INITIALIZED_ERROR;\r\n        }\r\n\r\n        if (typeof urlOrManifest === 'string') {\r\n            uriFragmentModel.initialize(urlOrManifest);\r\n        }\r\n\r\n        source = urlOrManifest;\r\n\r\n        if (streamingInitialized || playbackInitialized) {\r\n            resetPlaybackControllers();\r\n        }\r\n\r\n        if (isReady()) {\r\n            initializePlayback();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the current settings object being used on the player.\r\n     * @returns {PlayerSettings} The settings object being used.\r\n     *\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function getSettings() {\r\n        return settings.get();\r\n    }\r\n\r\n    /**\r\n     * @summary Update the current settings object being used on the player. Anything left unspecified is not modified.\r\n     * @param {PlayerSettings} settingsObj - An object corresponding to the settings definition.\r\n     * @description This function does not update the entire object, only properties in the passed in object are updated.\r\n     *\r\n     * This means that updateSettings({a: x}) and updateSettings({b: y}) are functionally equivalent to\r\n     * updateSettings({a: x, b: y}). If the default values are required again, @see{@link resetSettings}.\r\n     * @example\r\n     * player.updateSettings({\r\n     *      streaming: {\r\n     *          liveDelayFragmentCount: 8\r\n     *          abr: {\r\n     *              maxBitrate: { audio: 100, video: 1000 }\r\n     *          }\r\n     *      }\r\n     *  });\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function updateSettings(settingsObj) {\r\n        settings.update(settingsObj);\r\n    }\r\n\r\n    /**\r\n     * Resets the settings object back to the default.\r\n     *\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function resetSettings() {\r\n        settings.reset();\r\n    }\r\n\r\n    /**\r\n     * A utility methods which converts UTC timestamp value into a valid time and date string.\r\n     *\r\n     * @param {number} time - UTC timestamp to be converted into date and time.\r\n     * @param {string} locales - a region identifier (i.e. en_US).\r\n     * @param {boolean} hour12 - 12 vs 24 hour. Set to true for 12 hour time formatting.\r\n     * @param {boolean} withDate - default is false. Set to true to append current date to UTC time format.\r\n     * @returns {string} A formatted time and date string.\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function formatUTC(time, locales, hour12, withDate = false) {\r\n        const dt = new Date(time * 1000);\r\n        const d = dt.toLocaleDateString(locales);\r\n        const t = dt.toLocaleTimeString(locales, {\r\n            hour12: hour12\r\n        });\r\n        return withDate ? t + ' ' + d : t;\r\n    }\r\n\r\n    /**\r\n     * A utility method which converts seconds into TimeCode (i.e. 300 --> 05:00).\r\n     *\r\n     * @param {number} value - A number in seconds to be converted into a formatted time code.\r\n     * @returns {string} A formatted time code string.\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function convertToTimeCode(value) {\r\n        value = Math.max(value, 0);\r\n\r\n        let h = Math.floor(value / 3600);\r\n        let m = Math.floor((value % 3600) / 60);\r\n        let s = Math.floor((value % 3600) % 60);\r\n        return (h === 0 ? '' : (h < 10 ? '0' + h.toString() + ':' : h.toString() + ':')) + (m < 10 ? '0' + m.toString() : m.toString()) + ':' + (s < 10 ? '0' + s.toString() : s.toString());\r\n    }\r\n\r\n    /**\r\n     * This method should be used to extend or replace internal dash.js objects.\r\n     * There are two ways to extend dash.js (determined by the override argument):\r\n     * <ol>\r\n     * <li>If you set override to true any public method or property in your custom object will\r\n     * override the dash.js parent object's property(ies) and will be used instead but the\r\n     * dash.js parent module will still be created.</li>\r\n     *\r\n     * <li>If you set override to false your object will completely replace the dash.js object.\r\n     * (Note: This is how it was in 1.x of Dash.js with Dijon).</li>\r\n     * </ol>\r\n     * <b>When you extend you get access to this.context, this.factory and this.parent to operate with in your custom object.</b>\r\n     * <ul>\r\n     * <li><b>this.context</b> - can be used to pass context for singleton access.</li>\r\n     * <li><b>this.factory</b> - can be used to call factory.getSingletonInstance().</li>\r\n     * <li><b>this.parent</b> - is the reference of the parent object to call other public methods. (this.parent is excluded if you extend with override set to false or option 2)</li>\r\n     * </ul>\r\n     * <b>You must call extend before you call initialize</b>\r\n     * @see {@link module:MediaPlayer#initialize initialize()}\r\n     * @param {string} parentNameString - name of parent module\r\n     * @param {Object} childInstance - overriding object\r\n     * @param {boolean} override - replace only some methods (true) or the whole object (false)\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function extend(parentNameString, childInstance, override) {\r\n        FactoryMaker.extend(parentNameString, childInstance, override, context);\r\n    }\r\n\r\n    /**\r\n     * This method returns the active stream\r\n     *\r\n     * @throws {@link module:MediaPlayer~STREAMING_NOT_INITIALIZED_ERROR STREAMING_NOT_INITIALIZED_ERROR} if called before initializePlayback function\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function getActiveStream() {\r\n        if (!streamingInitialized) {\r\n            throw STREAMING_NOT_INITIALIZED_ERROR;\r\n        }\r\n        let streamInfo = streamController.getActiveStreamInfo();\r\n        return streamInfo ? streamController.getStreamById(streamInfo.id) : null;\r\n    }\r\n\r\n    //***********************************\r\n    // PRIVATE METHODS\r\n    //***********************************\r\n\r\n    function resetPlaybackControllers() {\r\n        playbackInitialized = false;\r\n        streamingInitialized = false;\r\n        adapter.reset();\r\n        streamController.reset();\r\n        gapController.reset();\r\n        playbackController.reset();\r\n        abrController.reset();\r\n        mediaController.reset();\r\n        textController.reset();\r\n        if (protectionController) {\r\n            if (settings.get().streaming.keepProtectionMediaKeys) {\r\n                protectionController.stop();\r\n            } else {\r\n                protectionController.reset();\r\n                protectionController = null;\r\n                detectProtection();\r\n            }\r\n        }\r\n        cmcdModel.reset();\r\n    }\r\n\r\n    function createPlaybackControllers() {\r\n        // creates or get objects instances\r\n        const manifestLoader = createManifestLoader();\r\n\r\n        if (!streamController) {\r\n            streamController = StreamController(context).getInstance();\r\n        }\r\n\r\n        streamController.setConfig({\r\n            capabilities: capabilities,\r\n            manifestLoader: manifestLoader,\r\n            manifestModel: manifestModel,\r\n            mediaPlayerModel: mediaPlayerModel,\r\n            protectionController: protectionController,\r\n            adapter: adapter,\r\n            dashMetrics: dashMetrics,\r\n            errHandler: errHandler,\r\n            timelineConverter: timelineConverter,\r\n            videoModel: videoModel,\r\n            playbackController: playbackController,\r\n            abrController: abrController,\r\n            mediaController: mediaController,\r\n            textController: textController,\r\n            settings: settings,\r\n            baseURLController: baseURLController\r\n        });\r\n\r\n        gapController.setConfig({\r\n            settings,\r\n            playbackController,\r\n            streamController,\r\n            videoModel,\r\n            timelineConverter,\r\n            adapter\r\n        });\r\n\r\n        playbackController.setConfig({\r\n            streamController: streamController,\r\n            dashMetrics: dashMetrics,\r\n            mediaPlayerModel: mediaPlayerModel,\r\n            adapter: adapter,\r\n            videoModel: videoModel,\r\n            timelineConverter: timelineConverter,\r\n            uriFragmentModel: uriFragmentModel,\r\n            settings: settings\r\n        });\r\n\r\n        abrController.setConfig({\r\n            streamController: streamController,\r\n            domStorage: domStorage,\r\n            mediaPlayerModel: mediaPlayerModel,\r\n            dashMetrics: dashMetrics,\r\n            adapter: adapter,\r\n            videoModel: videoModel,\r\n            settings: settings\r\n        });\r\n\r\n        textController.setConfig({\r\n            errHandler: errHandler,\r\n            manifestModel: manifestModel,\r\n            adapter: adapter,\r\n            mediaController: mediaController,\r\n            streamController: streamController,\r\n            videoModel: videoModel\r\n        });\r\n\r\n        cmcdModel.setConfig({\r\n            abrController,\r\n            dashMetrics,\r\n            playbackController\r\n        });\r\n\r\n        // initialises controller\r\n        streamController.initialize(autoPlay, protectionData);\r\n        gapController.initialize();\r\n        cmcdModel.initialize();\r\n    }\r\n\r\n    function createManifestLoader() {\r\n        return ManifestLoader(context).create({\r\n            debug: debug,\r\n            errHandler: errHandler,\r\n            dashMetrics: dashMetrics,\r\n            mediaPlayerModel: mediaPlayerModel,\r\n            requestModifier: RequestModifier(context).getInstance(),\r\n            mssHandler: mssHandler,\r\n            settings: settings\r\n        });\r\n    }\r\n\r\n    function detectProtection() {\r\n        if (protectionController) {\r\n            return protectionController;\r\n        }\r\n        // do not require Protection as dependencies as this is optional and intended to be loaded separately\r\n        let Protection = dashjs.Protection; /* jshint ignore:line */\r\n        if (typeof Protection === 'function') { //TODO need a better way to register/detect plugin components\r\n            let protection = Protection(context).create();\r\n            Events.extend(Protection.events);\r\n            MediaPlayerEvents.extend(Protection.events, {\r\n                publicOnly: true\r\n            });\r\n            Errors.extend(Protection.errors);\r\n            if (!capabilities) {\r\n                capabilities = Capabilities(context).getInstance();\r\n            }\r\n            protectionController = protection.createProtectionSystem({\r\n                debug: debug,\r\n                errHandler: errHandler,\r\n                videoModel: videoModel,\r\n                capabilities: capabilities,\r\n                eventBus: eventBus,\r\n                events: Events,\r\n                BASE64: BASE64,\r\n                constants: Constants\r\n            });\r\n            return protectionController;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    function detectMetricsReporting() {\r\n        if (metricsReportingController) {\r\n            return;\r\n        }\r\n        // do not require MetricsReporting as dependencies as this is optional and intended to be loaded separately\r\n        let MetricsReporting = dashjs.MetricsReporting; /* jshint ignore:line */\r\n        if (typeof MetricsReporting === 'function') { //TODO need a better way to register/detect plugin components\r\n            let metricsReporting = MetricsReporting(context).create();\r\n\r\n            metricsReportingController = metricsReporting.createMetricsReporting({\r\n                debug: debug,\r\n                eventBus: eventBus,\r\n                mediaElement: getVideoElement(),\r\n                adapter: adapter,\r\n                dashMetrics: dashMetrics,\r\n                events: Events,\r\n                constants: Constants,\r\n                metricsConstants: MetricsConstants\r\n            });\r\n        }\r\n    }\r\n\r\n    function detectMss() {\r\n        if (mssHandler) {\r\n            return;\r\n        }\r\n        // do not require MssHandler as dependencies as this is optional and intended to be loaded separately\r\n        let MssHandler = dashjs.MssHandler; /* jshint ignore:line */\r\n        if (typeof MssHandler === 'function') { //TODO need a better way to register/detect plugin components\r\n            Errors.extend(MssHandler.errors);\r\n            mssHandler = MssHandler(context).create({\r\n                eventBus: eventBus,\r\n                mediaPlayerModel: mediaPlayerModel,\r\n                dashMetrics: dashMetrics,\r\n                manifestModel: manifestModel,\r\n                playbackController: playbackController,\r\n                streamController: streamController,\r\n                protectionController: protectionController,\r\n                baseURLController: baseURLController,\r\n                errHandler: errHandler,\r\n                events: Events,\r\n                constants: Constants,\r\n                debug: debug,\r\n                initSegmentType: HTTPRequest.INIT_SEGMENT_TYPE,\r\n                BASE64: BASE64,\r\n                ISOBoxer: ISOBoxer,\r\n                settings: settings\r\n            });\r\n        }\r\n    }\r\n\r\n    function detectOffline() {\r\n        if (!mediaPlayerInitialized) {\r\n            throw MEDIA_PLAYER_NOT_INITIALIZED_ERROR;\r\n        }\r\n\r\n        if (offlineController) {\r\n            return offlineController;\r\n        }\r\n\r\n        // do not require Offline as dependencies as this is optional and intended to be loaded separately\r\n        let OfflineController = dashjs.OfflineController; /* jshint ignore:line */\r\n\r\n        if (typeof OfflineController === 'function') { //TODO need a better way to register/detect plugin components\r\n            Events.extend(OfflineController.events);\r\n            MediaPlayerEvents.extend(OfflineController.events, {\r\n                publicOnly: true\r\n            });\r\n            Errors.extend(OfflineController.errors);\r\n\r\n            const manifestLoader = createManifestLoader();\r\n            const manifestUpdater = ManifestUpdater(context).create();\r\n\r\n            manifestUpdater.setConfig({\r\n                manifestModel: manifestModel,\r\n                adapter: adapter,\r\n                manifestLoader: manifestLoader,\r\n                errHandler: errHandler\r\n            });\r\n\r\n            offlineController = OfflineController(context).create({\r\n                debug: debug,\r\n                manifestUpdater: manifestUpdater,\r\n                baseURLController: baseURLController,\r\n                manifestLoader: manifestLoader,\r\n                manifestModel: manifestModel,\r\n                mediaPlayerModel: mediaPlayerModel,\r\n                abrController: abrController,\r\n                playbackController: playbackController,\r\n                adapter: adapter,\r\n                errHandler: errHandler,\r\n                dashMetrics: dashMetrics,\r\n                timelineConverter: timelineConverter,\r\n                schemeLoaderFactory: schemeLoaderFactory,\r\n                eventBus: eventBus,\r\n                events: Events,\r\n                errors: Errors,\r\n                constants: Constants,\r\n                settings: settings,\r\n                dashConstants: DashConstants,\r\n                urlUtils: URLUtils(context).getInstance()\r\n            });\r\n            return offlineController;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    function getAsUTC(valToConvert) {\r\n        let metric = dashMetrics.getCurrentDVRInfo();\r\n        let availableFrom,\r\n            utcValue;\r\n\r\n        if (!metric) {\r\n            return 0;\r\n        }\r\n        availableFrom = metric.manifestInfo.availableFrom.getTime() / 1000;\r\n        utcValue = valToConvert + (availableFrom + metric.range.start);\r\n        return utcValue;\r\n    }\r\n\r\n    function initializePlayback() {\r\n\r\n        if (offlineController) {\r\n            offlineController.resetRecords();\r\n        }\r\n\r\n        if (!streamingInitialized && source) {\r\n            streamingInitialized = true;\r\n            logger.info('Streaming Initialized');\r\n            createPlaybackControllers();\r\n\r\n            if (typeof source === 'string') {\r\n                streamController.load(source);\r\n            } else {\r\n                streamController.loadWithManifest(source);\r\n            }\r\n        }\r\n\r\n        if (!playbackInitialized && isReady()) {\r\n            playbackInitialized = true;\r\n            logger.info('Playback Initialized');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the DashAdapter.js Module.\r\n     *\r\n     * @see {@link module:DashAdapter}\r\n     * @returns {Object}\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function getDashAdapter() {\r\n        return adapter;\r\n    }\r\n\r\n    instance = {\r\n        initialize: initialize,\r\n        setConfig: setConfig,\r\n        on: on,\r\n        off: off,\r\n        extend: extend,\r\n        attachView: attachView,\r\n        attachSource: attachSource,\r\n        isReady: isReady,\r\n        preload: preload,\r\n        play: play,\r\n        isPaused: isPaused,\r\n        pause: pause,\r\n        isSeeking: isSeeking,\r\n        isDynamic: isDynamic,\r\n        seek: seek,\r\n        setPlaybackRate: setPlaybackRate,\r\n        getPlaybackRate: getPlaybackRate,\r\n        setMute: setMute,\r\n        isMuted: isMuted,\r\n        setVolume: setVolume,\r\n        getVolume: getVolume,\r\n        time: time,\r\n        duration: duration,\r\n        timeAsUTC: timeAsUTC,\r\n        durationAsUTC: durationAsUTC,\r\n        getActiveStream: getActiveStream,\r\n        getDVRWindowSize: getDVRWindowSize,\r\n        getDVRSeekOffset: getDVRSeekOffset,\r\n        convertToTimeCode: convertToTimeCode,\r\n        formatUTC: formatUTC,\r\n        getVersion: getVersion,\r\n        getDebug: getDebug,\r\n        getBufferLength: getBufferLength,\r\n        getTTMLRenderingDiv: getTTMLRenderingDiv,\r\n        getVideoElement: getVideoElement,\r\n        getSource: getSource,\r\n        getCurrentLiveLatency: getCurrentLiveLatency,\r\n        getTopBitrateInfoFor: getTopBitrateInfoFor,\r\n        setAutoPlay: setAutoPlay,\r\n        getAutoPlay: getAutoPlay,\r\n        getDashMetrics: getDashMetrics,\r\n        getQualityFor: getQualityFor,\r\n        setQualityFor: setQualityFor,\r\n        updatePortalSize: updatePortalSize,\r\n        setTextDefaultLanguage: setTextDefaultLanguage,\r\n        getTextDefaultLanguage: getTextDefaultLanguage,\r\n        setTextDefaultEnabled: setTextDefaultEnabled,\r\n        getTextDefaultEnabled: getTextDefaultEnabled,\r\n        enableText: enableText,\r\n        enableForcedTextStreaming: enableForcedTextStreaming,\r\n        isTextEnabled: isTextEnabled,\r\n        setTextTrack: setTextTrack,\r\n        getBitrateInfoListFor: getBitrateInfoListFor,\r\n        getStreamsFromManifest: getStreamsFromManifest,\r\n        getTracksFor: getTracksFor,\r\n        getTracksForTypeFromManifest: getTracksForTypeFromManifest,\r\n        getCurrentTrackFor: getCurrentTrackFor,\r\n        setInitialMediaSettingsFor: setInitialMediaSettingsFor,\r\n        getInitialMediaSettingsFor: getInitialMediaSettingsFor,\r\n        setCurrentTrack: setCurrentTrack,\r\n        getTrackSwitchModeFor: getTrackSwitchModeFor,\r\n        setTrackSwitchModeFor: setTrackSwitchModeFor,\r\n        setSelectionModeForInitialTrack: setSelectionModeForInitialTrack,\r\n        getSelectionModeForInitialTrack: getSelectionModeForInitialTrack,\r\n        addABRCustomRule: addABRCustomRule,\r\n        removeABRCustomRule: removeABRCustomRule,\r\n        removeAllABRCustomRule: removeAllABRCustomRule,\r\n        getAverageThroughput: getAverageThroughput,\r\n        retrieveManifest: retrieveManifest,\r\n        addUTCTimingSource: addUTCTimingSource,\r\n        removeUTCTimingSource: removeUTCTimingSource,\r\n        clearDefaultUTCTimingSources: clearDefaultUTCTimingSources,\r\n        restoreDefaultUTCTimingSources: restoreDefaultUTCTimingSources,\r\n        setXHRWithCredentialsForType: setXHRWithCredentialsForType,\r\n        getXHRWithCredentialsForType: getXHRWithCredentialsForType,\r\n        getProtectionController: getProtectionController,\r\n        attachProtectionController: attachProtectionController,\r\n        setProtectionData: setProtectionData,\r\n        displayCaptionsOnTop: displayCaptionsOnTop,\r\n        attachTTMLRenderingDiv: attachTTMLRenderingDiv,\r\n        getCurrentTextTrackIndex: getCurrentTextTrackIndex,\r\n        provideThumbnail: provideThumbnail,\r\n        getDashAdapter: getDashAdapter,\r\n        getOfflineController: getOfflineController,\r\n        getSettings: getSettings,\r\n        updateSettings: updateSettings,\r\n        resetSettings: resetSettings,\r\n        reset: reset,\r\n        destroy: destroy\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\nMediaPlayer.__dashjs_factory_name = 'MediaPlayer';\r\nconst factory = FactoryMaker.getClassFactory(MediaPlayer);\r\nfactory.events = MediaPlayerEvents;\r\nfactory.errors = Errors;\r\nFactoryMaker.updateClassFactory(MediaPlayer.__dashjs_factory_name, factory);\r\n\r\nexport default factory;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport EventsBase from '../core/events/EventsBase';\r\n\r\n/**\r\n * @class\r\n * @implements EventsBase\r\n */\r\nclass MediaPlayerEvents extends EventsBase {\r\n\r\n    /**\r\n     * @description Public facing external events to be used when developing a player that implements dash.js.\r\n     */\r\n    constructor() {\r\n        super();\r\n        /**\r\n         * Triggered when playback will not start yet\r\n         * as the MPD's availabilityStartTime is in the future.\r\n         * Check delay property in payload to determine time before playback will start.\r\n         * @event MediaPlayerEvents#AST_IN_FUTURE\r\n         */\r\n        this.AST_IN_FUTURE = 'astInFuture';\r\n\r\n        /**\r\n         * Triggered when the video element's buffer state changes to stalled.\r\n         * Check mediaType in payload to determine type (Video, Audio, FragmentedText).\r\n         * @event MediaPlayerEvents#BUFFER_EMPTY\r\n         */\r\n        this.BUFFER_EMPTY = 'bufferStalled';\r\n\r\n        /**\r\n         * Triggered when the video element's buffer state changes to loaded.\r\n         * Check mediaType in payload to determine type (Video, Audio, FragmentedText).\r\n         * @event MediaPlayerEvents#BUFFER_LOADED\r\n         */\r\n        this.BUFFER_LOADED = 'bufferLoaded';\r\n\r\n        /**\r\n         * Triggered when the video element's buffer state changes, either stalled or loaded. Check payload for state.\r\n         * @event MediaPlayerEvents#BUFFER_LEVEL_STATE_CHANGED\r\n         */\r\n        this.BUFFER_LEVEL_STATE_CHANGED = 'bufferStateChanged';\r\n\r\n        /**\r\n         * Triggered when a dynamic stream changed to static (transition phase between Live and On-Demand).\r\n         * @event MediaPlayerEvents#DYNAMIC_TO_STATIC\r\n         */\r\n        this.DYNAMIC_TO_STATIC = 'dynamicToStatic';\r\n\r\n        /**\r\n         * Triggered when there is an error from the element or MSE source buffer.\r\n         * @event MediaPlayerEvents#ERROR\r\n         */\r\n        this.ERROR = 'error';\r\n        /**\r\n         * Triggered when a fragment download has completed.\r\n         * @event MediaPlayerEvents#FRAGMENT_LOADING_COMPLETED\r\n         */\r\n        this.FRAGMENT_LOADING_COMPLETED = 'fragmentLoadingCompleted';\r\n\r\n        /**\r\n         * Triggered when a partial fragment download has completed.\r\n         * @event MediaPlayerEvents#FRAGMENT_LOADING_PROGRESS\r\n         */\r\n        this.FRAGMENT_LOADING_PROGRESS = 'fragmentLoadingProgress';\r\n        /**\r\n         * Triggered when a fragment download has started.\r\n         * @event MediaPlayerEvents#FRAGMENT_LOADING_STARTED\r\n         */\r\n        this.FRAGMENT_LOADING_STARTED = 'fragmentLoadingStarted';\r\n\r\n        /**\r\n         * Triggered when a fragment download is abandoned due to detection of slow download base on the ABR abandon rule..\r\n         * @event MediaPlayerEvents#FRAGMENT_LOADING_ABANDONED\r\n         */\r\n        this.FRAGMENT_LOADING_ABANDONED = 'fragmentLoadingAbandoned';\r\n\r\n        /**\r\n         * Triggered when {@link module:Debug} logger methods are called.\r\n         * @event MediaPlayerEvents#LOG\r\n         */\r\n        this.LOG = 'log';\r\n\r\n        //TODO refactor with internal event\r\n        /**\r\n         * Triggered when the manifest load is complete\r\n         * @event MediaPlayerEvents#MANIFEST_LOADED\r\n         */\r\n        this.MANIFEST_LOADED = 'manifestLoaded';\r\n\r\n        /**\r\n         * Triggered anytime there is a change to the overall metrics.\r\n         * @event MediaPlayerEvents#METRICS_CHANGED\r\n         */\r\n        this.METRICS_CHANGED = 'metricsChanged';\r\n\r\n        /**\r\n         * Triggered when an individual metric is added, updated or cleared.\r\n         * @event MediaPlayerEvents#METRIC_CHANGED\r\n         */\r\n        this.METRIC_CHANGED = 'metricChanged';\r\n\r\n        /**\r\n         * Triggered every time a new metric is added.\r\n         * @event MediaPlayerEvents#METRIC_ADDED\r\n         */\r\n        this.METRIC_ADDED = 'metricAdded';\r\n\r\n        /**\r\n         * Triggered every time a metric is updated.\r\n         * @event MediaPlayerEvents#METRIC_UPDATED\r\n         */\r\n        this.METRIC_UPDATED = 'metricUpdated';\r\n\r\n        /**\r\n         * Triggered at the stream end of a period.\r\n         * @event MediaPlayerEvents#PERIOD_SWITCH_COMPLETED\r\n         */\r\n        this.PERIOD_SWITCH_COMPLETED = 'periodSwitchCompleted';\r\n\r\n        /**\r\n         * Triggered when a new period starts.\r\n         * @event MediaPlayerEvents#PERIOD_SWITCH_STARTED\r\n         */\r\n        this.PERIOD_SWITCH_STARTED = 'periodSwitchStarted';\r\n\r\n        /**\r\n         * Triggered when an ABR up /down switch is initiated; either by user in manual mode or auto mode via ABR rules.\r\n         * @event MediaPlayerEvents#QUALITY_CHANGE_REQUESTED\r\n         */\r\n        this.QUALITY_CHANGE_REQUESTED = 'qualityChangeRequested';\r\n\r\n        /**\r\n         * Triggered when the new ABR quality is being rendered on-screen.\r\n         * @event MediaPlayerEvents#QUALITY_CHANGE_RENDERED\r\n         */\r\n        this.QUALITY_CHANGE_RENDERED = 'qualityChangeRendered';\r\n\r\n        /**\r\n         * Triggered when the new track is being rendered.\r\n         * @event MediaPlayerEvents#TRACK_CHANGE_RENDERED\r\n         */\r\n        this.TRACK_CHANGE_RENDERED = 'trackChangeRendered';\r\n\r\n        /**\r\n         * Triggered when the source is setup and ready.\r\n         * @event MediaPlayerEvents#SOURCE_INITIALIZED\r\n         */\r\n        this.SOURCE_INITIALIZED = 'sourceInitialized';\r\n\r\n        /**\r\n         * Triggered when a stream (period) is being loaded\r\n         * @event MediaPlayerEvents#STREAM_INITIALIZING\r\n         */\r\n        this.STREAM_INITIALIZING = 'streamInitializing';\r\n\r\n        /**\r\n         * Triggered when a stream (period) is loaded\r\n         * @event MediaPlayerEvents#STREAM_UPDATED\r\n         */\r\n        this.STREAM_UPDATED = 'streamUpdated';\r\n\r\n        /**\r\n         * Triggered when a stream (period) is updated\r\n         * @event MediaPlayerEvents#STREAM_INITIALIZED\r\n         */\r\n        this.STREAM_INITIALIZED = 'streamInitialized';\r\n\r\n        /**\r\n         * Triggered when the player has been reset.\r\n         * @event MediaPlayerEvents#STREAM_TEARDOWN_COMPLETE\r\n         */\r\n        this.STREAM_TEARDOWN_COMPLETE = 'streamTeardownComplete';\r\n\r\n        /**\r\n         * Triggered once all text tracks detected in the MPD are added to the video element.\r\n         * @event MediaPlayerEvents#TEXT_TRACKS_ADDED\r\n         */\r\n        this.TEXT_TRACKS_ADDED = 'allTextTracksAdded';\r\n\r\n        /**\r\n         * Triggered when a text track is added to the video element's TextTrackList\r\n         * @event MediaPlayerEvents#TEXT_TRACK_ADDED\r\n         */\r\n        this.TEXT_TRACK_ADDED = 'textTrackAdded';\r\n\r\n        /**\r\n         * Triggered when a ttml chunk is parsed.\r\n         * @event MediaPlayerEvents#TTML_PARSED\r\n         */\r\n        this.TTML_PARSED = 'ttmlParsed';\r\n\r\n        /**\r\n         * Triggered when a ttml chunk has to be parsed.\r\n         * @event MediaPlayerEvents#TTML_TO_PARSE\r\n         */\r\n        this.TTML_TO_PARSE = 'ttmlToParse';\r\n\r\n        /**\r\n         * Triggered when a caption is rendered.\r\n         * @event MediaPlayerEvents#CAPTION_RENDERED\r\n         */\r\n        this.CAPTION_RENDERED = 'captionRendered';\r\n\r\n        /**\r\n         * Triggered when the caption container is resized.\r\n         * @event MediaPlayerEvents#CAPTION_CONTAINER_RESIZE\r\n         */\r\n        this.CAPTION_CONTAINER_RESIZE = 'captionContainerResize';\r\n\r\n        /**\r\n         * Sent when enough data is available that the media can be played,\r\n         * at least for a couple of frames.  This corresponds to the\r\n         * HAVE_ENOUGH_DATA readyState.\r\n         * @event MediaPlayerEvents#CAN_PLAY\r\n         */\r\n        this.CAN_PLAY = 'canPlay';\r\n\r\n        /**\r\n         * Sent when playback completes.\r\n         * @event MediaPlayerEvents#PLAYBACK_ENDED\r\n         */\r\n        this.PLAYBACK_ENDED = 'playbackEnded';\r\n\r\n        /**\r\n         * Sent when an error occurs.  The element's error\r\n         * attribute contains more information.\r\n         * @event MediaPlayerEvents#PLAYBACK_ERROR\r\n         */\r\n        this.PLAYBACK_ERROR = 'playbackError';\r\n\r\n        /**\r\n         * Sent when playback is not allowed (for example if user gesture is needed).\r\n         * @event MediaPlayerEvents#PLAYBACK_NOT_ALLOWED\r\n         */\r\n        this.PLAYBACK_NOT_ALLOWED = 'playbackNotAllowed';\r\n\r\n        /**\r\n         * The media's metadata has finished loading; all attributes now\r\n         * contain as much useful information as they're going to.\r\n         * @event MediaPlayerEvents#PLAYBACK_METADATA_LOADED\r\n         */\r\n        this.PLAYBACK_METADATA_LOADED = 'playbackMetaDataLoaded';\r\n\r\n        /**\r\n         * Sent when playback is paused.\r\n         * @event MediaPlayerEvents#PLAYBACK_PAUSED\r\n         */\r\n        this.PLAYBACK_PAUSED = 'playbackPaused';\r\n\r\n        /**\r\n         * Sent when the media begins to play (either for the first time, after having been paused,\r\n         * or after ending and then restarting).\r\n         *\r\n         * @event MediaPlayerEvents#PLAYBACK_PLAYING\r\n         */\r\n        this.PLAYBACK_PLAYING = 'playbackPlaying';\r\n\r\n        /**\r\n         * Sent periodically to inform interested parties of progress downloading\r\n         * the media. Information about the current amount of the media that has\r\n         * been downloaded is available in the media element's buffered attribute.\r\n         * @event MediaPlayerEvents#PLAYBACK_PROGRESS\r\n         */\r\n        this.PLAYBACK_PROGRESS = 'playbackProgress';\r\n\r\n        /**\r\n         * Sent when the playback speed changes.\r\n         * @event MediaPlayerEvents#PLAYBACK_RATE_CHANGED\r\n         */\r\n        this.PLAYBACK_RATE_CHANGED = 'playbackRateChanged';\r\n\r\n        /**\r\n         * Sent when a seek operation completes.\r\n         * @event MediaPlayerEvents#PLAYBACK_SEEKED\r\n         */\r\n        this.PLAYBACK_SEEKED = 'playbackSeeked';\r\n\r\n        /**\r\n         * Sent when a seek operation begins.\r\n         * @event MediaPlayerEvents#PLAYBACK_SEEKING\r\n         */\r\n        this.PLAYBACK_SEEKING = 'playbackSeeking';\r\n\r\n        /**\r\n         * Sent when a seek operation has been asked.\r\n         * @event MediaPlayerEvents#PLAYBACK_SEEK_ASKED\r\n         */\r\n        this.PLAYBACK_SEEK_ASKED = 'playbackSeekAsked';\r\n\r\n        /**\r\n         * Sent when the video element reports stalled\r\n         * @event MediaPlayerEvents#PLAYBACK_STALLED\r\n         */\r\n        this.PLAYBACK_STALLED = 'playbackStalled';\r\n\r\n        /**\r\n         * Sent when playback of the media starts after having been paused;\r\n         * that is, when playback is resumed after a prior pause event.\r\n         *\r\n         * @event MediaPlayerEvents#PLAYBACK_STARTED\r\n         */\r\n        this.PLAYBACK_STARTED = 'playbackStarted';\r\n\r\n        /**\r\n         * The time indicated by the element's currentTime attribute has changed.\r\n         * @event MediaPlayerEvents#PLAYBACK_TIME_UPDATED\r\n         */\r\n        this.PLAYBACK_TIME_UPDATED = 'playbackTimeUpdated';\r\n\r\n        /**\r\n         * Sent when the media playback has stopped because of a temporary lack of data.\r\n         *\r\n         * @event MediaPlayerEvents#PLAYBACK_WAITING\r\n         */\r\n        this.PLAYBACK_WAITING = 'playbackWaiting';\r\n\r\n        /**\r\n         * Manifest validity changed - As a result of an MPD validity expiration event.\r\n         * @event MediaPlayerEvents#MANIFEST_VALIDITY_CHANGED\r\n         */\r\n        this.MANIFEST_VALIDITY_CHANGED = 'manifestValidityChanged';\r\n\r\n        /**\r\n         * A gap occured in the timeline which requires a seek to the next period\r\n         * @event MediaPlayerEvents#GAP_CAUSED_SEEK_TO_PERIOD_END\r\n         */\r\n        this.GAP_CAUSED_SEEK_TO_PERIOD_END = 'gapCausedSeekToPeriodEnd';\r\n\r\n        /**\r\n         * A gap occured in the timeline which requires an internal seek\r\n         * @event MediaPlayerEvents#GAP_CAUSED_INTERNAL_SEEK\r\n         */\r\n        this.GAP_CAUSED_INTERNAL_SEEK = 'gapCausedInternalSeek';\r\n\r\n        /**\r\n         * Dash events are triggered at their respective start points on the timeline.\r\n         * @event MediaPlayerEvents#EVENT_MODE_ON_START\r\n         */\r\n        this.EVENT_MODE_ON_START = 'eventModeOnStart';\r\n\r\n        /**\r\n         * Dash events are triggered as soon as they were parsed.\r\n         * @event MediaPlayerEvents#EVENT_MODE_ON_RECEIVE\r\n         */\r\n        this.EVENT_MODE_ON_RECEIVE = 'eventModeOnReceive';\r\n    }\r\n}\r\n\r\nlet mediaPlayerEvents = new MediaPlayerEvents();\r\nexport default mediaPlayerEvents;\r\n","import MediaPlayer from './MediaPlayer';\r\n\r\nfunction MediaPlayerFactory() {\r\n    /**\r\n     * mime-type identifier for any source content to be accepted as a dash manifest by the create() method.\r\n     * @type {string}\r\n     */\r\n    const SUPPORTED_MIME_TYPE = 'application/dash+xml';\r\n\r\n    let logger;\r\n\r\n    /**\r\n     *  A new MediaPlayer is instantiated for the supplied videoElement and optional source and context.  If no context is provided,\r\n     *  a default DashContext is used. If no source is provided, the videoElement is interrogated to extract the first source whose\r\n     *  type is application/dash+xml.\r\n     * The autoplay property of the videoElement is preserved. Any preload attribute is ignored. This method should be called after the page onLoad event is dispatched.\r\n     * @param {HTMLMediaElement} video\r\n     * @param {HTMLSourceElement} source\r\n     * @param {Object} context\r\n     * @returns {MediaPlayer|null}\r\n     */\r\n    function create(video, source, context) {\r\n        if (!video || !(/^VIDEO$/i).test(video.nodeName)) return null;\r\n\r\n        if (video._dashjs_player) return video._dashjs_player;\r\n\r\n        let player;\r\n        let videoID = (video.id || video.name || 'video element');\r\n\r\n        source = source || [].slice.call(video.querySelectorAll('source')).filter(function (s) {\r\n                return s.type == SUPPORTED_MIME_TYPE;\r\n            })[0];\r\n        if (!source && video.src) {\r\n            source = document.createElement('source');\r\n            source.src = video.src;\r\n        } else if (!source && !video.src) {\r\n            return null;\r\n        }\r\n\r\n        context = context || {};\r\n        player = MediaPlayer(context).create();\r\n        player.initialize(video, source.src, video.autoplay);\r\n\r\n        if (!logger) {\r\n            logger = player.getDebug().getLogger();\r\n        }\r\n        logger.debug('Converted ' + videoID + ' to dash.js player and added content: ' + source.src);\r\n\r\n        // Store a reference to the player on the video element so it can be gotten at for debugging and so we know its\r\n        // already been setup.\r\n        video._dashjs_player = player;\r\n\r\n        return player;\r\n    }\r\n\r\n    /**\r\n     * Searches the provided scope for all instances of the indicated selector. If no scope is provided, document is used. If no selector is\r\n     * specified, [data-dashjs-player] is used. The declarative setup also looks for source elements with the type attribute set to 'application/dash+xml'.\r\n     * It then looks for those video elements which have a source element defined with a type matching 'application/dash+xml'.\r\n     * A new MediaPlayer is instantiated for each matching video element and the appropriate source is assigned.\r\n     * The autoplay property of the video element is preserved. Any preload attribute is ignored. This method should be called after the page onLoad event is dispatched.\r\n     * Returns an array holding all the MediaPlayer instances that were added by this method.\r\n     * @param {string} selector - CSS selector\r\n     * @param {Object} scope\r\n     * @returns {Array} an array of MediaPlayer objects\r\n     */\r\n    function createAll(selector, scope) {\r\n        let aPlayers = [];\r\n        selector = selector || '[data-dashjs-player]';\r\n        scope = scope || document;\r\n        let videos = scope.querySelectorAll(selector);\r\n        for (let i = 0; i < videos.length; i++) {\r\n            let player = create(videos[i], null);\r\n            aPlayers.push(player);\r\n        }\r\n\r\n        let sources = scope.querySelectorAll('source[type=\"' + SUPPORTED_MIME_TYPE + '\"]');\r\n        for (let i = 0; i < sources.length; i++) {\r\n            let video = findVideo(sources[i]);\r\n            let player = create(video, null);\r\n            aPlayers.push(player);\r\n        }\r\n\r\n        return aPlayers;\r\n    }\r\n\r\n    function findVideo(el) {\r\n        if ((/^VIDEO$/i).test(el.nodeName)) {\r\n            return el;\r\n        } else {\r\n            return findVideo(el.parentNode);\r\n        }\r\n    }\r\n\r\n    return {\r\n        create: create,\r\n        createAll: createAll\r\n    };\r\n}\r\n\r\nlet instance = MediaPlayerFactory();\r\nlet loadInterval;\r\n\r\nfunction loadHandler() {\r\n    window.removeEventListener('load', loadHandler);\r\n    instance.createAll();\r\n}\r\n\r\nfunction loadIntervalHandler() {\r\n    if (window.dashjs) {\r\n        window.clearInterval(loadInterval);\r\n        instance.createAll();\r\n    }\r\n}\r\n\r\nlet avoidAutoCreate = typeof window !== 'undefined' && window && window.dashjs && window.dashjs.skipAutoCreate;\r\n\r\nif (!avoidAutoCreate && typeof window !== 'undefined' && window && window.addEventListener) {\r\n    if (window.document.readyState === 'complete') {\r\n        if (window.dashjs) {\r\n            instance.createAll();\r\n        } else {\r\n            // If loaded asynchronously, window.readyState may be 'complete' even if dashjs hasn't loaded yet\r\n            loadInterval = window.setInterval(loadIntervalHandler, 500);\r\n        }\r\n    } else {\r\n        window.addEventListener('load', loadHandler);\r\n    }\r\n}\r\n\r\nexport default instance;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport Debug from '../core/Debug';\r\nimport FactoryMaker from '../core/FactoryMaker';\r\n\r\n/**\r\n * This is a sink that is used to temporarily hold onto media chunks before a video element is added.\r\n * The discharge() function is used to get the chunks out of the PreBuffer for adding to a real SourceBuffer.\r\n *\r\n * @class PreBufferSink\r\n * @ignore\r\n * @implements FragmentSink\r\n */\r\nfunction PreBufferSink(onAppendedCallback) {\r\n    const context = this.context;\r\n\r\n    let instance,\r\n        logger,\r\n        outstandingInit;\r\n    let chunks = [];\r\n    let onAppended = onAppendedCallback;\r\n\r\n    function setup() {\r\n        logger = Debug(context).getInstance().getLogger(instance);\r\n    }\r\n\r\n    function reset() {\r\n        chunks = [];\r\n        outstandingInit = null;\r\n        onAppended = null;\r\n    }\r\n\r\n    function append(chunk) {\r\n        if (chunk.segmentType !== 'InitializationSegment') { //Init segments are stored in the initCache.\r\n            chunks.push(chunk);\r\n            chunks.sort(function (a, b) { return a.start - b.start; });\r\n            outstandingInit = null;\r\n        } else {//We need to hold an init chunk for when a corresponding media segment is being downloaded when the discharge happens.\r\n            outstandingInit = chunk;\r\n        }\r\n\r\n        logger.debug('PreBufferSink appended chunk s: ' + chunk.start + '; e: ' + chunk.end);\r\n        if (onAppended) {\r\n            onAppended({\r\n                chunk: chunk\r\n            });\r\n        }\r\n    }\r\n\r\n    function remove(start, end) {\r\n        chunks = chunks.filter( a => !((isNaN(end) || a.start < end) && (isNaN(start) || a.end > start))); //The opposite of the getChunks predicate.\r\n    }\r\n\r\n    //Nothing async, nothing to abort.\r\n    function abort() {\r\n    }\r\n\r\n    function getAllBufferRanges() {\r\n        let ranges = [];\r\n\r\n        for (let i = 0; i < chunks.length; i++) {\r\n            let chunk = chunks[i];\r\n            if (ranges.length === 0 || chunk.start > ranges[ranges.length - 1].end) {\r\n                ranges.push({ start: chunk.start, end: chunk.end });\r\n            } else {\r\n                ranges[ranges.length - 1].end = chunk.end;\r\n            }\r\n        }\r\n\r\n        //Implements TimeRanges interface. So acts just like sourceBuffer.buffered.\r\n        const timeranges = {\r\n            start: function (n) {\r\n                return ranges[n].start;\r\n            },\r\n            end: function (n) {\r\n                return ranges[n].end;\r\n            }\r\n        };\r\n\r\n        Object.defineProperty(timeranges, 'length', {\r\n            get: function () {\r\n                return ranges.length;\r\n            }\r\n        });\r\n\r\n        return timeranges;\r\n    }\r\n\r\n    function hasDiscontinuitiesAfter() {\r\n        return false;\r\n    }\r\n\r\n    function updateTimestampOffset() {\r\n        // Nothing to do\r\n    }\r\n\r\n    function getBuffer() {\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Return the all chunks in the buffer the lie between times start and end.\r\n     * Because a chunk cannot be split, this returns the full chunk if any part of its time lies in the requested range.\r\n     * Chunks are removed from the buffer when they are discharged.\r\n     * @function PreBufferSink#discharge\r\n     * @param {?Number} start The start time from which to discharge from the buffer. If NaN, it is regarded as unbounded.\r\n     * @param {?Number} end The end time from which to discharge from the buffer. If NaN, it is regarded as unbounded.\r\n     * @returns {Array} The set of chunks from the buffer within the time ranges.\r\n     */\r\n    function discharge(start, end) {\r\n        const result = getChunksAt(start, end);\r\n        if (outstandingInit) {\r\n            result.push(outstandingInit);\r\n            outstandingInit = null;\r\n        }\r\n\r\n        remove(start, end);\r\n\r\n        return result;\r\n    }\r\n\r\n    function getChunksAt(start, end) {\r\n        return chunks.filter( a => ((isNaN(end) || a.start < end) && (isNaN(start) || a.end > start)) );\r\n    }\r\n\r\n    function waitForUpdateEnd(callback) {\r\n        callback();\r\n    }\r\n\r\n    instance = {\r\n        getAllBufferRanges: getAllBufferRanges,\r\n        append: append,\r\n        remove: remove,\r\n        abort: abort,\r\n        discharge: discharge,\r\n        reset: reset,\r\n        updateTimestampOffset: updateTimestampOffset,\r\n        hasDiscontinuitiesAfter: hasDiscontinuitiesAfter,\r\n        waitForUpdateEnd: waitForUpdateEnd,\r\n        getBuffer: getBuffer\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\nPreBufferSink.__dashjs_factory_name = 'PreBufferSink';\r\nconst factory = FactoryMaker.getClassFactory(PreBufferSink);\r\nexport default factory;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport Debug from '../core/Debug';\r\nimport DashJSError from './vo/DashJSError';\r\nimport EventBus from '../core/EventBus';\r\nimport Events from '../core/events/Events';\r\nimport FactoryMaker from '../core/FactoryMaker';\r\nimport TextController from './text/TextController';\r\nimport Errors from '../core/errors/Errors';\r\n\r\nconst MAX_ALLOWED_DISCONTINUITY = 0.1; // 100 milliseconds\r\n\r\n/**\r\n * @class SourceBufferSink\r\n * @ignore\r\n * @implements FragmentSink\r\n */\r\nfunction SourceBufferSink(mediaSource, mediaInfo, onAppendedCallback, oldBuffer) {\r\n    const context = this.context;\r\n    const eventBus = EventBus(context).getInstance();\r\n\r\n    let instance,\r\n        type,\r\n        logger,\r\n        buffer,\r\n        isAppendingInProgress,\r\n        intervalId;\r\n\r\n    let callbacks = [];\r\n    let appendQueue = [];\r\n    let onAppended = onAppendedCallback;\r\n\r\n    function setup() {\r\n        logger = Debug(context).getInstance().getLogger(instance);\r\n        isAppendingInProgress = false;\r\n\r\n        type = mediaInfo.type;\r\n        const codec = mediaInfo.codec;\r\n        try {\r\n            // Safari claims to support anything starting 'application/mp4'.\r\n            // it definitely doesn't understand 'application/mp4;codecs=\"stpp\"'\r\n            // - currently no browser does, so check for it and use our own\r\n            // implementation. The same is true for codecs=\"wvtt\".\r\n            if (codec.match(/application\\/mp4;\\s*codecs=\"(stpp|wvtt).*\"/i)) {\r\n                throw new Error('not really supported');\r\n            }\r\n            buffer = oldBuffer ? oldBuffer : mediaSource.addSourceBuffer(codec);\r\n            if (buffer.changeType && oldBuffer) {\r\n                logger.debug('Doing period transition with changeType');\r\n                buffer.changeType(codec);\r\n            }\r\n\r\n            updateAppendWindow();\r\n\r\n            const CHECK_INTERVAL = 50;\r\n            // use updateend event if possible\r\n            if (typeof buffer.addEventListener === 'function') {\r\n                try {\r\n                    buffer.addEventListener('updateend', updateEndHandler, false);\r\n                    buffer.addEventListener('error', errHandler, false);\r\n                    buffer.addEventListener('abort', errHandler, false);\r\n\r\n                } catch (err) {\r\n                    // use setInterval to periodically check if updating has been completed\r\n                    intervalId = setInterval(checkIsUpdateEnded, CHECK_INTERVAL);\r\n                }\r\n            } else {\r\n                // use setInterval to periodically check if updating has been completed\r\n                intervalId = setInterval(checkIsUpdateEnded, CHECK_INTERVAL);\r\n            }\r\n        } catch (ex) {\r\n            // Note that in the following, the quotes are open to allow for extra text after stpp and wvtt\r\n            if ((mediaInfo.isText) || (codec.indexOf('codecs=\"stpp') !== -1) || (codec.indexOf('codecs=\"wvtt') !== -1)) {\r\n                const textController = TextController(context).getInstance();\r\n                buffer = textController.getTextSourceBuffer();\r\n            } else {\r\n                throw ex;\r\n            }\r\n        }\r\n    }\r\n\r\n    function getType() {\r\n        return type;\r\n    }\r\n\r\n    function reset(keepBuffer) {\r\n        if (buffer) {\r\n            if (typeof buffer.removeEventListener === 'function') {\r\n                buffer.removeEventListener('updateend', updateEndHandler, false);\r\n                buffer.removeEventListener('error', errHandler, false);\r\n                buffer.removeEventListener('abort', errHandler, false);\r\n            }\r\n            clearInterval(intervalId);\r\n            callbacks = [];\r\n            if (!keepBuffer) {\r\n                try {\r\n                    if (!buffer.getClassName || buffer.getClassName() !== 'TextSourceBuffer') {\r\n                        logger.debug(`Removing sourcebuffer from media source`);\r\n                        mediaSource.removeSourceBuffer(buffer);\r\n                    }\r\n                } catch (e) {\r\n                    logger.error('Failed to remove source buffer from media source.');\r\n                }\r\n                buffer = null;\r\n            }\r\n            isAppendingInProgress = false;\r\n        }\r\n        appendQueue = [];\r\n        onAppended = null;\r\n    }\r\n\r\n    function getBuffer() {\r\n        return buffer;\r\n    }\r\n\r\n    function getAllBufferRanges() {\r\n        try {\r\n            return buffer.buffered;\r\n        } catch (e) {\r\n            logger.error('getAllBufferRanges exception: ' + e.message);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    function hasDiscontinuitiesAfter(time) {\r\n        try {\r\n            const ranges = getAllBufferRanges();\r\n            if (ranges && ranges.length > 1) {\r\n                for (let i = 0, len = ranges.length; i < len; i++) {\r\n                    if (i > 0) {\r\n                        if (time < ranges.start(i) && ranges.start(i) > ranges.end(i - 1) + MAX_ALLOWED_DISCONTINUITY) {\r\n                            return true;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } catch (e) {\r\n            logger.error('hasDiscontinuities exception: ' + e.message);\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function append(chunk) {\r\n        if (!chunk) {\r\n            onAppended({\r\n                chunk: chunk,\r\n                error: new DashJSError(Errors.APPEND_ERROR_CODE, Errors.APPEND_ERROR_MESSAGE)\r\n            });\r\n            return;\r\n        }\r\n        appendQueue.push(chunk);\r\n        if (!isAppendingInProgress) {\r\n            waitForUpdateEnd(appendNextInQueue.bind(this));\r\n        }\r\n    }\r\n\r\n    function updateTimestampOffset(MSETimeOffset) {\r\n        if (buffer.timestampOffset !== MSETimeOffset && !isNaN(MSETimeOffset)) {\r\n            waitForUpdateEnd(() => {\r\n                if (MSETimeOffset < 0) {\r\n                    MSETimeOffset += 0.001;\r\n                }\r\n                buffer.timestampOffset = MSETimeOffset;\r\n            });\r\n        }\r\n    }\r\n\r\n    function updateAppendWindow(sInfo) {\r\n        if (!buffer) {\r\n            return;\r\n        }\r\n        waitForUpdateEnd(() => {\r\n            try {\r\n                let appendWindowEnd = mediaSource.duration;\r\n                let appendWindowStart = 0;\r\n                if (sInfo && !isNaN(sInfo.start) && !isNaN(sInfo.duration) && isFinite(sInfo.duration)) {\r\n                    appendWindowEnd = sInfo.start + sInfo.duration;\r\n                }\r\n                if (sInfo && !isNaN(sInfo.start)) {\r\n                    appendWindowStart = sInfo.start;\r\n                }\r\n                buffer.appendWindowStart = 0;\r\n                buffer.appendWindowEnd = appendWindowEnd;\r\n                buffer.appendWindowStart = appendWindowStart;\r\n                logger.debug(`Updated append window. Set start to ${buffer.appendWindowStart} and end to ${buffer.appendWindowEnd}`);\r\n            } catch (e) {\r\n                logger.warn(`Failed to set append window`);\r\n            }\r\n        });\r\n    }\r\n\r\n    function remove(start, end, forceRemoval) {\r\n        const sourceBufferSink = this;\r\n        // make sure that the given time range is correct. Otherwise we will get InvalidAccessError\r\n        waitForUpdateEnd(function () {\r\n            try {\r\n                if ((start >= 0) && (end > start) && (forceRemoval || mediaSource.readyState !== 'ended')) {\r\n                    buffer.remove(start, end);\r\n                }\r\n                // updating is in progress, we should wait for it to complete before signaling that this operation is done\r\n                waitForUpdateEnd(function () {\r\n                    eventBus.trigger(Events.SOURCEBUFFER_REMOVE_COMPLETED, {\r\n                        buffer: sourceBufferSink,\r\n                        from: start,\r\n                        to: end,\r\n                        unintended: false\r\n                    });\r\n                });\r\n            } catch (err) {\r\n                eventBus.trigger(Events.SOURCEBUFFER_REMOVE_COMPLETED, {\r\n                    buffer: sourceBufferSink,\r\n                    from: start,\r\n                    to: end,\r\n                    unintended: false,\r\n                    error: new DashJSError(err.code, err.message)\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    function appendNextInQueue() {\r\n        const sourceBufferSink = this;\r\n\r\n        if (appendQueue.length > 0) {\r\n            isAppendingInProgress = true;\r\n            const nextChunk = appendQueue[0];\r\n            appendQueue.splice(0, 1);\r\n            let oldRanges = [];\r\n            const afterSuccess = function () {\r\n                // Safari sometimes drops a portion of a buffer after appending. Handle these situations here\r\n                const newRanges = getAllBufferRanges();\r\n                checkBufferGapsAfterAppend(sourceBufferSink, oldRanges, newRanges, nextChunk);\r\n                if (appendQueue.length > 0) {\r\n                    appendNextInQueue.call(this);\r\n                } else {\r\n                    isAppendingInProgress = false;\r\n                    if (onAppended) {\r\n                        onAppended({\r\n                            chunk: nextChunk\r\n                        });\r\n                    }\r\n                }\r\n            };\r\n\r\n            try {\r\n                if (nextChunk.bytes.length === 0) {\r\n                    afterSuccess.call(this);\r\n                } else {\r\n                    oldRanges = getAllBufferRanges();\r\n                    if (buffer.appendBuffer) {\r\n                        buffer.appendBuffer(nextChunk.bytes);\r\n                    } else {\r\n                        buffer.append(nextChunk.bytes, nextChunk);\r\n                    }\r\n                    // updating is in progress, we should wait for it to complete before signaling that this operation is done\r\n                    waitForUpdateEnd(afterSuccess.bind(this));\r\n                }\r\n            } catch (err) {\r\n                logger.fatal('SourceBuffer append failed \"' + err + '\"');\r\n                if (appendQueue.length > 0) {\r\n                    appendNextInQueue();\r\n                } else {\r\n                    isAppendingInProgress = false;\r\n                }\r\n\r\n                if (onAppended) {\r\n                    onAppended({\r\n                        chunk: nextChunk,\r\n                        error: new DashJSError(err.code, err.message)\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function checkBufferGapsAfterAppend(buffer, oldRanges, newRanges, chunk) {\r\n        if (oldRanges && oldRanges.length > 0 && oldRanges.length < newRanges.length &&\r\n            isChunkAlignedWithRange(oldRanges, chunk)) {\r\n            // A split in the range was created while appending\r\n            eventBus.trigger(Events.SOURCEBUFFER_REMOVE_COMPLETED, {\r\n                buffer: buffer,\r\n                from: newRanges.end(newRanges.length - 2),\r\n                to: newRanges.start(newRanges.length - 1),\r\n                unintended: true\r\n            });\r\n        }\r\n    }\r\n\r\n    function isChunkAlignedWithRange(oldRanges, chunk) {\r\n        for (let i = 0; i < oldRanges.length; i++) {\r\n            const start = Math.round(oldRanges.start(i));\r\n            const end = Math.round(oldRanges.end(i));\r\n            if (end === chunk.start || start === chunk.end || (chunk.start >= start && chunk.end <= end)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function abort() {\r\n        try {\r\n            if (mediaSource.readyState === 'open') {\r\n                buffer.abort();\r\n            } else if (buffer.setTextTrack && mediaSource.readyState === 'ended') {\r\n                buffer.abort(); //The cues need to be removed from the TextSourceBuffer via a call to abort()\r\n            }\r\n        } catch (ex) {\r\n            logger.error('SourceBuffer append abort failed: \"' + ex + '\"');\r\n        }\r\n        appendQueue = [];\r\n    }\r\n\r\n    function executeCallback() {\r\n        if (callbacks.length > 0) {\r\n            const cb = callbacks.shift();\r\n            if (buffer.updating) {\r\n                waitForUpdateEnd(cb);\r\n            } else {\r\n                cb();\r\n                // Try to execute next callback if still not updating\r\n                executeCallback();\r\n            }\r\n        }\r\n    }\r\n\r\n    function checkIsUpdateEnded() {\r\n        // if updating is still in progress do nothing and wait for the next check again.\r\n        if (buffer.updating) return;\r\n        // updating is completed, now we can stop checking and resolve the promise\r\n        executeCallback();\r\n    }\r\n\r\n    function updateEndHandler() {\r\n        if (buffer.updating) return;\r\n\r\n        executeCallback();\r\n    }\r\n\r\n    function errHandler() {\r\n        logger.error('SourceBufferSink error');\r\n    }\r\n\r\n    function waitForUpdateEnd(callback) {\r\n        callbacks.push(callback);\r\n\r\n        if (!buffer.updating) {\r\n            executeCallback();\r\n        }\r\n    }\r\n\r\n    instance = {\r\n        getType: getType,\r\n        getAllBufferRanges: getAllBufferRanges,\r\n        getBuffer: getBuffer,\r\n        append: append,\r\n        remove: remove,\r\n        abort: abort,\r\n        reset: reset,\r\n        updateTimestampOffset: updateTimestampOffset,\r\n        hasDiscontinuitiesAfter: hasDiscontinuitiesAfter,\r\n        waitForUpdateEnd: waitForUpdateEnd,\r\n        updateAppendWindow\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\nSourceBufferSink.__dashjs_factory_name = 'SourceBufferSink';\r\nconst factory = FactoryMaker.getClassFactory(SourceBufferSink);\r\nexport default factory;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport Constants from './constants/Constants';\r\nimport DashConstants from '../dash/constants/DashConstants';\r\nimport StreamProcessor from './StreamProcessor';\r\nimport FragmentController from './controllers/FragmentController';\r\nimport ThumbnailController from './thumbnail/ThumbnailController';\r\nimport EventBus from '../core/EventBus';\r\nimport Events from '../core/events/Events';\r\nimport Debug from '../core/Debug';\r\nimport Errors from '../core/errors/Errors';\r\nimport FactoryMaker from '../core/FactoryMaker';\r\nimport DashJSError from './vo/DashJSError';\r\nimport BoxParser from './utils/BoxParser';\r\nimport URLUtils from './utils/URLUtils';\r\n\r\nfunction Stream(config) {\r\n\r\n    config = config || {};\r\n    const context = this.context;\r\n    const eventBus = EventBus(context).getInstance();\r\n    const urlUtils = URLUtils(context).getInstance();\r\n\r\n    const manifestModel = config.manifestModel;\r\n    const mediaPlayerModel = config.mediaPlayerModel;\r\n    const manifestUpdater = config.manifestUpdater;\r\n    const adapter = config.adapter;\r\n    const capabilities = config.capabilities;\r\n    const errHandler = config.errHandler;\r\n    const timelineConverter = config.timelineConverter;\r\n    const dashMetrics = config.dashMetrics;\r\n    const abrController = config.abrController;\r\n    const playbackController = config.playbackController;\r\n    const eventController = config.eventController;\r\n    const mediaController = config.mediaController;\r\n    const textController = config.textController;\r\n    const protectionController = config.protectionController;\r\n    const videoModel = config.videoModel;\r\n    const settings = config.settings;\r\n    let streamInfo = config.streamInfo;\r\n\r\n    let instance,\r\n        logger,\r\n        streamProcessors,\r\n        isStreamInitialized,\r\n        isStreamActivated,\r\n        isMediaInitialized,\r\n        hasVideoTrack,\r\n        hasAudioTrack,\r\n        updateError,\r\n        isUpdating,\r\n        fragmentController,\r\n        thumbnailController,\r\n        preloaded,\r\n        boxParser,\r\n        preloadingScheduled,\r\n        debug,\r\n        isEndedEventSignaled,\r\n        trackChangedEvent;\r\n\r\n    const codecCompatibilityTable = [\r\n        {\r\n            'codec': 'avc1',\r\n            'compatibleCodecs': ['avc3']\r\n        },\r\n        {\r\n            'codec': 'avc3',\r\n            'compatibleCodecs': ['avc1']\r\n        }\r\n    ];\r\n\r\n    function setup() {\r\n        debug = Debug(context).getInstance();\r\n        logger = debug.getLogger(instance);\r\n        resetInitialSettings();\r\n\r\n        boxParser = BoxParser(context).getInstance();\r\n\r\n        fragmentController = FragmentController(context).create({\r\n            streamInfo: streamInfo,\r\n            mediaPlayerModel: mediaPlayerModel,\r\n            dashMetrics: dashMetrics,\r\n            errHandler: errHandler,\r\n            settings: settings,\r\n            boxParser: boxParser,\r\n            dashConstants: DashConstants,\r\n            urlUtils: urlUtils\r\n        });\r\n    }\r\n\r\n    function initialize() {\r\n        registerEvents();\r\n        registerProtectionEvents();\r\n        eventBus.trigger(Events.STREAM_UPDATED, { streamInfo: streamInfo });\r\n    }\r\n\r\n    function registerEvents() {\r\n        eventBus.on(Events.BUFFERING_COMPLETED, onBufferingCompleted, instance);\r\n        eventBus.on(Events.DATA_UPDATE_COMPLETED, onDataUpdateCompleted, instance);\r\n        eventBus.on(Events.INBAND_EVENTS, onInbandEvents, instance);\r\n    }\r\n\r\n    function unRegisterEvents() {\r\n        eventBus.off(Events.DATA_UPDATE_COMPLETED, onDataUpdateCompleted, instance);\r\n        eventBus.off(Events.BUFFERING_COMPLETED, onBufferingCompleted, instance);\r\n        eventBus.off(Events.INBAND_EVENTS, onInbandEvents, instance);\r\n    }\r\n\r\n    function registerProtectionEvents() {\r\n        if (protectionController) {\r\n            eventBus.on(Events.KEY_ERROR, onProtectionError, instance);\r\n            eventBus.on(Events.SERVER_CERTIFICATE_UPDATED, onProtectionError, instance);\r\n            eventBus.on(Events.LICENSE_REQUEST_COMPLETE, onProtectionError, instance);\r\n            eventBus.on(Events.KEY_SYSTEM_SELECTED, onProtectionError, instance);\r\n            eventBus.on(Events.KEY_SESSION_CREATED, onProtectionError, instance);\r\n            eventBus.on(Events.KEY_STATUSES_CHANGED, onProtectionError, instance);\r\n        }\r\n    }\r\n\r\n    function unRegisterProtectionEvents() {\r\n        if (protectionController) {\r\n            eventBus.off(Events.KEY_ERROR, onProtectionError, instance);\r\n            eventBus.off(Events.SERVER_CERTIFICATE_UPDATED, onProtectionError, instance);\r\n            eventBus.off(Events.LICENSE_REQUEST_COMPLETE, onProtectionError, instance);\r\n            eventBus.off(Events.KEY_SYSTEM_SELECTED, onProtectionError, instance);\r\n            eventBus.off(Events.KEY_SESSION_CREATED, onProtectionError, instance);\r\n            eventBus.off(Events.KEY_STATUSES_CHANGED, onProtectionError, instance);\r\n        }\r\n    }\r\n\r\n    function getStreamId() {\r\n        return streamInfo ? streamInfo.id : null;\r\n    }\r\n\r\n    /**\r\n     * Activates Stream by re-initializing some of its components\r\n     * @param {MediaSource} mediaSource\r\n     * @memberof Stream#\r\n     * @param {SourceBuffer} previousBuffers\r\n     */\r\n    function activate(mediaSource, previousBuffers) {\r\n        if (!isStreamActivated) {\r\n            let result;\r\n            eventBus.on(Events.CURRENT_TRACK_CHANGED, onCurrentTrackChanged, instance);\r\n            if (!getPreloaded()) {\r\n                result = initializeMedia(mediaSource, previousBuffers);\r\n            } else {\r\n                initializeAfterPreload();\r\n                result = previousBuffers;\r\n            }\r\n            isStreamActivated = true;\r\n            return result;\r\n        }\r\n        return previousBuffers;\r\n    }\r\n\r\n    /**\r\n     * Partially resets some of the Stream elements\r\n     * @memberof Stream#\r\n     * @param {boolean} keepBuffers\r\n     */\r\n    function deactivate(keepBuffers) {\r\n        let ln = streamProcessors ? streamProcessors.length : 0;\r\n        const errored = false;\r\n        for (let i = 0; i < ln; i++) {\r\n            let fragmentModel = streamProcessors[i].getFragmentModel();\r\n            fragmentModel.removeExecutedRequestsBeforeTime(getStartTime() + getDuration());\r\n            streamProcessors[i].reset(errored, keepBuffers);\r\n        }\r\n        streamProcessors = [];\r\n        isStreamActivated = false;\r\n        isMediaInitialized = false;\r\n        setPreloaded(false);\r\n        eventBus.off(Events.CURRENT_TRACK_CHANGED, onCurrentTrackChanged, instance);\r\n    }\r\n\r\n    function isActive() {\r\n        return isStreamActivated;\r\n    }\r\n\r\n    function setMediaSource(mediaSource) {\r\n        for (let i = 0; i < streamProcessors.length;) {\r\n            if (isMediaSupported(streamProcessors[i].getMediaInfo())) {\r\n                streamProcessors[i].setMediaSource(mediaSource);\r\n                i++;\r\n            } else {\r\n                streamProcessors[i].reset();\r\n                streamProcessors.splice(i, 1);\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < streamProcessors.length; i++) {\r\n            //Adding of new tracks to a stream processor isn't guaranteed by the spec after the METADATA_LOADED state\r\n            //so do this after the buffers are created above.\r\n            streamProcessors[i].dischargePreBuffer();\r\n        }\r\n\r\n        if (streamProcessors.length === 0) {\r\n            const msg = 'No streams to play.';\r\n            errHandler.error(new DashJSError(Errors.MANIFEST_ERROR_ID_NOSTREAMS_CODE, msg + 'nostreams', manifestModel.getValue()));\r\n            logger.fatal(msg);\r\n        }\r\n    }\r\n\r\n    function resetInitialSettings() {\r\n        deactivate();\r\n        isStreamInitialized = false;\r\n        hasVideoTrack = false;\r\n        hasAudioTrack = false;\r\n        updateError = {};\r\n        isUpdating = false;\r\n        preloadingScheduled = false;\r\n        isEndedEventSignaled = false;\r\n    }\r\n\r\n    function reset() {\r\n\r\n        if (playbackController) {\r\n            playbackController.pause();\r\n        }\r\n\r\n        if (fragmentController) {\r\n            fragmentController.reset();\r\n            fragmentController = null;\r\n        }\r\n\r\n        streamInfo = null;\r\n\r\n        resetInitialSettings();\r\n\r\n        unRegisterEvents();\r\n\r\n        unRegisterProtectionEvents();\r\n\r\n        setPreloaded(false);\r\n    }\r\n\r\n    function getDuration() {\r\n        return streamInfo ? streamInfo.duration : NaN;\r\n    }\r\n\r\n    function getIsEndedEventSignaled() {\r\n        return isEndedEventSignaled;\r\n    }\r\n\r\n    function setIsEndedEventSignaled(value) {\r\n        isEndedEventSignaled = value;\r\n    }\r\n\r\n    function getStartTime() {\r\n        return streamInfo ? streamInfo.start : NaN;\r\n    }\r\n\r\n    function getPreloadingScheduled() {\r\n        return preloadingScheduled;\r\n    }\r\n\r\n    function setPreloadingScheduled(value) {\r\n        preloadingScheduled = value;\r\n    }\r\n\r\n    function getLiveStartTime() {\r\n        if (!streamInfo.manifestInfo.isDynamic) return NaN;\r\n        // Get live start time of the video stream (1st in array of streams)\r\n        // or audio if no video stream\r\n        for (let i = 0; i < streamProcessors.length; i++) {\r\n            if (streamProcessors[i].getType() === Constants.AUDIO ||\r\n                streamProcessors[i].getType() === Constants.VIDEO) {\r\n                return streamProcessors[i].getLiveStartTime();\r\n            }\r\n        }\r\n        return NaN;\r\n    }\r\n\r\n    function getId() {\r\n        return streamInfo ? streamInfo.id : null;\r\n    }\r\n\r\n    function getStreamInfo() {\r\n        return streamInfo;\r\n    }\r\n\r\n    function getHasAudioTrack() {\r\n        return hasAudioTrack;\r\n    }\r\n\r\n    function getHasVideoTrack() {\r\n        return hasVideoTrack;\r\n    }\r\n\r\n    function getThumbnailController() {\r\n        return thumbnailController;\r\n    }\r\n\r\n    function checkConfig() {\r\n        if (!videoModel || !abrController || !abrController.hasOwnProperty('getBitrateList') || !adapter || !adapter.hasOwnProperty('getAllMediaInfoForType') || !adapter.hasOwnProperty('getEventsFor')) {\r\n            throw new Error(Constants.MISSING_CONFIG_ERROR);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param {string} type\r\n     * @returns {Array}\r\n     * @memberof Stream#\r\n     */\r\n    function getBitrateListFor(type) {\r\n        checkConfig();\r\n        if (type === Constants.IMAGE) {\r\n            if (!thumbnailController) {\r\n                return [];\r\n            }\r\n            return thumbnailController.getBitrateList();\r\n        }\r\n        const mediaInfo = getMediaInfo(type);\r\n        return abrController.getBitrateList(mediaInfo);\r\n    }\r\n\r\n    function onProtectionError(event) {\r\n        if (event.error) {\r\n            errHandler.error(event.error);\r\n            logger.fatal(event.error.message);\r\n            reset();\r\n        }\r\n    }\r\n\r\n    function isMediaSupported(mediaInfo) {\r\n        const type = mediaInfo ? mediaInfo.type : null;\r\n        let codec,\r\n            msg;\r\n\r\n        if (type === Constants.MUXED) {\r\n            msg = 'Multiplexed representations are intentionally not supported, as they are not compliant with the DASH-AVC/264 guidelines';\r\n            logger.fatal(msg);\r\n            errHandler.error(new DashJSError(Errors.MANIFEST_ERROR_ID_MULTIPLEXED_CODE, msg, manifestModel.getValue()));\r\n            return false;\r\n        }\r\n\r\n        if (type === Constants.TEXT || type === Constants.FRAGMENTED_TEXT || type === Constants.EMBEDDED_TEXT || type === Constants.IMAGE) {\r\n            return true;\r\n        }\r\n        codec = mediaInfo.codec;\r\n        logger.debug(type + ' codec: ' + codec);\r\n\r\n        if (!!mediaInfo.contentProtection && !capabilities.supportsEncryptedMedia()) {\r\n            errHandler.error(new DashJSError(Errors.CAPABILITY_MEDIAKEYS_ERROR_CODE, Errors.CAPABILITY_MEDIAKEYS_ERROR_MESSAGE));\r\n        } else if (!capabilities.supportsCodec(codec)) {\r\n            msg = type + 'Codec (' + codec + ') is not supported.';\r\n            logger.error(msg);\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function onCurrentTrackChanged(e) {\r\n        if (!streamInfo || e.newMediaInfo.streamInfo.id !== streamInfo.id) return;\r\n        let mediaInfo = e.newMediaInfo;\r\n        let manifest = manifestModel.getValue();\r\n\r\n        adapter.setCurrentMediaInfo(streamInfo.id, mediaInfo.type, mediaInfo);\r\n\r\n        let processor = getProcessorForMediaInfo(mediaInfo);\r\n        if (!processor) return;\r\n\r\n        let currentTime = playbackController.getTime();\r\n        logger.info('Stream -  Process track changed at current time ' + currentTime);\r\n\r\n        logger.debug('Stream -  Update stream controller');\r\n        if (manifest.refreshManifestOnSwitchTrack) { // Applies only for MSS streams\r\n            logger.debug('Stream -  Refreshing manifest for switch track');\r\n            trackChangedEvent = e;\r\n            manifestUpdater.refreshManifest();\r\n        } else {\r\n            processor.selectMediaInfo(mediaInfo);\r\n            if (mediaInfo.type !== Constants.FRAGMENTED_TEXT) {\r\n                abrController.updateTopQualityIndex(mediaInfo);\r\n                processor.switchTrackAsked();\r\n                processor.getFragmentModel().abortRequests();\r\n            } else {\r\n                processor.getScheduleController().setSeekTarget(currentTime);\r\n                processor.setBufferingTime(currentTime);\r\n                processor.resetIndexHandler();\r\n            }\r\n        }\r\n    }\r\n\r\n    function createStreamProcessor(mediaInfo, allMediaForType, mediaSource, optionalSettings) {\r\n\r\n        let fragmentModel = fragmentController.getModel(mediaInfo ? mediaInfo.type : null);\r\n\r\n        let streamProcessor = StreamProcessor(context).create({\r\n            streamInfo: streamInfo,\r\n            type: mediaInfo ? mediaInfo.type : null,\r\n            mimeType: mediaInfo ? mediaInfo.mimeType : null,\r\n            timelineConverter: timelineConverter,\r\n            adapter: adapter,\r\n            manifestModel: manifestModel,\r\n            mediaPlayerModel: mediaPlayerModel,\r\n            fragmentModel: fragmentModel,\r\n            dashMetrics: config.dashMetrics,\r\n            baseURLController: config.baseURLController,\r\n            abrController: abrController,\r\n            playbackController: playbackController,\r\n            mediaController: mediaController,\r\n            textController: textController,\r\n            errHandler: errHandler,\r\n            settings: settings,\r\n            boxParser: boxParser\r\n        });\r\n\r\n        streamProcessor.initialize(mediaSource, hasVideoTrack);\r\n        abrController.updateTopQualityIndex(mediaInfo);\r\n\r\n        if (optionalSettings) {\r\n            streamProcessor.setBuffer(optionalSettings.buffer);\r\n            streamProcessor.setBufferingTime(optionalSettings.currentTime);\r\n            streamProcessors[optionalSettings.replaceIdx] = streamProcessor;\r\n        } else {\r\n            streamProcessors.push(streamProcessor);\r\n        }\r\n\r\n        if (optionalSettings && optionalSettings.ignoreMediaInfo) {\r\n            return;\r\n        }\r\n\r\n        if (mediaInfo && (mediaInfo.type === Constants.TEXT || mediaInfo.type === Constants.FRAGMENTED_TEXT)) {\r\n            let idx;\r\n            for (let i = 0; i < allMediaForType.length; i++) {\r\n                if (allMediaForType[i].index === mediaInfo.index) {\r\n                    idx = i;\r\n                }\r\n                streamProcessor.addMediaInfo(allMediaForType[i]); //creates text tracks for all adaptations in one stream processor\r\n            }\r\n            streamProcessor.selectMediaInfo(allMediaForType[idx]); //sets the initial media info\r\n        } else {\r\n            streamProcessor.addMediaInfo(mediaInfo, true);\r\n        }\r\n    }\r\n\r\n    function initializeMediaForType(type, mediaSource) {\r\n        const allMediaForType = adapter.getAllMediaInfoForType(streamInfo, type);\r\n\r\n        let mediaInfo = null;\r\n        let initialMediaInfo;\r\n\r\n        if (!allMediaForType || allMediaForType.length === 0) {\r\n            logger.info('No ' + type + ' data.');\r\n            return;\r\n        }\r\n\r\n        if (type === Constants.VIDEO) {\r\n            hasVideoTrack = true;\r\n        }\r\n\r\n        if (type === Constants.AUDIO) {\r\n            hasAudioTrack = true;\r\n        }\r\n\r\n        for (let i = 0, ln = allMediaForType.length; i < ln; i++) {\r\n            mediaInfo = allMediaForType[i];\r\n\r\n            if (type === Constants.EMBEDDED_TEXT) {\r\n                textController.addEmbeddedTrack(mediaInfo);\r\n            } else {\r\n                if (!isMediaSupported(mediaInfo)) continue;\r\n                mediaController.addTrack(mediaInfo);\r\n            }\r\n        }\r\n\r\n        if (type === Constants.EMBEDDED_TEXT || mediaController.getTracksFor(type, streamInfo).length === 0) {\r\n            return;\r\n        }\r\n\r\n        if (type === Constants.IMAGE) {\r\n            thumbnailController = ThumbnailController(context).create({\r\n                streamInfo: streamInfo,\r\n                adapter: adapter,\r\n                baseURLController: config.baseURLController,\r\n                timelineConverter: config.timelineConverter,\r\n                debug: debug,\r\n                eventBus: eventBus,\r\n                events: Events,\r\n                dashConstants: DashConstants\r\n            });\r\n            return;\r\n        }\r\n\r\n\r\n        mediaController.checkInitialMediaSettingsForType(type, streamInfo);\r\n        initialMediaInfo = mediaController.getCurrentTrackFor(type, streamInfo);\r\n\r\n        eventBus.trigger(Events.STREAM_INITIALIZING, {\r\n            streamInfo: streamInfo,\r\n            mediaInfo: mediaInfo\r\n        });\r\n\r\n        // TODO : How to tell index handler live/duration?\r\n        // TODO : Pass to controller and then pass to each method on handler?\r\n\r\n        createStreamProcessor(initialMediaInfo, allMediaForType, mediaSource);\r\n    }\r\n\r\n    function addInlineEvents() {\r\n        if (eventController) {\r\n            const events = adapter.getEventsFor(streamInfo);\r\n            eventController.addInlineEvents(events);\r\n        }\r\n    }\r\n\r\n    function addInbandEvents(events) {\r\n        if (eventController) {\r\n            eventController.addInbandEvents(events);\r\n        }\r\n    }\r\n\r\n    function initializeMedia(mediaSource, previousBuffers) {\r\n        checkConfig();\r\n        let element = videoModel.getElement();\r\n\r\n        addInlineEvents();\r\n\r\n        isUpdating = true;\r\n\r\n        filterCodecs(Constants.VIDEO);\r\n        filterCodecs(Constants.AUDIO);\r\n\r\n        if (!element || (element && (/^VIDEO$/i).test(element.nodeName))) {\r\n            initializeMediaForType(Constants.VIDEO, mediaSource);\r\n        }\r\n        initializeMediaForType(Constants.AUDIO, mediaSource);\r\n        initializeMediaForType(Constants.TEXT, mediaSource);\r\n        initializeMediaForType(Constants.FRAGMENTED_TEXT, mediaSource);\r\n        initializeMediaForType(Constants.EMBEDDED_TEXT, mediaSource);\r\n        initializeMediaForType(Constants.MUXED, mediaSource);\r\n        initializeMediaForType(Constants.IMAGE, mediaSource);\r\n\r\n        //TODO. Consider initialization of TextSourceBuffer here if embeddedText, but no sideloadedText.\r\n        const buffers = createBuffers(previousBuffers);\r\n\r\n        isMediaInitialized = true;\r\n        isUpdating = false;\r\n\r\n        if (streamProcessors.length === 0) {\r\n            const msg = 'No streams to play.';\r\n            errHandler.error(new DashJSError(Errors.MANIFEST_ERROR_ID_NOSTREAMS_CODE, msg, manifestModel.getValue()));\r\n            logger.fatal(msg);\r\n        } else {\r\n            checkIfInitializationCompleted();\r\n        }\r\n\r\n        return buffers;\r\n    }\r\n\r\n    function initializeAfterPreload() {\r\n        isUpdating = true;\r\n        checkConfig();\r\n        filterCodecs(Constants.VIDEO);\r\n        filterCodecs(Constants.AUDIO);\r\n\r\n        isMediaInitialized = true;\r\n        isUpdating = false;\r\n        if (streamProcessors.length === 0) {\r\n            const msg = 'No streams to play.';\r\n            errHandler.error(new DashJSError(Errors.MANIFEST_ERROR_ID_NOSTREAMS_CODE, msg, manifestModel.getValue()));\r\n            logger.debug(msg);\r\n        } else {\r\n            checkIfInitializationCompleted();\r\n        }\r\n    }\r\n\r\n    function filterCodecs(type) {\r\n        const realAdaptation = adapter.getAdaptationForType(streamInfo ? streamInfo.index : null, type, streamInfo);\r\n\r\n        if (!realAdaptation || !Array.isArray(realAdaptation.Representation_asArray)) return;\r\n\r\n        // Filter codecs that are not supported\r\n        realAdaptation.Representation_asArray = realAdaptation.Representation_asArray.filter((_, i) => {\r\n            // keep at least codec from lowest representation\r\n            if (i === 0) return true;\r\n\r\n            const codec = adapter.getCodec(realAdaptation, i, true);\r\n            if (!capabilities.supportsCodec(codec)) {\r\n                logger.error('[Stream] codec not supported: ' + codec);\r\n                return false;\r\n            }\r\n            return true;\r\n        });\r\n    }\r\n\r\n    function checkIfInitializationCompleted() {\r\n        const ln = streamProcessors.length;\r\n        const hasError = !!updateError.audio || !!updateError.video;\r\n        let error = hasError ? new DashJSError(Errors.DATA_UPDATE_FAILED_ERROR_CODE, Errors.DATA_UPDATE_FAILED_ERROR_MESSAGE) : null;\r\n\r\n        for (let i = 0; i < ln; i++) {\r\n            if (streamProcessors[i].isUpdating() || isUpdating) {\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (!isMediaInitialized) {\r\n            return;\r\n        }\r\n\r\n        if (protectionController) {\r\n            // Need to check if streamProcessors exists because streamProcessors\r\n            // could be cleared in case an error is detected while initializing DRM keysystem\r\n            for (let i = 0; i < ln && streamProcessors[i]; i++) {\r\n                if (streamProcessors[i].getType() === Constants.AUDIO ||\r\n                    streamProcessors[i].getType() === Constants.VIDEO ||\r\n                    streamProcessors[i].getType() === Constants.FRAGMENTED_TEXT) {\r\n                    let mediaInfo = streamProcessors[i].getMediaInfo();\r\n                    if (mediaInfo) {\r\n                        protectionController.initializeForMedia(mediaInfo);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (error) {\r\n            errHandler.error(error);\r\n        } else if (!isStreamInitialized) {\r\n            isStreamInitialized = true;\r\n            timelineConverter.setTimeSyncCompleted(true);\r\n\r\n            eventBus.trigger(Events.STREAM_INITIALIZED, {\r\n                streamInfo: streamInfo,\r\n                liveStartTime: !preloaded ? getLiveStartTime() : NaN\r\n            });\r\n        }\r\n\r\n        // (Re)start ScheduleController:\r\n        // - in case stream initialization has been completed after 'play' event (case for SegmentBase streams)\r\n        // - in case stream is complete but a track switch has been requested\r\n        for (let i = 0; i < ln && streamProcessors[i]; i++) {\r\n            streamProcessors[i].getScheduleController().start();\r\n        }\r\n    }\r\n\r\n    function getMediaInfo(type) {\r\n        let streamProcessor = null;\r\n\r\n        for (let i = 0; i < streamProcessors.length; i++) {\r\n            streamProcessor = streamProcessors[i];\r\n\r\n            if (streamProcessor.getType() === type) {\r\n                return streamProcessor.getMediaInfo();\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    function createBuffers(previousBuffers) {\r\n        const buffers = {};\r\n        for (let i = 0, ln = streamProcessors.length; i < ln; i++) {\r\n            const buffer = streamProcessors[i].createBuffer(previousBuffers);\r\n            if (buffer) {\r\n                buffers[streamProcessors[i].getType()] = buffer.getBuffer();\r\n            }\r\n        }\r\n        return buffers;\r\n    }\r\n\r\n    function onBufferingCompleted() {\r\n        let processors = getProcessors();\r\n        const ln = processors.length;\r\n\r\n        if (ln === 0) {\r\n            logger.warn('onBufferingCompleted - can\\'t trigger STREAM_BUFFERING_COMPLETED because no streamProcessor is defined');\r\n            return;\r\n        }\r\n\r\n        // if there is at least one buffer controller that has not completed buffering yet do nothing\r\n        for (let i = 0; i < ln; i++) {\r\n            //if audio or video buffer is not buffering completed state, do not send STREAM_BUFFERING_COMPLETED\r\n            if (!processors[i].isBufferingCompleted() && (processors[i].getType() === Constants.AUDIO || processors[i].getType() === Constants.VIDEO)) {\r\n                logger.warn('onBufferingCompleted - One streamProcessor has finished but', processors[i].getType(), 'one is not buffering completed');\r\n                return;\r\n            }\r\n        }\r\n\r\n        logger.debug('onBufferingCompleted - trigger STREAM_BUFFERING_COMPLETED');\r\n        eventBus.trigger(Events.STREAM_BUFFERING_COMPLETED, { streamInfo: streamInfo });\r\n    }\r\n\r\n    function onDataUpdateCompleted(e) {\r\n        updateError[e.mediaType] = e.error;\r\n        checkIfInitializationCompleted();\r\n    }\r\n\r\n    function onInbandEvents(e) {\r\n        addInbandEvents(e.events);\r\n    }\r\n\r\n    function getProcessorForMediaInfo(mediaInfo) {\r\n        if (!mediaInfo) {\r\n            return null;\r\n        }\r\n\r\n        let processors = getProcessors();\r\n\r\n        return processors.filter(function (processor) {\r\n            return (processor.getType() === mediaInfo.type);\r\n        })[0];\r\n    }\r\n\r\n    function getProcessors() {\r\n        let arr = [];\r\n\r\n        let type,\r\n            streamProcessor;\r\n\r\n        for (let i = 0; i < streamProcessors.length; i++) {\r\n            streamProcessor = streamProcessors[i];\r\n            type = streamProcessor.getType();\r\n\r\n            if (type === Constants.AUDIO || type === Constants.VIDEO || type === Constants.FRAGMENTED_TEXT || type === Constants.TEXT) {\r\n                arr.push(streamProcessor);\r\n            }\r\n        }\r\n\r\n        return arr;\r\n    }\r\n\r\n    function updateData(updatedStreamInfo) {\r\n        logger.info('Manifest updated... updating data system wide.');\r\n\r\n        isStreamActivated = false;\r\n        isUpdating = true;\r\n        streamInfo = updatedStreamInfo;\r\n\r\n        eventBus.trigger(Events.STREAM_UPDATED, { streamInfo: streamInfo });\r\n\r\n        if (eventController) {\r\n            addInlineEvents();\r\n        }\r\n\r\n        filterCodecs(Constants.VIDEO);\r\n        filterCodecs(Constants.AUDIO);\r\n\r\n        for (let i = 0, ln = streamProcessors.length; i < ln; i++) {\r\n            let streamProcessor = streamProcessors[i];\r\n            streamProcessor.updateStreamInfo(streamInfo);\r\n            let mediaInfo = adapter.getMediaInfoForType(streamInfo, streamProcessor.getType());\r\n            // Check if AdaptationSet has not been removed in MPD update\r\n            if (mediaInfo) {\r\n                abrController.updateTopQualityIndex(mediaInfo);\r\n                streamProcessor.addMediaInfo(mediaInfo, true);\r\n            }\r\n        }\r\n\r\n        if (trackChangedEvent) {\r\n            let mediaInfo = trackChangedEvent.newMediaInfo;\r\n            if (mediaInfo.type !== Constants.FRAGMENTED_TEXT) {\r\n                let processor = getProcessorForMediaInfo(trackChangedEvent.oldMediaInfo);\r\n                if (!processor) return;\r\n                processor.switchTrackAsked();\r\n                trackChangedEvent = undefined;\r\n            }\r\n        }\r\n\r\n        isUpdating = false;\r\n        checkIfInitializationCompleted();\r\n    }\r\n\r\n    function isMediaCodecCompatible(newStream, previousStream = null) {\r\n        return compareCodecs(newStream, Constants.VIDEO, previousStream) && compareCodecs(newStream, Constants.AUDIO, previousStream);\r\n    }\r\n\r\n    function isProtectionCompatible(stream, previousStream = null) {\r\n        return compareProtectionConfig(stream, Constants.VIDEO, previousStream) && compareProtectionConfig(stream, Constants.AUDIO, previousStream);\r\n    }\r\n\r\n    function compareProtectionConfig(stream, type, previousStream = null) {\r\n        if (!stream) {\r\n            return false;\r\n        }\r\n        const newStreamInfo = stream.getStreamInfo();\r\n        const currentStreamInfo = previousStream ? previousStream.getStreamInfo() : getStreamInfo();\r\n\r\n        if (!newStreamInfo || !currentStreamInfo) {\r\n            return false;\r\n        }\r\n\r\n        const newAdaptation = adapter.getAdaptationForType(newStreamInfo.index, type, newStreamInfo);\r\n        const currentAdaptation = adapter.getAdaptationForType(currentStreamInfo.index, type, currentStreamInfo);\r\n\r\n        if (!newAdaptation || !currentAdaptation) {\r\n            // If there is no adaptation for neither the old or the new stream they're compatible\r\n            return !newAdaptation && !currentAdaptation;\r\n        }\r\n\r\n        // If the current period is unencrypted and the upcoming one is encrypted we need to reset sourcebuffers.\r\n        return !(!isAdaptationDrmProtected(currentAdaptation) && isAdaptationDrmProtected(newAdaptation));\r\n    }\r\n\r\n    function isAdaptationDrmProtected(adaptation) {\r\n\r\n        if (!adaptation) {\r\n            // If there is no adaptation for neither the old or the new stream they're compatible\r\n            return false;\r\n        }\r\n\r\n        // If the current period is unencrypted and the upcoming one is encrypted we need to reset sourcebuffers.\r\n        return !!(adaptation.ContentProtection || (adaptation.Representation && adaptation.Representation.length > 0 && adaptation.Representation[0].ContentProtection));\r\n    }\r\n\r\n    function compareCodecs(newStream, type, previousStream = null) {\r\n        if (!newStream || !newStream.hasOwnProperty('getStreamInfo')) {\r\n            return false;\r\n        }\r\n        const newStreamInfo = newStream.getStreamInfo();\r\n        const currentStreamInfo = previousStream ? previousStream.getStreamInfo() : getStreamInfo();\r\n\r\n        if (!newStreamInfo || !currentStreamInfo) {\r\n            return false;\r\n        }\r\n\r\n        const newAdaptation = adapter.getAdaptationForType(newStreamInfo.index, type, newStreamInfo);\r\n        const currentAdaptation = adapter.getAdaptationForType(currentStreamInfo.index, type, currentStreamInfo);\r\n\r\n        if (!newAdaptation || !currentAdaptation) {\r\n            // If there is no adaptation for neither the old or the new stream they're compatible\r\n            return !newAdaptation && !currentAdaptation;\r\n        }\r\n\r\n        const sameMimeType = newAdaptation && currentAdaptation && newAdaptation.mimeType === currentAdaptation.mimeType;\r\n        const oldCodecs = currentAdaptation.Representation_asArray.map((representation) => {\r\n            return representation.codecs;\r\n        });\r\n\r\n        const newCodecs = newAdaptation.Representation_asArray.map((representation) => {\r\n            return representation.codecs;\r\n        });\r\n\r\n        const codecMatch = newCodecs.some((newCodec) => {\r\n            return oldCodecs.indexOf(newCodec) > -1;\r\n        });\r\n\r\n        const partialCodecMatch = newCodecs.some((newCodec) => oldCodecs.some((oldCodec) => codecRootCompatibleWithCodec(oldCodec, newCodec)));\r\n        return codecMatch || (partialCodecMatch && sameMimeType);\r\n    }\r\n\r\n    // Check if the root of the old codec is the same as the new one, or if it's declared as compatible in the compat table\r\n    function codecRootCompatibleWithCodec(codec1, codec2) {\r\n        const codecRoot = codec1.split('.')[0];\r\n        const rootCompatible = codec2.indexOf(codecRoot) === 0;\r\n        let compatTableCodec;\r\n        for (let i = 0; i < codecCompatibilityTable.length; i++) {\r\n            if (codecCompatibilityTable[i].codec === codecRoot) {\r\n                compatTableCodec = codecCompatibilityTable[i];\r\n                break;\r\n            }\r\n        }\r\n        if (compatTableCodec) {\r\n            return rootCompatible || compatTableCodec.compatibleCodecs.some((compatibleCodec) => codec2.indexOf(compatibleCodec) === 0);\r\n        }\r\n        return rootCompatible;\r\n    }\r\n\r\n    function setPreloaded(value) {\r\n        preloaded = value;\r\n    }\r\n\r\n    function getPreloaded() {\r\n        return preloaded;\r\n    }\r\n\r\n    function preload(mediaSource, previousBuffers) {\r\n        if (!getPreloaded()) {\r\n            addInlineEvents();\r\n\r\n            initializeMediaForType(Constants.VIDEO, mediaSource);\r\n            initializeMediaForType(Constants.AUDIO, mediaSource);\r\n            initializeMediaForType(Constants.TEXT, mediaSource);\r\n            initializeMediaForType(Constants.FRAGMENTED_TEXT, mediaSource);\r\n            initializeMediaForType(Constants.EMBEDDED_TEXT, mediaSource);\r\n            initializeMediaForType(Constants.MUXED, mediaSource);\r\n            initializeMediaForType(Constants.IMAGE, mediaSource);\r\n\r\n            createBuffers(previousBuffers);\r\n\r\n            eventBus.on(Events.CURRENT_TRACK_CHANGED, onCurrentTrackChanged, instance);\r\n            for (let i = 0; i < streamProcessors.length && streamProcessors[i]; i++) {\r\n                streamProcessors[i].getScheduleController().start();\r\n            }\r\n\r\n            setPreloaded(true);\r\n        }\r\n    }\r\n\r\n\r\n    instance = {\r\n        initialize: initialize,\r\n        getStreamId: getStreamId,\r\n        activate: activate,\r\n        deactivate: deactivate,\r\n        isActive: isActive,\r\n        getDuration: getDuration,\r\n        getStartTime: getStartTime,\r\n        getId: getId,\r\n        getStreamInfo: getStreamInfo,\r\n        getHasAudioTrack: getHasAudioTrack,\r\n        getHasVideoTrack: getHasVideoTrack,\r\n        preload: preload,\r\n        getThumbnailController: getThumbnailController,\r\n        getBitrateListFor: getBitrateListFor,\r\n        updateData: updateData,\r\n        reset: reset,\r\n        getProcessors: getProcessors,\r\n        setMediaSource: setMediaSource,\r\n        isMediaCodecCompatible: isMediaCodecCompatible,\r\n        isProtectionCompatible: isProtectionCompatible,\r\n        getPreloaded: getPreloaded,\r\n        getPreloadingScheduled,\r\n        setPreloadingScheduled,\r\n        getIsEndedEventSignaled,\r\n        setIsEndedEventSignaled\r\n    };\r\n\r\n    setup();\r\n    return instance;\r\n}\r\n\r\nStream.__dashjs_factory_name = 'Stream';\r\nexport default FactoryMaker.getClassFactory(Stream);\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport Constants from './constants/Constants';\r\nimport DashConstants from '../dash/constants/DashConstants';\r\nimport MetricsConstants from './constants/MetricsConstants';\r\nimport FragmentModel from './models/FragmentModel';\r\nimport BufferController from './controllers/BufferController';\r\nimport TextBufferController from './text/TextBufferController';\r\nimport ScheduleController from './controllers/ScheduleController';\r\nimport RepresentationController from '../dash/controllers/RepresentationController';\r\nimport LiveEdgeFinder from './utils/LiveEdgeFinder';\r\nimport FactoryMaker from '../core/FactoryMaker';\r\nimport {checkInteger} from './utils/SupervisorTools';\r\nimport EventBus from '../core/EventBus';\r\nimport Events from '../core/events/Events';\r\nimport DashHandler from '../dash/DashHandler';\r\nimport Errors from '../core/errors/Errors';\r\nimport DashJSError from './vo/DashJSError';\r\nimport Debug from '../core/Debug';\r\nimport RequestModifier from './utils/RequestModifier';\r\nimport URLUtils from '../streaming/utils/URLUtils';\r\nimport BoxParser from './utils/BoxParser';\r\nimport FragmentRequest from './vo/FragmentRequest';\r\nimport {PlayListTrace} from './vo/metrics/PlayList';\r\n\r\nfunction StreamProcessor(config) {\r\n\r\n    config = config || {};\r\n    let context = this.context;\r\n    let eventBus = EventBus(context).getInstance();\r\n\r\n    let streamInfo = config.streamInfo;\r\n    let type = config.type;\r\n    let errHandler = config.errHandler;\r\n    let mimeType = config.mimeType;\r\n    let timelineConverter = config.timelineConverter;\r\n    let adapter = config.adapter;\r\n    let manifestModel = config.manifestModel;\r\n    let mediaPlayerModel = config.mediaPlayerModel;\r\n    let fragmentModel = config.fragmentModel;\r\n    let abrController = config.abrController;\r\n    let playbackController = config.playbackController;\r\n    let mediaController = config.mediaController;\r\n    let textController = config.textController;\r\n    let dashMetrics = config.dashMetrics;\r\n    let settings = config.settings;\r\n    let boxParser = config.boxParser;\r\n\r\n    let instance,\r\n        logger,\r\n        isDynamic,\r\n        mediaInfo,\r\n        mediaInfoArr,\r\n        bufferController,\r\n        scheduleController,\r\n        representationController,\r\n        liveEdgeFinder,\r\n        indexHandler,\r\n        bufferingTime,\r\n        bufferPruned;\r\n\r\n    function setup() {\r\n        logger = Debug(context).getInstance().getLogger(instance);\r\n        resetInitialSettings();\r\n\r\n        eventBus.on(Events.DATA_UPDATE_COMPLETED, onDataUpdateCompleted, instance, { priority: EventBus.EVENT_PRIORITY_HIGH }); // High priority to be notified before Stream\r\n        eventBus.on(Events.QUALITY_CHANGE_REQUESTED, onQualityChanged, instance);\r\n        eventBus.on(Events.INIT_FRAGMENT_NEEDED, onInitFragmentNeeded, instance);\r\n        eventBus.on(Events.MEDIA_FRAGMENT_NEEDED, onMediaFragmentNeeded, instance);\r\n        eventBus.on(Events.MEDIA_FRAGMENT_LOADED, onMediaFragmentLoaded, instance);\r\n        eventBus.on(Events.BUFFER_LEVEL_UPDATED, onBufferLevelUpdated, instance);\r\n        eventBus.on(Events.BUFFER_LEVEL_STATE_CHANGED, onBufferLevelStateChanged, instance);\r\n        eventBus.on(Events.BUFFER_CLEARED, onBufferCleared, instance);\r\n        eventBus.on(Events.SEEK_TARGET, onSeekTarget, instance);\r\n    }\r\n\r\n    function initialize(mediaSource, hasVideoTrack) {\r\n        indexHandler = DashHandler(context).create({\r\n            streamInfo: streamInfo,\r\n            type: type,\r\n            timelineConverter: timelineConverter,\r\n            dashMetrics: dashMetrics,\r\n            mediaPlayerModel: mediaPlayerModel,\r\n            baseURLController: config.baseURLController,\r\n            errHandler: errHandler,\r\n            settings: settings,\r\n            boxParser: boxParser,\r\n            events: Events,\r\n            eventBus: eventBus,\r\n            errors: Errors,\r\n            debug: Debug(context).getInstance(),\r\n            requestModifier: RequestModifier(context).getInstance(),\r\n            dashConstants: DashConstants,\r\n            constants: Constants,\r\n            urlUtils: URLUtils(context).getInstance()\r\n        });\r\n\r\n        // Create live edge finder for dynamic streams\r\n        isDynamic = streamInfo.manifestInfo.isDynamic;\r\n        if (isDynamic) {\r\n            liveEdgeFinder = LiveEdgeFinder(context).create({\r\n                timelineConverter: timelineConverter\r\n            });\r\n        }\r\n\r\n        // Create/initialize controllers\r\n        indexHandler.initialize(isDynamic);\r\n        abrController.registerStreamType(type, instance);\r\n\r\n        representationController = RepresentationController(context).create({\r\n            streamInfo: streamInfo,\r\n            type: type,\r\n            abrController: abrController,\r\n            dashMetrics: dashMetrics,\r\n            playbackController: playbackController,\r\n            timelineConverter: timelineConverter,\r\n            dashConstants: DashConstants,\r\n            events: Events,\r\n            eventBus: eventBus,\r\n            errors: Errors\r\n        });\r\n\r\n        bufferController = createBufferControllerForType(type);\r\n        if (bufferController) {\r\n            bufferController.initialize(mediaSource);\r\n        }\r\n\r\n        scheduleController = ScheduleController(context).create({\r\n            streamInfo: streamInfo,\r\n            type: type,\r\n            mimeType: mimeType,\r\n            adapter: adapter,\r\n            dashMetrics: dashMetrics,\r\n            mediaPlayerModel: mediaPlayerModel,\r\n            fragmentModel: fragmentModel,\r\n            abrController: abrController,\r\n            playbackController: playbackController,\r\n            textController: textController,\r\n            mediaController: mediaController,\r\n            bufferController: bufferController,\r\n            settings: settings\r\n        });\r\n\r\n        scheduleController.initialize(hasVideoTrack);\r\n\r\n        bufferingTime = 0;\r\n        bufferPruned = false;\r\n    }\r\n\r\n    function getStreamId() {\r\n        return streamInfo.id;\r\n    }\r\n\r\n    function getType() {\r\n        return type;\r\n    }\r\n\r\n    function resetInitialSettings() {\r\n        mediaInfoArr = [];\r\n        mediaInfo = null;\r\n        bufferingTime = 0;\r\n    }\r\n\r\n    function reset(errored, keepBuffers) {\r\n        if (indexHandler) {\r\n            indexHandler.reset();\r\n        }\r\n\r\n        if (bufferController) {\r\n            bufferController.reset(errored, keepBuffers);\r\n            bufferController = null;\r\n        }\r\n\r\n        if (scheduleController) {\r\n            scheduleController.reset();\r\n            scheduleController = null;\r\n        }\r\n\r\n        if (representationController) {\r\n            representationController.reset();\r\n            representationController = null;\r\n        }\r\n\r\n        if (liveEdgeFinder) {\r\n            liveEdgeFinder.reset();\r\n            liveEdgeFinder = null;\r\n        }\r\n\r\n        if (abrController) {\r\n            abrController.unRegisterStreamType(type);\r\n        }\r\n\r\n        eventBus.off(Events.DATA_UPDATE_COMPLETED, onDataUpdateCompleted, instance);\r\n        eventBus.off(Events.QUALITY_CHANGE_REQUESTED, onQualityChanged, instance);\r\n        eventBus.off(Events.INIT_FRAGMENT_NEEDED, onInitFragmentNeeded, instance);\r\n        eventBus.off(Events.MEDIA_FRAGMENT_NEEDED, onMediaFragmentNeeded, instance);\r\n        eventBus.off(Events.MEDIA_FRAGMENT_LOADED, onMediaFragmentLoaded, instance);\r\n        eventBus.off(Events.BUFFER_LEVEL_UPDATED, onBufferLevelUpdated, instance);\r\n        eventBus.off(Events.BUFFER_LEVEL_STATE_CHANGED, onBufferLevelStateChanged, instance);\r\n        eventBus.off(Events.BUFFER_CLEARED, onBufferCleared, instance);\r\n        eventBus.off(Events.SEEK_TARGET, onSeekTarget, instance);\r\n\r\n        resetInitialSettings();\r\n        type = null;\r\n        streamInfo = null;\r\n    }\r\n\r\n    function isUpdating() {\r\n        return representationController ? representationController.isUpdating() : false;\r\n    }\r\n\r\n\r\n    function onDataUpdateCompleted(e) {\r\n        if (!e.error) {\r\n            // Update representation if no error\r\n            scheduleController.setCurrentRepresentation(adapter.convertDataToRepresentationInfo(e.currentRepresentation));\r\n        }\r\n        if (!e.error || e.error.code === Errors.SEGMENTS_UPDATE_FAILED_ERROR_CODE) {\r\n            // Update has been postponed, update nevertheless DVR info\r\n            const activeStreamId = playbackController.getStreamController().getActiveStreamInfo().id;\r\n            if (activeStreamId === streamInfo.id) {\r\n                addDVRMetric();\r\n            }\r\n        }\r\n    }\r\n\r\n    function onQualityChanged(e) {\r\n        let representationInfo = getRepresentationInfo(e.newQuality);\r\n        scheduleController.setCurrentRepresentation(representationInfo);\r\n        dashMetrics.pushPlayListTraceMetrics(new Date(), PlayListTrace.REPRESENTATION_SWITCH_STOP_REASON);\r\n        dashMetrics.createPlaylistTraceMetrics(representationInfo.id, playbackController.getTime() * 1000, playbackController.getPlaybackRate());\r\n    }\r\n\r\n    function onBufferLevelUpdated(e) {\r\n        dashMetrics.addBufferLevel(type, new Date(), e.bufferLevel * 1000);\r\n        const activeStreamId = playbackController.getStreamController().getActiveStreamInfo().id;\r\n        if (!manifestModel.getValue().doNotUpdateDVRWindowOnBufferUpdated && streamInfo.id === activeStreamId) {\r\n            addDVRMetric();\r\n        }\r\n    }\r\n\r\n    function onBufferLevelStateChanged(e) {\r\n        dashMetrics.addBufferState(type, e.state, scheduleController.getBufferTarget());\r\n        if (e.state === MetricsConstants.BUFFER_EMPTY && !playbackController.isSeeking()) {\r\n            // logger.info('Buffer is empty! Stalling!');\r\n            dashMetrics.pushPlayListTraceMetrics(new Date(), PlayListTrace.REBUFFERING_REASON);\r\n        }\r\n    }\r\n\r\n    function onBufferCleared(e) {\r\n        // Remove executed requests not buffered anymore\r\n        fragmentModel.syncExecutedRequestsWithBufferedRange(\r\n            bufferController.getBuffer().getAllBufferRanges(),\r\n            streamInfo.duration);\r\n\r\n        // If buffer removed ahead current time (QuotaExceededError or automatic buffer pruning) then adjust current index handler time\r\n        if (e.from > playbackController.getTime()) {\r\n            bufferingTime = e.from;\r\n            bufferPruned = true;\r\n        }\r\n    }\r\n\r\n    function addDVRMetric() {\r\n        const manifestInfo = streamInfo.manifestInfo;\r\n        const isDynamic = manifestInfo.isDynamic;\r\n        const range = timelineConverter.calcSegmentAvailabilityRange(representationController.getCurrentRepresentation(), isDynamic);\r\n        dashMetrics.addDVRInfo(getType(), playbackController.getTime(), manifestInfo, range);\r\n    }\r\n\r\n    function getRepresentationController() {\r\n        return representationController;\r\n    }\r\n\r\n    function getBuffer() {\r\n        return bufferController ? bufferController.getBuffer() : null;\r\n    }\r\n\r\n    function setBuffer(buffer) {\r\n        bufferController.setBuffer(buffer);\r\n    }\r\n\r\n    function getBufferController() {\r\n        return bufferController;\r\n    }\r\n\r\n    function getFragmentModel() {\r\n        return fragmentModel;\r\n    }\r\n\r\n    function updateStreamInfo(newStreamInfo) {\r\n        streamInfo = newStreamInfo;\r\n        if (settings.get().streaming.useAppendWindow) {\r\n            bufferController.updateAppendWindow();\r\n        }\r\n    }\r\n\r\n    function getStreamInfo() {\r\n        return streamInfo;\r\n    }\r\n\r\n    function selectMediaInfo(newMediaInfo) {\r\n        if (newMediaInfo !== mediaInfo && (!newMediaInfo || !mediaInfo || (newMediaInfo.type === mediaInfo.type))) {\r\n            mediaInfo = newMediaInfo;\r\n        }\r\n\r\n        const newRealAdaptation = adapter.getRealAdaptation(streamInfo, mediaInfo);\r\n        const voRepresentations = adapter.getVoRepresentations(mediaInfo);\r\n\r\n        if (representationController) {\r\n            const realAdaptation = representationController.getData();\r\n            const maxQuality = abrController.getTopQualityIndexFor(type, streamInfo.id);\r\n            const minIdx = abrController.getMinAllowedIndexFor(type);\r\n\r\n            let quality,\r\n                averageThroughput;\r\n            let bitrate = null;\r\n\r\n            if ((realAdaptation === null || (realAdaptation.id != newRealAdaptation.id)) && type !== Constants.FRAGMENTED_TEXT) {\r\n                averageThroughput = abrController.getThroughputHistory().getAverageThroughput(type);\r\n                bitrate = averageThroughput || abrController.getInitialBitrateFor(type);\r\n                quality = abrController.getQualityForBitrate(mediaInfo, bitrate);\r\n            } else {\r\n                quality = abrController.getQualityFor(type);\r\n            }\r\n\r\n            if (minIdx !== undefined && quality < minIdx) {\r\n                quality = minIdx;\r\n            }\r\n            if (quality > maxQuality) {\r\n                quality = maxQuality;\r\n            }\r\n            indexHandler.setMimeType(mediaInfo ? mediaInfo.mimeType : null);\r\n            representationController.updateData(newRealAdaptation, voRepresentations, type, quality);\r\n        }\r\n    }\r\n\r\n    function addMediaInfo(newMediaInfo, selectNewMediaInfo) {\r\n        if (mediaInfoArr.indexOf(newMediaInfo) === -1) {\r\n            mediaInfoArr.push(newMediaInfo);\r\n        }\r\n\r\n        if (selectNewMediaInfo) {\r\n            this.selectMediaInfo(newMediaInfo);\r\n        }\r\n    }\r\n\r\n    function getMediaInfoArr() {\r\n        return mediaInfoArr;\r\n    }\r\n\r\n    function getMediaInfo() {\r\n        return mediaInfo;\r\n    }\r\n\r\n    function getMediaSource() {\r\n        return bufferController.getMediaSource();\r\n    }\r\n\r\n    function setMediaSource(mediaSource) {\r\n        bufferController.setMediaSource(mediaSource, getMediaInfoArr());\r\n    }\r\n\r\n    function dischargePreBuffer() {\r\n        bufferController.dischargePreBuffer();\r\n    }\r\n\r\n    function getScheduleController() {\r\n        return scheduleController;\r\n    }\r\n\r\n    /**\r\n     * Get a specific voRepresentation. If quality parameter is defined, this function will return the voRepresentation for this quality.\r\n     * Otherwise, this function will return the current voRepresentation used by the representationController.\r\n     * @param {number} quality - quality index of the voRepresentaion expected.\r\n     */\r\n    function getRepresentationInfo(quality) {\r\n        let voRepresentation;\r\n\r\n        if (quality !== undefined) {\r\n            checkInteger(quality);\r\n            voRepresentation = representationController ? representationController.getRepresentationForQuality(quality) : null;\r\n        } else {\r\n            voRepresentation = representationController ? representationController.getCurrentRepresentation() : null;\r\n        }\r\n\r\n        return adapter.convertDataToRepresentationInfo(voRepresentation);\r\n    }\r\n\r\n    function isBufferingCompleted() {\r\n        return bufferController ? bufferController.getIsBufferingCompleted() : false;\r\n    }\r\n\r\n    function getBufferLevel() {\r\n        return bufferController ? bufferController.getBufferLevel() : 0;\r\n    }\r\n\r\n    function onInitFragmentNeeded(e) {\r\n        // Event propagation may have been stopped (see MssHandler)\r\n        if (!e.sender) return;\r\n\r\n        if (adapter.getIsTextTrack(mimeType) && !textController.isTextEnabled()) return;\r\n\r\n        if (bufferController && e.representationId) {\r\n            if (!bufferController.appendInitSegment(e.representationId)) {\r\n                // Init segment not in cache, send new request\r\n                const request = indexHandler ? indexHandler.getInitRequest(getMediaInfo(), representationController.getCurrentRepresentation()) : null;\r\n                scheduleController.processInitRequest(request);\r\n            }\r\n        }\r\n    }\r\n\r\n    function onMediaFragmentNeeded(e) {\r\n        let request;\r\n\r\n        // Don't schedule next fragments while pruning to avoid buffer inconsistencies\r\n        if (!bufferController.getIsPruningInProgress()) {\r\n            request = findNextRequest(e.seekTarget, e.replacement);\r\n            if (request) {\r\n                scheduleController.setSeekTarget(NaN);\r\n                if (!e.replacement) {\r\n                    if (!isNaN(request.startTime + request.duration)) {\r\n                        bufferingTime = request.startTime + request.duration;\r\n                    }\r\n                    request.delayLoadingTime = new Date().getTime() + scheduleController.getTimeToLoadDelay();\r\n                    scheduleController.setTimeToLoadDelay(0);\r\n                }\r\n            }\r\n        }\r\n\r\n        scheduleController.processMediaRequest(request);\r\n    }\r\n\r\n    function findNextRequest(seekTarget, requestToReplace) {\r\n        const representationInfo = getRepresentationInfo();\r\n        const hasSeekTarget = !isNaN(seekTarget);\r\n        const currentTime = playbackController.getNormalizedTime();\r\n        let time = hasSeekTarget ? seekTarget : bufferingTime;\r\n        let bufferIsDivided = false;\r\n        let request;\r\n\r\n        if (isNaN(time) || (getType() === Constants.FRAGMENTED_TEXT && !textController.isTextEnabled())) {\r\n            return null;\r\n        }\r\n        /**\r\n         * This is critical for IE/Safari/EDGE\r\n         * */\r\n        if (bufferController) {\r\n            let range = bufferController.getRangeAt(time);\r\n            const playingRange = bufferController.getRangeAt(currentTime);\r\n            if ((range !== null || playingRange !== null) && !hasSeekTarget) {\r\n                if (!range || (playingRange && playingRange.start != range.start && playingRange.end != range.end)) {\r\n                    const hasDiscontinuities = bufferController.getBuffer().hasDiscontinuitiesAfter(currentTime);\r\n                    if (hasDiscontinuities && getType() !== Constants.FRAGMENTED_TEXT) {\r\n                        fragmentModel.removeExecutedRequestsAfterTime(playingRange.end);\r\n                        bufferIsDivided = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (requestToReplace) {\r\n            time = requestToReplace.startTime + (requestToReplace.duration / 2);\r\n            request = getFragmentRequest(representationInfo, time, {\r\n                timeThreshold: 0,\r\n                ignoreIsFinished: true\r\n            });\r\n        } else {\r\n            // Use time just whenever is strictly needed\r\n            const useTime = hasSeekTarget || bufferPruned || bufferIsDivided;\r\n            request = getFragmentRequest(representationInfo,\r\n                useTime ? time : undefined, {\r\n                    keepIdx: !useTime\r\n                });\r\n            bufferPruned = false;\r\n\r\n            // Then, check if this request was downloaded or not\r\n            while (request && request.action !== FragmentRequest.ACTION_COMPLETE && fragmentModel.isFragmentLoaded(request)) {\r\n                // loop until we found not loaded fragment, or no fragment\r\n                request = getFragmentRequest(representationInfo);\r\n            }\r\n        }\r\n\r\n        return request;\r\n    }\r\n\r\n    function onMediaFragmentLoaded(e) {\r\n        const chunk = e.chunk;\r\n\r\n        const bytes = chunk.bytes;\r\n        const quality = chunk.quality;\r\n        const currentRepresentation = getRepresentationInfo(quality);\r\n\r\n        const voRepresentation = representationController && currentRepresentation ? representationController.getRepresentationForQuality(currentRepresentation.quality) : null;\r\n        const eventStreamMedia = adapter.getEventsFor(currentRepresentation.mediaInfo);\r\n        const eventStreamTrack = adapter.getEventsFor(currentRepresentation, voRepresentation);\r\n\r\n        if (eventStreamMedia && eventStreamMedia.length > 0 || eventStreamTrack && eventStreamTrack.length > 0) {\r\n            const request = fragmentModel.getRequests({\r\n                state: FragmentModel.FRAGMENT_MODEL_EXECUTED,\r\n                quality: quality,\r\n                index: chunk.index\r\n            })[0];\r\n\r\n            const events = handleInbandEvents(bytes, request, eventStreamMedia, eventStreamTrack);\r\n            eventBus.trigger(Events.INBAND_EVENTS,\r\n                { events: events },\r\n                { streamId: streamInfo.id }\r\n            );\r\n        }\r\n    }\r\n\r\n    function handleInbandEvents(data, request, mediaInbandEvents, trackInbandEvents) {\r\n        try {\r\n            const eventStreams = {};\r\n            const events = [];\r\n\r\n            /* Extract the possible schemeIdUri : If a DASH client detects an event message box with a scheme that is not defined in MPD, the client is expected to ignore it */\r\n            const inbandEvents = mediaInbandEvents.concat(trackInbandEvents);\r\n            for (let i = 0, ln = inbandEvents.length; i < ln; i++) {\r\n                eventStreams[inbandEvents[i].schemeIdUri + '/' + inbandEvents[i].value] = inbandEvents[i];\r\n            }\r\n\r\n            const isoFile = BoxParser(context).getInstance().parse(data);\r\n            const eventBoxes = isoFile.getBoxes('emsg');\r\n\r\n            if (!eventBoxes || eventBoxes.length === 0) {\r\n                return events;\r\n            }\r\n\r\n            const sidx = isoFile.getBox('sidx');\r\n            const mediaAnchorTime = sidx && !isNaN(sidx.earliest_presentation_time) && !isNaN(sidx.timescale) ? sidx.earliest_presentation_time / sidx.timescale : request && !isNaN(request.mediaStartTime) ? request.mediaStartTime : 0;\r\n            const fragmentMediaStartTime = Math.max(mediaAnchorTime, 0);\r\n            const voRepresentation = representationController.getCurrentRepresentation();\r\n\r\n            for (let i = 0, ln = eventBoxes.length; i < ln; i++) {\r\n                const event = adapter.getEvent(eventBoxes[i], eventStreams, fragmentMediaStartTime, voRepresentation);\r\n\r\n                if (event) {\r\n                    events.push(event);\r\n                }\r\n            }\r\n\r\n            return events;\r\n        } catch (e) {\r\n            return [];\r\n        }\r\n    }\r\n\r\n    function createBuffer(previousBuffers) {\r\n        return (getBuffer() || bufferController ? bufferController.createBuffer(mediaInfoArr, previousBuffers) : null);\r\n    }\r\n\r\n    function switchTrackAsked() {\r\n        scheduleController.switchTrackAsked();\r\n    }\r\n\r\n    function createBufferControllerForType(type) {\r\n        let controller = null;\r\n\r\n        if (!type) {\r\n            errHandler.error(new DashJSError(Errors.MEDIASOURCE_TYPE_UNSUPPORTED_CODE, Errors.MEDIASOURCE_TYPE_UNSUPPORTED_MESSAGE + 'not properly defined'));\r\n            return null;\r\n        }\r\n\r\n        if (type === Constants.VIDEO || type === Constants.AUDIO) {\r\n            controller = BufferController(context).create({\r\n                streamInfo: streamInfo,\r\n                type: type,\r\n                mediaPlayerModel: mediaPlayerModel,\r\n                manifestModel: manifestModel,\r\n                fragmentModel: fragmentModel,\r\n                errHandler: errHandler,\r\n                mediaController: mediaController,\r\n                representationController: representationController,\r\n                adapter: adapter,\r\n                textController: textController,\r\n                abrController: abrController,\r\n                playbackController: playbackController,\r\n                settings: settings\r\n            });\r\n        } else {\r\n            controller = TextBufferController(context).create({\r\n                streamInfo: streamInfo,\r\n                type: type,\r\n                mimeType: mimeType,\r\n                mediaPlayerModel: mediaPlayerModel,\r\n                manifestModel: manifestModel,\r\n                fragmentModel: fragmentModel,\r\n                errHandler: errHandler,\r\n                mediaController: mediaController,\r\n                representationController: representationController,\r\n                adapter: adapter,\r\n                textController: textController,\r\n                abrController: abrController,\r\n                playbackController: playbackController,\r\n                settings: settings\r\n            });\r\n        }\r\n\r\n        return controller;\r\n    }\r\n\r\n\r\n    function getLiveStartTime() {\r\n        if (!isDynamic) return NaN;\r\n        if (!liveEdgeFinder) return NaN;\r\n\r\n        let liveStartTime = NaN;\r\n        const currentRepresentationInfo = getRepresentationInfo();\r\n        const liveEdge = liveEdgeFinder.getLiveEdge(currentRepresentationInfo);\r\n\r\n        if (isNaN(liveEdge)) {\r\n            return NaN;\r\n        }\r\n\r\n        const request = findRequestForLiveEdge(liveEdge, currentRepresentationInfo);\r\n\r\n        if (request) {\r\n            // When low latency mode is selected but browser doesn't support fetch\r\n            // start at the beginning of the segment to avoid consuming the whole buffer\r\n            if (settings.get().streaming.lowLatencyEnabled) {\r\n                liveStartTime = request.duration < mediaPlayerModel.getLiveDelay() ? request.startTime : request.startTime + request.duration - mediaPlayerModel.getLiveDelay();\r\n            } else {\r\n                liveStartTime = request.startTime;\r\n            }\r\n        }\r\n\r\n        return liveStartTime;\r\n    }\r\n\r\n    function findRequestForLiveEdge(liveEdge, currentRepresentationInfo) {\r\n        try {\r\n            let request = null;\r\n            let liveDelay = playbackController.getLiveDelay();\r\n            const dvrWindowSize = !isNaN(streamInfo.manifestInfo.DVRWindowSize) ? streamInfo.manifestInfo.DVRWindowSize : liveDelay;\r\n            const dvrWindowSafetyMargin = 0.1 * dvrWindowSize;\r\n            let startTime;\r\n\r\n            // Make sure that we have at least a valid request for the end of the DVR window, otherwise we might try forever\r\n            if (!isFinite(dvrWindowSize) || getFragmentRequest(currentRepresentationInfo, liveEdge - dvrWindowSize + dvrWindowSafetyMargin, {\r\n                ignoreIsFinished: true\r\n            })) {\r\n\r\n                // Try to find a request as close as possible to the targeted live edge\r\n                while (!request && liveDelay <= dvrWindowSize) {\r\n                    startTime = liveEdge - liveDelay;\r\n                    request = getFragmentRequest(currentRepresentationInfo, startTime, {\r\n                        ignoreIsFinished: true\r\n                    });\r\n                    if (!request) {\r\n                        liveDelay += 1; // Increase by one second for each iteration\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (request) {\r\n                playbackController.setLiveDelay(liveDelay, true);\r\n            }\r\n            logger.debug('live edge: ' + liveEdge + ', live delay: ' + liveDelay + ', live target: ' + startTime);\r\n            return request;\r\n        } catch (e) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    function onSeekTarget(e) {\r\n        bufferingTime = e.time;\r\n        scheduleController.setSeekTarget(e.time);\r\n    }\r\n\r\n    function setBufferingTime(value) {\r\n        bufferingTime = value;\r\n    }\r\n\r\n    function resetIndexHandler() {\r\n        if (indexHandler) {\r\n            indexHandler.resetIndex();\r\n        }\r\n    }\r\n\r\n    function getInitRequest(quality) {\r\n        checkInteger(quality);\r\n        const representation = representationController ? representationController.getRepresentationForQuality(quality) : null;\r\n        return indexHandler ? indexHandler.getInitRequest(getMediaInfo(), representation) : null;\r\n    }\r\n\r\n    function getFragmentRequest(representationInfo, time, options) {\r\n        let fragRequest = null;\r\n\r\n        if (indexHandler) {\r\n            const representation = representationController && representationInfo ? representationController.getRepresentationForQuality(representationInfo.quality) : null;\r\n\r\n            // if time and options are undefined, it means the next segment is requested\r\n            // otherwise, the segment at this specific time is requested.\r\n            if (time !== undefined && options !== undefined) {\r\n                fragRequest = indexHandler.getSegmentRequestForTime(getMediaInfo(), representation, time, options);\r\n            } else {\r\n                fragRequest = indexHandler.getNextSegmentRequest(getMediaInfo(), representation);\r\n            }\r\n        }\r\n\r\n        return fragRequest;\r\n    }\r\n\r\n    function finalisePlayList(time, reason) {\r\n        dashMetrics.pushPlayListTraceMetrics(time, reason);\r\n    }\r\n\r\n    instance = {\r\n        initialize: initialize,\r\n        getStreamId: getStreamId,\r\n        getType: getType,\r\n        isUpdating: isUpdating,\r\n        getBufferController: getBufferController,\r\n        getFragmentModel: getFragmentModel,\r\n        getScheduleController: getScheduleController,\r\n        getRepresentationController: getRepresentationController,\r\n        getRepresentationInfo: getRepresentationInfo,\r\n        getBufferLevel: getBufferLevel,\r\n        isBufferingCompleted: isBufferingCompleted,\r\n        createBuffer: createBuffer,\r\n        updateStreamInfo: updateStreamInfo,\r\n        getStreamInfo: getStreamInfo,\r\n        selectMediaInfo: selectMediaInfo,\r\n        addMediaInfo: addMediaInfo,\r\n        getLiveStartTime: getLiveStartTime,\r\n        switchTrackAsked: switchTrackAsked,\r\n        getMediaInfoArr: getMediaInfoArr,\r\n        getMediaInfo: getMediaInfo,\r\n        getMediaSource: getMediaSource,\r\n        setMediaSource: setMediaSource,\r\n        dischargePreBuffer: dischargePreBuffer,\r\n        getBuffer: getBuffer,\r\n        setBuffer: setBuffer,\r\n        setBufferingTime: setBufferingTime,\r\n        resetIndexHandler: resetIndexHandler,\r\n        getInitRequest: getInitRequest,\r\n        getFragmentRequest: getFragmentRequest,\r\n        finalisePlayList: finalisePlayList,\r\n        reset: reset\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\nStreamProcessor.__dashjs_factory_name = 'StreamProcessor';\r\nexport default FactoryMaker.getClassFactory(StreamProcessor);\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport DashJSError from './vo/DashJSError';\r\nimport URLLoader from './net/URLLoader';\r\nimport {HTTPRequest} from './vo/metrics/HTTPRequest';\r\nimport TextRequest from './vo/TextRequest';\r\nimport EventBus from '../core/EventBus';\r\nimport Events from '../core/events/Events';\r\nimport FactoryMaker from '../core/FactoryMaker';\r\nimport Errors from '../core/errors/Errors';\r\n\r\nfunction XlinkLoader(config) {\r\n\r\n    config = config || {};\r\n    const RESOLVE_TO_ZERO = 'urn:mpeg:dash:resolve-to-zero:2013';\r\n\r\n    const context  = this.context;\r\n    const eventBus = EventBus(context).getInstance();\r\n\r\n    let urlLoader = URLLoader(context).create({\r\n        errHandler: config.errHandler,\r\n        dashMetrics: config.dashMetrics,\r\n        mediaPlayerModel: config.mediaPlayerModel,\r\n        requestModifier: config.requestModifier,\r\n        useFetch: config.settings ? config.settings.get().streaming.lowLatencyEnabled : null,\r\n        errors: Errors\r\n    });\r\n\r\n    let instance;\r\n\r\n    function load(url, element, resolveObject) {\r\n        const report = function (content, resolveToZero) {\r\n            element.resolved = true;\r\n            element.resolvedContent = content ? content : null;\r\n\r\n            eventBus.trigger(Events.XLINK_ELEMENT_LOADED, {\r\n                element: element,\r\n                resolveObject: resolveObject,\r\n                error: content || resolveToZero ?\r\n                    null :\r\n                    new DashJSError(\r\n                        Errors.XLINK_LOADER_LOADING_FAILURE_ERROR_CODE,\r\n                        Errors.XLINK_LOADER_LOADING_FAILURE_ERROR_MESSAGE + url\r\n                    )\r\n            });\r\n        };\r\n\r\n        if (url === RESOLVE_TO_ZERO) {\r\n            report(null, true);\r\n        } else {\r\n            const request = new TextRequest(url, HTTPRequest.XLINK_EXPANSION_TYPE);\r\n\r\n            urlLoader.load({\r\n                request: request,\r\n                success: function (data) {\r\n                    report(data);\r\n                },\r\n                error: function () {\r\n                    report(null);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    function reset() {\r\n        if (urlLoader) {\r\n            urlLoader.abort();\r\n            urlLoader = null;\r\n        }\r\n    }\r\n\r\n    instance = {\r\n        load: load,\r\n        reset: reset\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nXlinkLoader.__dashjs_factory_name = 'XlinkLoader';\r\nexport default FactoryMaker.getClassFactory(XlinkLoader);\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n/**\r\n * Constants declaration\r\n * @class\r\n * @ignore\r\n * @hideconstructor\r\n */\r\nclass Constants {\r\n\r\n    init() {\r\n        /**\r\n         *  @constant {string} STREAM Stream media type. Mainly used to report metrics relative to the full stream\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.STREAM = 'stream';\r\n\r\n        /**\r\n         *  @constant {string} VIDEO Video media type\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.VIDEO = 'video';\r\n\r\n        /**\r\n         *  @constant {string} AUDIO Audio media type\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.AUDIO = 'audio';\r\n\r\n        /**\r\n         *  @constant {string} TEXT Text media type\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.TEXT = 'text';\r\n\r\n        /**\r\n         *  @constant {string} FRAGMENTED_TEXT Fragmented text media type\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.FRAGMENTED_TEXT = 'fragmentedText';\r\n\r\n        /**\r\n         *  @constant {string} EMBEDDED_TEXT Embedded text media type\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.EMBEDDED_TEXT = 'embeddedText';\r\n\r\n        /**\r\n         *  @constant {string} MUXED Muxed (video/audio in the same chunk) media type\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.MUXED = 'muxed';\r\n\r\n        /**\r\n         *  @constant {string} IMAGE Image media type\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.IMAGE = 'image';\r\n\r\n        /**\r\n         *  @constant {string} STPP STTP Subtitles format\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.STPP = 'stpp';\r\n\r\n        /**\r\n         *  @constant {string} TTML STTP Subtitles format\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.TTML = 'ttml';\r\n\r\n        /**\r\n         *  @constant {string} VTT STTP Subtitles format\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.VTT = 'vtt';\r\n\r\n        /**\r\n         *  @constant {string} WVTT STTP Subtitles format\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.WVTT = 'wvtt';\r\n\r\n        /**\r\n         *  @constant {string} ABR_STRATEGY_DYNAMIC Dynamic Adaptive bitrate algorithm\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.ABR_STRATEGY_DYNAMIC = 'abrDynamic';\r\n\r\n        /**\r\n         *  @constant {string} ABR_STRATEGY_BOLA Adaptive bitrate algorithm based on Bola (buffer level)\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.ABR_STRATEGY_BOLA = 'abrBola';\r\n\r\n        /**\r\n         *  @constant {string} ABR_STRATEGY_L2A Adaptive bitrate algorithm based on L2A (online learning)\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.ABR_STRATEGY_L2A = 'abrL2A';\r\n\r\n        /**\r\n         *  @constant {string} ABR_STRATEGY_LoLP Adaptive bitrate algorithm based on LoL+\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.ABR_STRATEGY_LoLP = 'abrLoLP';\r\n\r\n        /**\r\n         *  @constant {string} ABR_STRATEGY_THROUGHPUT Adaptive bitrate algorithm based on throughput\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.ABR_STRATEGY_THROUGHPUT = 'abrThroughput';\r\n\r\n        /**\r\n         *  @constant {string} ABR_FETCH_THROUGHPUT_CALUCUALTION_DOWNLOADED_DATA Throughput calculation based on downloaded data array\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.ABR_FETCH_THROUGHPUT_CALCULATION_DOWNLOADED_DATA = 'abrFetchThroughputCalculationDownloadedData';\r\n\r\n        /**\r\n         *  @constant {string} ABR_FETCH_THROUGHPUT_CALCULATION_MOOF_PARSING Throughput calculation based on moof parsing\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.ABR_FETCH_THROUGHPUT_CALCULATION_MOOF_PARSING = 'abrFetchThroughputCalculationMoofParsing';\r\n\r\n        /**\r\n         *  @constant {string} LIVE_CATCHUP_MODE_DEFAULT Throughput calculation based on moof parsing\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.LIVE_CATCHUP_MODE_DEFAULT = 'liveCatchupModeDefault';\r\n\r\n        /**\r\n         *  @constant {string} LIVE_CATCHUP_MODE_LOLP Throughput calculation based on moof parsing\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.LIVE_CATCHUP_MODE_LOLP = 'liveCatchupModeLoLP';\r\n\r\n        /**\r\n         *  @constant {string} MOVING_AVERAGE_SLIDING_WINDOW Moving average sliding window\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.MOVING_AVERAGE_SLIDING_WINDOW = 'slidingWindow';\r\n\r\n        /**\r\n         *  @constant {string} EWMA Exponential moving average\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.MOVING_AVERAGE_EWMA = 'ewma';\r\n\r\n        /**\r\n         *  @constant {string} BAD_ARGUMENT_ERROR Invalid Arguments type of error\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.BAD_ARGUMENT_ERROR = 'Invalid Arguments';\r\n\r\n        /**\r\n         *  @constant {string} MISSING_CONFIG_ERROR Missing configuration parameters type of error\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.MISSING_CONFIG_ERROR = 'Missing config parameter(s)';\r\n\r\n        /**\r\n         *  @constant {string} TRACK_SWITCH_MODE_ALWAYS_REPLACE used to clear the buffered data (prior to current playback position) after track switch. Default for audio\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.TRACK_SWITCH_MODE_ALWAYS_REPLACE = 'alwaysReplace';\r\n\r\n        /**\r\n         *  @constant {string} TRACK_SWITCH_MODE_NEVER_REPLACE used to forbid clearing the buffered data (prior to current playback position) after track switch. Defers to fastSwitchEnabled for placement of new data. Default for video\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.TRACK_SWITCH_MODE_NEVER_REPLACE = 'neverReplace';\r\n\r\n        /**\r\n         *  @constant {string} TRACK_SELECTION_MODE_HIGHEST_BITRATE makes the player select the track with a highest bitrate. This mode is a default mode.\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.TRACK_SELECTION_MODE_HIGHEST_BITRATE = 'highestBitrate';\r\n\r\n        /**\r\n         *  @constant {string} TRACK_SELECTION_MODE_WIDEST_RANGE this mode makes the player select the track with a widest range of bitrates\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.TRACK_SELECTION_MODE_WIDEST_RANGE = 'widestRange';\r\n\r\n        this.LOCATION = 'Location';\r\n        this.INITIALIZE = 'initialize';\r\n        this.TEXT_SHOWING = 'showing';\r\n        this.TEXT_HIDDEN = 'hidden';\r\n        this.CC1 = 'CC1';\r\n        this.CC3 = 'CC3';\r\n        this.UTF8 = 'utf-8';\r\n        this.SCHEME_ID_URI = 'schemeIdUri';\r\n        this.START_TIME = 'starttime';\r\n        this.SERVICE_DESCRIPTION_LL_SCHEME = 'urn:dvb:dash:lowlatency:scope:2019';\r\n        this.SUPPLEMENTAL_PROPERTY_LL_SCHEME = 'urn:dvb:dash:lowlatency:critical:2019';\r\n        this.XML = 'XML';\r\n        this.ARRAY_BUFFER = 'ArrayBuffer';\r\n        this.DVB_REPORTING_URL = 'dvb:reportingUrl';\r\n        this.DVB_PROBABILITY = 'dvb:probability';\r\n    }\r\n\r\n    constructor() {\r\n        this.init();\r\n    }\r\n}\r\n\r\nconst constants = new Constants();\r\nexport default constants;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n/**\r\n * Metrics Constants declaration\r\n * @class\r\n * @ignore\r\n */\r\nclass MetricsConstants {\r\n\r\n    init () {\r\n        this.TCP_CONNECTION = 'TcpList';\r\n        this.HTTP_REQUEST = 'HttpList';\r\n        this.TRACK_SWITCH = 'RepSwitchList';\r\n        this.BUFFER_LEVEL = 'BufferLevel';\r\n        this.BUFFER_LOADED = 'bufferLoaded';\r\n        this.ABANDON_LOAD = 'abandonload';\r\n        this.ALLOW_LOAD = 'allowload';\r\n        this.BUFFER_EMPTY = 'bufferStalled';\r\n        this.BUFFER_STATE = 'BufferState';\r\n        this.DVR_INFO = 'DVRInfo';\r\n        this.DROPPED_FRAMES = 'DroppedFrames';\r\n        this.SCHEDULING_INFO = 'SchedulingInfo';\r\n        this.REQUESTS_QUEUE = 'RequestsQueue';\r\n        this.MANIFEST_UPDATE = 'ManifestUpdate';\r\n        this.MANIFEST_UPDATE_STREAM_INFO = 'ManifestUpdatePeriodInfo';\r\n        this.MANIFEST_UPDATE_TRACK_INFO = 'ManifestUpdateRepresentationInfo';\r\n        this.PLAY_LIST = 'PlayList';\r\n        this.DVB_ERRORS = 'DVBErrors';\r\n    }\r\n\r\n    constructor() {\r\n        this.init();\r\n    }\r\n}\r\n\r\nlet constants = new MetricsConstants();\r\nexport default constants;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n/**\r\n * Protection Constants declaration\r\n * @class\r\n * @ignore\r\n */\r\nclass ProtectionConstants {\r\n\r\n    init () {\r\n        this.CLEARKEY_KEYSTEM_STRING = 'org.w3.clearkey';\r\n        this.WIDEVINE_KEYSTEM_STRING = 'com.widevine.alpha';\r\n        this.PLAYREADY_KEYSTEM_STRING = 'com.microsoft.playready';\r\n    }\r\n\r\n    constructor () {\r\n        this.init();\r\n    }\r\n}\r\n\r\nlet constants = new ProtectionConstants();\r\nexport default constants;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport ABRRulesCollection from '../rules/abr/ABRRulesCollection';\r\nimport Constants from '../constants/Constants';\r\nimport MetricsConstants from '../constants/MetricsConstants';\r\nimport BitrateInfo from '../vo/BitrateInfo';\r\nimport FragmentModel from '../models/FragmentModel';\r\nimport EventBus from '../../core/EventBus';\r\nimport Events from '../../core/events/Events';\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\nimport RulesContext from '../rules/RulesContext';\r\nimport SwitchRequest from '../rules/SwitchRequest';\r\nimport SwitchRequestHistory from '../rules/SwitchRequestHistory';\r\nimport DroppedFramesHistory from '../rules/DroppedFramesHistory';\r\nimport ThroughputHistory from '../rules/ThroughputHistory';\r\nimport Debug from '../../core/Debug';\r\nimport { HTTPRequest } from '../vo/metrics/HTTPRequest';\r\nimport { checkInteger } from '../utils/SupervisorTools';\r\n\r\nconst DEFAULT_VIDEO_BITRATE = 1000;\r\nconst DEFAULT_AUDIO_BITRATE = 100;\r\nconst QUALITY_DEFAULT = 0;\r\n\r\nfunction AbrController() {\r\n\r\n    const context = this.context;\r\n    const debug = Debug(context).getInstance();\r\n    const eventBus = EventBus(context).getInstance();\r\n\r\n    let instance,\r\n        logger,\r\n        abrRulesCollection,\r\n        streamController,\r\n        topQualities,\r\n        qualityDict,\r\n        streamProcessorDict,\r\n        abandonmentStateDict,\r\n        abandonmentTimeout,\r\n        windowResizeEventCalled,\r\n        elementWidth,\r\n        elementHeight,\r\n        adapter,\r\n        videoModel,\r\n        mediaPlayerModel,\r\n        domStorage,\r\n        playbackIndex,\r\n        switchHistoryDict,\r\n        droppedFramesHistory,\r\n        throughputHistory,\r\n        isUsingBufferOccupancyABRDict,\r\n        isUsingL2AABRDict,\r\n        isUsingLoLPBRDict,\r\n        dashMetrics,\r\n        settings;\r\n\r\n    function setup() {\r\n        logger = debug.getLogger(instance);\r\n        resetInitialSettings();\r\n    }\r\n\r\n    function registerStreamType(type, streamProcessor) {\r\n        switchHistoryDict[type] = switchHistoryDict[type] || SwitchRequestHistory(context).create();\r\n        streamProcessorDict[type] = streamProcessor;\r\n        abandonmentStateDict[type] = abandonmentStateDict[type] || {};\r\n        abandonmentStateDict[type].state = MetricsConstants.ALLOW_LOAD;\r\n        isUsingBufferOccupancyABRDict[type] = false;\r\n        isUsingL2AABRDict[type] = false;\r\n        isUsingLoLPBRDict[type] = false;\r\n        eventBus.on(Events.LOADING_PROGRESS, onFragmentLoadProgress, instance);\r\n        if (type === Constants.VIDEO) {\r\n            eventBus.on(Events.QUALITY_CHANGE_RENDERED, onQualityChangeRendered, instance);\r\n            droppedFramesHistory = droppedFramesHistory || DroppedFramesHistory(context).create();\r\n            setElementSize();\r\n        }\r\n        eventBus.on(Events.METRIC_ADDED, onMetricAdded, instance);\r\n        eventBus.on(Events.PERIOD_SWITCH_COMPLETED, createAbrRulesCollection, instance);\r\n\r\n        throughputHistory = throughputHistory || ThroughputHistory(context).create({\r\n            settings: settings\r\n        });\r\n    }\r\n\r\n    function unRegisterStreamType(type) {\r\n        delete streamProcessorDict[type];\r\n    }\r\n\r\n    function createAbrRulesCollection() {\r\n        abrRulesCollection = ABRRulesCollection(context).create({\r\n            dashMetrics: dashMetrics,\r\n            mediaPlayerModel: mediaPlayerModel,\r\n            settings: settings\r\n        });\r\n\r\n        abrRulesCollection.initialize();\r\n    }\r\n\r\n    function resetInitialSettings() {\r\n        topQualities = {};\r\n        qualityDict = {};\r\n        abandonmentStateDict = {};\r\n        streamProcessorDict = {};\r\n        switchHistoryDict = {};\r\n        isUsingBufferOccupancyABRDict = {};\r\n        isUsingL2AABRDict = {};\r\n        isUsingLoLPBRDict = {};\r\n        if (windowResizeEventCalled === undefined) {\r\n            windowResizeEventCalled = false;\r\n        }\r\n        playbackIndex = undefined;\r\n        droppedFramesHistory = undefined;\r\n        throughputHistory = undefined;\r\n        clearTimeout(abandonmentTimeout);\r\n        abandonmentTimeout = null;\r\n    }\r\n\r\n    function reset() {\r\n\r\n        resetInitialSettings();\r\n\r\n        eventBus.off(Events.LOADING_PROGRESS, onFragmentLoadProgress, instance);\r\n        eventBus.off(Events.QUALITY_CHANGE_RENDERED, onQualityChangeRendered, instance);\r\n        eventBus.off(Events.METRIC_ADDED, onMetricAdded, instance);\r\n        eventBus.off(Events.PERIOD_SWITCH_COMPLETED, createAbrRulesCollection, instance);\r\n\r\n        if (abrRulesCollection) {\r\n            abrRulesCollection.reset();\r\n        }\r\n    }\r\n\r\n    function setConfig(config) {\r\n        if (!config) return;\r\n\r\n        if (config.streamController) {\r\n            streamController = config.streamController;\r\n        }\r\n        if (config.domStorage) {\r\n            domStorage = config.domStorage;\r\n        }\r\n        if (config.mediaPlayerModel) {\r\n            mediaPlayerModel = config.mediaPlayerModel;\r\n        }\r\n        if (config.dashMetrics) {\r\n            dashMetrics = config.dashMetrics;\r\n        }\r\n        if (config.adapter) {\r\n            adapter = config.adapter;\r\n        }\r\n        if (config.videoModel) {\r\n            videoModel = config.videoModel;\r\n        }\r\n        if (config.settings) {\r\n            settings = config.settings;\r\n        }\r\n    }\r\n\r\n    function checkConfig() {\r\n        if (!domStorage || !domStorage.hasOwnProperty('getSavedBitrateSettings')) {\r\n            throw new Error(Constants.MISSING_CONFIG_ERROR);\r\n        }\r\n    }\r\n\r\n    function onQualityChangeRendered(e) {\r\n        if (e.mediaType === Constants.VIDEO) {\r\n            playbackIndex = e.oldQuality;\r\n            droppedFramesHistory.push(playbackIndex, videoModel.getPlaybackQuality());\r\n        }\r\n    }\r\n\r\n    function onMetricAdded(e) {\r\n        if (e.metric === MetricsConstants.HTTP_REQUEST && e.value && e.value.type === HTTPRequest.MEDIA_SEGMENT_TYPE && (e.mediaType === Constants.AUDIO || e.mediaType === Constants.VIDEO)) {\r\n            throughputHistory.push(e.mediaType, e.value, settings.get().streaming.abr.useDeadTimeLatency);\r\n        }\r\n\r\n        if (e.metric === MetricsConstants.BUFFER_LEVEL && (e.mediaType === Constants.AUDIO || e.mediaType === Constants.VIDEO)) {\r\n            _updateAbrStrategy(e.mediaType, 0.001 * e.value.level);\r\n        }\r\n    }\r\n\r\n    function getTopQualityIndexFor(type, id) {\r\n        let idx;\r\n        topQualities[id] = topQualities[id] || {};\r\n\r\n        if (!topQualities[id].hasOwnProperty(type)) {\r\n            topQualities[id][type] = 0;\r\n        }\r\n\r\n        idx = checkMaxBitrate(topQualities[id][type], type);\r\n        idx = checkMaxRepresentationRatio(idx, type, topQualities[id][type]);\r\n        idx = checkPortalSize(idx, type);\r\n        return idx;\r\n    }\r\n\r\n    /**\r\n     * Gets top BitrateInfo for the player\r\n     * @param {string} type - 'video' or 'audio' are the type options.\r\n     * @returns {BitrateInfo | null}\r\n     */\r\n    function getTopBitrateInfoFor(type) {\r\n        if (type && streamProcessorDict && streamProcessorDict[type]) {\r\n            const streamInfo = streamProcessorDict[type].getStreamInfo();\r\n            if (streamInfo && streamInfo.id) {\r\n                const idx = getTopQualityIndexFor(type, streamInfo.id);\r\n                const bitrates = getBitrateList(streamProcessorDict[type].getMediaInfo());\r\n                return bitrates[idx] ? bitrates[idx] : null;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * @param {string} type\r\n     * @returns {number} A value of the initial bitrate, kbps\r\n     * @memberof AbrController#\r\n     */\r\n    function getInitialBitrateFor(type) {\r\n        checkConfig();\r\n        if (type === Constants.TEXT || type === Constants.FRAGMENTED_TEXT) {\r\n            return NaN;\r\n        }\r\n        const savedBitrate = domStorage.getSavedBitrateSettings(type);\r\n        let configBitrate = settings.get().streaming.abr.initialBitrate[type];\r\n        let configRatio = settings.get().streaming.abr.initialRepresentationRatio[type];\r\n\r\n        if (configBitrate === -1) {\r\n            if (configRatio > -1) {\r\n                const representation = adapter.getAdaptationForType(0, type).Representation;\r\n                if (Array.isArray(representation)) {\r\n                    const repIdx = Math.max(Math.round(representation.length * configRatio) - 1, 0);\r\n                    configBitrate = representation[repIdx].bandwidth;\r\n                } else {\r\n                    configBitrate = 0;\r\n                }\r\n            } else if (!isNaN(savedBitrate)) {\r\n                configBitrate = savedBitrate;\r\n            } else {\r\n                configBitrate = (type === Constants.VIDEO) ? DEFAULT_VIDEO_BITRATE : DEFAULT_AUDIO_BITRATE;\r\n            }\r\n        }\r\n\r\n        return configBitrate;\r\n    }\r\n\r\n    function getMaxAllowedBitrateFor(type) {\r\n        return settings.get().streaming.abr.maxBitrate[type];\r\n    }\r\n\r\n    function getMinAllowedBitrateFor(type) {\r\n        return settings.get().streaming.abr.minBitrate[type];\r\n    }\r\n\r\n    function getMaxAllowedIndexFor(type) {\r\n        const maxBitrate = getMaxAllowedBitrateFor(type);\r\n        if (maxBitrate > -1) {\r\n            return getQualityForBitrate(streamProcessorDict[type].getMediaInfo(), maxBitrate);\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    function getMinAllowedIndexFor(type) {\r\n        const minBitrate = getMinAllowedBitrateFor(type);\r\n\r\n        if (minBitrate > -1) {\r\n            const mediaInfo = streamProcessorDict[type].getMediaInfo();\r\n            const bitrateList = getBitrateList(mediaInfo);\r\n            // This returns the quality index <= for the given bitrate\r\n            let minIdx = getQualityForBitrate(mediaInfo, minBitrate);\r\n            if (bitrateList[minIdx] && minIdx < bitrateList.length - 1 && bitrateList[minIdx].bitrate < minBitrate * 1000) {\r\n                minIdx++; // Go to the next bitrate\r\n            }\r\n            return minIdx;\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    function checkPlaybackQuality(type) {\r\n        if (type && streamProcessorDict && streamProcessorDict[type]) {\r\n            const streamInfo = streamProcessorDict[type].getStreamInfo();\r\n            const streamId = streamInfo ? streamInfo.id : null;\r\n            const oldQuality = getQualityFor(type);\r\n            const rulesContext = RulesContext(context).create({\r\n                abrController: instance,\r\n                streamProcessor: streamProcessorDict[type],\r\n                currentValue: oldQuality,\r\n                switchHistory: switchHistoryDict[type],\r\n                droppedFramesHistory: droppedFramesHistory,\r\n                useBufferOccupancyABR: useBufferOccupancyABR(type),\r\n                useL2AABR: useL2AABR(type),\r\n                useLoLPABR: useLoLPABR(type),\r\n                videoModel\r\n            });\r\n\r\n            if (droppedFramesHistory) {\r\n                const playbackQuality = videoModel.getPlaybackQuality();\r\n                if (playbackQuality) {\r\n                    droppedFramesHistory.push(playbackIndex, playbackQuality);\r\n                }\r\n            }\r\n            if (!!settings.get().streaming.abr.autoSwitchBitrate[type]) {\r\n                const minIdx = getMinAllowedIndexFor(type);\r\n                const topQualityIdx = getTopQualityIndexFor(type, streamId);\r\n                const switchRequest = abrRulesCollection.getMaxQuality(rulesContext);\r\n                let newQuality = switchRequest.quality;\r\n                if (minIdx !== undefined && ((newQuality > SwitchRequest.NO_CHANGE) ? newQuality : oldQuality) < minIdx) {\r\n                    newQuality = minIdx;\r\n                }\r\n                if (newQuality > topQualityIdx) {\r\n                    newQuality = topQualityIdx;\r\n                }\r\n\r\n                switchHistoryDict[type].push({oldValue: oldQuality, newValue: newQuality});\r\n\r\n                if (newQuality > SwitchRequest.NO_CHANGE && newQuality != oldQuality) {\r\n                    if (abandonmentStateDict[type].state === MetricsConstants.ALLOW_LOAD || newQuality > oldQuality) {\r\n                        changeQuality(type, oldQuality, newQuality, topQualityIdx, switchRequest.reason);\r\n                    }\r\n                } else if (settings.get().debug.logLevel === Debug.LOG_LEVEL_DEBUG) {\r\n                    const bufferLevel = dashMetrics.getCurrentBufferLevel(type, true);\r\n                    logger.debug('[' + type + '] stay on ' + oldQuality + '/' + topQualityIdx + ' (buffer: ' + bufferLevel + ')');\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function setPlaybackQuality(type, streamInfo, newQuality, reason) {\r\n        const id = streamInfo.id;\r\n        const oldQuality = getQualityFor(type);\r\n\r\n        checkInteger(newQuality);\r\n\r\n        const topQualityIdx = getTopQualityIndexFor(type, id);\r\n        if (newQuality !== oldQuality && newQuality >= 0 && newQuality <= topQualityIdx) {\r\n            changeQuality(type, oldQuality, newQuality, topQualityIdx, reason);\r\n        }\r\n    }\r\n\r\n    function changeQuality(type, oldQuality, newQuality, topQualityIdx, reason) {\r\n        if (type && streamProcessorDict[type]) {\r\n            const streamInfo = streamProcessorDict[type].getStreamInfo();\r\n            const id = streamInfo ? streamInfo.id : null;\r\n            if (settings.get().debug.logLevel === Debug.LOG_LEVEL_DEBUG) {\r\n                const bufferLevel = dashMetrics.getCurrentBufferLevel(type);\r\n                logger.info('[' + type + '] switch from ' + oldQuality + ' to ' + newQuality + '/' + topQualityIdx + ' (buffer: ' + bufferLevel + ') ' + (reason ? JSON.stringify(reason) : '.'));\r\n            }\r\n            setQualityFor(type, id, newQuality);\r\n            eventBus.trigger(Events.QUALITY_CHANGE_REQUESTED,\r\n                {\r\n                    oldQuality: oldQuality,\r\n                    newQuality: newQuality,\r\n                    reason: reason\r\n                },\r\n                { streamId: streamInfo.id, mediaType: type }\r\n            );\r\n            const bitrate = throughputHistory.getAverageThroughput(type);\r\n            if (!isNaN(bitrate)) {\r\n                domStorage.setSavedBitrateSettings(type, bitrate);\r\n            }\r\n        }\r\n    }\r\n\r\n    function setAbandonmentStateFor(type, state) {\r\n        abandonmentStateDict[type].state = state;\r\n    }\r\n\r\n    function getAbandonmentStateFor(type) {\r\n        return abandonmentStateDict[type] ? abandonmentStateDict[type].state : null;\r\n    }\r\n\r\n    /**\r\n     * @param {MediaInfo} mediaInfo\r\n     * @param {number} bitrate A bitrate value, kbps\r\n     * @param {number} latency Expected latency of connection, ms\r\n     * @returns {number} A quality index <= for the given bitrate\r\n     * @memberof AbrController#\r\n     */\r\n    function getQualityForBitrate(mediaInfo, bitrate, latency) {\r\n        const voRepresentation = mediaInfo && mediaInfo.type ? streamProcessorDict[mediaInfo.type].getRepresentationInfo() : null;\r\n\r\n        if (settings.get().streaming.abr.useDeadTimeLatency && latency && voRepresentation && voRepresentation.fragmentDuration) {\r\n            latency = latency / 1000;\r\n            const fragmentDuration = voRepresentation.fragmentDuration;\r\n            if (latency > fragmentDuration) {\r\n                return 0;\r\n            } else {\r\n                const deadTimeRatio = latency / fragmentDuration;\r\n                bitrate = bitrate * (1 - deadTimeRatio);\r\n            }\r\n        }\r\n\r\n        const bitrateList = getBitrateList(mediaInfo);\r\n\r\n        for (let i = bitrateList.length - 1; i >= 0; i--) {\r\n            const bitrateInfo = bitrateList[i];\r\n            if (bitrate * 1000 >= bitrateInfo.bitrate) {\r\n                return i;\r\n            }\r\n        }\r\n        return QUALITY_DEFAULT;\r\n    }\r\n\r\n    /**\r\n     * @param {MediaInfo} mediaInfo\r\n     * @returns {Array|null} A list of {@link BitrateInfo} objects\r\n     * @memberof AbrController#\r\n     */\r\n    function getBitrateList(mediaInfo) {\r\n        const infoList = [];\r\n        if (!mediaInfo || !mediaInfo.bitrateList) return infoList;\r\n\r\n        const bitrateList = mediaInfo.bitrateList;\r\n        const type = mediaInfo.type;\r\n\r\n        let bitrateInfo;\r\n\r\n        for (let i = 0, ln = bitrateList.length; i < ln; i++) {\r\n            bitrateInfo = new BitrateInfo();\r\n            bitrateInfo.mediaType = type;\r\n            bitrateInfo.qualityIndex = i;\r\n            bitrateInfo.bitrate = bitrateList[i].bandwidth;\r\n            bitrateInfo.width = bitrateList[i].width;\r\n            bitrateInfo.height = bitrateList[i].height;\r\n            bitrateInfo.scanType = bitrateList[i].scanType;\r\n            infoList.push(bitrateInfo);\r\n        }\r\n\r\n        return infoList;\r\n    }\r\n\r\n    function _updateAbrStrategy(mediaType, bufferLevel) {\r\n        const strategy = settings.get().streaming.abr.ABRStrategy;\r\n\r\n        if (strategy === Constants.ABR_STRATEGY_L2A) {\r\n            isUsingBufferOccupancyABRDict[mediaType] = false;\r\n            isUsingLoLPBRDict[mediaType] = false;\r\n            isUsingL2AABRDict[mediaType] = true;\r\n            return;\r\n        }\r\n        if (strategy === Constants.ABR_STRATEGY_LoLP) {\r\n            isUsingBufferOccupancyABRDict[mediaType] = false;\r\n            isUsingLoLPBRDict[mediaType] = true;\r\n            isUsingL2AABRDict[mediaType] = false;\r\n            return;\r\n        } else if (strategy === Constants.ABR_STRATEGY_BOLA) {\r\n            isUsingBufferOccupancyABRDict[mediaType] = true;\r\n            isUsingLoLPBRDict[mediaType] = false;\r\n            isUsingL2AABRDict[mediaType] = false;\r\n            return;\r\n        } else if (strategy === Constants.ABR_STRATEGY_THROUGHPUT) {\r\n            isUsingBufferOccupancyABRDict[mediaType] = false;\r\n            isUsingLoLPBRDict[mediaType] = false;\r\n            isUsingL2AABRDict[mediaType] = false;\r\n            return;\r\n        }\r\n        // else ABR_STRATEGY_DYNAMIC\r\n        _updateDynamicAbrStrategy(mediaType, bufferLevel);\r\n    }\r\n\r\n    function _updateDynamicAbrStrategy(mediaType, bufferLevel) {\r\n        const stableBufferTime = mediaPlayerModel.getStableBufferTime();\r\n        const switchOnThreshold = stableBufferTime;\r\n        const switchOffThreshold = 0.5 * stableBufferTime;\r\n\r\n        const useBufferABR = isUsingBufferOccupancyABRDict[mediaType];\r\n        const newUseBufferABR = bufferLevel > (useBufferABR ? switchOffThreshold : switchOnThreshold); // use hysteresis to avoid oscillating rules\r\n        isUsingBufferOccupancyABRDict[mediaType] = newUseBufferABR;\r\n\r\n        if (newUseBufferABR !== useBufferABR) {\r\n            if (newUseBufferABR) {\r\n                logger.info('[' + mediaType + '] switching from throughput to buffer occupancy ABR rule (buffer: ' + bufferLevel.toFixed(3) + ').');\r\n            } else {\r\n                logger.info('[' + mediaType + '] switching from buffer occupancy to throughput ABR rule (buffer: ' + bufferLevel.toFixed(3) + ').');\r\n            }\r\n        }\r\n    }\r\n\r\n    function useBufferOccupancyABR(mediaType) {\r\n        return isUsingBufferOccupancyABRDict[mediaType];\r\n    }\r\n\r\n    function useL2AABR(mediaType) {\r\n        return isUsingL2AABRDict[mediaType];\r\n    }\r\n\r\n    function useLoLPABR(mediaType) {\r\n        return isUsingLoLPBRDict[mediaType];\r\n    }\r\n\r\n    function getThroughputHistory() {\r\n        return throughputHistory;\r\n    }\r\n\r\n    function updateTopQualityIndex(mediaInfo) {\r\n        const type = mediaInfo.type;\r\n        const streamId = mediaInfo.streamInfo.id;\r\n        const max = mediaInfo.representationCount - 1;\r\n\r\n        setTopQualityIndex(type, streamId, max);\r\n\r\n        return max;\r\n    }\r\n\r\n    function isPlayingAtTopQuality(streamInfo) {\r\n        const streamId = streamInfo ? streamInfo.id : null;\r\n        const audioQuality = getQualityFor(Constants.AUDIO);\r\n        const videoQuality = getQualityFor(Constants.VIDEO);\r\n\r\n        const isAtTop = (audioQuality === getTopQualityIndexFor(Constants.AUDIO, streamId)) &&\r\n            (videoQuality === getTopQualityIndexFor(Constants.VIDEO, streamId));\r\n\r\n        return isAtTop;\r\n    }\r\n\r\n    function getQualityFor(type) {\r\n        if (type && streamProcessorDict[type]) {\r\n            const streamInfo = streamProcessorDict[type].getStreamInfo();\r\n            const id = streamInfo ? streamInfo.id : null;\r\n            let quality;\r\n\r\n            if (id) {\r\n                qualityDict[id] = qualityDict[id] || {};\r\n\r\n                if (!qualityDict[id].hasOwnProperty(type)) {\r\n                    qualityDict[id][type] = QUALITY_DEFAULT;\r\n                }\r\n\r\n                quality = qualityDict[id][type];\r\n                return quality;\r\n            }\r\n        }\r\n        return QUALITY_DEFAULT;\r\n    }\r\n\r\n    function setQualityFor(type, id, value) {\r\n        qualityDict[id] = qualityDict[id] || {};\r\n        qualityDict[id][type] = value;\r\n    }\r\n\r\n    function setTopQualityIndex(type, id, value) {\r\n        topQualities[id] = topQualities[id] || {};\r\n        topQualities[id][type] = value;\r\n    }\r\n\r\n    function checkMaxBitrate(idx, type) {\r\n        let newIdx = idx;\r\n\r\n        if (!streamProcessorDict[type]) {\r\n            return newIdx;\r\n        }\r\n\r\n        const minIdx = getMinAllowedIndexFor(type);\r\n        if (minIdx !== undefined) {\r\n            newIdx = Math.max(idx, minIdx);\r\n        }\r\n\r\n        const maxIdx = getMaxAllowedIndexFor(type);\r\n        if (maxIdx !== undefined) {\r\n            newIdx = Math.min(newIdx, maxIdx);\r\n        }\r\n\r\n        return newIdx;\r\n    }\r\n\r\n    function checkMaxRepresentationRatio(idx, type, maxIdx) {\r\n        const maxRepresentationRatio = settings.get().streaming.abr.maxRepresentationRatio[type];\r\n        if (isNaN(maxRepresentationRatio) || maxRepresentationRatio >= 1 || maxRepresentationRatio < 0) {\r\n            return idx;\r\n        }\r\n        return Math.min(idx, Math.round(maxIdx * maxRepresentationRatio));\r\n    }\r\n\r\n    function setWindowResizeEventCalled(value) {\r\n        windowResizeEventCalled = value;\r\n    }\r\n\r\n    function setElementSize() {\r\n        if (videoModel) {\r\n            const hasPixelRatio = settings.get().streaming.abr.usePixelRatioInLimitBitrateByPortal && window.hasOwnProperty('devicePixelRatio');\r\n            const pixelRatio = hasPixelRatio ? window.devicePixelRatio : 1;\r\n            elementWidth = videoModel.getClientWidth() * pixelRatio;\r\n            elementHeight = videoModel.getClientHeight() * pixelRatio;\r\n        }\r\n    }\r\n\r\n    function checkPortalSize(idx, type) {\r\n        if (type !== Constants.VIDEO || !settings.get().streaming.abr.limitBitrateByPortal || !streamProcessorDict[type]) {\r\n            return idx;\r\n        }\r\n\r\n        if (!windowResizeEventCalled) {\r\n            setElementSize();\r\n        }\r\n\r\n        const representation = adapter.getAdaptationForType(0, type).Representation;\r\n        let newIdx = idx;\r\n\r\n        if (elementWidth > 0 && elementHeight > 0) {\r\n            while (\r\n                newIdx > 0 &&\r\n                representation[newIdx] &&\r\n                elementWidth < representation[newIdx].width &&\r\n                elementWidth - representation[newIdx - 1].width < representation[newIdx].width - elementWidth) {\r\n                newIdx = newIdx - 1;\r\n            }\r\n\r\n            // Make sure that in case of multiple representation elements have same\r\n            // resolution, every such element is included\r\n            while (newIdx < representation.length - 1 && representation[newIdx].width === representation[newIdx + 1].width) {\r\n                newIdx = newIdx + 1;\r\n            }\r\n        }\r\n\r\n        return newIdx;\r\n    }\r\n\r\n    function onFragmentLoadProgress(e) {\r\n        const type = e.request.mediaType;\r\n        if (!!settings.get().streaming.abr.autoSwitchBitrate[type]) {\r\n            const streamProcessor = streamProcessorDict[type];\r\n            if (!streamProcessor) return; // There may be a fragment load in progress when we switch periods and recreated some controllers.\r\n\r\n            const rulesContext = RulesContext(context).create({\r\n                abrController: instance,\r\n                streamProcessor: streamProcessor,\r\n                currentRequest: e.request,\r\n                useBufferOccupancyABR: useBufferOccupancyABR(type),\r\n                useL2AABR: useL2AABR(type),\r\n                useLoLPABR: useLoLPABR(type),\r\n                videoModel\r\n            });\r\n            const switchRequest = abrRulesCollection.shouldAbandonFragment(rulesContext);\r\n\r\n            if (switchRequest.quality > SwitchRequest.NO_CHANGE) {\r\n                const fragmentModel = streamProcessor.getFragmentModel();\r\n                const request = fragmentModel.getRequests({\r\n                    state: FragmentModel.FRAGMENT_MODEL_LOADING,\r\n                    index: e.request.index\r\n                })[0];\r\n                if (request) {\r\n                    //TODO Check if we should abort or if better to finish download. check bytesLoaded/Total\r\n                    fragmentModel.abortRequests();\r\n                    setAbandonmentStateFor(type, MetricsConstants.ABANDON_LOAD);\r\n                    switchHistoryDict[type].reset();\r\n                    switchHistoryDict[type].push({\r\n                        oldValue: getQualityFor(type),\r\n                        newValue: switchRequest.quality,\r\n                        confidence: 1,\r\n                        reason: switchRequest.reason\r\n                    });\r\n                    setPlaybackQuality(type, streamController.getActiveStreamInfo(), switchRequest.quality, switchRequest.reason);\r\n\r\n                    clearTimeout(abandonmentTimeout);\r\n                    abandonmentTimeout = setTimeout(\r\n                        () => {\r\n                            setAbandonmentStateFor(type, MetricsConstants.ALLOW_LOAD);\r\n                            abandonmentTimeout = null;\r\n                        },\r\n                        settings.get().streaming.abandonLoadTimeout\r\n                    );\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    instance = {\r\n        isPlayingAtTopQuality: isPlayingAtTopQuality,\r\n        updateTopQualityIndex: updateTopQualityIndex,\r\n        getThroughputHistory: getThroughputHistory,\r\n        getBitrateList: getBitrateList,\r\n        getQualityForBitrate: getQualityForBitrate,\r\n        getTopBitrateInfoFor: getTopBitrateInfoFor,\r\n        getMaxAllowedIndexFor: getMaxAllowedIndexFor,\r\n        getMinAllowedIndexFor: getMinAllowedIndexFor,\r\n        getInitialBitrateFor: getInitialBitrateFor,\r\n        getQualityFor: getQualityFor,\r\n        getAbandonmentStateFor: getAbandonmentStateFor,\r\n        setPlaybackQuality: setPlaybackQuality,\r\n        checkPlaybackQuality: checkPlaybackQuality,\r\n        getTopQualityIndexFor: getTopQualityIndexFor,\r\n        setElementSize: setElementSize,\r\n        setWindowResizeEventCalled: setWindowResizeEventCalled,\r\n        createAbrRulesCollection: createAbrRulesCollection,\r\n        registerStreamType: registerStreamType,\r\n        unRegisterStreamType: unRegisterStreamType,\r\n        setConfig: setConfig,\r\n        reset: reset\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\nAbrController.__dashjs_factory_name = 'AbrController';\r\nconst factory = FactoryMaker.getSingletonFactory(AbrController);\r\nfactory.QUALITY_DEFAULT = QUALITY_DEFAULT;\r\nFactoryMaker.updateSingletonFactory(AbrController.__dashjs_factory_name, factory);\r\nexport default factory;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport BaseURLTreeModel from '../models/BaseURLTreeModel';\r\nimport BaseURLSelector from '../utils/BaseURLSelector';\r\nimport URLUtils from '../utils/URLUtils';\r\nimport BaseURL from '../../dash/vo/BaseURL';\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\nimport EventBus from '../../core/EventBus';\r\nimport Events from '../../core/events/Events';\r\n\r\nfunction BaseURLController() {\r\n\r\n    let instance,\r\n        adapter;\r\n\r\n    const context = this.context;\r\n    const eventBus = EventBus(context).getInstance();\r\n    const urlUtils = URLUtils(context).getInstance();\r\n\r\n    let baseURLTreeModel,\r\n        baseURLSelector;\r\n\r\n    function onBlackListChanged(e) {\r\n        baseURLTreeModel.invalidateSelectedIndexes(e.entry);\r\n    }\r\n\r\n    function setup() {\r\n        baseURLTreeModel = BaseURLTreeModel(context).create();\r\n        baseURLSelector = BaseURLSelector(context).create();\r\n\r\n        eventBus.on(Events.SERVICE_LOCATION_BLACKLIST_CHANGED, onBlackListChanged, instance);\r\n    }\r\n\r\n    function setConfig(config) {\r\n        if (config.baseURLTreeModel) {\r\n            baseURLTreeModel = config.baseURLTreeModel;\r\n        }\r\n\r\n        if (config.baseURLSelector) {\r\n            baseURLSelector = config.baseURLSelector;\r\n        }\r\n\r\n        if (config.adapter) {\r\n            adapter = config.adapter;\r\n        }\r\n    }\r\n\r\n    function update(manifest) {\r\n        baseURLTreeModel.update(manifest);\r\n        baseURLSelector.chooseSelector(adapter.getIsDVB(manifest));\r\n    }\r\n\r\n    function resolve(path) {\r\n        const baseUrls = baseURLTreeModel.getForPath(path);\r\n\r\n        const baseUrl = baseUrls.reduce((p, c) => {\r\n            const b = baseURLSelector.select(c);\r\n\r\n            if (b) {\r\n                if (!urlUtils.isRelative(b.url)) {\r\n                    p.url = b.url;\r\n                    p.serviceLocation = b.serviceLocation;\r\n                } else {\r\n                    p.url = urlUtils.resolve(b.url, p.url);\r\n                }\r\n                p.availabilityTimeOffset = b.availabilityTimeOffset;\r\n                p.availabilityTimeComplete = b.availabilityTimeComplete;\r\n            } else {\r\n                return new BaseURL();\r\n            }\r\n\r\n            return p;\r\n        }, new BaseURL());\r\n\r\n        if (!urlUtils.isRelative(baseUrl.url)) {\r\n            return baseUrl;\r\n        }\r\n    }\r\n\r\n    function reset() {\r\n        baseURLTreeModel.reset();\r\n        baseURLSelector.reset();\r\n    }\r\n\r\n    function initialize(data) {\r\n\r\n        // report config to baseURLTreeModel and baseURLSelector\r\n        baseURLTreeModel.setConfig({\r\n            adapter: adapter\r\n        });\r\n\r\n        update(data);\r\n    }\r\n\r\n    instance = {\r\n        reset: reset,\r\n        initialize: initialize,\r\n        resolve: resolve,\r\n        setConfig: setConfig\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\nBaseURLController.__dashjs_factory_name = 'BaseURLController';\r\nexport default FactoryMaker.getClassFactory(BaseURLController);\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\nimport EventBus from '../../core/EventBus';\r\n\r\nfunction BlackListController(config) {\r\n\r\n    config = config || {};\r\n    let instance;\r\n    let blacklist = [];\r\n\r\n    const eventBus = EventBus(this.context).getInstance();\r\n    const updateEventName = config.updateEventName;\r\n    const addBlacklistEventName = config.addBlacklistEventName;\r\n\r\n    function contains(query) {\r\n        if (!blacklist.length || !query || !query.length) {\r\n            return false;\r\n        }\r\n\r\n        return (blacklist.indexOf(query) !== -1);\r\n    }\r\n\r\n    function add(entry) {\r\n        if (blacklist.indexOf(entry) !== -1) {\r\n            return;\r\n        }\r\n\r\n        blacklist.push(entry);\r\n\r\n        eventBus.trigger(updateEventName, { entry: entry });\r\n    }\r\n\r\n    function onAddBlackList(e) {\r\n        add(e.entry);\r\n    }\r\n\r\n    function setup() {\r\n        if (addBlacklistEventName) {\r\n            eventBus.on(addBlacklistEventName, onAddBlackList, instance);\r\n        }\r\n    }\r\n\r\n    function reset() {\r\n        blacklist = [];\r\n    }\r\n\r\n    instance = {\r\n        add: add,\r\n        contains: contains,\r\n        reset: reset\r\n    };\r\n\r\n    setup();\r\n    return instance;\r\n}\r\n\r\nBlackListController.__dashjs_factory_name = 'BlackListController';\r\nexport default FactoryMaker.getClassFactory(BlackListController);\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport Constants from '../constants/Constants';\r\nimport MetricsConstants from '../constants/MetricsConstants';\r\nimport FragmentModel from '../models/FragmentModel';\r\nimport SourceBufferSink from '../SourceBufferSink';\r\nimport PreBufferSink from '../PreBufferSink';\r\nimport AbrController from './AbrController';\r\nimport EventBus from '../../core/EventBus';\r\nimport Events from '../../core/events/Events';\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\nimport Debug from '../../core/Debug';\r\nimport InitCache from '../utils/InitCache';\r\nimport DashJSError from '../vo/DashJSError';\r\nimport Errors from '../../core/errors/Errors';\r\nimport {HTTPRequest} from '../vo/metrics/HTTPRequest';\r\n\r\nconst BUFFERING_COMPLETED_THRESHOLD = 0.1;\r\nconst BUFFER_END_THRESHOLD = 0.5;\r\nconst BUFFER_RANGE_CALCULATION_THRESHOLD = 0.01;\r\nconst QUOTA_EXCEEDED_ERROR_CODE = 22;\r\n\r\nconst BUFFER_CONTROLLER_TYPE = 'BufferController';\r\n\r\nfunction BufferController(config) {\r\n\r\n    config = config || {};\r\n    const context = this.context;\r\n    const eventBus = EventBus(context).getInstance();\r\n    const errHandler = config.errHandler;\r\n    const fragmentModel = config.fragmentModel;\r\n    const representationController = config.representationController;\r\n    const mediaController = config.mediaController;\r\n    const adapter = config.adapter;\r\n    const textController = config.textController;\r\n    const abrController = config.abrController;\r\n    const playbackController = config.playbackController;\r\n    const streamInfo = config.streamInfo;\r\n    const type = config.type;\r\n    const settings = config.settings;\r\n\r\n    let instance,\r\n        logger,\r\n        requiredQuality,\r\n        isBufferingCompleted,\r\n        bufferLevel,\r\n        criticalBufferLevel,\r\n        mediaSource,\r\n        maxAppendedIndex,\r\n        lastIndex,\r\n        buffer,\r\n        dischargeBuffer,\r\n        bufferState,\r\n        appendedBytesInfo,\r\n        wallclockTicked,\r\n        isPruningInProgress,\r\n        isQuotaExceeded,\r\n        initCache,\r\n        seekTarget,\r\n        seekClearedBufferingCompleted,\r\n        pendingPruningRanges,\r\n        replacingBuffer,\r\n        mediaChunk;\r\n\r\n\r\n    function setup() {\r\n        logger = Debug(context).getInstance().getLogger(instance);\r\n        initCache = InitCache(context).getInstance();\r\n\r\n        resetInitialSettings();\r\n    }\r\n\r\n    function getBufferControllerType() {\r\n        return BUFFER_CONTROLLER_TYPE;\r\n    }\r\n\r\n    function initialize(Source) {\r\n        setMediaSource(Source);\r\n\r\n        requiredQuality = abrController.getQualityFor(type);\r\n\r\n        eventBus.on(Events.DATA_UPDATE_COMPLETED, onDataUpdateCompleted, this);\r\n        eventBus.on(Events.INIT_FRAGMENT_LOADED, onInitFragmentLoaded, this);\r\n        eventBus.on(Events.MEDIA_FRAGMENT_LOADED, onMediaFragmentLoaded, this);\r\n        eventBus.on(Events.QUALITY_CHANGE_REQUESTED, onQualityChanged, this);\r\n        eventBus.on(Events.STREAM_COMPLETED, onStreamCompleted, this);\r\n        eventBus.on(Events.PLAYBACK_PLAYING, onPlaybackPlaying, this);\r\n        eventBus.on(Events.PLAYBACK_PROGRESS, onPlaybackProgression, this);\r\n        eventBus.on(Events.PLAYBACK_TIME_UPDATED, onPlaybackProgression, this);\r\n        eventBus.on(Events.PLAYBACK_RATE_CHANGED, onPlaybackRateChanged, this);\r\n        eventBus.on(Events.PLAYBACK_SEEKING, onPlaybackSeeking, this);\r\n        eventBus.on(Events.PLAYBACK_SEEKED, onPlaybackSeeked, this);\r\n        eventBus.on(Events.PLAYBACK_STALLED, onPlaybackStalled, this);\r\n        eventBus.on(Events.WALLCLOCK_TIME_UPDATED, onWallclockTimeUpdated, this);\r\n        eventBus.on(Events.CURRENT_TRACK_CHANGED, onCurrentTrackChanged, this, { priority: EventBus.EVENT_PRIORITY_HIGH });\r\n        eventBus.on(Events.SOURCEBUFFER_REMOVE_COMPLETED, onRemoved, this);\r\n    }\r\n\r\n    function getStreamId() {\r\n        return streamInfo.id;\r\n    }\r\n\r\n    function getType() {\r\n        return type;\r\n    }\r\n\r\n\r\n    function getRepresentationInfo(quality) {\r\n        return adapter.convertDataToRepresentationInfo(representationController.getRepresentationForQuality(quality));\r\n    }\r\n\r\n    function createBuffer(mediaInfoArr, oldBuffers) {\r\n        if (!initCache || !mediaInfoArr) return null;\r\n        const mediaInfo = mediaInfoArr[0];\r\n        if (mediaSource) {\r\n            try {\r\n                if (oldBuffers && oldBuffers[type]) {\r\n                    buffer = SourceBufferSink(context).create(mediaSource, mediaInfo, onAppended.bind(this), oldBuffers[type]);\r\n                } else {\r\n                    buffer = SourceBufferSink(context).create(mediaSource, mediaInfo, onAppended.bind(this), null);\r\n                }\r\n                if (settings.get().streaming.useAppendWindow) {\r\n                    buffer.updateAppendWindow(streamInfo);\r\n                }\r\n                if (typeof buffer.getBuffer().initialize === 'function') {\r\n                    buffer.getBuffer().initialize(type, streamInfo, mediaInfoArr, fragmentModel);\r\n                }\r\n            } catch (e) {\r\n                logger.fatal('Caught error on create SourceBuffer: ' + e);\r\n                errHandler.error(new DashJSError(Errors.MEDIASOURCE_TYPE_UNSUPPORTED_CODE, Errors.MEDIASOURCE_TYPE_UNSUPPORTED_MESSAGE + type));\r\n            }\r\n        } else {\r\n            buffer = PreBufferSink(context).create(onAppended.bind(this));\r\n        }\r\n        updateBufferTimestampOffset(getRepresentationInfo(requiredQuality));\r\n        return buffer;\r\n    }\r\n\r\n    function dischargePreBuffer() {\r\n        if (buffer && dischargeBuffer && typeof dischargeBuffer.discharge === 'function') {\r\n            const ranges = dischargeBuffer.getAllBufferRanges();\r\n\r\n            if (ranges.length > 0) {\r\n                let rangeStr = 'Beginning ' + type + 'PreBuffer discharge, adding buffer for:';\r\n                for (let i = 0; i < ranges.length; i++) {\r\n                    rangeStr += ' start: ' + ranges.start(i) + ', end: ' + ranges.end(i) + ';';\r\n                }\r\n                logger.debug(rangeStr);\r\n            } else {\r\n                logger.debug('PreBuffer discharge requested, but there were no media segments in the PreBuffer.');\r\n            }\r\n\r\n            let chunks = dischargeBuffer.discharge();\r\n            let lastInit = null;\r\n            for (let j = 0; j < chunks.length; j++) {\r\n                const chunk = chunks[j];\r\n                const initChunk = initCache.extract(chunk.streamId, chunk.representationId);\r\n                if (initChunk) {\r\n                    if (lastInit !== initChunk) {\r\n                        buffer.append(initChunk);\r\n                        lastInit = initChunk;\r\n                    }\r\n                    buffer.append(chunk); //TODO Think about supressing buffer events the second time round after a discharge?\r\n                }\r\n            }\r\n\r\n            dischargeBuffer.reset();\r\n            dischargeBuffer = null;\r\n        }\r\n    }\r\n\r\n    function onInitFragmentLoaded(e) {\r\n        logger.info('Init fragment finished loading saving to', type + '\\'s init cache');\r\n        initCache.save(e.chunk);\r\n        logger.debug('Append Init fragment', type, ' with representationId:', e.chunk.representationId, ' and quality:', e.chunk.quality, ', data size:', e.chunk.bytes.byteLength);\r\n        appendToBuffer(e.chunk);\r\n    }\r\n\r\n    function appendInitSegment(representationId) {\r\n        // Get init segment from cache\r\n        const chunk = initCache.extract(streamInfo.id, representationId);\r\n\r\n        if (!chunk) {\r\n            // Init segment not in cache, shall be requested\r\n            return false;\r\n        }\r\n\r\n        // Append init segment into buffer\r\n        logger.info('Append Init fragment', type, ' with representationId:', chunk.representationId, ' and quality:', chunk.quality, ', data size:', chunk.bytes.byteLength);\r\n        appendToBuffer(chunk);\r\n        return true;\r\n    }\r\n\r\n    function onMediaFragmentLoaded(e) {\r\n        const chunk = e.chunk;\r\n\r\n        if (replacingBuffer) {\r\n            mediaChunk = chunk;\r\n            const ranges = buffer && buffer.getAllBufferRanges();\r\n            if (ranges && ranges.length > 0 && playbackController.getTimeToStreamEnd() > settings.get().streaming.stallThreshold) {\r\n                logger.debug('Clearing buffer because track changed - ' + (ranges.end(ranges.length - 1) + BUFFER_END_THRESHOLD));\r\n                clearBuffers([{\r\n                    start: 0,\r\n                    end: ranges.end(ranges.length - 1) + BUFFER_END_THRESHOLD,\r\n                    force: true // Force buffer removal even when buffering is completed and MediaSource is ended\r\n                }]);\r\n            }\r\n        } else {\r\n            appendToBuffer(chunk);\r\n        }\r\n    }\r\n\r\n    function appendToBuffer(chunk) {\r\n        buffer.append(chunk);\r\n\r\n        if (chunk.mediaInfo.type === Constants.VIDEO) {\r\n            triggerEvent(Events.VIDEO_CHUNK_RECEIVED, {chunk: chunk});\r\n        }\r\n    }\r\n\r\n    function showBufferRanges(ranges) {\r\n        if (ranges && ranges.length > 0) {\r\n            for (let i = 0, len = ranges.length; i < len; i++) {\r\n                logger.debug('Buffered range: ' + ranges.start(i) + ' - ' + ranges.end(i) + ', currentTime = ', playbackController.getTime());\r\n            }\r\n        }\r\n    }\r\n\r\n    function onAppended(e) {\r\n        if (e.error) {\r\n            if (e.error.code === QUOTA_EXCEEDED_ERROR_CODE) {\r\n                isQuotaExceeded = true;\r\n                criticalBufferLevel = getTotalBufferedTime() * 0.8;\r\n                logger.warn('Quota exceeded, Critical Buffer: ' + criticalBufferLevel);\r\n\r\n                if (criticalBufferLevel > 0) {\r\n                    // recalculate buffer lengths according to criticalBufferLevel\r\n                    const bufferToKeep = Math.max(0.2 * criticalBufferLevel, 1);\r\n                    const bufferAhead = criticalBufferLevel - bufferToKeep;\r\n                    const bufferTimeAtTopQuality = Math.min(settings.get().streaming.bufferTimeAtTopQuality, bufferAhead * 0.9);\r\n                    const bufferTimeAtTopQualityLongForm = Math.min(settings.get().streaming.bufferTimeAtTopQualityLongForm, bufferAhead * 0.9);\r\n                    const s = {\r\n                        streaming: {\r\n                            bufferToKeep: parseFloat(bufferToKeep.toFixed(5)),\r\n                            bufferTimeAtTopQuality: parseFloat(bufferTimeAtTopQuality.toFixed(5)),\r\n                            bufferTimeAtTopQualityLongForm: parseFloat(bufferTimeAtTopQualityLongForm.toFixed(5))\r\n                        }\r\n                    };\r\n                    settings.update(s);\r\n                }\r\n            }\r\n            if (e.error.code === QUOTA_EXCEEDED_ERROR_CODE || !hasEnoughSpaceToAppend()) {\r\n                logger.warn('Clearing playback buffer to overcome quota exceed situation');\r\n                // Notify Schedulecontroller to stop scheduling until buffer has been pruned\r\n                triggerEvent(Events.QUOTA_EXCEEDED, {criticalBufferLevel: criticalBufferLevel});\r\n                clearBuffers(getClearRanges());\r\n            }\r\n            return;\r\n        }\r\n        isQuotaExceeded = false;\r\n\r\n        appendedBytesInfo = e.chunk;\r\n        if (appendedBytesInfo && !isNaN(appendedBytesInfo.index)) {\r\n            maxAppendedIndex = Math.max(appendedBytesInfo.index, maxAppendedIndex);\r\n            checkIfBufferingCompleted();\r\n        }\r\n\r\n        const ranges = buffer.getAllBufferRanges();\r\n        if (appendedBytesInfo.segmentType === HTTPRequest.MEDIA_SEGMENT_TYPE) {\r\n            showBufferRanges(ranges);\r\n            onPlaybackProgression();\r\n            adjustSeekTarget();\r\n        } else if (replacingBuffer) {\r\n            // When replacing buffer due to switch track, and once new initialization segment has been appended\r\n            // (and previous buffered data removed) then seek stream to current time\r\n            const currentTime = playbackController.getTime();\r\n            logger.debug('AppendToBuffer seek target should be ' + currentTime);\r\n            triggerEvent(Events.SEEK_TARGET, {time: currentTime});\r\n        }\r\n\r\n        if (appendedBytesInfo) {\r\n            triggerEvent(appendedBytesInfo.endFragment ? Events.BYTES_APPENDED_END_FRAGMENT : Events.BYTES_APPENDED, {\r\n                quality: appendedBytesInfo.quality,\r\n                startTime: appendedBytesInfo.start,\r\n                index: appendedBytesInfo.index,\r\n                bufferedRanges: ranges,\r\n                mediaType: type\r\n            });\r\n        }\r\n    }\r\n\r\n    function adjustSeekTarget() {\r\n        // Check buffered data only for audio and video\r\n        if (type !== Constants.AUDIO && type !== Constants.VIDEO) return;\r\n        if (isNaN(seekTarget)) return;\r\n\r\n        // Check if current buffered range already contains seek target (and current video element time)\r\n        const currentTime = playbackController.getTime();\r\n        let range = getRangeAt(seekTarget, 0);\r\n        if (currentTime === seekTarget && range) return;\r\n\r\n        // Get buffered range corresponding to the seek target\r\n        const segmentDuration = representationController.getCurrentRepresentation().segmentDuration;\r\n        range = getRangeAt(seekTarget, segmentDuration);\r\n        if (!range) return;\r\n\r\n        if (Math.abs(currentTime - seekTarget) > segmentDuration) {\r\n            // If current video model time is decorrelated from seek target (and appended buffer) then seek video element\r\n            // (in case of live streams on some browsers/devices for which we can't set video element time at unavalaible range)\r\n\r\n            // Check if appended segment is not anterior from seek target (segments timeline/template tolerance)\r\n            if (seekTarget <= range.end) {\r\n                // Seek video element to seek target or range start if appended buffer starts after seek target (segments timeline/template tolerance)\r\n                playbackController.seek(Math.max(seekTarget, range.start), false, true);\r\n                seekTarget = NaN;\r\n            }\r\n        } else if (currentTime < range.start) {\r\n            // If appended buffer starts after seek target (segments timeline/template tolerance) then seek to range start\r\n            playbackController.seek(range.start, false, true);\r\n            seekTarget = NaN;\r\n        }\r\n    }\r\n\r\n    function onQualityChanged(e) {\r\n        if (requiredQuality === e.newQuality) return;\r\n\r\n        updateBufferTimestampOffset(this.getRepresentationInfo(e.newQuality));\r\n        requiredQuality = e.newQuality;\r\n    }\r\n\r\n    //**********************************************************************\r\n    // START Buffer Level, State & Sufficiency Handling.\r\n    //**********************************************************************\r\n    function onPlaybackSeeking(e) {\r\n        seekTarget = e.seekTime;\r\n        if (isBufferingCompleted) {\r\n            seekClearedBufferingCompleted = true;\r\n            isBufferingCompleted = false;\r\n            //a seek command has occured, reset lastIndex value, it will be set next time that onStreamCompleted will be called.\r\n            lastIndex = Number.POSITIVE_INFINITY;\r\n        }\r\n        if (type !== Constants.FRAGMENTED_TEXT) {\r\n            // remove buffer after seeking operations\r\n            pruneAllSafely();\r\n        } else {\r\n            onPlaybackProgression();\r\n        }\r\n    }\r\n\r\n    function onPlaybackSeeked() {\r\n        seekTarget = NaN;\r\n    }\r\n\r\n    // Prune full buffer but what is around current time position\r\n    function pruneAllSafely() {\r\n        buffer.waitForUpdateEnd(() => {\r\n            const ranges = getAllRangesWithSafetyFactor();\r\n            if (!ranges || ranges.length === 0) {\r\n                onPlaybackProgression();\r\n            }\r\n            clearBuffers(ranges);\r\n        });\r\n    }\r\n\r\n    // Get all buffer ranges but a range around current time position\r\n    function getAllRangesWithSafetyFactor() {\r\n        const clearRanges = [];\r\n        const ranges = buffer.getAllBufferRanges();\r\n        if (!ranges || ranges.length === 0) {\r\n            return clearRanges;\r\n        }\r\n\r\n        const currentTime = playbackController.getTime();\r\n        const endOfBuffer = ranges.end(ranges.length - 1) + BUFFER_END_THRESHOLD;\r\n\r\n        const currentTimeRequest = fragmentModel.getRequests({\r\n            state: FragmentModel.FRAGMENT_MODEL_EXECUTED,\r\n            time: currentTime,\r\n            threshold: BUFFER_RANGE_CALCULATION_THRESHOLD\r\n        })[0];\r\n\r\n        // There is no request in current time position yet. Let's remove everything\r\n        if (!currentTimeRequest) {\r\n            logger.debug('getAllRangesWithSafetyFactor - No request found in current time position, removing full buffer 0 -', endOfBuffer);\r\n            clearRanges.push({\r\n                start: 0,\r\n                end: endOfBuffer\r\n            });\r\n        } else {\r\n            // Build buffer behind range. To avoid pruning time around current time position,\r\n            // we include fragment right behind the one in current time position\r\n            const behindRange = {\r\n                start: 0,\r\n                end: currentTimeRequest.startTime - settings.get().streaming.stallThreshold\r\n            };\r\n            const prevReq = fragmentModel.getRequests({\r\n                state: FragmentModel.FRAGMENT_MODEL_EXECUTED,\r\n                time: currentTimeRequest.startTime - (currentTimeRequest.duration / 2),\r\n                threshold: BUFFER_RANGE_CALCULATION_THRESHOLD\r\n            })[0];\r\n            if (prevReq && prevReq.startTime != currentTimeRequest.startTime) {\r\n                behindRange.end = prevReq.startTime;\r\n            }\r\n            if (behindRange.start < behindRange.end && behindRange.end > ranges.start(0)) {\r\n                clearRanges.push(behindRange);\r\n            }\r\n\r\n            // Build buffer ahead range. To avoid pruning time around current time position,\r\n            // we include fragment right after the one in current time position\r\n            const aheadRange = {\r\n                start: currentTimeRequest.startTime + currentTimeRequest.duration + settings.get().streaming.stallThreshold,\r\n                end: endOfBuffer\r\n            };\r\n            const nextReq = fragmentModel.getRequests({\r\n                state: FragmentModel.FRAGMENT_MODEL_EXECUTED,\r\n                time: currentTimeRequest.startTime + currentTimeRequest.duration + settings.get().streaming.stallThreshold,\r\n                threshold: BUFFER_RANGE_CALCULATION_THRESHOLD\r\n            })[0];\r\n            if (nextReq && nextReq.startTime !== currentTimeRequest.startTime) {\r\n                aheadRange.start = nextReq.startTime + nextReq.duration + settings.get().streaming.stallThreshold;\r\n            }\r\n            if (aheadRange.start < aheadRange.end && aheadRange.start < endOfBuffer) {\r\n                clearRanges.push(aheadRange);\r\n            }\r\n        }\r\n\r\n        return clearRanges;\r\n    }\r\n\r\n    function getWorkingTime() {\r\n        return isNaN(seekTarget) ? playbackController.getTime() : seekTarget;\r\n    }\r\n\r\n    function onPlaybackProgression() {\r\n        if (!replacingBuffer || (type === Constants.FRAGMENTED_TEXT && textController.isTextEnabled())) {\r\n            updateBufferLevel();\r\n        }\r\n    }\r\n\r\n    function onPlaybackStalled() {\r\n        checkIfSufficientBuffer();\r\n    }\r\n\r\n    function onPlaybackPlaying() {\r\n        seekTarget = NaN;\r\n        checkIfSufficientBuffer();\r\n    }\r\n\r\n    function getRangeAt(time, tolerance) {\r\n        const ranges = buffer.getAllBufferRanges();\r\n        let start = 0;\r\n        let end = 0;\r\n        let firstStart = null;\r\n        let lastEnd = null;\r\n        let gap = 0;\r\n        let len,\r\n            i;\r\n\r\n        const toler = !isNaN(tolerance) ? tolerance : 0.15;\r\n\r\n        if (ranges !== null && ranges !== undefined) {\r\n            for (i = 0, len = ranges.length; i < len; i++) {\r\n                start = ranges.start(i);\r\n                end = ranges.end(i);\r\n                if (firstStart === null) {\r\n                    gap = Math.abs(start - time);\r\n                    if (time >= start && time < end) {\r\n                        // start the range\r\n                        firstStart = start;\r\n                        lastEnd = end;\r\n                    } else if (gap <= toler) {\r\n                        // start the range even though the buffer does not contain time 0\r\n                        firstStart = start;\r\n                        lastEnd = end;\r\n                    }\r\n                } else {\r\n                    gap = start - lastEnd;\r\n                    if (gap <= toler) {\r\n                        // the discontinuity is smaller than the tolerance, combine the ranges\r\n                        lastEnd = end;\r\n                    } else {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (firstStart !== null) {\r\n                return {\r\n                    start: firstStart,\r\n                    end: lastEnd\r\n                };\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    function getBufferLength(time, tolerance) {\r\n        let range,\r\n            length;\r\n\r\n        // Consider gap/discontinuity limit as tolerance\r\n        if (settings.get().streaming.jumpGaps) {\r\n            tolerance = settings.get().streaming.smallGapLimit;\r\n        }\r\n\r\n        range = getRangeAt(time, tolerance);\r\n\r\n        if (range === null) {\r\n            length = 0;\r\n        } else {\r\n            length = range.end - time;\r\n        }\r\n\r\n        return length;\r\n    }\r\n\r\n    function updateBufferLevel() {\r\n        if (playbackController) {\r\n            bufferLevel = getBufferLength(getWorkingTime() || 0);\r\n            triggerEvent(Events.BUFFER_LEVEL_UPDATED, {bufferLevel: bufferLevel});\r\n            checkIfSufficientBuffer();\r\n        }\r\n    }\r\n\r\n    function checkIfBufferingCompleted() {\r\n        const isLastIdxAppended = maxAppendedIndex >= lastIndex - 1; // Handles 0 and non 0 based request index\r\n        if (isLastIdxAppended && !isBufferingCompleted && buffer.discharge === undefined) {\r\n            isBufferingCompleted = true;\r\n            logger.debug('checkIfBufferingCompleted trigger BUFFERING_COMPLETED for ' + type);\r\n            triggerEvent(Events.BUFFERING_COMPLETED);\r\n        }\r\n    }\r\n\r\n    function checkIfSufficientBuffer() {\r\n        // No need to check buffer if type is not audio or video (for example if several errors occur during text parsing, so that the buffer cannot be filled, no error must occur on video playback)\r\n        if (type !== Constants.AUDIO && type !== Constants.VIDEO) return;\r\n\r\n        if (seekClearedBufferingCompleted && !isBufferingCompleted && bufferLevel > 0 && playbackController && playbackController.getTimeToStreamEnd() - bufferLevel < BUFFERING_COMPLETED_THRESHOLD) {\r\n            seekClearedBufferingCompleted = false;\r\n            isBufferingCompleted = true;\r\n            logger.debug('checkIfSufficientBuffer trigger BUFFERING_COMPLETED for type ' + type);\r\n            triggerEvent(Events.BUFFERING_COMPLETED);\r\n        }\r\n\r\n        // When the player is working in low latency mode, the buffer is often below settings.get().streaming.stallThreshold.\r\n        // So, when in low latency mode, change dash.js behavior so it notifies a stall just when\r\n        // buffer reach 0 seconds\r\n        if (((!settings.get().streaming.lowLatencyEnabled && bufferLevel < settings.get().streaming.stallThreshold) || bufferLevel === 0) && !isBufferingCompleted) {\r\n            notifyBufferStateChanged(MetricsConstants.BUFFER_EMPTY);\r\n        } else {\r\n            if (isBufferingCompleted || bufferLevel >= streamInfo.manifestInfo.minBufferTime) {\r\n                notifyBufferStateChanged(MetricsConstants.BUFFER_LOADED);\r\n            }\r\n        }\r\n    }\r\n\r\n    function notifyBufferStateChanged(state) {\r\n        if (bufferState === state ||\r\n            (state === MetricsConstants.BUFFER_EMPTY && playbackController.getTime() === 0) || // Don't trigger BUFFER_EMPTY if it's initial loading\r\n            (type === Constants.FRAGMENTED_TEXT && !textController.isTextEnabled())) {\r\n            return;\r\n        }\r\n\r\n        bufferState = state;\r\n\r\n        triggerEvent(Events.BUFFER_LEVEL_STATE_CHANGED, {state: state});\r\n        triggerEvent(state === MetricsConstants.BUFFER_LOADED ? Events.BUFFER_LOADED : Events.BUFFER_EMPTY);\r\n        logger.debug(state === MetricsConstants.BUFFER_LOADED ? 'Got enough buffer to start' : 'Waiting for more buffer before starting playback');\r\n    }\r\n\r\n    /* prune buffer on our own in background to avoid browsers pruning buffer silently */\r\n    function pruneBuffer() {\r\n        if (!buffer || type === Constants.FRAGMENTED_TEXT) {\r\n            return;\r\n        }\r\n\r\n        if (!isBufferingCompleted) {\r\n            clearBuffers(getClearRanges());\r\n        }\r\n    }\r\n\r\n    function getClearRanges() {\r\n        const clearRanges = [];\r\n        const ranges = buffer.getAllBufferRanges();\r\n        if (!ranges || ranges.length === 0) {\r\n            return clearRanges;\r\n        }\r\n\r\n        const currentTime = playbackController.getTime();\r\n        let startRangeToKeep = Math.max(0, currentTime - settings.get().streaming.bufferToKeep);\r\n\r\n        const currentTimeRequest = fragmentModel.getRequests({\r\n            state: FragmentModel.FRAGMENT_MODEL_EXECUTED,\r\n            time: currentTime,\r\n            threshold: BUFFER_RANGE_CALCULATION_THRESHOLD\r\n        })[0];\r\n\r\n        // Ensure we keep full range of current fragment\r\n        if (currentTimeRequest) {\r\n            startRangeToKeep = Math.min(currentTimeRequest.startTime, startRangeToKeep);\r\n        } else if (currentTime === 0 && playbackController.getIsDynamic()) {\r\n            // Don't prune before the live stream starts, it messes with low latency\r\n            return [];\r\n        }\r\n\r\n        if (ranges.start(0) <= startRangeToKeep) {\r\n            const behindRange = {\r\n                start: 0,\r\n                end: startRangeToKeep\r\n            };\r\n            for (let i = 0; i < ranges.length && ranges.end(i) <= startRangeToKeep; i++) {\r\n                behindRange.end = ranges.end(i);\r\n            }\r\n            if (behindRange.start < behindRange.end) {\r\n                clearRanges.push(behindRange);\r\n            }\r\n        }\r\n\r\n        return clearRanges;\r\n    }\r\n\r\n    function clearBuffers(ranges) {\r\n        if (!ranges || !buffer || ranges.length === 0) return;\r\n\r\n        pendingPruningRanges.push.apply(pendingPruningRanges, ranges);\r\n        if (isPruningInProgress) {\r\n            return;\r\n        }\r\n\r\n        clearNextRange();\r\n    }\r\n\r\n    function clearNextRange() {\r\n        // If there's nothing to prune reset state\r\n        if (pendingPruningRanges.length === 0 || !buffer) {\r\n            logger.debug('Nothing to prune, halt pruning');\r\n            pendingPruningRanges = [];\r\n            isPruningInProgress = false;\r\n            return;\r\n        }\r\n\r\n        const sourceBuffer = buffer.getBuffer();\r\n        // If there's nothing buffered any pruning is invalid, so reset our state\r\n        if (!sourceBuffer || !sourceBuffer.buffered || sourceBuffer.buffered.length === 0) {\r\n            logger.debug('SourceBuffer is empty (or does not exist), halt pruning');\r\n            pendingPruningRanges = [];\r\n            isPruningInProgress = false;\r\n            return;\r\n        }\r\n\r\n        const range = pendingPruningRanges.shift();\r\n        logger.debug('Removing buffer from:', range.start, 'to', range.end);\r\n        isPruningInProgress = true;\r\n\r\n        // If removing buffer ahead current playback position, update maxAppendedIndex\r\n        const currentTime = playbackController.getTime();\r\n        if (currentTime < range.end) {\r\n            isBufferingCompleted = false;\r\n            maxAppendedIndex = 0;\r\n        }\r\n\r\n        buffer.remove(range.start, range.end, range.force);\r\n    }\r\n\r\n    function onRemoved(e) {\r\n        if (buffer !== e.buffer) return;\r\n\r\n        logger.debug('onRemoved buffer from:', e.from, 'to', e.to);\r\n\r\n        const ranges = buffer.getAllBufferRanges();\r\n        showBufferRanges(ranges);\r\n\r\n        if (pendingPruningRanges.length === 0) {\r\n            isPruningInProgress = false;\r\n        }\r\n\r\n        if (e.unintended) {\r\n            logger.warn('Detected unintended removal from:', e.from, 'to', e.to, 'setting index handler time to', e.from);\r\n            triggerEvent(Events.SEEK_TARGET, {time: e.from, mediaType: type, streamId: streamInfo.id});\r\n        }\r\n\r\n        if (isPruningInProgress) {\r\n            clearNextRange();\r\n        } else {\r\n            if (!replacingBuffer) {\r\n                updateBufferLevel();\r\n            } else {\r\n                replacingBuffer = false;\r\n                if (mediaChunk) {\r\n                    appendToBuffer(mediaChunk);\r\n                }\r\n            }\r\n            triggerEvent(Events.BUFFER_CLEARED, {\r\n                from: e.from,\r\n                to: e.to,\r\n                unintended: e.unintended,\r\n                hasEnoughSpaceToAppend: hasEnoughSpaceToAppend(),\r\n                quotaExceeded: isQuotaExceeded\r\n            });\r\n        }\r\n    }\r\n\r\n    function updateBufferTimestampOffset(representationInfo) {\r\n        if (!representationInfo || representationInfo.MSETimeOffset === undefined) return;\r\n        // Each track can have its own @presentationTimeOffset, so we should set the offset\r\n        // if it has changed after switching the quality or updating an mpd\r\n        if (buffer && buffer.updateTimestampOffset) {\r\n            buffer.updateTimestampOffset(representationInfo.MSETimeOffset);\r\n        }\r\n    }\r\n\r\n    function updateAppendWindow() {\r\n        if (buffer && !isBufferingCompleted) {\r\n            buffer.updateAppendWindow(streamInfo);\r\n        }\r\n    }\r\n\r\n    function onDataUpdateCompleted(e) {\r\n        if (e.error || isBufferingCompleted) return;\r\n        updateBufferTimestampOffset(e.currentRepresentation);\r\n    }\r\n\r\n    function onStreamCompleted(e) {\r\n        lastIndex = e.request.index;\r\n        checkIfBufferingCompleted();\r\n    }\r\n\r\n    function onCurrentTrackChanged(e) {\r\n        if (e.newMediaInfo.streamInfo.id !== streamInfo.id || e.newMediaInfo.type !== type) return;\r\n\r\n        const ranges = buffer && buffer.getAllBufferRanges();\r\n        if (!ranges) return;\r\n\r\n        logger.info('Track change asked');\r\n        if (mediaController.getSwitchMode(type) === Constants.TRACK_SWITCH_MODE_ALWAYS_REPLACE) {\r\n            if (ranges && ranges.length > 0 && playbackController.getTimeToStreamEnd() > settings.get().streaming.stallThreshold) {\r\n                isBufferingCompleted = false;\r\n                lastIndex = Number.POSITIVE_INFINITY;\r\n            }\r\n        }\r\n    }\r\n\r\n    function onWallclockTimeUpdated() {\r\n        wallclockTicked++;\r\n        const secondsElapsed = (wallclockTicked * (settings.get().streaming.wallclockTimeUpdateInterval / 1000));\r\n        if ((secondsElapsed >= settings.get().streaming.bufferPruningInterval)) {\r\n            wallclockTicked = 0;\r\n            pruneBuffer();\r\n        }\r\n    }\r\n\r\n    function onPlaybackRateChanged() {\r\n        checkIfSufficientBuffer();\r\n    }\r\n\r\n    function getBuffer() {\r\n        return buffer;\r\n    }\r\n\r\n    function setBuffer(newBuffer) {\r\n        buffer = newBuffer;\r\n    }\r\n\r\n    function getBufferLevel() {\r\n        return bufferLevel;\r\n    }\r\n\r\n    function setMediaSource(value, mediaInfo) {\r\n        mediaSource = value;\r\n        if (buffer && mediaInfo) { //if we have a prebuffer, we should prepare to discharge it, and make a new sourceBuffer ready\r\n            if (typeof buffer.discharge === 'function') {\r\n                dischargeBuffer = buffer;\r\n                createBuffer(mediaInfo);\r\n            }\r\n        }\r\n    }\r\n\r\n    function getMediaSource() {\r\n        return mediaSource;\r\n    }\r\n\r\n    function replaceBuffer() {\r\n        replacingBuffer = true;\r\n    }\r\n\r\n    function getIsBufferingCompleted() {\r\n        return isBufferingCompleted;\r\n    }\r\n\r\n    function getIsPruningInProgress() {\r\n        return isPruningInProgress;\r\n    }\r\n\r\n    function getTotalBufferedTime() {\r\n        const ranges = buffer.getAllBufferRanges();\r\n        let totalBufferedTime = 0;\r\n        let ln,\r\n            i;\r\n\r\n        if (!ranges) return totalBufferedTime;\r\n\r\n        for (i = 0, ln = ranges.length; i < ln; i++) {\r\n            totalBufferedTime += ranges.end(i) - ranges.start(i);\r\n        }\r\n\r\n        return totalBufferedTime;\r\n    }\r\n\r\n    function hasEnoughSpaceToAppend() {\r\n        const totalBufferedTime = getTotalBufferedTime();\r\n        return (totalBufferedTime < criticalBufferLevel);\r\n    }\r\n\r\n    function triggerEvent(eventType, data) {\r\n        let payload = data || {};\r\n        eventBus.trigger(eventType, payload, { streamId: streamInfo.id, mediaType: type });\r\n    }\r\n\r\n    function resetInitialSettings(errored, keepBuffers) {\r\n        criticalBufferLevel = Number.POSITIVE_INFINITY;\r\n        bufferState = undefined;\r\n        requiredQuality = AbrController.QUALITY_DEFAULT;\r\n        lastIndex = Number.POSITIVE_INFINITY;\r\n        maxAppendedIndex = 0;\r\n        appendedBytesInfo = null;\r\n        isBufferingCompleted = false;\r\n        isPruningInProgress = false;\r\n        isQuotaExceeded = false;\r\n        seekClearedBufferingCompleted = false;\r\n        bufferLevel = 0;\r\n        wallclockTicked = 0;\r\n        pendingPruningRanges = [];\r\n        seekTarget = NaN;\r\n\r\n        if (buffer) {\r\n            if (!errored) {\r\n                buffer.abort();\r\n            }\r\n            buffer.reset(keepBuffers);\r\n            buffer = null;\r\n        }\r\n\r\n        replacingBuffer = false;\r\n    }\r\n\r\n    function reset(errored, keepBuffers) {\r\n        eventBus.off(Events.DATA_UPDATE_COMPLETED, onDataUpdateCompleted, this);\r\n        eventBus.off(Events.INIT_FRAGMENT_LOADED, onInitFragmentLoaded, this);\r\n        eventBus.off(Events.MEDIA_FRAGMENT_LOADED, onMediaFragmentLoaded, this);\r\n        eventBus.off(Events.QUALITY_CHANGE_REQUESTED, onQualityChanged, this);\r\n        eventBus.off(Events.STREAM_COMPLETED, onStreamCompleted, this);\r\n        eventBus.off(Events.PLAYBACK_PLAYING, onPlaybackPlaying, this);\r\n        eventBus.off(Events.PLAYBACK_PROGRESS, onPlaybackProgression, this);\r\n        eventBus.off(Events.PLAYBACK_TIME_UPDATED, onPlaybackProgression, this);\r\n        eventBus.off(Events.PLAYBACK_RATE_CHANGED, onPlaybackRateChanged, this);\r\n        eventBus.off(Events.PLAYBACK_SEEKING, onPlaybackSeeking, this);\r\n        eventBus.off(Events.PLAYBACK_SEEKED, onPlaybackSeeked, this);\r\n        eventBus.off(Events.PLAYBACK_STALLED, onPlaybackStalled, this);\r\n        eventBus.off(Events.WALLCLOCK_TIME_UPDATED, onWallclockTimeUpdated, this);\r\n        eventBus.off(Events.CURRENT_TRACK_CHANGED, onCurrentTrackChanged, this);\r\n        eventBus.off(Events.SOURCEBUFFER_REMOVE_COMPLETED, onRemoved, this);\r\n\r\n        resetInitialSettings(errored, keepBuffers);\r\n    }\r\n\r\n    instance = {\r\n        initialize,\r\n        getStreamId,\r\n        getType,\r\n        getBufferControllerType,\r\n        getRepresentationInfo,\r\n        createBuffer,\r\n        dischargePreBuffer,\r\n        getBuffer,\r\n        setBuffer,\r\n        getBufferLevel,\r\n        getRangeAt,\r\n        setMediaSource,\r\n        getMediaSource,\r\n        appendInitSegment,\r\n        replaceBuffer,\r\n        getIsBufferingCompleted,\r\n        getIsPruningInProgress,\r\n        reset,\r\n        updateAppendWindow\r\n    };\r\n\r\n    setup();\r\n    return instance;\r\n}\r\n\r\nBufferController.__dashjs_factory_name = BUFFER_CONTROLLER_TYPE;\r\nexport default FactoryMaker.getClassFactory(BufferController);\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\nimport Debug from '../../core/Debug';\r\nimport EventBus from '../../core/EventBus';\r\nimport MediaPlayerEvents from '../../streaming/MediaPlayerEvents';\r\nimport XHRLoader from '../net/XHRLoader';\r\n\r\nfunction EventController() {\r\n\r\n    const MPD_RELOAD_SCHEME = 'urn:mpeg:dash:event:2012';\r\n    const MPD_RELOAD_VALUE = 1;\r\n\r\n    const MPD_CALLBACK_SCHEME = 'urn:mpeg:dash:event:callback:2015';\r\n    const MPD_CALLBACK_VALUE = 1;\r\n\r\n    const REFRESH_DELAY = 100;\r\n    const REMAINING_EVENTS_THRESHOLD = 300;\r\n\r\n    const context = this.context;\r\n    const eventBus = EventBus(context).getInstance();\r\n\r\n    let instance,\r\n        logger,\r\n        inlineEvents, // Holds all Inline Events not triggered yet\r\n        inbandEvents, // Holds all Inband Events not triggered yet\r\n        activeEvents, // Holds all Events currently running\r\n        eventInterval, // variable holding the setInterval\r\n        lastEventTimerCall,\r\n        manifestUpdater,\r\n        playbackController,\r\n        eventHandlingInProgress,\r\n        isStarted;\r\n\r\n    function setup() {\r\n        logger = Debug(context).getInstance().getLogger(instance);\r\n        _resetInitialSettings();\r\n    }\r\n\r\n    function checkConfig() {\r\n        if (!manifestUpdater || !playbackController) {\r\n            throw new Error('setConfig function has to be called previously');\r\n        }\r\n    }\r\n\r\n    function _resetInitialSettings() {\r\n        isStarted = false;\r\n        inlineEvents = {};\r\n        inbandEvents = {};\r\n        activeEvents = {};\r\n        eventInterval = null;\r\n        eventHandlingInProgress = false;\r\n        lastEventTimerCall = Date.now() / 1000;\r\n    }\r\n\r\n    function _stop() {\r\n        try {\r\n            if (eventInterval !== null && isStarted) {\r\n                clearInterval(eventInterval);\r\n                eventInterval = null;\r\n                isStarted = false;\r\n                _onStopEventController();\r\n            }\r\n        } catch (e) {\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    function start() {\r\n        try {\r\n            checkConfig();\r\n            logger.debug('Start Event Controller');\r\n            if (!isStarted && !isNaN(REFRESH_DELAY)) {\r\n                isStarted = true;\r\n                eventInterval = setInterval(_onEventTimer, REFRESH_DELAY);\r\n            }\r\n        } catch (e) {\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add events to the eventList. Events that are not in the mpd anymore but not triggered yet will still be deleted\r\n     * @param {Array.<Object>} values\r\n     */\r\n    function addInlineEvents(values) {\r\n        try {\r\n            checkConfig();\r\n\r\n            if (values) {\r\n                for (let i = 0; i < values.length; i++) {\r\n                    let event = values[i];\r\n                    logger.debug('Add inline event with id ' + event.id);\r\n\r\n                    // If we see the event for the first time we trigger it in onReceive mode\r\n                    if (!inlineEvents[event.id]) {\r\n                        _startEvent(event.id, event, values, MediaPlayerEvents.EVENT_MODE_ON_RECEIVE);\r\n                    }\r\n\r\n                    inlineEvents[event.id] = event;\r\n                }\r\n            }\r\n            logger.debug(`Added ${values.length} inline events`);\r\n        } catch (e) {\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * i.e. processing of any one event message box with the same id is sufficient\r\n     * @param {Array.<Object>} values\r\n     */\r\n    function addInbandEvents(values) {\r\n        try {\r\n            checkConfig();\r\n\r\n            for (let i = 0; i < values.length; i++) {\r\n                let event = values[i];\r\n                if (!(event.id in inbandEvents)) {\r\n                    if (event.eventStream.schemeIdUri === MPD_RELOAD_SCHEME && inbandEvents[event.id] === undefined) {\r\n                        _handleManifestReloadEvent(event);\r\n                    }\r\n                    inbandEvents[event.id] = event;\r\n                    logger.debug('Add inband event with id ' + event.id);\r\n                    _startEvent(event.id, event, values, MediaPlayerEvents.EVENT_MODE_ON_RECEIVE);\r\n                } else {\r\n                    logger.debug('Repeated event with id ' + event.id);\r\n                }\r\n            }\r\n            _onEventTimer();\r\n        } catch (e) {\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    function _handleManifestReloadEvent(event) {\r\n        try {\r\n            if (event.eventStream.value == MPD_RELOAD_VALUE) {\r\n                const validUntil = event.calculatedPresentationTime;\r\n                let newDuration;\r\n                if (event.calculatedPresentationTime == 0xFFFFFFFF) {//0xFF... means remaining duration unknown\r\n                    newDuration = NaN;\r\n                } else {\r\n                    newDuration = event.calculatedPresentationTime + event.duration;\r\n                }\r\n                //logger.info('Manifest validity changed: Valid until: ' + validUntil + '; remaining duration: ' + newDuration);\r\n                eventBus.trigger(MediaPlayerEvents.MANIFEST_VALIDITY_CHANGED, {\r\n                    id: event.id,\r\n                    validUntil: validUntil,\r\n                    newDuration: newDuration,\r\n                    newManifestValidAfter: NaN //event.message_data - this is an arraybuffer with a timestring in it, but not used yet\r\n                }, {\r\n                    mode: MediaPlayerEvents.EVENT_MODE_ON_START\r\n                });\r\n            }\r\n        } catch (e) {\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Remove expired events from the list\r\n     */\r\n    function _removeEvents() {\r\n        try {\r\n            if (activeEvents) {\r\n                let currentVideoTime = playbackController.getTime();\r\n                let eventIds = Object.keys(activeEvents);\r\n\r\n                for (let i = 0; i < eventIds.length; i++) {\r\n                    let eventId = eventIds[i];\r\n                    let event = activeEvents[eventId];\r\n                    if (event !== null && event.duration + event.calculatedPresentationTime < currentVideoTime) {\r\n                        logger.debug('Remove Event ' + eventId + ' at time ' + currentVideoTime);\r\n                        event = null;\r\n                        delete activeEvents[eventId];\r\n                    }\r\n                }\r\n            }\r\n        } catch (e) {\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Iterate through the eventList and trigger/remove the events\r\n     */\r\n    function _onEventTimer() {\r\n        try {\r\n            if (!eventHandlingInProgress) {\r\n                eventHandlingInProgress = true;\r\n                const currentVideoTime = playbackController.getTime();\r\n                let presentationTimeThreshold = (currentVideoTime - lastEventTimerCall);\r\n\r\n                // For dynamic streams lastEventTimeCall will be large in the first iteration. Avoid firing all events at once.\r\n                presentationTimeThreshold = lastEventTimerCall > 0 ? Math.max(0, presentationTimeThreshold) : 0;\r\n\r\n                _triggerEvents(inbandEvents, presentationTimeThreshold, currentVideoTime);\r\n                _triggerEvents(inlineEvents, presentationTimeThreshold, currentVideoTime);\r\n                _removeEvents();\r\n\r\n                lastEventTimerCall = currentVideoTime;\r\n                eventHandlingInProgress = false;\r\n            }\r\n        } catch (e) {\r\n            eventHandlingInProgress = false;\r\n        }\r\n    }\r\n\r\n    function _onStopEventController() {\r\n        try {\r\n            // EventController might be stopped before the period is over. Before we stop the event controller we check for events that needs to be triggered at the period boundary.\r\n            _triggerRemainingEvents(inbandEvents);\r\n            _triggerRemainingEvents(inlineEvents);\r\n        } catch (e) {\r\n\r\n        }\r\n    }\r\n\r\n    function _triggerEvents(events, presentationTimeThreshold, currentVideoTime) {\r\n        try {\r\n            if (events) {\r\n                let eventIds = Object.keys(events);\r\n\r\n                for (let i = 0; i < eventIds.length; i++) {\r\n                    let eventId = eventIds[i];\r\n                    let event = events[eventId];\r\n\r\n                    if (event !== undefined) {\r\n                        const duration = !isNaN(event.duration) ? event.duration : 0;\r\n                        // The event is either about to start or has already been started and we are within its duration\r\n                        if ((event.calculatedPresentationTime <= currentVideoTime && event.calculatedPresentationTime + presentationTimeThreshold + duration >= currentVideoTime)) {\r\n                            _startEvent(eventId, event, events, MediaPlayerEvents.EVENT_MODE_ON_START);\r\n                        } else if (_eventHasExpired(currentVideoTime, duration + presentationTimeThreshold, event.calculatedPresentationTime) || _eventIsInvalid(event)) {\r\n                            logger.debug(`Deleting event ${eventId} as it is expired or invalid`);\r\n                            delete events[eventId];\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } catch (e) {\r\n        }\r\n    }\r\n\r\n    function _eventHasExpired(currentVideoTime, threshold, calculatedPresentationTimeInSeconds) {\r\n        try {\r\n            return currentVideoTime - threshold > calculatedPresentationTimeInSeconds;\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function _eventIsInvalid(event) {\r\n        try {\r\n            const periodEndTime = event.eventStream.period.start + event.eventStream.period.duration;\r\n\r\n            return event.calculatedPresentationTime  > periodEndTime;\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function _triggerRemainingEvents(events) {\r\n        try {\r\n            const eventIds = Object.keys(events);\r\n            const currentTime = playbackController.getTime();\r\n\r\n            if (!eventIds || eventIds.length === 0) {\r\n                return;\r\n            }\r\n\r\n            const periodDuration = events[eventIds[0]].eventStream && events[eventIds[0]].eventStream.period && !isNaN(events[eventIds[0]].eventStream.period.duration) ? events[eventIds[0]].eventStream.period.duration : NaN;\r\n            const periodStart = events[eventIds[0]].eventStream && events[eventIds[0]].eventStream.period && !isNaN(events[eventIds[0]].eventStream.period.start) ? events[eventIds[0]].eventStream.period.start : NaN;\r\n\r\n            if (isNaN(periodDuration) || isNaN(periodStart)) {\r\n                return;\r\n            }\r\n\r\n            eventIds.forEach((eventId) => {\r\n                const event = events[eventId];\r\n                const calculatedPresentationTimeInSeconds = event.calculatedPresentationTime;\r\n\r\n                if (Math.abs(calculatedPresentationTimeInSeconds - currentTime) < REMAINING_EVENTS_THRESHOLD) {\r\n                    _startEvent(eventId, event, events, MediaPlayerEvents.EVENT_MODE_ON_START);\r\n                }\r\n            });\r\n        } catch (e) {\r\n\r\n        }\r\n    }\r\n\r\n    function _startEvent(eventId, event, events, mode) {\r\n        try {\r\n            const currentVideoTime = playbackController.getTime();\r\n\r\n            if (mode === MediaPlayerEvents.EVENT_MODE_ON_RECEIVE) {\r\n                logger.debug(`Received event ${eventId}`);\r\n                eventBus.trigger(event.eventStream.schemeIdUri, { event: event }, { mode });\r\n                return;\r\n            }\r\n\r\n            if (event.duration > 0) {\r\n                activeEvents[eventId] = event;\r\n            }\r\n\r\n            if (event.eventStream.schemeIdUri === MPD_RELOAD_SCHEME && event.eventStream.value === MPD_RELOAD_VALUE) {\r\n                if (event.duration !== 0 || event.presentationTimeDelta !== 0) { //If both are set to zero, it indicates the media is over at this point. Don't reload the manifest.\r\n                    logger.debug(`Starting manifest refresh event ${eventId} at ${currentVideoTime}`);\r\n                    _refreshManifest();\r\n                }\r\n            } else if (event.eventStream.schemeIdUri === MPD_CALLBACK_SCHEME && event.eventStream.value === MPD_CALLBACK_VALUE) {\r\n                logger.debug(`Starting callback event ${eventId} at ${currentVideoTime}`);\r\n                _sendCallbackRequest(event.messageData);\r\n            } else {\r\n                logger.debug(`Starting event ${eventId} at ${currentVideoTime}`);\r\n                eventBus.trigger(event.eventStream.schemeIdUri, { event: event }, { mode });\r\n            }\r\n\r\n            delete events[eventId];\r\n\r\n        } catch (e) {\r\n        }\r\n    }\r\n\r\n    function _refreshManifest() {\r\n        try {\r\n            checkConfig();\r\n            manifestUpdater.refreshManifest();\r\n        } catch (e) {\r\n        }\r\n    }\r\n\r\n    function _sendCallbackRequest(url) {\r\n        try {\r\n            let loader = XHRLoader(context).create({});\r\n            loader.load({\r\n                method: 'get',\r\n                url: url,\r\n                request: {\r\n                    responseType: 'arraybuffer'\r\n                }\r\n            });\r\n        } catch (e) {\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    function setConfig(config) {\r\n        try {\r\n            if (!config) {\r\n                return;\r\n            }\r\n\r\n            if (config.manifestUpdater) {\r\n                manifestUpdater = config.manifestUpdater;\r\n            }\r\n\r\n            if (config.playbackController) {\r\n                playbackController = config.playbackController;\r\n            }\r\n        } catch (e) {\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    function reset() {\r\n        _stop();\r\n        _resetInitialSettings();\r\n    }\r\n\r\n    instance = {\r\n        addInlineEvents,\r\n        addInbandEvents,\r\n        start,\r\n        setConfig,\r\n        reset\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\nEventController.__dashjs_factory_name = 'EventController';\r\nexport default FactoryMaker.getSingletonFactory(EventController);\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport Constants from '../constants/Constants';\r\nimport DataChunk from '../vo/DataChunk';\r\nimport FragmentModel from '../models/FragmentModel';\r\nimport FragmentLoader from '../FragmentLoader';\r\nimport RequestModifier from '../utils/RequestModifier';\r\nimport EventBus from '../../core/EventBus';\r\nimport Events from '../../core/events/Events';\r\nimport Errors from '../../core/errors/Errors';\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\nimport Debug from '../../core/Debug';\r\n\r\nfunction FragmentController( config ) {\r\n\r\n    config = config || {};\r\n    const context = this.context;\r\n    const eventBus = EventBus(context).getInstance();\r\n\r\n    const errHandler = config.errHandler;\r\n    const mediaPlayerModel = config.mediaPlayerModel;\r\n    const dashMetrics = config.dashMetrics;\r\n    const debug = Debug(context).getInstance();\r\n    const streamInfo = config.streamInfo;\r\n\r\n    let instance,\r\n        logger,\r\n        fragmentModels;\r\n\r\n    function setup() {\r\n        logger = debug.getLogger(instance);\r\n        resetInitialSettings();\r\n        eventBus.on(Events.FRAGMENT_LOADING_COMPLETED, onFragmentLoadingCompleted, instance);\r\n        eventBus.on(Events.FRAGMENT_LOADING_PROGRESS, onFragmentLoadingCompleted, instance);\r\n    }\r\n\r\n    function getStreamId() {\r\n        return streamInfo.id;\r\n    }\r\n\r\n    function getModel(type) {\r\n        let model = fragmentModels[type];\r\n        if (!model) {\r\n            model = FragmentModel(context).create({\r\n                streamInfo: streamInfo,\r\n                type: type,\r\n                dashMetrics: dashMetrics,\r\n                fragmentLoader: FragmentLoader(context).create({\r\n                    dashMetrics: dashMetrics,\r\n                    mediaPlayerModel: mediaPlayerModel,\r\n                    errHandler: errHandler,\r\n                    requestModifier: RequestModifier(context).getInstance(),\r\n                    settings: config.settings,\r\n                    boxParser: config.boxParser,\r\n                    eventBus: eventBus,\r\n                    events: Events,\r\n                    errors: Errors,\r\n                    dashConstants: config.dashConstants,\r\n                    urlUtils: config.urlUtils\r\n                }),\r\n                debug: debug,\r\n                eventBus: eventBus,\r\n                events: Events\r\n            });\r\n\r\n            fragmentModels[type] = model;\r\n        }\r\n\r\n        return model;\r\n    }\r\n\r\n    function resetInitialSettings() {\r\n        for (let model in fragmentModels) {\r\n            fragmentModels[model].reset();\r\n        }\r\n        fragmentModels = {};\r\n    }\r\n\r\n    function reset() {\r\n        eventBus.off(Events.FRAGMENT_LOADING_COMPLETED, onFragmentLoadingCompleted, this);\r\n        eventBus.off(Events.FRAGMENT_LOADING_PROGRESS, onFragmentLoadingCompleted, this);\r\n        resetInitialSettings();\r\n    }\r\n\r\n    function createDataChunk(bytes, request, streamId, endFragment) {\r\n        const chunk = new DataChunk();\r\n\r\n        chunk.streamId = streamId;\r\n        chunk.mediaInfo = request.mediaInfo;\r\n        chunk.segmentType = request.type;\r\n        chunk.start = request.startTime;\r\n        chunk.duration = request.duration;\r\n        chunk.end = chunk.start + chunk.duration;\r\n        chunk.bytes = bytes;\r\n        chunk.index = request.index;\r\n        chunk.quality = request.quality;\r\n        chunk.representationId = request.representationId;\r\n        chunk.endFragment = endFragment;\r\n\r\n        return chunk;\r\n    }\r\n\r\n    function onFragmentLoadingCompleted(e) {\r\n        // Event propagation may have been stopped (see MssHandler)\r\n        if (!e.sender) return;\r\n\r\n        const request = e.request;\r\n        const bytes = e.response;\r\n        const isInit = request.isInitializationRequest();\r\n        const strInfo = request.mediaInfo.streamInfo;\r\n\r\n        if (e.error) {\r\n            if (request.mediaType === Constants.AUDIO || request.mediaType === Constants.VIDEO || request.mediaType === Constants.FRAGMENTED_TEXT) {\r\n                // add service location to blacklist controller - only for audio or video. text should not set errors\r\n                eventBus.trigger(Events.SERVICE_LOCATION_BLACKLIST_ADD, { entry: e.request.serviceLocation });\r\n            }\r\n        }\r\n\r\n        if (!bytes || !strInfo) {\r\n            logger.warn('No ' + request.mediaType + ' bytes to push or stream is inactive.');\r\n            return;\r\n        }\r\n        const chunk = createDataChunk(bytes, request, streamInfo.id, e.type !== Events.FRAGMENT_LOADING_PROGRESS);\r\n        eventBus.trigger(isInit ? Events.INIT_FRAGMENT_LOADED : Events.MEDIA_FRAGMENT_LOADED,\r\n            {\r\n                chunk: chunk,\r\n                request: request\r\n            },\r\n            { streamId: strInfo.id, mediaType: request.mediaType }\r\n        );\r\n    }\r\n\r\n    instance = {\r\n        getStreamId: getStreamId,\r\n        getModel: getModel,\r\n        reset: reset\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\nFragmentController.__dashjs_factory_name = 'FragmentController';\r\nexport default FactoryMaker.getClassFactory(FragmentController);\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\nimport Debug from '../../core/Debug';\r\nimport Events from '../../core/events/Events';\r\nimport EventBus from '../../core/EventBus';\r\n\r\nconst GAP_HANDLER_INTERVAL = 100;\r\nconst THRESHOLD_TO_STALLS = 30;\r\nconst GAP_THRESHOLD = 0.1;\r\n\r\nfunction GapController() {\r\n    const context = this.context;\r\n    const eventBus = EventBus(context).getInstance();\r\n\r\n    let instance,\r\n        lastPlaybackTime,\r\n        settings,\r\n        wallclockTicked,\r\n        gapHandlerInterval,\r\n        lastGapJumpPosition,\r\n        playbackController,\r\n        streamController,\r\n        videoModel,\r\n        timelineConverter,\r\n        adapter,\r\n        jumpTimeoutHandler,\r\n        logger;\r\n\r\n    function initialize() {\r\n        registerEvents();\r\n    }\r\n\r\n    function setup() {\r\n        logger = Debug(context).getInstance().getLogger(instance);\r\n\r\n        reset();\r\n    }\r\n\r\n    function reset() {\r\n        stopGapHandler();\r\n        unregisterEvents();\r\n        resetInitialSettings();\r\n    }\r\n\r\n    function resetInitialSettings() {\r\n        gapHandlerInterval = null;\r\n        lastGapJumpPosition = NaN;\r\n        wallclockTicked = 0;\r\n        jumpTimeoutHandler = null;\r\n    }\r\n\r\n    function setConfig(config) {\r\n        if (!config) {\r\n            return;\r\n        }\r\n        if (config.settings) {\r\n            settings = config.settings;\r\n        }\r\n        if (config.playbackController) {\r\n            playbackController = config.playbackController;\r\n        }\r\n        if (config.streamController) {\r\n            streamController = config.streamController;\r\n        }\r\n        if (config.videoModel) {\r\n            videoModel = config.videoModel;\r\n        }\r\n        if (config.timelineConverter) {\r\n            timelineConverter = config.timelineConverter;\r\n        }\r\n        if (config.adapter) {\r\n            adapter = config.adapter;\r\n        }\r\n    }\r\n\r\n    function registerEvents() {\r\n        eventBus.on(Events.WALLCLOCK_TIME_UPDATED, _onWallclockTimeUpdated, this);\r\n        eventBus.on(Events.PLAYBACK_SEEKING, _onPlaybackSeeking, this);\r\n        eventBus.on(Events.BYTES_APPENDED_END_FRAGMENT, onBytesAppended, instance);\r\n    }\r\n\r\n    function unregisterEvents() {\r\n        eventBus.off(Events.WALLCLOCK_TIME_UPDATED, _onWallclockTimeUpdated, this);\r\n        eventBus.off(Events.PLAYBACK_SEEKING, _onPlaybackSeeking, this);\r\n        eventBus.off(Events.BYTES_APPENDED_END_FRAGMENT, onBytesAppended, instance);\r\n    }\r\n\r\n    function onBytesAppended() {\r\n        if (!gapHandlerInterval) {\r\n            startGapHandler();\r\n        }\r\n    }\r\n\r\n    function _onPlaybackSeeking() {\r\n        if (jumpTimeoutHandler) {\r\n            clearTimeout(jumpTimeoutHandler);\r\n            jumpTimeoutHandler = null;\r\n        }\r\n    }\r\n\r\n    function _onWallclockTimeUpdated(/*e*/) {\r\n        if (!_shouldCheckForGaps()) {\r\n            return;\r\n        }\r\n\r\n        wallclockTicked++;\r\n        if (wallclockTicked >= THRESHOLD_TO_STALLS) {\r\n            const currentTime = playbackController.getTime();\r\n            if (lastPlaybackTime === currentTime) {\r\n                jumpGap(currentTime, true);\r\n            } else {\r\n                lastPlaybackTime = currentTime;\r\n                lastGapJumpPosition = NaN;\r\n            }\r\n            wallclockTicked = 0;\r\n        }\r\n    }\r\n\r\n    function _shouldCheckForGaps() {\r\n        return settings.get().streaming.jumpGaps && streamController.getActiveStreamProcessors().length > 0 &&\r\n            (!playbackController.isSeeking() || streamController.hasStreamFinishedBuffering(streamController.getActiveStream())) && !playbackController.isPaused() && !streamController.getIsStreamSwitchInProgress() &&\r\n            !streamController.getHasMediaOrIntialisationError();\r\n    }\r\n\r\n    function getNextRangeIndex(ranges, currentTime) {\r\n        try {\r\n\r\n            if (!ranges || (ranges.length <= 1 && currentTime > 0)) {\r\n                return NaN;\r\n            }\r\n            let nextRangeIndex = NaN;\r\n            let j = 0;\r\n\r\n            while (isNaN(nextRangeIndex) && j < ranges.length) {\r\n                const rangeEnd = j > 0 ? ranges.end(j - 1) : 0;\r\n                if (currentTime < ranges.start(j) && rangeEnd - currentTime < GAP_THRESHOLD) {\r\n                    nextRangeIndex = j;\r\n                }\r\n                j += 1;\r\n            }\r\n            return nextRangeIndex;\r\n\r\n        } catch (e) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n\r\n    function startGapHandler() {\r\n        try {\r\n            if (!gapHandlerInterval) {\r\n                logger.debug('Starting the gap controller');\r\n                gapHandlerInterval = setInterval(() => {\r\n                    if (!_shouldCheckForGaps()) {\r\n                        return;\r\n                    }\r\n                    const currentTime = playbackController.getTime();\r\n                    jumpGap(currentTime);\r\n\r\n                }, GAP_HANDLER_INTERVAL);\r\n            }\r\n        } catch (e) {\r\n        }\r\n    }\r\n\r\n    function stopGapHandler() {\r\n        logger.debug('Stopping the gap controller');\r\n        if (gapHandlerInterval) {\r\n            clearInterval(gapHandlerInterval);\r\n            gapHandlerInterval = null;\r\n        }\r\n    }\r\n\r\n    function jumpGap(currentTime, playbackStalled = false) {\r\n        const smallGapLimit = settings.get().streaming.smallGapLimit;\r\n        const jumpLargeGaps = settings.get().streaming.jumpLargeGaps;\r\n        const ranges = videoModel.getBufferRange();\r\n        let nextRangeIndex;\r\n        let seekToPosition = NaN;\r\n        let jumpToStreamEnd = false;\r\n\r\n\r\n        // Get the range just after current time position\r\n        nextRangeIndex = getNextRangeIndex(ranges, currentTime);\r\n\r\n        if (!isNaN(nextRangeIndex)) {\r\n            const start = ranges.start(nextRangeIndex);\r\n            const gap = start - currentTime;\r\n            if (gap > 0 && (gap <= smallGapLimit || jumpLargeGaps)) {\r\n                seekToPosition = start;\r\n            }\r\n        }\r\n\r\n        // Playback has stalled before period end. We seek to the end of the period\r\n        const timeToStreamEnd = playbackController.getTimeToStreamEnd();\r\n        if (isNaN(seekToPosition) && playbackStalled && isFinite(timeToStreamEnd) && !isNaN(timeToStreamEnd) && timeToStreamEnd < smallGapLimit) {\r\n            seekToPosition = parseFloat(playbackController.getStreamEndTime().toFixed(5));\r\n            jumpToStreamEnd = true;\r\n        }\r\n\r\n        if (seekToPosition > 0 && lastGapJumpPosition !== seekToPosition && seekToPosition > currentTime && !jumpTimeoutHandler) {\r\n            const timeUntilGapEnd = seekToPosition - currentTime;\r\n\r\n            if (jumpToStreamEnd) {\r\n                logger.warn(`Jumping to end of stream because of gap from ${currentTime} to ${seekToPosition}. Gap duration: ${timeUntilGapEnd}`);\r\n                eventBus.trigger(Events.GAP_CAUSED_SEEK_TO_PERIOD_END, {\r\n                    seekTime: seekToPosition,\r\n                    duration: timeUntilGapEnd\r\n                });\r\n            } else {\r\n                const isDynamic = playbackController.getIsDynamic();\r\n                const start = nextRangeIndex > 0 ? ranges.end(nextRangeIndex - 1) : currentTime;\r\n                const timeToWait = !isDynamic ? 0 : timeUntilGapEnd * 1000;\r\n\r\n                jumpTimeoutHandler = window.setTimeout(() => {\r\n                    playbackController.seek(seekToPosition, true, true);\r\n                    logger.warn(`Jumping gap starting at ${start} and ending at ${seekToPosition}. Jumping by: ${timeUntilGapEnd}`);\r\n                    eventBus.trigger(Events.GAP_CAUSED_INTERNAL_SEEK, {\r\n                        seekTime: seekToPosition,\r\n                        duration: timeUntilGapEnd\r\n                    });\r\n                    jumpTimeoutHandler = null;\r\n                }, timeToWait);\r\n            }\r\n            lastGapJumpPosition = seekToPosition;\r\n        }\r\n    }\r\n\r\n    instance = {\r\n        reset,\r\n        setConfig,\r\n        initialize\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\nGapController.__dashjs_factory_name = 'GapController';\r\nexport default FactoryMaker.getSingletonFactory(GapController);\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport Constants from '../constants/Constants';\r\nimport Events from '../../core/events/Events';\r\nimport EventBus from '../../core/EventBus';\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\nimport Debug from '../../core/Debug';\r\n\r\nfunction MediaController() {\r\n\r\n    const context = this.context;\r\n    const eventBus = EventBus(context).getInstance();\r\n\r\n    let instance,\r\n        logger,\r\n        tracks,\r\n        settings,\r\n        initialSettings,\r\n        domStorage;\r\n\r\n    const validTrackSwitchModes = [\r\n        Constants.TRACK_SWITCH_MODE_ALWAYS_REPLACE,\r\n        Constants.TRACK_SWITCH_MODE_NEVER_REPLACE\r\n    ];\r\n\r\n    const validTrackSelectionModes = [\r\n        Constants.TRACK_SELECTION_MODE_HIGHEST_BITRATE,\r\n        Constants.TRACK_SELECTION_MODE_WIDEST_RANGE\r\n    ];\r\n\r\n    function setup() {\r\n        logger = Debug(context).getInstance().getLogger(instance);\r\n        reset();\r\n    }\r\n\r\n    /**\r\n     * @param {string} type\r\n     * @param {StreamInfo} streamInfo\r\n     * @memberof MediaController#\r\n     */\r\n    function checkInitialMediaSettingsForType(type, streamInfo) {\r\n        let settings = getInitialSettings(type);\r\n        const tracksForType = getTracksFor(type, streamInfo);\r\n        const tracks = [];\r\n\r\n        if (!settings) {\r\n            settings = domStorage.getSavedMediaSettings(type);\r\n            setInitialSettings(type, settings);\r\n        }\r\n\r\n        if (!tracksForType || (tracksForType.length === 0)) return;\r\n\r\n        if (settings) {\r\n            tracksForType.forEach(function (track) {\r\n                if (matchSettings(settings, track)) {\r\n                    tracks.push(track);\r\n                }\r\n            });\r\n        }\r\n\r\n        if (tracks.length === 0) {\r\n            setTrack(selectInitialTrack(type, tracksForType), true);\r\n        } else {\r\n            if (tracks.length > 1) {\r\n                setTrack(selectInitialTrack(type, tracks));\r\n            } else {\r\n                setTrack(tracks[0]);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param {MediaInfo} track\r\n     * @memberof MediaController#\r\n     */\r\n    function addTrack(track) {\r\n        if (!track) return;\r\n\r\n        const mediaType = track.type;\r\n        if (!isMultiTrackSupportedByType(mediaType)) return;\r\n\r\n        let streamId = track.streamInfo.id;\r\n        if (!tracks[streamId]) {\r\n            tracks[streamId] = createTrackInfo();\r\n        }\r\n\r\n        const mediaTracks = tracks[streamId][mediaType].list;\r\n        for (let i = 0, len = mediaTracks.length; i < len; ++i) {\r\n            //track is already set.\r\n            if (isTracksEqual(mediaTracks[i], track)) {\r\n                return;\r\n            }\r\n        }\r\n\r\n        mediaTracks.push(track);\r\n\r\n        let initSettings = getInitialSettings(mediaType);\r\n        if (initSettings && (matchSettings(initSettings, track)) && !getCurrentTrackFor(mediaType, track.streamInfo)) {\r\n            setTrack(track);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param {string} type\r\n     * @param {StreamInfo} streamInfo\r\n     * @returns {Array}\r\n     * @memberof MediaController#\r\n     */\r\n    function getTracksFor(type, streamInfo) {\r\n        if (!type || !streamInfo) return [];\r\n\r\n        const id = streamInfo.id;\r\n\r\n        if (!tracks[id] || !tracks[id][type]) return [];\r\n\r\n        return tracks[id][type].list;\r\n    }\r\n\r\n    /**\r\n     * @param {string} type\r\n     * @param {StreamInfo} streamInfo\r\n     * @returns {Object|null}\r\n     * @memberof MediaController#\r\n     */\r\n    function getCurrentTrackFor(type, streamInfo) {\r\n        if (!type || !streamInfo || (streamInfo && !tracks[streamInfo.id])) return null;\r\n        return tracks[streamInfo.id][type].current;\r\n    }\r\n\r\n    /**\r\n     * @param {MediaInfo} track\r\n     * @returns {boolean}\r\n     * @memberof MediaController#\r\n     */\r\n    function isCurrentTrack(track) {\r\n        if (!track) {\r\n            return false;\r\n        }\r\n        const type = track.type;\r\n        const id = track.streamInfo.id;\r\n\r\n        return (tracks[id] && tracks[id][type] && isTracksEqual(tracks[id][type].current, track));\r\n    }\r\n\r\n    /**\r\n     * @param {MediaInfo} track\r\n     * @param {boolean} noSettingsSave specify if settings must be not be saved\r\n     * @memberof MediaController#\r\n     */\r\n    function setTrack(track, noSettingsSave) {\r\n        if (!track || !track.streamInfo) return;\r\n\r\n        const type = track.type;\r\n        const streamInfo = track.streamInfo;\r\n        const id = streamInfo.id;\r\n        const current = getCurrentTrackFor(type, streamInfo);\r\n\r\n        if (!tracks[id] || !tracks[id][type] || isTracksEqual(track, current)) return;\r\n\r\n        tracks[id][type].current = track;\r\n\r\n        if (tracks[id][type].current && !(noSettingsSave && type === Constants.FRAGMENTED_TEXT)) {\r\n            eventBus.trigger(Events.CURRENT_TRACK_CHANGED, {\r\n                oldMediaInfo: current,\r\n                newMediaInfo: track,\r\n                switchMode: getSwitchMode(type)\r\n            });\r\n        }\r\n\r\n        if (!noSettingsSave) {\r\n\r\n            let settings = extractSettings(track);\r\n\r\n            if (!settings || !tracks[id][type].storeLastSettings) return;\r\n\r\n            if (settings.roles) {\r\n                settings.role = settings.roles[0];\r\n                delete settings.roles;\r\n            }\r\n\r\n            if (settings.accessibility) {\r\n                settings.accessibility = settings.accessibility[0];\r\n            }\r\n\r\n            if (settings.audioChannelConfiguration) {\r\n                settings.audioChannelConfiguration = settings.audioChannelConfiguration[0];\r\n            }\r\n\r\n            domStorage.setSavedMediaSettings(type, settings);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param {string} type\r\n     * @param {Object} value\r\n     * @memberof MediaController#\r\n     */\r\n    function setInitialSettings(type, value) {\r\n        if (!type || !value) return;\r\n\r\n        initialSettings[type] = value;\r\n    }\r\n\r\n    /**\r\n     * @param {string} type\r\n     * @returns {Object|null}\r\n     * @memberof MediaController#\r\n     */\r\n    function getInitialSettings(type) {\r\n        if (!type) return null;\r\n\r\n        return initialSettings[type];\r\n    }\r\n\r\n    /**\r\n     * @memberof MediaController#\r\n     */\r\n    function saveTextSettingsDisabled() {\r\n        domStorage.setSavedMediaSettings(Constants.FRAGMENTED_TEXT, null);\r\n    }\r\n\r\n    /**\r\n     * @param {string} type\r\n     * @param {string} mode\r\n     * @memberof MediaController#\r\n     * @deprecated Please use updateSettings({streaming: { trackSwitchMode: mode } }) instead\r\n     */\r\n    function setSwitchMode(type, mode) {\r\n        logger.warn('deprecated: Please use updateSettings({streaming: { trackSwitchMode: mode } }) instead');\r\n        const isModeSupported = (validTrackSwitchModes.indexOf(mode) !== -1);\r\n\r\n        if (!isModeSupported) {\r\n            logger.warn('Track switch mode is not supported: ' + mode);\r\n            return;\r\n        }\r\n\r\n        let switchMode = {};\r\n        switchMode[type] = mode;\r\n\r\n        settings.update({\r\n            streaming: {\r\n                trackSwitchMode: switchMode\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @param {string} type\r\n     * @returns {string} mode\r\n     * @memberof MediaController#\r\n     */\r\n    function getSwitchMode(type) {\r\n        return settings.get().streaming.trackSwitchMode[type];\r\n    }\r\n\r\n    /**\r\n     * @param {string} mode\r\n     * @memberof MediaController#\r\n     * @deprecated Please use updateSettings({streaming: { selectionModeForInitialTrack: mode } }) instead\r\n     */\r\n    function setSelectionModeForInitialTrack(mode) {\r\n        logger.warn('deprecated: Please use updateSettings({streaming: { selectionModeForInitialTrack: mode } }) instead');\r\n        const isModeSupported = (validTrackSelectionModes.indexOf(mode) !== -1);\r\n\r\n        if (!isModeSupported) {\r\n            logger.warn('Track selection mode is not supported: ' + mode);\r\n            return;\r\n        }\r\n\r\n        settings.update({\r\n            streaming: {\r\n                selectionModeForInitialTrack: mode\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @returns {string} mode\r\n     * @memberof MediaController#\r\n     */\r\n    function getSelectionModeForInitialTrack() {\r\n        return settings.get().streaming.selectionModeForInitialTrack;\r\n    }\r\n\r\n    /**\r\n     * @param {string} type\r\n     * @returns {boolean}\r\n     * @memberof MediaController#\r\n     */\r\n    function isMultiTrackSupportedByType(type) {\r\n        return (type === Constants.AUDIO || type === Constants.VIDEO || type === Constants.TEXT ||\r\n            type === Constants.FRAGMENTED_TEXT || type === Constants.IMAGE);\r\n    }\r\n\r\n    /**\r\n     * @param {MediaInfo} t1 - first track to compare\r\n     * @param {MediaInfo} t2 - second track to compare\r\n     * @returns {boolean}\r\n     * @memberof MediaController#\r\n     */\r\n    function isTracksEqual(t1, t2) {\r\n        if (!t1 && !t2) {\r\n            return true;\r\n        }\r\n\r\n        if (!t1 || !t2) {\r\n            return false;\r\n        }\r\n\r\n        const sameId = t1.id === t2.id;\r\n        const sameViewpoint = t1.viewpoint === t2.viewpoint;\r\n        const sameLang = t1.lang === t2.lang;\r\n        const sameRoles = t1.roles.toString() === t2.roles.toString();\r\n        const sameAccessibility = t1.accessibility.toString() === t2.accessibility.toString();\r\n        const sameAudioChannelConfiguration = t1.audioChannelConfiguration.toString() === t2.audioChannelConfiguration.toString();\r\n\r\n        return (sameId && sameViewpoint && sameLang && sameRoles && sameAccessibility && sameAudioChannelConfiguration);\r\n    }\r\n\r\n    function setConfig(config) {\r\n        if (!config) return;\r\n\r\n        if (config.domStorage) {\r\n            domStorage = config.domStorage;\r\n        }\r\n\r\n        if (config.settings) {\r\n            settings = config.settings;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @memberof MediaController#\r\n     */\r\n    function reset() {\r\n        tracks = {};\r\n        resetInitialSettings();\r\n    }\r\n\r\n    function extractSettings(mediaInfo) {\r\n        const settings = {\r\n            lang: mediaInfo.lang,\r\n            viewpoint: mediaInfo.viewpoint,\r\n            roles: mediaInfo.roles,\r\n            accessibility: mediaInfo.accessibility,\r\n            audioChannelConfiguration: mediaInfo.audioChannelConfiguration\r\n        };\r\n        let notEmpty = settings.lang || settings.viewpoint || (settings.role && settings.role.length > 0) ||\r\n        (settings.accessibility && settings.accessibility.length > 0) || (settings.audioChannelConfiguration && settings.audioChannelConfiguration.length > 0);\r\n\r\n        return notEmpty ? settings : null;\r\n    }\r\n\r\n    function matchSettings(settings, track) {\r\n        const matchLang = !settings.lang || (track.lang.match(settings.lang));\r\n        const matchViewPoint = !settings.viewpoint || (settings.viewpoint === track.viewpoint);\r\n        const matchRole = !settings.role || !!track.roles.filter(function (item) {\r\n            return item === settings.role;\r\n        })[0];\r\n        let matchAccessibility = !settings.accessibility || !!track.accessibility.filter(function (item) {\r\n            return item === settings.accessibility;\r\n        })[0];\r\n        let matchAudioChannelConfiguration = !settings.audioChannelConfiguration || !!track.audioChannelConfiguration.filter(function (item) {\r\n            return item === settings.audioChannelConfiguration;\r\n        })[0];\r\n\r\n        return (matchLang && matchViewPoint && matchRole && matchAccessibility && matchAudioChannelConfiguration);\r\n    }\r\n\r\n    function resetInitialSettings() {\r\n        initialSettings = {\r\n            audio: null,\r\n            video: null,\r\n            fragmentedText: null\r\n        };\r\n    }\r\n\r\n    function selectInitialTrack(type, tracks) {\r\n        if (type === Constants.FRAGMENTED_TEXT) return tracks[0];\r\n\r\n        let mode = getSelectionModeForInitialTrack();\r\n        let tmpArr = [];\r\n\r\n        const getTracksWithHighestBitrate = function (trackArr) {\r\n            let max = 0;\r\n            let result = [];\r\n            let tmp;\r\n\r\n            trackArr.forEach(function (track) {\r\n                tmp = Math.max.apply(Math, track.bitrateList.map(function (obj) { return obj.bandwidth; }));\r\n\r\n                if (tmp > max) {\r\n                    max = tmp;\r\n                    result = [track];\r\n                } else if (tmp === max) {\r\n                    result.push(track);\r\n                }\r\n            });\r\n\r\n            return result;\r\n        };\r\n        const getTracksWithWidestRange = function (trackArr) {\r\n            let max = 0;\r\n            let result = [];\r\n            let tmp;\r\n\r\n            trackArr.forEach(function (track) {\r\n                tmp = track.representationCount;\r\n\r\n                if (tmp > max) {\r\n                    max = tmp;\r\n                    result = [track];\r\n                } else if (tmp === max) {\r\n                    result.push(track);\r\n                }\r\n            });\r\n\r\n            return result;\r\n        };\r\n\r\n        switch (mode) {\r\n            case Constants.TRACK_SELECTION_MODE_HIGHEST_BITRATE:\r\n                tmpArr = getTracksWithHighestBitrate(tracks);\r\n\r\n                if (tmpArr.length > 1) {\r\n                    tmpArr = getTracksWithWidestRange(tmpArr);\r\n                }\r\n                break;\r\n            case Constants.TRACK_SELECTION_MODE_WIDEST_RANGE:\r\n                tmpArr = getTracksWithWidestRange(tracks);\r\n\r\n                if (tmpArr.length > 1) {\r\n                    tmpArr = getTracksWithHighestBitrate(tracks);\r\n                }\r\n                break;\r\n            default:\r\n                logger.warn('Track selection mode is not supported: ' + mode);\r\n                break;\r\n        }\r\n\r\n        return tmpArr[0];\r\n    }\r\n\r\n    function createTrackInfo() {\r\n        return {\r\n            audio: {\r\n                list: [],\r\n                storeLastSettings: true,\r\n                current: null\r\n            },\r\n            video: {\r\n                list: [],\r\n                storeLastSettings: true,\r\n                current: null\r\n            },\r\n            text: {\r\n                list: [],\r\n                storeLastSettings: true,\r\n                current: null\r\n            },\r\n            fragmentedText: {\r\n                list: [],\r\n                storeLastSettings: true,\r\n                current: null\r\n            },\r\n            image: {\r\n                list: [],\r\n                storeLastSettings: true,\r\n                current: null\r\n            }\r\n        };\r\n    }\r\n\r\n    instance = {\r\n        checkInitialMediaSettingsForType: checkInitialMediaSettingsForType,\r\n        addTrack: addTrack,\r\n        getTracksFor: getTracksFor,\r\n        getCurrentTrackFor: getCurrentTrackFor,\r\n        isCurrentTrack: isCurrentTrack,\r\n        setTrack: setTrack,\r\n        setInitialSettings: setInitialSettings,\r\n        getInitialSettings: getInitialSettings,\r\n        setSwitchMode: setSwitchMode,\r\n        getSwitchMode: getSwitchMode,\r\n        setSelectionModeForInitialTrack: setSelectionModeForInitialTrack,\r\n        getSelectionModeForInitialTrack: getSelectionModeForInitialTrack,\r\n        isMultiTrackSupportedByType: isMultiTrackSupportedByType,\r\n        isTracksEqual: isTracksEqual,\r\n        matchSettings: matchSettings,\r\n        saveTextSettingsDisabled: saveTextSettingsDisabled,\r\n        setConfig: setConfig,\r\n        reset: reset\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\nMediaController.__dashjs_factory_name = 'MediaController';\r\nconst factory = FactoryMaker.getSingletonFactory(MediaController);\r\nFactoryMaker.updateSingletonFactory(MediaController.__dashjs_factory_name, factory);\r\nexport default factory;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\nimport Debug from '../../core/Debug';\r\n\r\nfunction MediaSourceController() {\r\n\r\n    let instance,\r\n        logger;\r\n\r\n    const context = this.context;\r\n\r\n    function setup() {\r\n        logger = Debug(context).getInstance().getLogger(instance);\r\n    }\r\n\r\n    function createMediaSource() {\r\n\r\n        let hasWebKit = ('WebKitMediaSource' in window);\r\n        let hasMediaSource = ('MediaSource' in window);\r\n\r\n        if (hasMediaSource) {\r\n            return new MediaSource();\r\n        } else if (hasWebKit) {\r\n            return new WebKitMediaSource();\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    function attachMediaSource(source, videoModel) {\r\n\r\n        let objectURL = window.URL.createObjectURL(source);\r\n\r\n        videoModel.setSource(objectURL);\r\n\r\n        return objectURL;\r\n    }\r\n\r\n    function detachMediaSource(videoModel) {\r\n        videoModel.setSource(null);\r\n    }\r\n\r\n    function setDuration(source, value) {\r\n\r\n        if (source.duration != value)\r\n            source.duration = value;\r\n\r\n        return source.duration;\r\n    }\r\n\r\n    function setSeekable(source, start, end) {\r\n        if (source && typeof source.setLiveSeekableRange === 'function' && typeof source.clearLiveSeekableRange === 'function' &&\r\n                source.readyState === 'open' && start >= 0 && start < end) {\r\n            source.clearLiveSeekableRange();\r\n            source.setLiveSeekableRange(start, end);\r\n        }\r\n    }\r\n\r\n    function signalEndOfStream(source) {\r\n        if (!source || source.readyState !== 'open') {\r\n            return;\r\n        }\r\n\r\n        let buffers = source.sourceBuffers;\r\n\r\n        for (let i = 0; i < buffers.length; i++) {\r\n            if (buffers[i].updating) {\r\n                return;\r\n            }\r\n            if (buffers[i].buffered.length === 0) {\r\n                return;\r\n            }\r\n        }\r\n        logger.info('call to mediaSource endOfStream');\r\n        source.endOfStream();\r\n    }\r\n\r\n    instance = {\r\n        createMediaSource: createMediaSource,\r\n        attachMediaSource: attachMediaSource,\r\n        detachMediaSource: detachMediaSource,\r\n        setDuration: setDuration,\r\n        setSeekable: setSeekable,\r\n        signalEndOfStream: signalEndOfStream\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\nMediaSourceController.__dashjs_factory_name = 'MediaSourceController';\r\nexport default FactoryMaker.getSingletonFactory(MediaSourceController);\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport Constants from '../constants/Constants';\r\nimport MetricsConstants from '../constants/MetricsConstants';\r\nimport EventBus from '../../core/EventBus';\r\nimport Events from '../../core/events/Events';\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\nimport Debug from '../../core/Debug';\r\n\r\nconst LIVE_UPDATE_PLAYBACK_TIME_INTERVAL_MS = 500;\r\n\r\nfunction PlaybackController() {\r\n\r\n    const context = this.context;\r\n    const eventBus = EventBus(context).getInstance();\r\n\r\n    let instance,\r\n        logger,\r\n        streamController,\r\n        dashMetrics,\r\n        adapter,\r\n        videoModel,\r\n        timelineConverter,\r\n        streamSwitch,\r\n        streamSeekTime,\r\n        wallclockTimeIntervalId,\r\n        liveDelay,\r\n        streamInfo,\r\n        isDynamic,\r\n        mediaPlayerModel,\r\n        playOnceInitialized,\r\n        lastLivePlaybackTime,\r\n        availabilityStartTime,\r\n        seekTarget,\r\n        isLowLatencySeekingInProgress,\r\n        playbackStalled,\r\n        minPlaybackRateChange,\r\n        uriFragmentModel,\r\n        settings;\r\n\r\n    function setup() {\r\n        logger = Debug(context).getInstance().getLogger(instance);\r\n\r\n        reset();\r\n    }\r\n\r\n    function initialize(sInfo, periodSwitch, seekTime) {\r\n        streamInfo = sInfo;\r\n        addAllListeners();\r\n        isDynamic = streamInfo.manifestInfo.isDynamic;\r\n        isLowLatencySeekingInProgress = false;\r\n        playbackStalled = false;\r\n        streamSwitch = periodSwitch === true;\r\n        streamSeekTime = seekTime;\r\n\r\n        const ua = typeof navigator !== 'undefined' ? navigator.userAgent.toLowerCase() : '';\r\n\r\n        // Detect safari browser (special behavior for low latency streams)\r\n        const isSafari = /safari/.test(ua) && !/chrome/.test(ua);\r\n        minPlaybackRateChange = isSafari ? 0.25 : 0.02;\r\n\r\n        eventBus.on(Events.STREAM_INITIALIZED, onStreamInitialized, this);\r\n        eventBus.on(Events.DATA_UPDATE_COMPLETED, onDataUpdateCompleted, this);\r\n        eventBus.on(Events.LOADING_PROGRESS, onFragmentLoadProgress, this);\r\n        eventBus.on(Events.BUFFER_LEVEL_STATE_CHANGED, onBufferLevelStateChanged, this);\r\n        eventBus.on(Events.PLAYBACK_PROGRESS, onPlaybackProgression, this);\r\n        eventBus.on(Events.PLAYBACK_TIME_UPDATED, onPlaybackProgression, this);\r\n        eventBus.on(Events.PLAYBACK_ENDED, onPlaybackEnded, this, { priority: EventBus.EVENT_PRIORITY_HIGH });\r\n        eventBus.on(Events.STREAM_INITIALIZING, onStreamInitializing, this);\r\n\r\n        if (playOnceInitialized) {\r\n            playOnceInitialized = false;\r\n            play();\r\n        }\r\n    }\r\n\r\n    function onStreamInitialized(e) {\r\n        // Seamless period switch\r\n        if (streamSwitch && isNaN(streamSeekTime)) return;\r\n\r\n        // Seek new stream in priority order:\r\n        // - at seek time (streamSeekTime) when switching period\r\n        // - at start time provided in URI parameters\r\n        // - at stream/period start time (for static streams) or live start time (for dynamic streams)\r\n        let startTime = streamSeekTime;\r\n        if (isNaN(startTime)) {\r\n            if (isDynamic) {\r\n                // For dynamic stream, start by default at (live edge - live delay)\r\n                startTime = e.liveStartTime;\r\n                // If start time in URI, take min value between live edge time and time from URI (capped by DVR window range)\r\n                const dvrInfo = dashMetrics.getCurrentDVRInfo();\r\n                const dvrWindow = dvrInfo ? dvrInfo.range : null;\r\n                if (dvrWindow) {\r\n                    // #t shall be relative to period start\r\n                    const startTimeFromUri = getStartTimeFromUriParameters(true);\r\n                    if (!isNaN(startTimeFromUri)) {\r\n                        logger.info('Start time from URI parameters: ' + startTimeFromUri);\r\n                        startTime = Math.max(Math.min(startTime, startTimeFromUri), dvrWindow.start);\r\n                    }\r\n                }\r\n            } else {\r\n                // For static stream, start by default at period start\r\n                startTime = streamInfo.start;\r\n                // If start time in URI, take max value between period start and time from URI (if in period range)\r\n                const startTimeFromUri = getStartTimeFromUriParameters(false);\r\n                if (!isNaN(startTimeFromUri) && startTimeFromUri < (startTime + streamInfo.duration)) {\r\n                    logger.info('Start time from URI parameters: ' + startTimeFromUri);\r\n                    startTime = Math.max(startTime, startTimeFromUri);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (!isNaN(startTime) && startTime !== videoModel.getTime()) {\r\n            // Trigger PLAYBACK_SEEKING event for controllers\r\n            eventBus.trigger(Events.PLAYBACK_SEEKING, { seekTime: startTime });\r\n            // Seek video model\r\n            seek(startTime, false, true);\r\n        }\r\n    }\r\n\r\n    function getTimeToStreamEnd() {\r\n        return parseFloat((getStreamEndTime() - getTime()).toFixed(5));\r\n    }\r\n\r\n    function getStreamEndTime() {\r\n        return streamInfo.start + streamInfo.duration;\r\n    }\r\n\r\n    function play() {\r\n        if (streamInfo && videoModel && videoModel.getElement()) {\r\n            videoModel.play();\r\n        } else {\r\n            playOnceInitialized = true;\r\n        }\r\n    }\r\n\r\n    function isPaused() {\r\n        return streamInfo && videoModel ? videoModel.isPaused() : null;\r\n    }\r\n\r\n    function pause() {\r\n        if (streamInfo && videoModel) {\r\n            videoModel.pause();\r\n        }\r\n    }\r\n\r\n    function isSeeking() {\r\n        return streamInfo && videoModel ? videoModel.isSeeking() : null;\r\n    }\r\n\r\n    function seek(time, stickToBuffered, internalSeek) {\r\n        if (!streamInfo || !videoModel) return;\r\n\r\n        let currentTime = !isNaN(seekTarget) ? seekTarget : videoModel.getTime();\r\n        if (time === currentTime) return;\r\n\r\n        if (internalSeek === true) {\r\n            // Internal seek = seek video model only (disable 'seeking' listener)\r\n            // buffer(s) are already appended at requested time\r\n            videoModel.removeEventListener('seeking', onPlaybackSeeking);\r\n            logger.info('Requesting internal seek to time: ' + time);\r\n            videoModel.setCurrentTime(time, stickToBuffered);\r\n        } else {\r\n            seekTarget = time;\r\n            eventBus.trigger(Events.PLAYBACK_SEEK_ASKED);\r\n            logger.info('Requesting seek to time: ' + time);\r\n            videoModel.setCurrentTime(time, stickToBuffered);\r\n        }\r\n    }\r\n\r\n    function seekToLive() {\r\n        const DVRMetrics = dashMetrics.getCurrentDVRInfo();\r\n        const DVRWindow = DVRMetrics ? DVRMetrics.range : null;\r\n\r\n        seek(DVRWindow.end - mediaPlayerModel.getLiveDelay(), true, false);\r\n    }\r\n\r\n    function getTime() {\r\n        return streamInfo && videoModel ? videoModel.getTime() : null;\r\n    }\r\n\r\n    function getNormalizedTime() {\r\n        let t = getTime();\r\n\r\n        if (isDynamic && !isNaN(availabilityStartTime)) {\r\n            const timeOffset = availabilityStartTime / 1000;\r\n            // Fix current time for firefox and safari (returned as an absolute time)\r\n            if (t > timeOffset) {\r\n                t -= timeOffset;\r\n            }\r\n        }\r\n        return t;\r\n    }\r\n\r\n    function getPlaybackRate() {\r\n        return streamInfo && videoModel ? videoModel.getPlaybackRate() : null;\r\n    }\r\n\r\n    function getPlayedRanges() {\r\n        return streamInfo && videoModel ? videoModel.getPlayedRanges() : null;\r\n    }\r\n\r\n    function getEnded() {\r\n        return streamInfo && videoModel ? videoModel.getEnded() : null;\r\n    }\r\n\r\n    function getIsDynamic() {\r\n        return isDynamic;\r\n    }\r\n\r\n    function getStreamController() {\r\n        return streamController;\r\n    }\r\n\r\n    /**\r\n     * Computes the desirable delay for the live edge to avoid a risk of getting 404 when playing at the bleeding edge\r\n     * @param {number} fragmentDuration - seconds?\r\n     * @param {number} dvrWindowSize - seconds?\r\n     * @param {number} minBufferTime - seconds?\r\n     * @returns {number} object\r\n     * @memberof PlaybackController#\r\n     */\r\n    function computeAndSetLiveDelay(fragmentDuration, dvrWindowSize, minBufferTime) {\r\n        let delay,\r\n            ret,\r\n            startTime;\r\n        const END_OF_PLAYLIST_PADDING = 10;\r\n        const MIN_BUFFER_TIME_FACTOR = 4;\r\n        const FRAGMENT_DURATION_FACTOR = 4;\r\n        const adjustedFragmentDuration = !isNaN(fragmentDuration) && isFinite(fragmentDuration) ? fragmentDuration : NaN;\r\n\r\n        let suggestedPresentationDelay = adapter.getSuggestedPresentationDelay();\r\n\r\n        if (settings.get().streaming.lowLatencyEnabled) {\r\n            delay = 0;\r\n        } else if (mediaPlayerModel.getLiveDelay()) {\r\n            delay = mediaPlayerModel.getLiveDelay(); // If set by user, this value takes precedence\r\n        } else if (settings.get().streaming.liveDelayFragmentCount !== null && !isNaN(settings.get().streaming.liveDelayFragmentCount) && !isNaN(adjustedFragmentDuration)) {\r\n            delay = adjustedFragmentDuration * settings.get().streaming.liveDelayFragmentCount;\r\n        } else if (settings.get().streaming.useSuggestedPresentationDelay === true && suggestedPresentationDelay !== null && !isNaN(suggestedPresentationDelay) && suggestedPresentationDelay > 0) {\r\n            delay = suggestedPresentationDelay;\r\n        } else if (!isNaN(adjustedFragmentDuration)) {\r\n            delay = adjustedFragmentDuration * FRAGMENT_DURATION_FACTOR;\r\n        } else {\r\n            delay = !isNaN(minBufferTime) ? minBufferTime * MIN_BUFFER_TIME_FACTOR : streamInfo.manifestInfo.minBufferTime * MIN_BUFFER_TIME_FACTOR;\r\n        }\r\n\r\n        startTime = adapter.getAvailabilityStartTime();\r\n\r\n        if (startTime !== null) {\r\n            availabilityStartTime = startTime;\r\n        }\r\n\r\n        if (dvrWindowSize > 0) {\r\n            // cap target latency to:\r\n            // - dvrWindowSize / 2 for short playlists\r\n            // - dvrWindowSize - END_OF_PLAYLIST_PADDING for longer playlists\r\n            const targetDelayCapping = Math.max(dvrWindowSize - END_OF_PLAYLIST_PADDING, dvrWindowSize / 2);\r\n            ret = Math.min(delay, targetDelayCapping);\r\n        } else {\r\n            ret = delay;\r\n        }\r\n        liveDelay = ret;\r\n        return ret;\r\n    }\r\n\r\n    function getLiveDelay() {\r\n        return liveDelay;\r\n    }\r\n\r\n    function setLiveDelay(value, useMaxValue = false) {\r\n        if (useMaxValue && value < liveDelay) {\r\n            return;\r\n        }\r\n\r\n        liveDelay = value;\r\n    }\r\n\r\n    function getCurrentLiveLatency() {\r\n        if (!isDynamic || isNaN(availabilityStartTime)) {\r\n            return NaN;\r\n        }\r\n        let currentTime = getNormalizedTime();\r\n        if (isNaN(currentTime) || currentTime === 0) {\r\n            return 0;\r\n        }\r\n\r\n        const now = new Date().getTime() + timelineConverter.getClientTimeOffset() * 1000;\r\n        return Math.max(((now - availabilityStartTime - currentTime * 1000) / 1000).toFixed(3), 0);\r\n    }\r\n\r\n    function reset() {\r\n        playOnceInitialized = false;\r\n        streamSwitch = false;\r\n        streamSeekTime = NaN;\r\n        liveDelay = 0;\r\n        availabilityStartTime = 0;\r\n        seekTarget = NaN;\r\n        if (videoModel) {\r\n            eventBus.off(Events.STREAM_INITIALIZED, onStreamInitialized, this);\r\n            eventBus.off(Events.DATA_UPDATE_COMPLETED, onDataUpdateCompleted, this);\r\n            eventBus.off(Events.BUFFER_LEVEL_STATE_CHANGED, onBufferLevelStateChanged, this);\r\n            eventBus.off(Events.LOADING_PROGRESS, onFragmentLoadProgress, this);\r\n            eventBus.off(Events.PLAYBACK_PROGRESS, onPlaybackProgression, this);\r\n            eventBus.off(Events.PLAYBACK_TIME_UPDATED, onPlaybackProgression, this);\r\n            eventBus.off(Events.PLAYBACK_ENDED, onPlaybackEnded, this);\r\n            eventBus.off(Events.STREAM_INITIALIZING, onStreamInitializing, this);\r\n            stopUpdatingWallclockTime();\r\n            removeAllListeners();\r\n        }\r\n        wallclockTimeIntervalId = null;\r\n        videoModel = null;\r\n        streamInfo = null;\r\n        isDynamic = null;\r\n    }\r\n\r\n    function setConfig(config) {\r\n        if (!config) return;\r\n\r\n        if (config.streamController) {\r\n            streamController = config.streamController;\r\n        }\r\n        if (config.dashMetrics) {\r\n            dashMetrics = config.dashMetrics;\r\n        }\r\n        if (config.mediaPlayerModel) {\r\n            mediaPlayerModel = config.mediaPlayerModel;\r\n        }\r\n        if (config.adapter) {\r\n            adapter = config.adapter;\r\n        }\r\n        if (config.videoModel) {\r\n            videoModel = config.videoModel;\r\n        }\r\n        if (config.timelineConverter) {\r\n            timelineConverter = config.timelineConverter;\r\n        }\r\n        if (config.uriFragmentModel) {\r\n            uriFragmentModel = config.uriFragmentModel;\r\n        }\r\n        if (config.settings) {\r\n            settings = config.settings;\r\n        }\r\n    }\r\n\r\n    function getStartTimeFromUriParameters(isDynamic) {\r\n        const fragData = uriFragmentModel.getURIFragmentData();\r\n        if (!fragData || !fragData.t) {\r\n            return NaN;\r\n        }\r\n        const refStream = streamController.getStreams()[0];\r\n        const refStreamStartTime = refStream.getStreamInfo().start;\r\n        // Consider only start time of MediaRange\r\n        // TODO: consider end time of MediaRange to stop playback at provided end time\r\n        fragData.t = fragData.t.split(',')[0];\r\n        // \"t=<time>\" : time is relative to 1st period start\r\n        // \"t=posix:<time>\" : time is absolute start time as number of seconds since 01-01-1970\r\n        const posix = fragData.t.indexOf('posix:') !== -1 ? fragData.t.substring(6) === 'now' ? Date.now() / 1000 : parseInt(fragData.t.substring(6)) : NaN;\r\n        let startTime = (isDynamic && !isNaN(posix)) ? posix - availabilityStartTime / 1000 : parseInt(fragData.t) + refStreamStartTime;\r\n        return startTime;\r\n    }\r\n\r\n    function getActualPresentationTime(currentTime) {\r\n        const DVRMetrics = dashMetrics.getCurrentDVRInfo();\r\n        const DVRWindow = DVRMetrics ? DVRMetrics.range : null;\r\n        let actualTime;\r\n\r\n        if (!DVRWindow) {\r\n            return NaN;\r\n        }\r\n\r\n        logger.debug(`Checking DVR window for at ${currentTime} with DVR window range ${DVRWindow.start} - ${DVRWindow.end}`);\r\n        if (currentTime > DVRWindow.end) {\r\n            actualTime = Math.max(DVRWindow.end - liveDelay, DVRWindow.start);\r\n\r\n        } else if (currentTime > 0 && currentTime + 0.250 < DVRWindow.start && Math.abs(currentTime - DVRWindow.start) < 315360000) {\r\n\r\n            // Checking currentTime plus 250ms as the 'timeupdate' is fired with a frequency between 4Hz and 66Hz\r\n            // https://developer.mozilla.org/en-US/docs/Web/Events/timeupdate\r\n            // http://w3c.github.io/html/single-page.html#offsets-into-the-media-resource\r\n            // Checking also duration of the DVR makes sense. We detected temporary situations in which currentTime\r\n            // is bad reported by the browser which causes playback to jump to start (315360000 = 1 year)\r\n            //actualTime = DVRWindow.start;\r\n            actualTime = DVRWindow.start;\r\n        } else {\r\n            actualTime = currentTime;\r\n        }\r\n\r\n        return actualTime;\r\n    }\r\n\r\n    function startUpdatingWallclockTime() {\r\n        if (wallclockTimeIntervalId !== null) return;\r\n\r\n        const tick = function () {\r\n            onWallclockTime();\r\n        };\r\n\r\n        wallclockTimeIntervalId = setInterval(tick, settings.get().streaming.wallclockTimeUpdateInterval);\r\n    }\r\n\r\n    function stopUpdatingWallclockTime() {\r\n        clearInterval(wallclockTimeIntervalId);\r\n        wallclockTimeIntervalId = null;\r\n    }\r\n\r\n    function updateCurrentTime() {\r\n        if (isPaused() || !isDynamic || videoModel.getReadyState() === 0) return;\r\n        const currentTime = getNormalizedTime();\r\n        const actualTime = getActualPresentationTime(currentTime);\r\n        const timeChanged = (!isNaN(actualTime) && actualTime !== currentTime);\r\n        if (timeChanged) {\r\n            logger.debug(`UpdateCurrentTime: Seek to actual time: ${actualTime} from currentTime: ${currentTime}`);\r\n            seek(actualTime);\r\n        }\r\n    }\r\n\r\n    function onDataUpdateCompleted(e) {\r\n        if (e.error) return;\r\n\r\n        const representationInfo = adapter.convertDataToRepresentationInfo(e.currentRepresentation);\r\n        const info = representationInfo ? representationInfo.mediaInfo.streamInfo : null;\r\n\r\n        if (info === null || streamInfo.id !== info.id) return;\r\n        streamInfo = info;\r\n\r\n        updateCurrentTime();\r\n    }\r\n\r\n    function onCanPlay() {\r\n        eventBus.trigger(Events.CAN_PLAY);\r\n    }\r\n\r\n    function onPlaybackStart() {\r\n        logger.info('Native video element event: play');\r\n        updateCurrentTime();\r\n        startUpdatingWallclockTime();\r\n        eventBus.trigger(Events.PLAYBACK_STARTED, { startTime: getTime() });\r\n    }\r\n\r\n    function onPlaybackWaiting() {\r\n        logger.info('Native video element event: waiting');\r\n        eventBus.trigger(Events.PLAYBACK_WAITING, { playingTime: getTime() });\r\n    }\r\n\r\n    function onPlaybackPlaying() {\r\n        logger.info('Native video element event: playing');\r\n        eventBus.trigger(Events.PLAYBACK_PLAYING, { playingTime: getTime() });\r\n    }\r\n\r\n    function onPlaybackPaused() {\r\n        logger.info('Native video element event: pause');\r\n        eventBus.trigger(Events.PLAYBACK_PAUSED, { ended: getEnded() });\r\n    }\r\n\r\n    function onPlaybackSeeking() {\r\n        let seekTime = getTime();\r\n        // On some browsers/devices, in case of live streams, setting current time on video element fails when there is no buffered data at requested time\r\n        // Then re-set seek target time and video element will be seeked afterwhile once data is buffered (see BufferContoller)\r\n        if (!isNaN(seekTarget) && seekTarget !== seekTime) {\r\n            seekTime = seekTarget;\r\n        }\r\n        seekTarget = NaN;\r\n\r\n        logger.info('Seeking to: ' + seekTime);\r\n        startUpdatingWallclockTime();\r\n        eventBus.trigger(Events.PLAYBACK_SEEKING, { seekTime: seekTime });\r\n    }\r\n\r\n    function onPlaybackSeeked() {\r\n        logger.info('Native video element event: seeked');\r\n        eventBus.trigger(Events.PLAYBACK_SEEKED);\r\n        // Reactivate 'seeking' event listener (see seek())\r\n        videoModel.addEventListener('seeking', onPlaybackSeeking);\r\n    }\r\n\r\n    function onPlaybackTimeUpdated() {\r\n        if (streamInfo) {\r\n            eventBus.trigger(Events.PLAYBACK_TIME_UPDATED, {\r\n                timeToEnd: getTimeToStreamEnd(),\r\n                time: getTime()\r\n            });\r\n        }\r\n    }\r\n\r\n    function updateLivePlaybackTime() {\r\n        const now = Date.now();\r\n        if (!lastLivePlaybackTime || now > lastLivePlaybackTime + LIVE_UPDATE_PLAYBACK_TIME_INTERVAL_MS) {\r\n            lastLivePlaybackTime = now;\r\n            onPlaybackTimeUpdated();\r\n        }\r\n    }\r\n\r\n    function onPlaybackProgress() {\r\n        eventBus.trigger(Events.PLAYBACK_PROGRESS);\r\n    }\r\n\r\n    function onPlaybackRateChanged() {\r\n        const rate = getPlaybackRate();\r\n        logger.info('Native video element event: ratechange: ', rate);\r\n        eventBus.trigger(Events.PLAYBACK_RATE_CHANGED, { playbackRate: rate });\r\n    }\r\n\r\n    function onPlaybackMetaDataLoaded() {\r\n        logger.info('Native video element event: loadedmetadata');\r\n        eventBus.trigger(Events.PLAYBACK_METADATA_LOADED);\r\n        startUpdatingWallclockTime();\r\n    }\r\n\r\n    // Event to handle the native video element ended event\r\n    function onNativePlaybackEnded() {\r\n        logger.info('Native video element event: ended');\r\n        pause();\r\n        stopUpdatingWallclockTime();\r\n        eventBus.trigger(Events.PLAYBACK_ENDED, { 'isLast': streamController.getActiveStreamInfo().isLast });\r\n    }\r\n\r\n    // Handle DASH PLAYBACK_ENDED event\r\n    function onPlaybackEnded(e) {\r\n        if (wallclockTimeIntervalId && e.isLast) {\r\n            // PLAYBACK_ENDED was triggered elsewhere, react.\r\n            logger.info('onPlaybackEnded -- PLAYBACK_ENDED but native video element didn\\'t fire ended');\r\n            const seekTime = e.seekTime ? e.seekTime : getStreamEndTime();\r\n            videoModel.setCurrentTime(seekTime);\r\n            pause();\r\n            stopUpdatingWallclockTime();\r\n        }\r\n    }\r\n\r\n    function onPlaybackError(event) {\r\n        const target = event.target || event.srcElement;\r\n        eventBus.trigger(Events.PLAYBACK_ERROR, { error: target.error });\r\n    }\r\n\r\n    function onWallclockTime() {\r\n        eventBus.trigger(Events.WALLCLOCK_TIME_UPDATED, {\r\n            isDynamic: isDynamic,\r\n            time: new Date()\r\n        });\r\n\r\n        // Updates playback time for paused dynamic streams\r\n        // (video element doesn't call timeupdate when the playback is paused)\r\n        if (getIsDynamic() && isPaused()) {\r\n            updateLivePlaybackTime();\r\n        }\r\n    }\r\n\r\n    function onPlaybackProgression() {\r\n        if (\r\n            isDynamic &&\r\n            _isCatchupEnabled() &&\r\n            settings.get().streaming.liveCatchup.playbackRate > 0 &&\r\n            !isPaused() &&\r\n            !isSeeking()\r\n        ) {\r\n            if (_needToCatchUp()) {\r\n                startPlaybackCatchUp();\r\n            } else {\r\n                stopPlaybackCatchUp();\r\n            }\r\n        }\r\n    }\r\n\r\n    function _isCatchupEnabled() {\r\n        return settings.get().streaming.liveCatchup.enabled || settings.get().streaming.lowLatencyEnabled;\r\n    }\r\n\r\n    function getBufferLevel() {\r\n        let bufferLevel = null;\r\n        streamController.getActiveStreamProcessors().forEach(p => {\r\n            const bl = p.getBufferLevel();\r\n            if (bufferLevel === null) {\r\n                bufferLevel = bl;\r\n            } else {\r\n                bufferLevel = Math.min(bufferLevel, bl);\r\n            }\r\n        });\r\n\r\n        return bufferLevel;\r\n    }\r\n\r\n    /**\r\n     * Returns the mode for live playback catchup.\r\n     * @return {String}\r\n     * @private\r\n     */\r\n    function _getCatchupMode() {\r\n        const playbackBufferMin = settings.get().streaming.liveCatchup.playbackBufferMin;\r\n\r\n        return settings.get().streaming.liveCatchup.mode === Constants.LIVE_CATCHUP_MODE_LOLP && playbackBufferMin !== null && !isNaN(playbackBufferMin) ? Constants.LIVE_CATCHUP_MODE_LOLP : Constants.LIVE_CATCHUP_MODE_DEFAULT;\r\n    }\r\n\r\n    /**\r\n     * Checks whether the catchup mechanism should be enabled\r\n     * @return {boolean}\r\n     */\r\n    function _needToCatchUp() {\r\n        try {\r\n            if (_isCatchupEnabled() && settings.get().streaming.liveCatchup.playbackRate > 0 && getTime() > 0) {\r\n\r\n                const catchupMode = _getCatchupMode();\r\n                const currentLiveLatency = getCurrentLiveLatency();\r\n                const liveDelay = mediaPlayerModel.getLiveDelay();\r\n                const liveCatchupLatencyThreshold = mediaPlayerModel.getLiveCatchupLatencyThreshold();\r\n                const liveCatchUpMinDrift = settings.get().streaming.liveCatchup.minDrift;\r\n\r\n                if (catchupMode === Constants.LIVE_CATCHUP_MODE_LOLP) {\r\n                    const currentBuffer = getBufferLevel();\r\n                    const playbackBufferMin = settings.get().streaming.liveCatchup.playbackBufferMin;\r\n\r\n                    return _lolpNeedToCatchUpCustom(currentLiveLatency, liveDelay, liveCatchUpMinDrift, currentBuffer, playbackBufferMin, liveCatchupLatencyThreshold);\r\n                } else {\r\n                    return _defaultNeedToCatchUp(currentLiveLatency, liveDelay, liveCatchupLatencyThreshold, liveCatchUpMinDrift);\r\n                }\r\n            }\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Default algorithm to determine if catchup mode should be enabled\r\n     * @param {number} currentLiveLatency\r\n     * @param {number} liveDelay\r\n     * @param {number} liveCatchupLatencyThreshold\r\n     * @param {number} minDrift\r\n     * @return {boolean}\r\n     * @private\r\n     */\r\n    function _defaultNeedToCatchUp(currentLiveLatency, liveDelay, liveCatchupLatencyThreshold, minDrift) {\r\n        try {\r\n            const latencyDrift = Math.abs(currentLiveLatency - liveDelay);\r\n\r\n            return latencyDrift > minDrift && (isNaN(liveCatchupLatencyThreshold) || currentLiveLatency <= liveCatchupLatencyThreshold);\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * LoL+ logic to determine if catchup mode should be enabled\r\n     * @param {number} currentLiveLatency\r\n     * @param {number} liveDelay\r\n     * @param {number} minDrift\r\n     * @param {number} currentBuffer\r\n     * @param {number} playbackBufferMin\r\n     * @param {number} liveCatchupLatencyThreshold\r\n     * @return {boolean}\r\n     * @private\r\n     */\r\n    function _lolpNeedToCatchUpCustom(currentLiveLatency, liveDelay, minDrift, currentBuffer, playbackBufferMin, liveCatchupLatencyThreshold) {\r\n        try {\r\n            const latencyDrift = Math.abs(currentLiveLatency - liveDelay);\r\n\r\n            return (isNaN(liveCatchupLatencyThreshold) || currentLiveLatency <= liveCatchupLatencyThreshold) && (latencyDrift > minDrift || currentBuffer < playbackBufferMin);\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Apply catchup mode\r\n     */\r\n    function startPlaybackCatchUp() {\r\n        if (videoModel) {\r\n            let results;\r\n            const currentPlaybackRate = videoModel.getPlaybackRate();\r\n            const liveCatchupPlaybackRate = settings.get().streaming.liveCatchup.playbackRate;\r\n            const currentLiveLatency = getCurrentLiveLatency();\r\n            const liveDelay = mediaPlayerModel.getLiveDelay();\r\n            const bufferLevel = getBufferLevel();\r\n            // Custom playback control: Based on buffer level\r\n            if (_getCatchupMode() === Constants.LIVE_CATCHUP_MODE_LOLP) {\r\n                const liveCatchUpMinDrift = settings.get().streaming.liveCatchup.minDrift;\r\n                const playbackBufferMin = settings.get().streaming.liveCatchup.playbackBufferMin;\r\n                results = _calculateNewPlaybackRateLolP(liveCatchupPlaybackRate, currentLiveLatency, liveDelay, liveCatchUpMinDrift, playbackBufferMin, bufferLevel, currentPlaybackRate);\r\n            } else {\r\n                // Default playback control: Based on target and current latency\r\n                results = _calculateNewPlaybackRateDefault(liveCatchupPlaybackRate, currentLiveLatency, liveDelay, bufferLevel, currentPlaybackRate);\r\n            }\r\n\r\n            // Obtain newRate and apply to video model\r\n            let newRate = results.newRate;\r\n            if (newRate) {  // non-null\r\n                videoModel.setPlaybackRate(newRate);\r\n            }\r\n\r\n            const deltaLatency = currentLiveLatency - liveDelay;\r\n            if (settings.get().streaming.liveCatchup.maxDrift > 0 && !isLowLatencySeekingInProgress &&\r\n                deltaLatency > settings.get().streaming.liveCatchup.maxDrift) {\r\n                logger.info('Low Latency catchup mechanism. Latency too high, doing a seek to live point');\r\n                isLowLatencySeekingInProgress = true;\r\n                seekToLive();\r\n            } else {\r\n                isLowLatencySeekingInProgress = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Default algorithm to calculate the new playback rate\r\n     * @param {number} liveCatchUpPlaybackRate\r\n     * @param {number} currentLiveLatency\r\n     * @param {number} liveDelay\r\n     * @param {number} bufferLevel\r\n     * @param {number} currentPlaybackRate\r\n     * @return {{newRate: number}}\r\n     * @private\r\n     */\r\n    function _calculateNewPlaybackRateDefault(liveCatchUpPlaybackRate, currentLiveLatency, liveDelay, bufferLevel, currentPlaybackRate) {\r\n        const cpr = liveCatchUpPlaybackRate;\r\n        const deltaLatency = currentLiveLatency - liveDelay;\r\n        const d = deltaLatency * 5;\r\n\r\n        // Playback rate must be between (1 - cpr) - (1 + cpr)\r\n        // ex: if cpr is 0.5, it can have values between 0.5 - 1.5\r\n        const s = (cpr * 2) / (1 + Math.pow(Math.E, -d));\r\n        let newRate = (1 - cpr) + s;\r\n        // take into account situations in which there are buffer stalls,\r\n        // in which increasing playbackRate to reach target latency will\r\n        // just cause more and more stall situations\r\n        if (playbackStalled) {\r\n            // const bufferLevel = getBufferLevel();\r\n            if (bufferLevel > liveDelay / 2) {\r\n                // playbackStalled = false;\r\n                playbackStalled = false;\r\n            } else if (deltaLatency > 0) {\r\n                newRate = 1.0;\r\n            }\r\n        }\r\n\r\n        // don't change playbackrate for small variations (don't overload element with playbackrate changes)\r\n        if (Math.abs(currentPlaybackRate - newRate) <= minPlaybackRateChange) {\r\n            newRate = null;\r\n        }\r\n\r\n        return {\r\n            newRate: newRate\r\n        };\r\n\r\n    }\r\n\r\n    /**\r\n     * Lol+ algorithm to calculate the new playback rate\r\n     * @param {number} liveCatchUpPlaybackRate\r\n     * @param {number} currentLiveLatency\r\n     * @param {number} liveDelay\r\n     * @param {number} minDrift\r\n     * @param {number} playbackBufferMin\r\n     * @param {number} bufferLevel\r\n     * @param {number} currentPlaybackRate\r\n     * @return {{newRate: number}}\r\n     * @private\r\n     */\r\n    function _calculateNewPlaybackRateLolP(liveCatchUpPlaybackRate, currentLiveLatency, liveDelay, minDrift, playbackBufferMin, bufferLevel, currentPlaybackRate) {\r\n        const cpr = liveCatchUpPlaybackRate;\r\n        let newRate;\r\n\r\n        // Hybrid: Buffer-based\r\n        if (bufferLevel < playbackBufferMin) {\r\n            // Buffer in danger, slow down\r\n            const deltaBuffer = bufferLevel - playbackBufferMin;  // -ve value\r\n            const d = deltaBuffer * 5;\r\n\r\n            // Playback rate must be between (1 - cpr) - (1 + cpr)\r\n            // ex: if cpr is 0.5, it can have values between 0.5 - 1.5\r\n            const s = (cpr * 2) / (1 + Math.pow(Math.E, -d));\r\n            newRate = (1 - cpr) + s;\r\n\r\n            logger.debug('[LoL+ playback control_buffer-based] bufferLevel: ' + bufferLevel + ', newRate: ' + newRate);\r\n        } else {\r\n            // Hybrid: Latency-based\r\n            // Buffer is safe, vary playback rate based on latency\r\n\r\n            // Check if latency is within range of target latency\r\n            const minDifference = 0.02;\r\n            if (Math.abs(currentLiveLatency - liveDelay) <= (minDifference * liveDelay)) {\r\n                newRate = 1;\r\n            } else {\r\n                const deltaLatency = currentLiveLatency - liveDelay;\r\n                const d = deltaLatency * 5;\r\n\r\n                // Playback rate must be between (1 - cpr) - (1 + cpr)\r\n                // ex: if cpr is 0.5, it can have values between 0.5 - 1.5\r\n                const s = (cpr * 2) / (1 + Math.pow(Math.E, -d));\r\n                newRate = (1 - cpr) + s;\r\n            }\r\n\r\n            logger.debug('[LoL+ playback control_latency-based] latency: ' + currentLiveLatency + ', newRate: ' + newRate);\r\n        }\r\n\r\n        if (playbackStalled) {\r\n            if (bufferLevel > liveDelay / 2) {\r\n                playbackStalled = false;\r\n            }\r\n        }\r\n\r\n        // don't change playbackrate for small variations (don't overload element with playbackrate changes)\r\n        if (Math.abs(currentPlaybackRate - newRate) <= minPlaybackRateChange) {\r\n            newRate = null;\r\n        }\r\n\r\n        return {\r\n            newRate: newRate\r\n        };\r\n    }\r\n\r\n    function stopPlaybackCatchUp() {\r\n        if (videoModel) {\r\n            videoModel.setPlaybackRate(1.0);\r\n        }\r\n    }\r\n\r\n    function onFragmentLoadProgress(e) {\r\n        // If using fetch and stream mode is not available, readjust live latency so it is 20% higher than segment duration\r\n        if (e.stream === false && settings.get().streaming.lowLatencyEnabled && !isNaN(e.request.duration)) {\r\n            const minDelay = 1.2 * e.request.duration;\r\n            if (minDelay > mediaPlayerModel.getLiveDelay()) {\r\n                logger.warn('Browser does not support fetch API with StreamReader. Increasing live delay to be 20% higher than segment duration:', minDelay.toFixed(2));\r\n                const s = { streaming: { liveDelay: minDelay } };\r\n                settings.update(s);\r\n            }\r\n        }\r\n    }\r\n\r\n    function onBufferLevelStateChanged(e) {\r\n        // do not stall playback when get an event from Stream that is not active\r\n        if (e.streamId !== streamInfo.id) return;\r\n\r\n        if (_isCatchupEnabled()) {\r\n            if (e.state === MetricsConstants.BUFFER_EMPTY && !isSeeking()) {\r\n                if (!playbackStalled) {\r\n                    playbackStalled = true;\r\n                    stopPlaybackCatchUp();\r\n                }\r\n            }\r\n        } else {\r\n            videoModel.setStallState(e.mediaType, e.state === MetricsConstants.BUFFER_EMPTY);\r\n        }\r\n    }\r\n\r\n    function onPlaybackStalled(e) {\r\n        eventBus.trigger(Events.PLAYBACK_STALLED, { e: e });\r\n    }\r\n\r\n    function onStreamInitializing(e) {\r\n        applyServiceDescription(e.streamInfo, e.mediaInfo);\r\n    }\r\n\r\n    function applyServiceDescription(streamInfo, mediaInfo) {\r\n        if (streamInfo && streamInfo.manifestInfo && streamInfo.manifestInfo.serviceDescriptions) {\r\n            // is there a service description for low latency defined?\r\n            let llsd;\r\n\r\n            for (let i = 0; i < streamInfo.manifestInfo.serviceDescriptions.length; i++) {\r\n                const sd = streamInfo.manifestInfo.serviceDescriptions[i];\r\n                if (sd.schemeIdUri === Constants.SERVICE_DESCRIPTION_LL_SCHEME) {\r\n                    llsd = sd;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (llsd) {\r\n                if (mediaInfo && mediaInfo.supplementalProperties &&\r\n                    mediaInfo.supplementalProperties[Constants.SUPPLEMENTAL_PROPERTY_LL_SCHEME] === 'true') {\r\n                    if (llsd.latency && llsd.latency.target > 0) {\r\n                        logger.debug('Apply LL properties coming from service description. Target Latency (ms):', llsd.latency.target);\r\n                        settings.update({\r\n                            streaming: {\r\n                                lowLatencyEnabled: true,\r\n                                liveDelay: llsd.latency.target / 1000,\r\n                                liveCatchup: {\r\n                                    minDrift: llsd.latency.max > llsd.latency.target ? (llsd.latency.max - llsd.latency.target) / 1000 : undefined\r\n                                }\r\n                            }\r\n                        });\r\n                    }\r\n                    if (llsd.playbackRate && llsd.playbackRate.max > 1.0) {\r\n                        logger.debug('Apply LL properties coming from service description. Max PlaybackRate:', llsd.playbackRate.max);\r\n                        settings.update({\r\n                            streaming: {\r\n                                lowLatencyEnabled: true,\r\n                                liveCatchup: {\r\n                                    playbackRate: llsd.playbackRate.max - 1.0\r\n                                }\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function addAllListeners() {\r\n        videoModel.addEventListener('canplay', onCanPlay);\r\n        videoModel.addEventListener('play', onPlaybackStart);\r\n        videoModel.addEventListener('waiting', onPlaybackWaiting);\r\n        videoModel.addEventListener('playing', onPlaybackPlaying);\r\n        videoModel.addEventListener('pause', onPlaybackPaused);\r\n        videoModel.addEventListener('error', onPlaybackError);\r\n        videoModel.addEventListener('seeking', onPlaybackSeeking);\r\n        videoModel.addEventListener('seeked', onPlaybackSeeked);\r\n        videoModel.addEventListener('timeupdate', onPlaybackTimeUpdated);\r\n        videoModel.addEventListener('progress', onPlaybackProgress);\r\n        videoModel.addEventListener('ratechange', onPlaybackRateChanged);\r\n        videoModel.addEventListener('loadedmetadata', onPlaybackMetaDataLoaded);\r\n        videoModel.addEventListener('stalled', onPlaybackStalled);\r\n        videoModel.addEventListener('ended', onNativePlaybackEnded);\r\n    }\r\n\r\n    function removeAllListeners() {\r\n        videoModel.removeEventListener('canplay', onCanPlay);\r\n        videoModel.removeEventListener('play', onPlaybackStart);\r\n        videoModel.removeEventListener('waiting', onPlaybackWaiting);\r\n        videoModel.removeEventListener('playing', onPlaybackPlaying);\r\n        videoModel.removeEventListener('pause', onPlaybackPaused);\r\n        videoModel.removeEventListener('error', onPlaybackError);\r\n        videoModel.removeEventListener('seeking', onPlaybackSeeking);\r\n        videoModel.removeEventListener('seeked', onPlaybackSeeked);\r\n        videoModel.removeEventListener('timeupdate', onPlaybackTimeUpdated);\r\n        videoModel.removeEventListener('progress', onPlaybackProgress);\r\n        videoModel.removeEventListener('ratechange', onPlaybackRateChanged);\r\n        videoModel.removeEventListener('loadedmetadata', onPlaybackMetaDataLoaded);\r\n        videoModel.removeEventListener('stalled', onPlaybackStalled);\r\n        videoModel.removeEventListener('ended', onNativePlaybackEnded);\r\n    }\r\n\r\n    instance = {\r\n        initialize: initialize,\r\n        setConfig: setConfig,\r\n        getStartTimeFromUriParameters: getStartTimeFromUriParameters,\r\n        getTimeToStreamEnd: getTimeToStreamEnd,\r\n        getTime: getTime,\r\n        getNormalizedTime: getNormalizedTime,\r\n        getPlaybackRate: getPlaybackRate,\r\n        getPlayedRanges: getPlayedRanges,\r\n        getEnded: getEnded,\r\n        getIsDynamic: getIsDynamic,\r\n        getStreamController: getStreamController,\r\n        computeAndSetLiveDelay: computeAndSetLiveDelay,\r\n        getLiveDelay: getLiveDelay,\r\n        setLiveDelay: setLiveDelay,\r\n        getCurrentLiveLatency: getCurrentLiveLatency,\r\n        play: play,\r\n        isPaused: isPaused,\r\n        pause: pause,\r\n        isSeeking: isSeeking,\r\n        getStreamEndTime,\r\n        seek: seek,\r\n        reset: reset\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\nPlaybackController.__dashjs_factory_name = 'PlaybackController';\r\nexport default FactoryMaker.getSingletonFactory(PlaybackController);\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport Constants from '../constants/Constants';\r\nimport MetricsConstants from '../constants/MetricsConstants';\r\nimport BufferLevelRule from '../rules/scheduling/BufferLevelRule';\r\nimport FragmentModel from '../models/FragmentModel';\r\nimport EventBus from '../../core/EventBus';\r\nimport Events from '../../core/events/Events';\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\nimport Debug from '../../core/Debug';\r\n\r\nfunction ScheduleController(config) {\r\n\r\n    config = config || {};\r\n    const context = this.context;\r\n    const eventBus = EventBus(context).getInstance();\r\n    const adapter = config.adapter;\r\n    const dashMetrics = config.dashMetrics;\r\n    const mediaPlayerModel = config.mediaPlayerModel;\r\n    const fragmentModel = config.fragmentModel;\r\n    const abrController = config.abrController;\r\n    const playbackController = config.playbackController;\r\n    const textController = config.textController;\r\n    const streamInfo = config.streamInfo;\r\n    const type = config.type;\r\n    const mimeType = config.mimeType;\r\n    const mediaController = config.mediaController;\r\n    const bufferController = config.bufferController;\r\n    const settings = config.settings;\r\n\r\n    let instance,\r\n        logger,\r\n        currentRepresentationInfo,\r\n        initialRequest,\r\n        isStopped,\r\n        isFragmentProcessingInProgress,\r\n        timeToLoadDelay,\r\n        scheduleTimeout,\r\n        seekTarget,\r\n        hasVideoTrack,\r\n        bufferLevelRule,\r\n        lastFragmentRequest,\r\n        topQualityIndex,\r\n        lastInitQuality,\r\n        replaceRequestArray,\r\n        switchTrack,\r\n        replacingBuffer,\r\n        mediaRequest,\r\n        checkPlaybackQuality,\r\n        isReplacementRequest;\r\n\r\n    function setup() {\r\n        logger = Debug(context).getInstance().getLogger(instance);\r\n        resetInitialSettings();\r\n    }\r\n\r\n    function initialize(_hasVideoTrack) {\r\n        hasVideoTrack = _hasVideoTrack;\r\n\r\n        bufferLevelRule = BufferLevelRule(context).create({\r\n            abrController: abrController,\r\n            dashMetrics: dashMetrics,\r\n            mediaPlayerModel: mediaPlayerModel,\r\n            textController: textController,\r\n            settings: settings\r\n        });\r\n\r\n        //eventBus.on(Events.LIVE_EDGE_SEARCH_COMPLETED, onLiveEdgeSearchCompleted, this);\r\n        eventBus.on(Events.DATA_UPDATE_STARTED, onDataUpdateStarted, this);\r\n        eventBus.on(Events.FRAGMENT_LOADING_COMPLETED, onFragmentLoadingCompleted, this);\r\n        eventBus.on(Events.STREAM_COMPLETED, onStreamCompleted, this);\r\n        eventBus.on(Events.BUFFER_CLEARED, onBufferCleared, this);\r\n        eventBus.on(Events.BYTES_APPENDED_END_FRAGMENT, onBytesAppended, this);\r\n        eventBus.on(Events.QUOTA_EXCEEDED, onQuotaExceeded, this);\r\n        eventBus.on(Events.PLAYBACK_SEEKING, onPlaybackSeeking, this);\r\n        eventBus.on(Events.PLAYBACK_STARTED, onPlaybackStarted, this);\r\n        eventBus.on(Events.PLAYBACK_RATE_CHANGED, onPlaybackRateChanged, this);\r\n        eventBus.on(Events.PLAYBACK_TIME_UPDATED, onPlaybackTimeUpdated, this);\r\n        eventBus.on(Events.URL_RESOLUTION_FAILED, onURLResolutionFailed, this);\r\n        eventBus.on(Events.FRAGMENT_LOADING_ABANDONED, onFragmentLoadingAbandoned, this);\r\n        eventBus.on(Events.BUFFERING_COMPLETED, onBufferingCompleted, this);\r\n    }\r\n\r\n    function getType() {\r\n        return type;\r\n    }\r\n\r\n    function getStreamId() {\r\n        return streamInfo.id;\r\n    }\r\n\r\n    function setCurrentRepresentation(representationInfo) {\r\n        currentRepresentationInfo = representationInfo;\r\n    }\r\n\r\n    function isStarted() {\r\n        return (isStopped === false);\r\n    }\r\n\r\n    function start() {\r\n        if (isStarted()) return;\r\n        if (!currentRepresentationInfo || bufferController.getIsBufferingCompleted()) return;\r\n\r\n        logger.debug('Schedule Controller starts');\r\n        isStopped = false;\r\n        dashMetrics.createPlaylistTraceMetrics(currentRepresentationInfo.id, playbackController.getTime() * 1000, playbackController.getPlaybackRate());\r\n\r\n        if (initialRequest) {\r\n            initialRequest = false;\r\n        }\r\n\r\n        startScheduleTimer(0);\r\n    }\r\n\r\n    function stop() {\r\n        if (isStopped) return;\r\n\r\n        logger.debug('Schedule Controller stops');\r\n        logger.debug(type + ' Schedule Controller stops');\r\n        isStopped = true;\r\n        clearTimeout(scheduleTimeout);\r\n    }\r\n\r\n    function hasTopQualityChanged(type, id) {\r\n        topQualityIndex[id] = topQualityIndex[id] || {};\r\n        const newTopQualityIndex = abrController.getTopQualityIndexFor(type, id);\r\n\r\n        if (topQualityIndex[id][type] != newTopQualityIndex) {\r\n            logger.info('Top quality ' + type + ' index has changed from ' + topQualityIndex[id][type] + ' to ' + newTopQualityIndex);\r\n            topQualityIndex[id][type] = newTopQualityIndex;\r\n            return true;\r\n        }\r\n        return false;\r\n\r\n    }\r\n\r\n    function schedule() {\r\n        if (isStopped || isFragmentProcessingInProgress ||\r\n            (playbackController.isPaused() && !settings.get().streaming.scheduleWhilePaused) ||\r\n            ((type === Constants.FRAGMENTED_TEXT || type === Constants.TEXT) && !textController.isTextEnabled()) ||\r\n            bufferController.getIsBufferingCompleted()) {\r\n            stop();\r\n            return;\r\n        }\r\n\r\n        validateExecutedFragmentRequest();\r\n\r\n        const isReplacement = replaceRequestArray.length > 0;\r\n        if (replacingBuffer || isNaN(lastInitQuality) || switchTrack || isReplacement ||\r\n            hasTopQualityChanged(type, streamInfo.id) ||\r\n            bufferLevelRule.execute(type, currentRepresentationInfo, hasVideoTrack)) {\r\n            const getNextFragment = function () {\r\n                if ((currentRepresentationInfo.quality !== lastInitQuality || switchTrack) && (!replacingBuffer)) {\r\n                    if (switchTrack) {\r\n                        logger.debug('Switch track for ' + type + ', representation id = ' + currentRepresentationInfo.id);\r\n                        replacingBuffer = mediaController.getSwitchMode(type) === Constants.TRACK_SWITCH_MODE_ALWAYS_REPLACE;\r\n                        if (replacingBuffer && bufferController.replaceBuffer) {\r\n                            bufferController.replaceBuffer();\r\n                        }\r\n                        switchTrack = false;\r\n                    } else {\r\n                        logger.debug('Quality has changed, get init request for representationid = ' + currentRepresentationInfo.id);\r\n                    }\r\n                    eventBus.trigger(Events.INIT_FRAGMENT_NEEDED,\r\n                        { representationId: currentRepresentationInfo.id, sender: instance },\r\n                        { streamId: streamInfo.id, mediaType: type }\r\n                    );\r\n                    lastInitQuality = currentRepresentationInfo.quality;\r\n                    checkPlaybackQuality = false;\r\n                } else {\r\n                    const replacement = replaceRequestArray.shift();\r\n\r\n                    if (replacement && replacement.isInitializationRequest()) {\r\n                        // To be sure the specific init segment had not already been loaded\r\n                        eventBus.trigger(Events.INIT_FRAGMENT_NEEDED,\r\n                            { representationId: replacement.representationId, sender: instance },\r\n                            { streamId: streamInfo.id, mediaType: type }\r\n                        );\r\n                        checkPlaybackQuality = false;\r\n                    } else {\r\n                        eventBus.trigger(Events.MEDIA_FRAGMENT_NEEDED,\r\n                            { seekTarget: seekTarget, replacement: replacement },\r\n                            { streamId: streamInfo.id, mediaType: type }\r\n                        );\r\n                        checkPlaybackQuality = true;\r\n                    }\r\n                }\r\n            };\r\n\r\n            setFragmentProcessState(true);\r\n            if (!isReplacement && checkPlaybackQuality) {\r\n                abrController.checkPlaybackQuality(type);\r\n            }\r\n\r\n            getNextFragment();\r\n\r\n        } else {\r\n            startScheduleTimer(500);\r\n        }\r\n    }\r\n\r\n    function validateExecutedFragmentRequest() {\r\n        // Validate that the fragment request executed and appended into the source buffer is as\r\n        // good of quality as the current quality and is the correct media track.\r\n        const time = playbackController.getTime();\r\n        let safeBufferLevel = 1.5;\r\n\r\n        if (isNaN(currentRepresentationInfo.fragmentDuration)) { //fragmentDuration of representationInfo is not defined,\r\n            // call metrics function to have data in the latest scheduling info...\r\n            // if no metric, returns 0. In this case, rule will return false.\r\n            const schedulingInfo = dashMetrics.getCurrentSchedulingInfo(currentRepresentationInfo.mediaInfo.type);\r\n            safeBufferLevel = schedulingInfo ? schedulingInfo.duration * 1.5 : 1.5;\r\n        }\r\n        const request = fragmentModel.getRequests({\r\n            state: FragmentModel.FRAGMENT_MODEL_EXECUTED,\r\n            time: time + safeBufferLevel,\r\n            threshold: 0\r\n        })[0];\r\n\r\n        if (request && replaceRequestArray.indexOf(request) === -1 && !adapter.getIsTextTrack(mimeType)) {\r\n            const fastSwitchModeEnabled = settings.get().streaming.fastSwitchEnabled;\r\n            const bufferLevel = bufferController.getBufferLevel();\r\n            const abandonmentState = abrController.getAbandonmentStateFor(type);\r\n\r\n            // Only replace on track switch when NEVER_REPLACE\r\n            const trackChanged = !mediaController.isCurrentTrack(request.mediaInfo) && mediaController.getSwitchMode(request.mediaInfo.type) === Constants.TRACK_SWITCH_MODE_NEVER_REPLACE;\r\n            const qualityChanged = request.quality < currentRepresentationInfo.quality;\r\n\r\n            if (fastSwitchModeEnabled && (trackChanged || qualityChanged) && bufferLevel >= safeBufferLevel && abandonmentState !== MetricsConstants.ABANDON_LOAD) {\r\n                replaceRequest(request);\r\n                isReplacementRequest = true;\r\n                logger.debug('Reloading outdated fragment at index: ', request.index);\r\n            } else if (request.quality > currentRepresentationInfo.quality && !replacingBuffer) {\r\n                // The buffer has better quality it in then what we would request so set append point to end of buffer!!\r\n                setSeekTarget(playbackController.getTime() + bufferLevel);\r\n            }\r\n        }\r\n    }\r\n\r\n    function startScheduleTimer(value) {\r\n        clearTimeout(scheduleTimeout);\r\n\r\n        scheduleTimeout = setTimeout(schedule, value);\r\n    }\r\n\r\n    function setFragmentProcessState (state) {\r\n        if (isFragmentProcessingInProgress !== state ) {\r\n            isFragmentProcessingInProgress = state;\r\n        } else {\r\n            logger.debug('isFragmentProcessingInProgress is already equal to', state);\r\n        }\r\n    }\r\n\r\n    function processInitRequest(request) {\r\n        if (request) {\r\n            setFragmentProcessState(true);\r\n            fragmentModel.executeRequest(request);\r\n        }\r\n    }\r\n\r\n    function processMediaRequest(request) {\r\n        if (request) {\r\n            logger.debug('Next fragment request url is ' + request.url);\r\n            fragmentModel.executeRequest(request);\r\n        } else { // Use case - Playing at the bleeding live edge and frag is not available yet. Cycle back around.\r\n            if (playbackController.getIsDynamic()) {\r\n                logger.debug('Next fragment seems to be at the bleeding live edge and is not available yet. Rescheduling.');\r\n            }\r\n            setFragmentProcessState(false);\r\n            startScheduleTimer(settings.get().streaming.lowLatencyEnabled ? 100 : 500);\r\n        }\r\n    }\r\n\r\n    function switchTrackAsked() {\r\n        switchTrack = true;\r\n    }\r\n\r\n    function replaceRequest(request) {\r\n        replaceRequestArray.push(request);\r\n    }\r\n\r\n    function completeQualityChange(trigger) {\r\n        if (playbackController && fragmentModel) {\r\n            const item = fragmentModel.getRequests({\r\n                state: FragmentModel.FRAGMENT_MODEL_EXECUTED,\r\n                time: playbackController.getTime(),\r\n                threshold: 0\r\n            })[0];\r\n            if (item && playbackController.getTime() >= item.startTime) {\r\n                if ((!lastFragmentRequest.mediaInfo || (item.mediaInfo.type === lastFragmentRequest.mediaInfo.type && item.mediaInfo.id !== lastFragmentRequest.mediaInfo.id)) && trigger) {\r\n                    eventBus.trigger(Events.TRACK_CHANGE_RENDERED, {\r\n                        mediaType: type,\r\n                        oldMediaInfo: lastFragmentRequest.mediaInfo,\r\n                        newMediaInfo: item.mediaInfo\r\n                    });\r\n                }\r\n                if ((item.quality !== lastFragmentRequest.quality || item.adaptationIndex !== lastFragmentRequest.adaptationIndex) && trigger) {\r\n                    eventBus.trigger(Events.QUALITY_CHANGE_RENDERED, {\r\n                        mediaType: type,\r\n                        oldQuality: lastFragmentRequest.quality,\r\n                        newQuality: item.quality\r\n                    });\r\n                }\r\n                lastFragmentRequest = {\r\n                    mediaInfo: item.mediaInfo,\r\n                    quality: item.quality,\r\n                    adaptationIndex: item.adaptationIndex\r\n                };\r\n            }\r\n        }\r\n    }\r\n\r\n    function onStreamCompleted() {\r\n        stop();\r\n        setFragmentProcessState(false);\r\n        logger.info(`Stream ${streamInfo.id} is complete`);\r\n    }\r\n\r\n    function onFragmentLoadingCompleted(e) {\r\n        if (e.request.mediaInfo.streamInfo.id !== streamInfo.id || e.request.mediaType !== type) return;\r\n\r\n        logger.info('OnFragmentLoadingCompleted - Url:', e.request ? e.request.url : 'undefined', e.request.range ? ', Range:' + e.request.range : '');\r\n\r\n        if (adapter.getIsTextTrack(mimeType)) {\r\n            setFragmentProcessState(false);\r\n        }\r\n\r\n        if (e.error && e.request.serviceLocation && !isStopped) {\r\n            replaceRequest(e.request);\r\n            setFragmentProcessState(false);\r\n            startScheduleTimer(0);\r\n        }\r\n\r\n        if (replacingBuffer) {\r\n            mediaRequest = e.request;\r\n        }\r\n    }\r\n\r\n    function onPlaybackTimeUpdated() {\r\n        completeQualityChange(true);\r\n    }\r\n\r\n    function onBytesAppended(e) {\r\n        if (replacingBuffer && !isNaN(e.startTime)) {\r\n            replacingBuffer = false;\r\n            fragmentModel.addExecutedRequest(mediaRequest);\r\n        }\r\n\r\n        setFragmentProcessState(false);\r\n        if (isReplacementRequest && !isNaN(e.startTime)) {\r\n            //replace requests process is in progress, call schedule in n seconds.\r\n            //it is done in order to not add a fragment at the new quality at the end of the buffer before replace process is over.\r\n            //Indeed, if schedule is called too early, the executed request tested is the same that the one tested during previous schedule (at the new quality).\r\n            const currentTime = playbackController.getTime();\r\n            const fragEndTime = e.startTime + currentRepresentationInfo.fragmentDuration;\r\n            const safeBufferLevel = currentRepresentationInfo.fragmentDuration * 1.5;\r\n            if ((currentTime + safeBufferLevel) >= fragEndTime) {\r\n                startScheduleTimer(0);\r\n            } else {\r\n                startScheduleTimer((fragEndTime - (currentTime + safeBufferLevel)) * 1000);\r\n            }\r\n            isReplacementRequest = false;\r\n        } else {\r\n            startScheduleTimer(0);\r\n        }\r\n    }\r\n\r\n    function onFragmentLoadingAbandoned(e) {\r\n        logger.info('onFragmentLoadingAbandoned request: ' + e.request.url + ' has been aborted');\r\n        if (!playbackController.isSeeking() && !switchTrack) {\r\n            logger.info('onFragmentLoadingAbandoned request: ' + e.request.url + ' has to be downloaded again, origin is not seeking process or switch track call');\r\n            replaceRequest(e.request);\r\n        }\r\n        setFragmentProcessState(false);\r\n        startScheduleTimer(0);\r\n    }\r\n\r\n    function onDataUpdateStarted(/*e*/) {\r\n        // stop();\r\n    }\r\n\r\n    function onBufferingCompleted(/*e*/) {\r\n        stop();\r\n    }\r\n\r\n    function onBufferCleared(e) {\r\n        if (replacingBuffer && settings.get().streaming.flushBufferAtTrackSwitch) {\r\n            // For some devices (like chromecast) it is necessary to seek the video element to reset the internal decoding buffer,\r\n            // otherwise audio track switch will be effective only once after previous buffered track is consumed\r\n            playbackController.seek(playbackController.getTime() + 0.001, false, true);\r\n        }\r\n\r\n        // (Re)start schedule once buffer has been pruned after a QuotaExceededError\r\n        if (e.hasEnoughSpaceToAppend && e.quotaExceeded) {\r\n            start();\r\n        }\r\n    }\r\n\r\n    function onQuotaExceeded(/*e*/) {\r\n        // Stop scheduler (will be restarted once buffer is pruned)\r\n        stop();\r\n        setFragmentProcessState(false);\r\n    }\r\n\r\n    function onURLResolutionFailed() {\r\n        fragmentModel.abortRequests();\r\n        stop();\r\n    }\r\n\r\n    function onPlaybackStarted() {\r\n        if (isStopped || !settings.get().streaming.scheduleWhilePaused) {\r\n            start();\r\n        }\r\n    }\r\n\r\n    function onPlaybackSeeking(e) {\r\n        setSeekTarget(e.seekTime);\r\n        setTimeToLoadDelay(0);\r\n\r\n        if (isStopped) {\r\n            start();\r\n        }\r\n\r\n        const latency = currentRepresentationInfo.DVRWindow && playbackController ? currentRepresentationInfo.DVRWindow.end - playbackController.getTime() : NaN;\r\n        dashMetrics.updateManifestUpdateInfo({\r\n            latency: latency\r\n        });\r\n\r\n        if (!isFragmentProcessingInProgress) {\r\n            // No pending request, request next segment at seek target\r\n            startScheduleTimer(0);\r\n        } else {\r\n            // Abort current request\r\n            fragmentModel.abortRequests();\r\n        }\r\n    }\r\n\r\n    function onPlaybackRateChanged(e) {\r\n        dashMetrics.updatePlayListTraceMetrics({playbackspeed: e.playbackRate.toString()});\r\n    }\r\n\r\n    function setSeekTarget(value) {\r\n        seekTarget = value;\r\n    }\r\n\r\n    function setTimeToLoadDelay(value) {\r\n        timeToLoadDelay = value;\r\n    }\r\n\r\n    function getTimeToLoadDelay() {\r\n        return timeToLoadDelay;\r\n    }\r\n\r\n    function getBufferTarget() {\r\n        return bufferLevelRule.getBufferTarget(type, currentRepresentationInfo, hasVideoTrack);\r\n    }\r\n\r\n    function resetInitialSettings() {\r\n        checkPlaybackQuality = true;\r\n        isFragmentProcessingInProgress = false;\r\n        timeToLoadDelay = 0;\r\n        seekTarget = NaN;\r\n        initialRequest = true;\r\n        lastInitQuality = NaN;\r\n        lastFragmentRequest = {\r\n            mediaInfo: undefined,\r\n            quality: NaN,\r\n            adaptationIndex: NaN\r\n        };\r\n        topQualityIndex = {};\r\n        replaceRequestArray = [];\r\n        isStopped = true;\r\n        switchTrack = false;\r\n        replacingBuffer = false;\r\n        mediaRequest = null;\r\n        isReplacementRequest = false;\r\n    }\r\n\r\n    function reset() {\r\n        //eventBus.off(Events.LIVE_EDGE_SEARCH_COMPLETED, onLiveEdgeSearchCompleted, this);\r\n        eventBus.off(Events.DATA_UPDATE_STARTED, onDataUpdateStarted, this);\r\n        eventBus.off(Events.FRAGMENT_LOADING_COMPLETED, onFragmentLoadingCompleted, this);\r\n        eventBus.off(Events.STREAM_COMPLETED, onStreamCompleted, this);\r\n        eventBus.off(Events.BUFFER_CLEARED, onBufferCleared, this);\r\n        eventBus.off(Events.BYTES_APPENDED_END_FRAGMENT, onBytesAppended, this);\r\n        eventBus.off(Events.QUOTA_EXCEEDED, onQuotaExceeded, this);\r\n        eventBus.off(Events.PLAYBACK_SEEKING, onPlaybackSeeking, this);\r\n        eventBus.off(Events.PLAYBACK_STARTED, onPlaybackStarted, this);\r\n        eventBus.off(Events.PLAYBACK_RATE_CHANGED, onPlaybackRateChanged, this);\r\n        eventBus.off(Events.PLAYBACK_TIME_UPDATED, onPlaybackTimeUpdated, this);\r\n        eventBus.off(Events.URL_RESOLUTION_FAILED, onURLResolutionFailed, this);\r\n        eventBus.off(Events.FRAGMENT_LOADING_ABANDONED, onFragmentLoadingAbandoned, this);\r\n        eventBus.off(Events.BUFFERING_COMPLETED, onBufferingCompleted, this);\r\n\r\n        stop();\r\n        completeQualityChange(false);\r\n        resetInitialSettings();\r\n    }\r\n\r\n    function getPlaybackController() {\r\n        return playbackController;\r\n    }\r\n\r\n    instance = {\r\n        initialize: initialize,\r\n        getType: getType,\r\n        getStreamId: getStreamId,\r\n        setCurrentRepresentation: setCurrentRepresentation,\r\n        setSeekTarget: setSeekTarget,\r\n        setTimeToLoadDelay: setTimeToLoadDelay,\r\n        getTimeToLoadDelay: getTimeToLoadDelay,\r\n        switchTrackAsked: switchTrackAsked,\r\n        isStarted: isStarted,\r\n        start: start,\r\n        stop: stop,\r\n        reset: reset,\r\n        getBufferTarget: getBufferTarget,\r\n        processInitRequest: processInitRequest,\r\n        processMediaRequest: processMediaRequest,\r\n        getPlaybackController\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\nScheduleController.__dashjs_factory_name = 'ScheduleController';\r\nexport default FactoryMaker.getClassFactory(ScheduleController);\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport Constants from '../constants/Constants';\r\nimport MetricsConstants from '../constants/MetricsConstants';\r\nimport Stream from '../Stream';\r\nimport ManifestUpdater from '../ManifestUpdater';\r\nimport EventBus from '../../core/EventBus';\r\nimport Events from '../../core/events/Events';\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\nimport {\r\n    PlayList,\r\n    PlayListTrace\r\n} from '../vo/metrics/PlayList';\r\nimport Debug from '../../core/Debug';\r\nimport InitCache from '../utils/InitCache';\r\nimport URLUtils from '../utils/URLUtils';\r\nimport MediaPlayerEvents from '../MediaPlayerEvents';\r\nimport TimeSyncController from './TimeSyncController';\r\nimport MediaSourceController from './MediaSourceController';\r\nimport DashJSError from '../vo/DashJSError';\r\nimport Errors from '../../core/errors/Errors';\r\nimport EventController from './EventController';\r\n\r\nconst PLAYBACK_ENDED_TIMER_INTERVAL = 200;\r\nconst PREBUFFERING_CAN_START_INTERVAL = 500;\r\n\r\nfunction StreamController() {\r\n\r\n    const context = this.context;\r\n    const eventBus = EventBus(context).getInstance();\r\n\r\n    let instance,\r\n        logger,\r\n        capabilities,\r\n        manifestUpdater,\r\n        manifestLoader,\r\n        manifestModel,\r\n        adapter,\r\n        dashMetrics,\r\n        mediaSourceController,\r\n        timeSyncController,\r\n        baseURLController,\r\n        abrController,\r\n        mediaController,\r\n        eventController,\r\n        textController,\r\n        initCache,\r\n        urlUtils,\r\n        errHandler,\r\n        timelineConverter,\r\n        streams,\r\n        activeStream,\r\n        protectionController,\r\n        protectionData,\r\n        autoPlay,\r\n        isStreamSwitchingInProgress,\r\n        hasMediaError,\r\n        hasInitialisationError,\r\n        mediaSource,\r\n        videoModel,\r\n        playbackController,\r\n        mediaPlayerModel,\r\n        isPaused,\r\n        initialPlayback,\r\n        isPeriodSwitchInProgress,\r\n        playbackEndedTimerInterval,\r\n        prebufferingCanStartInterval,\r\n        buffers,\r\n        preloadingStreams,\r\n        supportsChangeType,\r\n        settings,\r\n        preBufferingCheckInProgress;\r\n\r\n    function setup() {\r\n        logger = Debug(context).getInstance().getLogger(instance);\r\n        timeSyncController = TimeSyncController(context).getInstance();\r\n        mediaSourceController = MediaSourceController(context).getInstance();\r\n        initCache = InitCache(context).getInstance();\r\n        urlUtils = URLUtils(context).getInstance();\r\n\r\n        resetInitialSettings();\r\n    }\r\n\r\n    function initialize(autoPl, protData) {\r\n        checkConfig();\r\n\r\n        autoPlay = autoPl;\r\n        protectionData = protData;\r\n        timelineConverter.initialize();\r\n\r\n        manifestUpdater = ManifestUpdater(context).create();\r\n        manifestUpdater.setConfig({\r\n            manifestModel: manifestModel,\r\n            adapter: adapter,\r\n            manifestLoader: manifestLoader,\r\n            errHandler: errHandler,\r\n            settings: settings\r\n        });\r\n        manifestUpdater.initialize();\r\n\r\n        eventController = EventController(context).getInstance();\r\n        eventController.setConfig({\r\n            manifestUpdater: manifestUpdater,\r\n            playbackController: playbackController\r\n        });\r\n        eventController.start();\r\n\r\n        registerEvents();\r\n    }\r\n\r\n    function registerEvents() {\r\n        eventBus.on(Events.PLAYBACK_TIME_UPDATED, onPlaybackTimeUpdated, instance);\r\n        eventBus.on(Events.PLAYBACK_SEEKING, onPlaybackSeeking, instance);\r\n        eventBus.on(Events.GAP_CAUSED_SEEK_TO_PERIOD_END, onGapCausedPlaybackSeek, instance);\r\n        eventBus.on(Events.PLAYBACK_ERROR, onPlaybackError, instance);\r\n        eventBus.on(Events.PLAYBACK_STARTED, onPlaybackStarted, instance);\r\n        eventBus.on(Events.PLAYBACK_PAUSED, onPlaybackPaused, instance);\r\n        eventBus.on(Events.PLAYBACK_ENDED, onEnded, instance, { priority: EventBus.EVENT_PRIORITY_HIGH });\r\n        eventBus.on(Events.MANIFEST_UPDATED, onManifestUpdated, instance);\r\n        eventBus.on(Events.STREAM_BUFFERING_COMPLETED, onStreamBufferingCompleted, instance);\r\n        eventBus.on(Events.MANIFEST_VALIDITY_CHANGED, onManifestValidityChanged, instance);\r\n        eventBus.on(Events.TIME_SYNCHRONIZATION_COMPLETED, onTimeSyncCompleted, instance);\r\n        eventBus.on(MediaPlayerEvents.METRIC_ADDED, onMetricAdded, instance);\r\n    }\r\n\r\n    function unRegisterEvents() {\r\n        eventBus.off(Events.PLAYBACK_TIME_UPDATED, onPlaybackTimeUpdated, instance);\r\n        eventBus.off(Events.PLAYBACK_SEEKING, onPlaybackSeeking, instance);\r\n        eventBus.off(Events.GAP_CAUSED_SEEK_TO_PERIOD_END, onGapCausedPlaybackSeek, instance);\r\n        eventBus.off(Events.PLAYBACK_ERROR, onPlaybackError, instance);\r\n        eventBus.off(Events.PLAYBACK_STARTED, onPlaybackStarted, instance);\r\n        eventBus.off(Events.PLAYBACK_PAUSED, onPlaybackPaused, instance);\r\n        eventBus.off(Events.PLAYBACK_ENDED, onEnded, instance);\r\n        eventBus.off(Events.MANIFEST_UPDATED, onManifestUpdated, instance);\r\n        eventBus.off(Events.STREAM_BUFFERING_COMPLETED, onStreamBufferingCompleted, instance);\r\n        eventBus.off(Events.MANIFEST_VALIDITY_CHANGED, onManifestValidityChanged, instance);\r\n        eventBus.off(Events.TIME_SYNCHRONIZATION_COMPLETED, onTimeSyncCompleted, instance);\r\n        eventBus.off(MediaPlayerEvents.METRIC_ADDED, onMetricAdded, instance);\r\n    }\r\n\r\n    /*\r\n     * Called when current playback position is changed.\r\n     * Used to determine the time current stream is finished and we should switch to the next stream.\r\n     */\r\n    function onPlaybackTimeUpdated(/*e*/) {\r\n        if (hasVideoTrack()) {\r\n            const playbackQuality = videoModel.getPlaybackQuality();\r\n            if (playbackQuality) {\r\n                dashMetrics.addDroppedFrames(playbackQuality);\r\n            }\r\n        }\r\n    }\r\n\r\n    function onPlaybackSeeking(e) {\r\n        const seekingStream = getStreamForTime(e.seekTime);\r\n\r\n        if (seekingStream === activeStream && preloadingStreams && preloadingStreams.length > 0) {\r\n            // Seeking to the current period was requested while preloading the next one, deactivate preloading one\r\n            preloadingStreams.forEach((s) => {\r\n                s.deactivate(true);\r\n            });\r\n        }\r\n\r\n        if (seekingStream && seekingStream !== activeStream) {\r\n            // If we're preloading other stream, the active one was deactivated and we need to switch back\r\n            flushPlaylistMetrics(PlayListTrace.END_OF_PERIOD_STOP_REASON);\r\n            switchStream(seekingStream, activeStream, e.seekTime);\r\n        } else {\r\n            flushPlaylistMetrics(PlayListTrace.USER_REQUEST_STOP_REASON);\r\n        }\r\n\r\n        createPlaylistMetrics(PlayList.SEEK_START_REASON);\r\n    }\r\n\r\n    function onGapCausedPlaybackSeek(e) {\r\n        const nextStream = getNextStream();\r\n        flushPlaylistMetrics(PlayListTrace.END_OF_PERIOD_STOP_REASON);\r\n        switchStream(nextStream, activeStream, e.seekTime);\r\n        createPlaylistMetrics(PlayList.SEEK_START_REASON);\r\n    }\r\n\r\n    function onPlaybackStarted( /*e*/) {\r\n        logger.debug('[onPlaybackStarted]');\r\n        if (initialPlayback) {\r\n            initialPlayback = false;\r\n            createPlaylistMetrics(PlayList.INITIAL_PLAYOUT_START_REASON);\r\n        } else {\r\n            if (isPaused) {\r\n                isPaused = false;\r\n                createPlaylistMetrics(PlayList.RESUME_FROM_PAUSE_START_REASON);\r\n            }\r\n        }\r\n    }\r\n\r\n    function onPlaybackPaused(e) {\r\n        logger.debug('[onPlaybackPaused]');\r\n        if (!e.ended) {\r\n            isPaused = true;\r\n            flushPlaylistMetrics(PlayListTrace.USER_REQUEST_STOP_REASON);\r\n        }\r\n    }\r\n\r\n    function startPlaybackEndedTimerInterval() {\r\n        if (!playbackEndedTimerInterval) {\r\n            playbackEndedTimerInterval = setInterval(function () {\r\n                if (!isStreamSwitchingInProgress && playbackController.getTimeToStreamEnd() <= 0) {\r\n                    eventBus.trigger(Events.PLAYBACK_ENDED, { 'isLast': getActiveStreamInfo().isLast });\r\n                }\r\n            }, PLAYBACK_ENDED_TIMER_INTERVAL);\r\n        }\r\n    }\r\n\r\n    function stopPlaybackEndedTimerInterval() {\r\n        if (playbackEndedTimerInterval) {\r\n            clearInterval(playbackEndedTimerInterval);\r\n            playbackEndedTimerInterval = null;\r\n        }\r\n    }\r\n\r\n    function startCheckIfPrebufferingCanStartInterval() {\r\n        if (!prebufferingCanStartInterval) {\r\n            prebufferingCanStartInterval = setInterval(function () {\r\n                checkIfPrebufferingCanStart();\r\n            }, PREBUFFERING_CAN_START_INTERVAL);\r\n        }\r\n    }\r\n\r\n    function stopCheckIfPrebufferingCanStartInterval() {\r\n        clearInterval(prebufferingCanStartInterval);\r\n        prebufferingCanStartInterval = null;\r\n    }\r\n\r\n    function checkIfPrebufferingCanStart() {\r\n        // In multiperiod situations, we constantly check if the streams have finished buffering so we can immediately start buffering the next stream\r\n        if (!activeStream || !hasStreamFinishedBuffering(activeStream)) {\r\n            return;\r\n        }\r\n        const upcomingStreams = getNextStreams(activeStream);\r\n        let i = 0;\r\n\r\n        while (i < upcomingStreams.length) {\r\n            const stream = upcomingStreams[i];\r\n            const previousStream = i === 0 ? activeStream : upcomingStreams[i - 1];\r\n            // If the preloading for the current stream is not scheduled, but its predecessor has finished buffering we can start prebuffering this stream\r\n            if (!stream.getPreloadingScheduled() && (hasStreamFinishedBuffering(previousStream))) {\r\n\r\n                if (mediaSource) {\r\n                    // We can not start prebuffering if the start of the next period is in the future. This will cause problems when calculating the segmentAvailabilityRange and updating the representations in the RepresentationController\r\n                    // As long as the timeline converter returns an invalid range we do not start the prebuffering\r\n                    const mediaTypes = [Constants.VIDEO, Constants.AUDIO];\r\n                    let segmentAvailabilityRangeIsOk = true;\r\n\r\n                    mediaTypes.forEach((mediaType) => {\r\n                        const mediaInfo = adapter.getMediaInfoForType(stream.getStreamInfo(), mediaType);\r\n                        const voRepresentations = adapter.getVoRepresentations(mediaInfo);\r\n                        voRepresentations.forEach((voRep) => {\r\n                            const isDynamic = adapter.getIsDynamic();\r\n                            const range = timelineConverter.calcSegmentAvailabilityRange(voRep, isDynamic);\r\n\r\n                            if (range.end < range.start) {\r\n                                segmentAvailabilityRangeIsOk = false;\r\n                            }\r\n                        });\r\n                    });\r\n\r\n                    if (segmentAvailabilityRangeIsOk) {\r\n                        onStreamCanLoadNext(stream, previousStream);\r\n                    }\r\n                }\r\n            }\r\n            i += 1;\r\n        }\r\n    }\r\n\r\n    function hasStreamFinishedBuffering(stream) {\r\n        try {\r\n            if (!stream) {\r\n                return false;\r\n            }\r\n            const streamProcessors = stream.getProcessors().filter((sp) => {\r\n                return sp.getType() === Constants.AUDIO || sp.getType() === Constants.VIDEO;\r\n            });\r\n\r\n            if (!streamProcessors || streamProcessors.length === 0) {\r\n                return false;\r\n            }\r\n\r\n            const unfinishedStreamProcessors = streamProcessors.filter((sp) => {\r\n                return !sp.isBufferingCompleted();\r\n            });\r\n\r\n            return unfinishedStreamProcessors && unfinishedStreamProcessors.length === 0;\r\n\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function onStreamBufferingCompleted() {\r\n        const isLast = getActiveStreamInfo().isLast;\r\n        if (mediaSource && isLast) {\r\n            logger.info('[onStreamBufferingCompleted] calls signalEndOfStream of mediaSourceController.');\r\n            mediaSourceController.signalEndOfStream(mediaSource);\r\n        }\r\n    }\r\n\r\n    function canSourceBuffersBeReused(nextStream, previousStream) {\r\n        try {\r\n            return (settings.get().streaming.reuseExistingSourceBuffers && previousStream.isProtectionCompatible(nextStream, previousStream) &&\r\n                (supportsChangeType || previousStream.isMediaCodecCompatible(nextStream, previousStream)) && !hasCriticalTexttracks(nextStream));\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function onStreamCanLoadNext(nextStream, previousStream = null) {\r\n\r\n        if (mediaSource && !nextStream.getPreloaded()) {\r\n            // Seamless period switch allowed only if:\r\n            // - none of the periods uses contentProtection.\r\n            // - AND changeType method implemented by browser or periods use the same codec.\r\n            let seamlessPeriodSwitch = canSourceBuffersBeReused(nextStream, previousStream);\r\n\r\n            if (seamlessPeriodSwitch) {\r\n                nextStream.setPreloadingScheduled(true);\r\n                logger.info(`[onStreamCanLoadNext] Preloading next stream with id ${nextStream.getId()}`);\r\n                isPeriodSwitchInProgress = true;\r\n                nextStream.preload(mediaSource, buffers);\r\n                preloadingStreams.push(nextStream);\r\n                nextStream.getProcessors().forEach(p => {\r\n                    p.setBufferingTime(nextStream.getStartTime());\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    function hasCriticalTexttracks(stream) {\r\n        try {\r\n            // if the upcoming stream has stpp or wvtt texttracks we need to reset the sourcebuffers and can not prebuffer\r\n            const streamInfo = stream.getStreamInfo();\r\n            const as = adapter.getAdaptationForType(streamInfo.index, Constants.FRAGMENTED_TEXT, streamInfo);\r\n            if (!as) {\r\n                return false;\r\n            }\r\n\r\n            return (as.codecs.indexOf('stpp') !== -1) || (as.codecs.indexOf('wvtt') !== -1);\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function getStreamForTime(time) {\r\n\r\n        if (isNaN(time)) {\r\n            return null;\r\n        }\r\n\r\n        let streamDuration = 0;\r\n        let stream = null;\r\n\r\n        const ln = streams.length;\r\n\r\n        if (ln > 0) {\r\n            streamDuration += streams[0].getStartTime();\r\n        }\r\n\r\n        for (let i = 0; i < ln; i++) {\r\n            stream = streams[i];\r\n            streamDuration = parseFloat((streamDuration + stream.getDuration()).toFixed(5));\r\n\r\n            if (time < streamDuration) {\r\n                return stream;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Returns a playhead time, in seconds, converted to be relative\r\n     * to the start of an identified stream/period or null if no such stream\r\n     * @param {number} time\r\n     * @param {string} id\r\n     * @returns {number|null}\r\n     */\r\n    function getTimeRelativeToStreamId(time, id) {\r\n        let stream = null;\r\n        let baseStart = 0;\r\n        let streamStart = 0;\r\n        let streamDur = null;\r\n\r\n        for (let i = 0; i < streams.length; i++) {\r\n            stream = streams[i];\r\n            streamStart = stream.getStartTime();\r\n            streamDur = stream.getDuration();\r\n\r\n            // use start time, if not undefined or NaN or similar\r\n            if (Number.isFinite(streamStart)) {\r\n                baseStart = streamStart;\r\n            }\r\n\r\n            if (stream.getId() === id) {\r\n                return time - baseStart;\r\n            } else {\r\n                // use duration if not undefined or NaN or similar\r\n                if (Number.isFinite(streamDur)) {\r\n                    baseStart += streamDur;\r\n                }\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    function getActiveStreamProcessors() {\r\n        return activeStream ? activeStream.getProcessors() : [];\r\n    }\r\n\r\n    function onEnded(e) {\r\n        if (!activeStream.getIsEndedEventSignaled()) {\r\n            activeStream.setIsEndedEventSignaled(true);\r\n            const nextStream = getNextStream();\r\n            if (nextStream) {\r\n                logger.debug(`StreamController onEnded, found next stream with id ${nextStream.getStreamInfo().id}`);\r\n                switchStream(nextStream, activeStream, NaN);\r\n            } else {\r\n                logger.debug('StreamController no next stream found');\r\n                activeStream.setIsEndedEventSignaled(false);\r\n            }\r\n            flushPlaylistMetrics(nextStream ? PlayListTrace.END_OF_PERIOD_STOP_REASON : PlayListTrace.END_OF_CONTENT_STOP_REASON);\r\n            isPeriodSwitchInProgress = false;\r\n        }\r\n        if (e && e.isLast) {\r\n            stopPlaybackEndedTimerInterval();\r\n        }\r\n    }\r\n\r\n    function getNextStream(stream = null) {\r\n        const refStream = stream ? stream : activeStream ? activeStream : null;\r\n        if (refStream) {\r\n            const start = refStream.getStreamInfo().start;\r\n            const duration = refStream.getStreamInfo().duration;\r\n            const streamEnd = parseFloat((start + duration).toFixed(5));\r\n\r\n            let i = 0;\r\n            let targetIndex = -1;\r\n            let lastDiff = NaN;\r\n            while (i < streams.length) {\r\n                const s = streams[i];\r\n                const diff = s.getStreamInfo().start - streamEnd;\r\n\r\n                if (diff >= 0 && (isNaN(lastDiff) || diff < lastDiff)) {\r\n                    lastDiff = diff;\r\n                    targetIndex = i;\r\n                }\r\n\r\n                i += 1;\r\n            }\r\n\r\n            if (targetIndex >= 0) {\r\n                return streams[targetIndex];\r\n            }\r\n\r\n            return null;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    function getNextStreams(stream) {\r\n        try {\r\n            const refStream = stream ? stream : activeStream ? activeStream : null;\r\n\r\n            if (refStream) {\r\n                const start = refStream.getStreamInfo().start;\r\n\r\n                return streams.filter(function (stream) {\r\n                    return (stream.getStreamInfo().start > start);\r\n                });\r\n            }\r\n        } catch (e) {\r\n            return [];\r\n        }\r\n    }\r\n\r\n    function switchStream(stream, previousStream, seekTime) {\r\n\r\n        if (isStreamSwitchingInProgress || !stream || (previousStream === stream && stream.isActive())) return;\r\n        isStreamSwitchingInProgress = true;\r\n\r\n        eventBus.trigger(Events.PERIOD_SWITCH_STARTED, {\r\n            fromStreamInfo: previousStream ? previousStream.getStreamInfo() : null,\r\n            toStreamInfo: stream.getStreamInfo()\r\n        });\r\n\r\n        let seamlessPeriodSwitch = false;\r\n        if (previousStream) {\r\n            seamlessPeriodSwitch = canSourceBuffersBeReused(stream, previousStream);\r\n            previousStream.deactivate(seamlessPeriodSwitch);\r\n        }\r\n\r\n        // Determine seek time when switching to new period\r\n        // - seek at given seek time\r\n        // - or seek at period start if upcoming period is not prebuffered\r\n        seekTime = !isNaN(seekTime) ? seekTime : (!seamlessPeriodSwitch && previousStream ? stream.getStreamInfo().start : NaN);\r\n        logger.info(`Switch to stream ${stream.getId()}. Seektime is ${seekTime}, current playback time is ${playbackController.getTime()}`);\r\n        logger.info(`Seamless period switch is set to ${seamlessPeriodSwitch}`);\r\n\r\n        activeStream = stream;\r\n        preloadingStreams = preloadingStreams.filter((s) => {\r\n            return s.getId() !== activeStream.getId();\r\n        });\r\n        playbackController.initialize(getActiveStreamInfo(), !!previousStream, seekTime);\r\n        if (videoModel.getElement()) {\r\n            openMediaSource(seekTime, (previousStream === null), false, seamlessPeriodSwitch);\r\n        } else {\r\n            activateStream(seekTime, seamlessPeriodSwitch);\r\n        }\r\n        isPeriodSwitchInProgress = false;\r\n    }\r\n\r\n    function switchToVideoElement(seekTime) {\r\n        if (activeStream) {\r\n            playbackController.initialize(getActiveStreamInfo());\r\n            openMediaSource(seekTime, false, true, false);\r\n        }\r\n    }\r\n\r\n    function openMediaSource(seekTime, sourceInitialized, streamActivated, keepBuffers) {\r\n        let sourceUrl;\r\n\r\n        function onMediaSourceOpen() {\r\n            // Manage situations in which a call to reset happens while MediaSource is being opened\r\n            if (!mediaSource || mediaSource.readyState !== 'open') return;\r\n\r\n            logger.debug('MediaSource is open!');\r\n            window.URL.revokeObjectURL(sourceUrl);\r\n            mediaSource.removeEventListener('sourceopen', onMediaSourceOpen);\r\n            mediaSource.removeEventListener('webkitsourceopen', onMediaSourceOpen);\r\n            setMediaDuration();\r\n\r\n            if (!sourceInitialized) {\r\n                eventBus.trigger(Events.SOURCE_INITIALIZED);\r\n            }\r\n\r\n            if (streamActivated) {\r\n                activeStream.setMediaSource(mediaSource);\r\n            } else {\r\n                activateStream(seekTime, keepBuffers);\r\n            }\r\n        }\r\n\r\n        if (!mediaSource) {\r\n            mediaSource = mediaSourceController.createMediaSource();\r\n            mediaSource.addEventListener('sourceopen', onMediaSourceOpen, false);\r\n            mediaSource.addEventListener('webkitsourceopen', onMediaSourceOpen, false);\r\n            sourceUrl = mediaSourceController.attachMediaSource(mediaSource, videoModel);\r\n            logger.debug('MediaSource attached to element.  Waiting on open...');\r\n        } else {\r\n            if (keepBuffers) {\r\n                activateStream(seekTime, keepBuffers);\r\n                if (!sourceInitialized) {\r\n                    eventBus.trigger(Events.SOURCE_INITIALIZED);\r\n                }\r\n            } else {\r\n                mediaSourceController.detachMediaSource(videoModel);\r\n                mediaSource.addEventListener('sourceopen', onMediaSourceOpen, false);\r\n                mediaSource.addEventListener('webkitsourceopen', onMediaSourceOpen, false);\r\n                sourceUrl = mediaSourceController.attachMediaSource(mediaSource, videoModel);\r\n                logger.debug('MediaSource attached to element.  Waiting on open...');\r\n            }\r\n        }\r\n    }\r\n\r\n    function getActiveStream() {\r\n        return activeStream;\r\n    }\r\n\r\n    function activateStream(seekTime, keepBuffers) {\r\n        buffers = activeStream.activate(mediaSource, keepBuffers ? buffers : undefined);\r\n\r\n        // check if change type is supported by the browser\r\n        if (buffers) {\r\n            const keys = Object.keys(buffers);\r\n            if (keys.length > 0 && buffers[keys[0]].changeType) {\r\n                supportsChangeType = true;\r\n            }\r\n        }\r\n\r\n        if (!initialPlayback) {\r\n            if (!isNaN(seekTime)) {\r\n                // If the streamswitch has been triggered by a seek command there is no need to seek again. Still we need to trigger the seeking event in order for the controllers to adjust the new time\r\n                if (seekTime === playbackController.getTime()) {\r\n                    eventBus.trigger(Events.SEEK_TARGET, {time: seekTime}, {streamId: activeStream.getId()});\r\n                } else {\r\n                    playbackController.seek(seekTime);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (autoPlay || !initialPlayback) {\r\n            playbackController.play();\r\n        }\r\n\r\n        isStreamSwitchingInProgress = false;\r\n        eventBus.trigger(Events.PERIOD_SWITCH_COMPLETED, { toStreamInfo: getActiveStreamInfo() });\r\n    }\r\n\r\n    function setMediaDuration(duration) {\r\n        const manifestDuration = duration ? duration : getActiveStreamInfo().manifestInfo.duration;\r\n\r\n        if (manifestDuration && !isNaN(manifestDuration)) {\r\n            const mediaDuration = mediaSourceController.setDuration(mediaSource, manifestDuration);\r\n            logger.debug('Duration successfully set to: ' + mediaDuration);\r\n        }\r\n    }\r\n\r\n    function getComposedStream(streamInfo) {\r\n        for (let i = 0, ln = streams.length; i < ln; i++) {\r\n            if (streams[i].getId() === streamInfo.id) {\r\n                return streams[i];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    function composeStreams() {\r\n        try {\r\n            const streamsInfo = adapter.getStreamsInfo();\r\n            if (streamsInfo.length === 0) {\r\n                throw new Error('There are no streams');\r\n            }\r\n\r\n            dashMetrics.updateManifestUpdateInfo({\r\n                currentTime: playbackController.getTime(),\r\n                buffered: videoModel.getBufferRange(),\r\n                presentationStartTime: streamsInfo[0].start,\r\n                clientTimeOffset: timelineConverter.getClientTimeOffset()\r\n            });\r\n\r\n            // Filter streams that are outdated and not included in the MPD anymore\r\n            if (streams.length > 0) {\r\n                streams = streams.filter((stream) => {\r\n\r\n                    const isStillIncluded = streamsInfo.filter((sInfo) => {\r\n                        return sInfo.id === stream.getId();\r\n                    }).length > 0;\r\n\r\n                    const shouldKeepStream = isStillIncluded || stream.getId() === activeStream.getId();\r\n\r\n                    if (!shouldKeepStream) {\r\n                        logger.debug(`Removing stream ${stream.getId()}`);\r\n                    }\r\n\r\n                    return shouldKeepStream;\r\n                });\r\n            }\r\n\r\n            for (let i = 0, ln = streamsInfo.length; i < ln; i++) {\r\n                // If the Stream object does not exist we probably loaded the manifest the first time or it was\r\n                // introduced in the updated manifest, so we need to create a new Stream and perform all the initialization operations\r\n                const streamInfo = streamsInfo[i];\r\n                let stream = getComposedStream(streamInfo);\r\n\r\n                if (!stream) {\r\n                    stream = Stream(context).create({\r\n                        manifestModel: manifestModel,\r\n                        mediaPlayerModel: mediaPlayerModel,\r\n                        dashMetrics: dashMetrics,\r\n                        manifestUpdater: manifestUpdater,\r\n                        adapter: adapter,\r\n                        timelineConverter: timelineConverter,\r\n                        capabilities: capabilities,\r\n                        errHandler: errHandler,\r\n                        baseURLController: baseURLController,\r\n                        abrController: abrController,\r\n                        playbackController: playbackController,\r\n                        eventController: eventController,\r\n                        mediaController: mediaController,\r\n                        textController: textController,\r\n                        protectionController: protectionController,\r\n                        videoModel: videoModel,\r\n                        streamInfo: streamInfo,\r\n                        settings: settings\r\n                    });\r\n                    streams.push(stream);\r\n                    stream.initialize();\r\n                } else {\r\n                    stream.updateData(streamInfo);\r\n                }\r\n\r\n                dashMetrics.addManifestUpdateStreamInfo(streamInfo);\r\n            }\r\n\r\n            if (!activeStream) {\r\n                if (adapter.getIsDynamic() && streams.length) {\r\n                    // Compute and set live delay\r\n                    const manifestInfo = streamsInfo[0].manifestInfo;\r\n                    const fragmentDuration = getFragmentDurationForLiveDelayCalculation(streamsInfo, manifestInfo);\r\n                    playbackController.computeAndSetLiveDelay(fragmentDuration, manifestInfo.DVRWindowSize, manifestInfo.minBufferTime);\r\n                }\r\n\r\n                // we need to figure out what the correct starting period is\r\n                let initialStream = null;\r\n                const startTimeFromUri = playbackController.getStartTimeFromUriParameters(adapter.getIsDynamic());\r\n\r\n                initialStream = getStreamForTime(startTimeFromUri);\r\n\r\n                // For multiperiod streams we should avoid a switch of streams after the seek to the live edge. So we do a calculation of the expected seek time to find the right stream object.\r\n                if (!initialStream && adapter.getIsDynamic() && streams.length) {\r\n                    logger.debug('Dynamic stream: Trying to find the correct starting period');\r\n                    initialStream = getInitialStream();\r\n                }\r\n                const startStream = initialStream !== null ? initialStream : streams[0];\r\n                switchStream(startStream, null, NaN);\r\n                startPlaybackEndedTimerInterval();\r\n                startCheckIfPrebufferingCanStartInterval();\r\n            }\r\n\r\n            eventBus.trigger(Events.STREAMS_COMPOSED);\r\n\r\n        } catch (e) {\r\n            errHandler.error(new DashJSError(Errors.MANIFEST_ERROR_ID_NOSTREAMS_CODE, e.message + 'nostreamscomposed', manifestModel.getValue()));\r\n            hasInitialisationError = true;\r\n            reset();\r\n        }\r\n    }\r\n\r\n    function getInitialStream() {\r\n        try {\r\n            const liveEdge = timelineConverter.calcPresentationTimeFromWallTime(new Date(), adapter.getRegularPeriods()[0]);\r\n            const targetDelay = playbackController.getLiveDelay();\r\n            const targetTime = liveEdge - targetDelay;\r\n\r\n            return getStreamForTime(targetTime);\r\n        } catch (e) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    function getFragmentDurationForLiveDelayCalculation(streamInfos, manifestInfo) {\r\n        try {\r\n            let fragmentDuration = NaN;\r\n\r\n            //  We use the maxFragmentDuration attribute if present\r\n            if (manifestInfo && !isNaN(manifestInfo.maxFragmentDuration) && isFinite(manifestInfo.maxFragmentDuration)) {\r\n                return manifestInfo.maxFragmentDuration;\r\n            }\r\n\r\n            // For single period manifests we can iterate over all AS and use the maximum segment length\r\n            if (streamInfos && streamInfos.length === 1) {\r\n                const streamInfo = streamInfos[0];\r\n                const mediaTypes = [Constants.VIDEO, Constants.AUDIO, Constants.FRAGMENTED_TEXT];\r\n\r\n\r\n                const fragmentDurations = mediaTypes\r\n                    .reduce((acc, mediaType) => {\r\n                        const mediaInfo = adapter.getMediaInfoForType(streamInfo, mediaType);\r\n\r\n                        if (mediaInfo) {\r\n                            acc.push(mediaInfo);\r\n                        }\r\n\r\n                        return acc;\r\n                    }, [])\r\n                    .reduce((acc, mediaInfo) => {\r\n                        const voRepresentations = adapter.getVoRepresentations(mediaInfo);\r\n\r\n                        if (voRepresentations && voRepresentations.length > 0) {\r\n                            voRepresentations.forEach((voRepresentation) => {\r\n                                if (voRepresentation) {\r\n                                    acc.push(voRepresentation);\r\n                                }\r\n                            });\r\n                        }\r\n\r\n                        return acc;\r\n                    }, [])\r\n                    .reduce((acc, voRepresentation) => {\r\n                        const representation = adapter.convertDataToRepresentationInfo(voRepresentation);\r\n\r\n                        if (representation && representation.fragmentDuration && !isNaN(representation.fragmentDuration)) {\r\n                            acc.push(representation.fragmentDuration);\r\n                        }\r\n\r\n                        return acc;\r\n                    }, []);\r\n\r\n                fragmentDuration = Math.max(...fragmentDurations);\r\n            }\r\n\r\n            return isFinite(fragmentDuration) ? fragmentDuration : NaN;\r\n        } catch (e) {\r\n            return NaN;\r\n        }\r\n    }\r\n\r\n    function onTimeSyncCompleted( /*e*/) {\r\n        const manifest = manifestModel.getValue();\r\n        //TODO check if we can move this to initialize??\r\n        if (protectionController) {\r\n            eventBus.trigger(Events.PROTECTION_CREATED, {\r\n                controller: protectionController,\r\n                manifest: manifest\r\n            });\r\n            protectionController.setMediaElement(videoModel.getElement());\r\n            if (protectionData) {\r\n                protectionController.setProtectionData(protectionData);\r\n            }\r\n        }\r\n\r\n        composeStreams();\r\n    }\r\n\r\n    function onManifestUpdated(e) {\r\n        if (!e.error) {\r\n            //Since streams are not composed yet , need to manually look up useCalculatedLiveEdgeTime to detect if stream\r\n            //is SegmentTimeline to avoid using time source\r\n            const manifest = e.manifest;\r\n            adapter.updatePeriods(manifest);\r\n\r\n            let manifestUTCTimingSources = adapter.getUTCTimingSources();\r\n            let allUTCTimingSources = (!adapter.getIsDynamic()) ? manifestUTCTimingSources : manifestUTCTimingSources.concat(mediaPlayerModel.getUTCTimingSources());\r\n            const isHTTPS = urlUtils.isHTTPS(e.manifest.url);\r\n\r\n            //If https is detected on manifest then lets apply that protocol to only the default time source(s). In the future we may find the need to apply this to more then just default so left code at this level instead of in MediaPlayer.\r\n            allUTCTimingSources.forEach(function (item) {\r\n                if (item.value.replace(/.*?:\\/\\//g, '') === mediaPlayerModel.getDefaultUtcTimingSource().value.replace(/.*?:\\/\\//g, '')) {\r\n                    item.value = item.value.replace(isHTTPS ? new RegExp(/^(http:)?\\/\\//i) : new RegExp(/^(https:)?\\/\\//i), isHTTPS ? 'https://' : 'http://');\r\n                    logger.debug('Matching default timing source protocol to manifest protocol: ', item.value);\r\n                }\r\n            });\r\n\r\n            baseURLController.initialize(manifest);\r\n\r\n            timeSyncController.setConfig({\r\n                dashMetrics: dashMetrics,\r\n                baseURLController: baseURLController\r\n            });\r\n            timeSyncController.initialize(allUTCTimingSources, settings.get().streaming.useManifestDateHeaderTimeSource);\r\n        } else {\r\n            hasInitialisationError = true;\r\n            reset();\r\n        }\r\n    }\r\n\r\n    function hasVideoTrack() {\r\n        return activeStream ? activeStream.getHasVideoTrack() : false;\r\n    }\r\n\r\n    function hasAudioTrack() {\r\n        return activeStream ? activeStream.getHasAudioTrack() : false;\r\n    }\r\n\r\n    function flushPlaylistMetrics(reason, time) {\r\n        time = time || new Date();\r\n\r\n        getActiveStreamProcessors().forEach(p => {\r\n            p.finalisePlayList(time, reason);\r\n        });\r\n        dashMetrics.addPlayList();\r\n    }\r\n\r\n    function createPlaylistMetrics(startReason) {\r\n        dashMetrics.createPlaylistMetrics(playbackController.getTime() * 1000, startReason);\r\n    }\r\n\r\n    function onPlaybackError(e) {\r\n        if (!e.error) return;\r\n\r\n        let msg = '';\r\n\r\n        switch (e.error.code) {\r\n            case 1:\r\n                msg = 'MEDIA_ERR_ABORTED';\r\n                break;\r\n            case 2:\r\n                msg = 'MEDIA_ERR_NETWORK';\r\n                break;\r\n            case 3:\r\n                msg = 'MEDIA_ERR_DECODE';\r\n                break;\r\n            case 4:\r\n                msg = 'MEDIA_ERR_SRC_NOT_SUPPORTED';\r\n                break;\r\n            case 5:\r\n                msg = 'MEDIA_ERR_ENCRYPTED';\r\n                break;\r\n            default:\r\n                msg = 'UNKNOWN';\r\n                break;\r\n        }\r\n\r\n        hasMediaError = true;\r\n\r\n        if (e.error.message) {\r\n            msg += ' (' + e.error.message + ')';\r\n        }\r\n\r\n        if (e.error.msExtendedCode) {\r\n            msg += ' (0x' + (e.error.msExtendedCode >>> 0).toString(16).toUpperCase() + ')';\r\n        }\r\n\r\n        logger.fatal('Video Element Error: ' + msg);\r\n        if (e.error) {\r\n            logger.fatal(e.error);\r\n        }\r\n        errHandler.error(new DashJSError(e.error.code, msg));\r\n        reset();\r\n    }\r\n\r\n    function getActiveStreamInfo() {\r\n        return activeStream ? activeStream.getStreamInfo() : null;\r\n    }\r\n\r\n    function getIsStreamSwitchInProgress() {\r\n        return isStreamSwitchingInProgress;\r\n    }\r\n\r\n    function getHasMediaOrIntialisationError() {\r\n        return hasMediaError || hasInitialisationError;\r\n    }\r\n\r\n    function getStreamById(id) {\r\n        return streams.filter(function (item) {\r\n            return item.getId() === id;\r\n        })[0];\r\n    }\r\n\r\n    function checkConfig() {\r\n        if (!manifestLoader || !manifestLoader.hasOwnProperty('load') || !timelineConverter || !timelineConverter.hasOwnProperty('initialize') ||\r\n            !timelineConverter.hasOwnProperty('reset') || !timelineConverter.hasOwnProperty('getClientTimeOffset') || !manifestModel || !errHandler ||\r\n            !dashMetrics || !playbackController) {\r\n            throw new Error(Constants.MISSING_CONFIG_ERROR);\r\n        }\r\n    }\r\n\r\n    function checkInitialize() {\r\n        if (!manifestUpdater || !manifestUpdater.hasOwnProperty('setManifest')) {\r\n            throw new Error('initialize function has to be called previously');\r\n        }\r\n    }\r\n\r\n    function load(url) {\r\n        checkConfig();\r\n        manifestLoader.load(url);\r\n    }\r\n\r\n    function loadWithManifest(manifest) {\r\n        checkInitialize();\r\n        manifestUpdater.setManifest(manifest);\r\n    }\r\n\r\n    function onManifestValidityChanged(e) {\r\n        if (!isNaN(e.newDuration)) {\r\n            setMediaDuration(e.newDuration);\r\n        }\r\n    }\r\n\r\n    function setConfig(config) {\r\n        if (!config) return;\r\n\r\n        if (config.capabilities) {\r\n            capabilities = config.capabilities;\r\n        }\r\n        if (config.manifestLoader) {\r\n            manifestLoader = config.manifestLoader;\r\n        }\r\n        if (config.manifestModel) {\r\n            manifestModel = config.manifestModel;\r\n        }\r\n        if (config.mediaPlayerModel) {\r\n            mediaPlayerModel = config.mediaPlayerModel;\r\n        }\r\n        if (config.protectionController) {\r\n            protectionController = config.protectionController;\r\n        }\r\n        if (config.adapter) {\r\n            adapter = config.adapter;\r\n        }\r\n        if (config.dashMetrics) {\r\n            dashMetrics = config.dashMetrics;\r\n        }\r\n        if (config.errHandler) {\r\n            errHandler = config.errHandler;\r\n        }\r\n        if (config.timelineConverter) {\r\n            timelineConverter = config.timelineConverter;\r\n        }\r\n        if (config.videoModel) {\r\n            videoModel = config.videoModel;\r\n        }\r\n        if (config.playbackController) {\r\n            playbackController = config.playbackController;\r\n        }\r\n        if (config.abrController) {\r\n            abrController = config.abrController;\r\n        }\r\n        if (config.mediaController) {\r\n            mediaController = config.mediaController;\r\n        }\r\n        if (config.textController) {\r\n            textController = config.textController;\r\n        }\r\n        if (config.settings) {\r\n            settings = config.settings;\r\n        }\r\n        if (config.baseURLController) {\r\n            baseURLController = config.baseURLController;\r\n        }\r\n    }\r\n\r\n    function setProtectionData(protData) {\r\n        protectionData = protData;\r\n    }\r\n\r\n    function resetInitialSettings() {\r\n        streams = [];\r\n        protectionController = null;\r\n        isStreamSwitchingInProgress = false;\r\n        activeStream = null;\r\n        hasMediaError = false;\r\n        hasInitialisationError = false;\r\n        initialPlayback = true;\r\n        isPaused = false;\r\n        autoPlay = true;\r\n        playbackEndedTimerInterval = null;\r\n        isPeriodSwitchInProgress = false;\r\n        prebufferingCanStartInterval = null;\r\n        preBufferingCheckInProgress = false;\r\n        preloadingStreams = [];\r\n    }\r\n\r\n    function reset() {\r\n        checkConfig();\r\n\r\n        timeSyncController.reset();\r\n\r\n        flushPlaylistMetrics(\r\n            hasMediaError || hasInitialisationError ?\r\n                PlayListTrace.FAILURE_STOP_REASON :\r\n                PlayListTrace.USER_REQUEST_STOP_REASON\r\n        );\r\n\r\n        for (let i = 0, ln = streams ? streams.length : 0; i < ln; i++) {\r\n            const stream = streams[i];\r\n            stream.reset(hasMediaError);\r\n        }\r\n\r\n        unRegisterEvents();\r\n\r\n        baseURLController.reset();\r\n        manifestUpdater.reset();\r\n        eventController.reset();\r\n        dashMetrics.clearAllCurrentMetrics();\r\n        manifestModel.setValue(null);\r\n        manifestLoader.reset();\r\n        timelineConverter.reset();\r\n        initCache.reset();\r\n\r\n        if (mediaSource) {\r\n            mediaSourceController.detachMediaSource(videoModel);\r\n            mediaSource = null;\r\n        }\r\n        videoModel = null;\r\n        if (protectionController) {\r\n            protectionController.setMediaElement(null);\r\n            protectionController = null;\r\n            protectionData = null;\r\n            if (manifestModel.getValue()) {\r\n                eventBus.trigger(Events.PROTECTION_DESTROYED, { data: manifestModel.getValue().url });\r\n            }\r\n        }\r\n\r\n        stopPlaybackEndedTimerInterval();\r\n        stopCheckIfPrebufferingCanStartInterval();\r\n        eventBus.trigger(Events.STREAM_TEARDOWN_COMPLETE);\r\n        resetInitialSettings();\r\n    }\r\n\r\n    function onMetricAdded(e) {\r\n        if (e.metric === MetricsConstants.DVR_INFO) {\r\n            //Match media type? How can DVR window be different for media types?\r\n            //Should we normalize and union the two?\r\n            const targetMediaType = hasAudioTrack() ? Constants.AUDIO : Constants.VIDEO;\r\n            if (e.mediaType === targetMediaType) {\r\n                mediaSourceController.setSeekable(mediaSource, e.value.range.start, e.value.range.end);\r\n            }\r\n        }\r\n    }\r\n\r\n    function getStreams() {\r\n        return streams;\r\n    }\r\n\r\n    instance = {\r\n        initialize,\r\n        getActiveStreamInfo,\r\n        hasVideoTrack,\r\n        hasAudioTrack,\r\n        switchToVideoElement,\r\n        getStreamById,\r\n        getStreamForTime,\r\n        getTimeRelativeToStreamId,\r\n        load,\r\n        loadWithManifest,\r\n        getActiveStreamProcessors,\r\n        setConfig,\r\n        setProtectionData,\r\n        getIsStreamSwitchInProgress,\r\n        getHasMediaOrIntialisationError,\r\n        hasStreamFinishedBuffering,\r\n        getStreams,\r\n        getActiveStream,\r\n        reset\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\nStreamController.__dashjs_factory_name = 'StreamController';\r\nexport default FactoryMaker.getSingletonFactory(StreamController);\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport DashJSError from './../vo/DashJSError';\r\nimport { HTTPRequest } from './../vo/metrics/HTTPRequest';\r\nimport EventBus from './../../core/EventBus';\r\nimport Events from './../../core/events/Events';\r\nimport Errors from './../../core/errors/Errors';\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\nimport Debug from '../../core/Debug';\r\nimport URLUtils from '../utils/URLUtils';\r\n\r\nconst HTTP_TIMEOUT_MS = 5000;\r\n\r\nfunction TimeSyncController() {\r\n\r\n    const context = this.context;\r\n    const eventBus = EventBus(context).getInstance();\r\n    const urlUtils = URLUtils(context).getInstance();\r\n\r\n    let instance,\r\n        logger,\r\n        offsetToDeviceTimeMs,\r\n        isSynchronizing,\r\n        useManifestDateHeaderTimeSource,\r\n        handlers,\r\n        dashMetrics,\r\n        baseURLController;\r\n\r\n    function setup() {\r\n        logger = Debug(context).getInstance().getLogger(instance);\r\n    }\r\n\r\n    function initialize(timingSources, useManifestDateHeader) {\r\n        useManifestDateHeaderTimeSource = useManifestDateHeader;\r\n        offsetToDeviceTimeMs = 0;\r\n        isSynchronizing = false;\r\n\r\n        // a list of known schemeIdUris and a method to call with @value\r\n        handlers = {\r\n            'urn:mpeg:dash:utc:http-head:2014':     httpHeadHandler,\r\n            'urn:mpeg:dash:utc:http-xsdate:2014':   httpHandler.bind(null, xsdatetimeDecoder),\r\n            'urn:mpeg:dash:utc:http-iso:2014':      httpHandler.bind(null, iso8601Decoder),\r\n            'urn:mpeg:dash:utc:direct:2014':        directHandler,\r\n\r\n            // some specs referencing early ISO23009-1 drafts incorrectly use\r\n            // 2012 in the URI, rather than 2014. support these for now.\r\n            'urn:mpeg:dash:utc:http-head:2012':     httpHeadHandler,\r\n            'urn:mpeg:dash:utc:http-xsdate:2012':   httpHandler.bind(null, xsdatetimeDecoder),\r\n            'urn:mpeg:dash:utc:http-iso:2012':      httpHandler.bind(null, iso8601Decoder),\r\n            'urn:mpeg:dash:utc:direct:2012':        directHandler,\r\n\r\n            // it isn't clear how the data returned would be formatted, and\r\n            // no public examples available so http-ntp not supported for now.\r\n            // presumably you would do an arraybuffer type xhr and decode the\r\n            // binary data returned but I would want to see a sample first.\r\n            'urn:mpeg:dash:utc:http-ntp:2014':      notSupportedHandler,\r\n\r\n            // not clear how this would be supported in javascript (in browser)\r\n            'urn:mpeg:dash:utc:ntp:2014':           notSupportedHandler,\r\n            'urn:mpeg:dash:utc:sntp:2014':          notSupportedHandler\r\n        };\r\n\r\n        if (!getIsSynchronizing()) {\r\n            attemptSync(timingSources);\r\n        }\r\n    }\r\n\r\n    function setConfig(config) {\r\n        if (!config) return;\r\n\r\n        if (config.dashMetrics) {\r\n            dashMetrics = config.dashMetrics;\r\n        }\r\n\r\n        if (config.baseURLController) {\r\n            baseURLController = config.baseURLController;\r\n        }\r\n    }\r\n\r\n    function getOffsetToDeviceTimeMs() {\r\n        return getOffsetMs();\r\n    }\r\n\r\n    function setIsSynchronizing(value) {\r\n        isSynchronizing = value;\r\n    }\r\n\r\n    function getIsSynchronizing() {\r\n        return isSynchronizing;\r\n    }\r\n\r\n    function setOffsetMs(value) {\r\n        offsetToDeviceTimeMs = value;\r\n    }\r\n\r\n    function getOffsetMs() {\r\n        return offsetToDeviceTimeMs;\r\n    }\r\n\r\n    // takes xsdatetime and returns milliseconds since UNIX epoch\r\n    // may not be necessary as xsdatetime is very similar to ISO 8601\r\n    // which is natively understood by javascript Date parser\r\n    function alternateXsdatetimeDecoder(xsdatetimeStr) {\r\n        // taken from DashParser - should probably refactor both uses\r\n        const SECONDS_IN_MIN = 60;\r\n        const MINUTES_IN_HOUR = 60;\r\n        const MILLISECONDS_IN_SECONDS = 1000;\r\n        let datetimeRegex = /^([0-9]{4})-([0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2})(?::([0-9]*)(\\.[0-9]*)?)?(?:([+\\-])([0-9]{2})([0-9]{2}))?/;\r\n\r\n        let utcDate,\r\n            timezoneOffset;\r\n\r\n        let match = datetimeRegex.exec(xsdatetimeStr);\r\n\r\n        // If the string does not contain a timezone offset different browsers can interpret it either\r\n        // as UTC or as a local time so we have to parse the string manually to normalize the given date value for\r\n        // all browsers\r\n        utcDate = Date.UTC(\r\n            parseInt(match[1], 10),\r\n            parseInt(match[2], 10) - 1, // months start from zero\r\n            parseInt(match[3], 10),\r\n            parseInt(match[4], 10),\r\n            parseInt(match[5], 10),\r\n            (match[6] && (parseInt(match[6], 10) || 0)),\r\n            (match[7] && parseFloat(match[7]) * MILLISECONDS_IN_SECONDS) || 0\r\n        );\r\n        // If the date has timezone offset take it into account as well\r\n        if (match[9] && match[10]) {\r\n            timezoneOffset = parseInt(match[9], 10) * MINUTES_IN_HOUR + parseInt(match[10], 10);\r\n            utcDate += (match[8] === '+' ? -1 : +1) * timezoneOffset * SECONDS_IN_MIN * MILLISECONDS_IN_SECONDS;\r\n        }\r\n\r\n        return new Date(utcDate).getTime();\r\n    }\r\n\r\n    // try to use the built in parser, since xsdate is a constrained ISO8601\r\n    // which is supported natively by Date.parse. if that fails, try a\r\n    // regex-based version used elsewhere in this application.\r\n    function xsdatetimeDecoder(xsdatetimeStr) {\r\n        let parsedDate = Date.parse(xsdatetimeStr);\r\n\r\n        if (isNaN(parsedDate)) {\r\n            parsedDate = alternateXsdatetimeDecoder(xsdatetimeStr);\r\n        }\r\n\r\n        return parsedDate;\r\n    }\r\n\r\n    // takes ISO 8601 timestamp and returns milliseconds since UNIX epoch\r\n    function iso8601Decoder(isoStr) {\r\n        return Date.parse(isoStr);\r\n    }\r\n\r\n    // takes RFC 1123 timestamp (which is same as ISO8601) and returns\r\n    // milliseconds since UNIX epoch\r\n    function rfc1123Decoder(dateStr) {\r\n        return Date.parse(dateStr);\r\n    }\r\n\r\n    function notSupportedHandler(url, onSuccessCB, onFailureCB) {\r\n        onFailureCB();\r\n    }\r\n\r\n    function directHandler(xsdatetimeStr, onSuccessCB, onFailureCB) {\r\n        let time = xsdatetimeDecoder(xsdatetimeStr);\r\n\r\n        if (!isNaN(time)) {\r\n            onSuccessCB(time);\r\n            return;\r\n        }\r\n\r\n        onFailureCB();\r\n    }\r\n\r\n    function httpHandler(decoder, url, onSuccessCB, onFailureCB, isHeadRequest) {\r\n        let oncomplete,\r\n            onload;\r\n        let complete = false;\r\n        let req = new XMLHttpRequest();\r\n\r\n        let verb = isHeadRequest ? HTTPRequest.HEAD : HTTPRequest.GET;\r\n        let urls = url.match(/\\S+/g);\r\n\r\n        // according to ISO 23009-1, url could be a white-space\r\n        // separated list of URLs. just handle one at a time.\r\n        url = urls.shift();\r\n\r\n        oncomplete = function () {\r\n            if (complete) {\r\n                return;\r\n            }\r\n\r\n            // we only want to pass through here once per xhr,\r\n            // regardless of whether the load was successful.\r\n            complete = true;\r\n\r\n            // if there are more urls to try, call self.\r\n            if (urls.length) {\r\n                httpHandler(decoder, urls.join(' '), onSuccessCB, onFailureCB, isHeadRequest);\r\n            } else {\r\n                onFailureCB();\r\n            }\r\n        };\r\n\r\n        onload = function () {\r\n            let time,\r\n                result;\r\n\r\n            if (req.status === 200) {\r\n                time = isHeadRequest ?\r\n                        req.getResponseHeader('Date') :\r\n                        req.response;\r\n\r\n                result = decoder(time);\r\n\r\n                // decoder returns NaN if non-standard input\r\n                if (!isNaN(result)) {\r\n                    onSuccessCB(result);\r\n                    complete = true;\r\n                }\r\n            }\r\n        };\r\n\r\n        if (urlUtils.isRelative(url)) {\r\n            // passing no path to resolve will return just MPD BaseURL/baseUri\r\n            const baseUrl = baseURLController.resolve();\r\n            if (baseUrl) {\r\n                url = urlUtils.resolve(url, baseUrl.url);\r\n            }\r\n        }\r\n\r\n        req.open(verb, url);\r\n        req.timeout = HTTP_TIMEOUT_MS || 0;\r\n        req.onload = onload;\r\n        req.onloadend = oncomplete;\r\n        req.send();\r\n    }\r\n\r\n    function httpHeadHandler(url, onSuccessCB, onFailureCB) {\r\n        httpHandler(rfc1123Decoder, url, onSuccessCB, onFailureCB, true);\r\n    }\r\n\r\n    function checkForDateHeader() {\r\n        let dateHeaderValue = dashMetrics.getLatestMPDRequestHeaderValueByID('Date');\r\n        let dateHeaderTime = dateHeaderValue !== null ? new Date(dateHeaderValue).getTime() : Number.NaN;\r\n\r\n        if (!isNaN(dateHeaderTime)) {\r\n            setOffsetMs(dateHeaderTime - new Date().getTime());\r\n            completeTimeSyncSequence(false, dateHeaderTime / 1000, offsetToDeviceTimeMs);\r\n        } else {\r\n            completeTimeSyncSequence(true);\r\n        }\r\n    }\r\n\r\n    function completeTimeSyncSequence(failed, time, offset) {\r\n        setIsSynchronizing(false);\r\n        eventBus.trigger(Events.TIME_SYNCHRONIZATION_COMPLETED, {\r\n            time: time,\r\n            offset: offset,\r\n            error: failed ? new DashJSError(Errors.TIME_SYNC_FAILED_ERROR_CODE, Errors.TIME_SYNC_FAILED_ERROR_MESSAGE) : null\r\n        });\r\n    }\r\n\r\n    function calculateTimeOffset(serverTime, deviceTime) {\r\n        return serverTime - deviceTime;\r\n    }\r\n\r\n    function attemptSync(sources, sourceIndex) {\r\n\r\n        // if called with no sourceIndex, use zero (highest priority)\r\n        let  index = sourceIndex || 0;\r\n\r\n        // the sources should be ordered in priority from the manifest.\r\n        // try each in turn, from the top, until either something\r\n        // sensible happens, or we run out of sources to try.\r\n        let source = sources[index];\r\n\r\n        // callback to emit event to listeners\r\n        const onComplete = function (time, offset) {\r\n            let failed = !time || !offset;\r\n            if (failed && useManifestDateHeaderTimeSource) {\r\n                //Before falling back to binary search , check if date header exists on MPD. if so, use for a time source.\r\n                checkForDateHeader();\r\n            } else {\r\n                completeTimeSyncSequence(failed, time, offset);\r\n            }\r\n        };\r\n\r\n        setIsSynchronizing(true);\r\n\r\n        if (source) {\r\n            // check if there is a handler for this @schemeIdUri\r\n            if (handlers.hasOwnProperty(source.schemeIdUri)) {\r\n                // if so, call it with its @value\r\n                handlers[source.schemeIdUri](\r\n                    source.value,\r\n                    function (serverTime) {\r\n                        // the timing source returned something useful\r\n                        const deviceTime = new Date().getTime();\r\n                        const offset = calculateTimeOffset(serverTime, deviceTime);\r\n\r\n                        setOffsetMs(offset);\r\n\r\n                        logger.info('Local time: ' + new Date(deviceTime));\r\n                        logger.info('Server time: ' + new Date(serverTime));\r\n                        logger.info('Server Time - Local Time (ms): ' + offset);\r\n\r\n                        onComplete(serverTime, offset);\r\n                    },\r\n                    function () {\r\n                        // the timing source was probably uncontactable\r\n                        // or returned something we can't use - try again\r\n                        // with the remaining sources\r\n                        attemptSync(sources, index + 1);\r\n                    }\r\n                );\r\n            } else {\r\n                // an unknown schemeIdUri must have been found\r\n                // try again with the remaining sources\r\n                attemptSync(sources, index + 1);\r\n            }\r\n        } else {\r\n            // no valid time source could be found, just use device time\r\n            setOffsetMs(0);\r\n            onComplete();\r\n        }\r\n    }\r\n\r\n    function reset() {\r\n        setIsSynchronizing(false);\r\n    }\r\n\r\n    instance = {\r\n        initialize: initialize,\r\n        getOffsetToDeviceTimeMs: getOffsetToDeviceTimeMs,\r\n        setConfig: setConfig,\r\n        reset: reset\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\nTimeSyncController.__dashjs_factory_name = 'TimeSyncController';\r\nconst factory = FactoryMaker.getSingletonFactory(TimeSyncController);\r\nfactory.HTTP_TIMEOUT_MS = HTTP_TIMEOUT_MS;\r\nFactoryMaker.updateSingletonFactory(TimeSyncController.__dashjs_factory_name, factory);\r\nexport default factory;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport XlinkLoader from '../XlinkLoader';\r\nimport EventBus from '../../core/EventBus';\r\nimport Events from '../../core/events/Events';\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\nimport X2JS from '../../../externals/xml2json';\r\nimport URLUtils from '../utils/URLUtils';\r\nimport DashConstants from '../../dash/constants/DashConstants';\r\n\r\nconst RESOLVE_TYPE_ONLOAD = 'onLoad';\r\nconst RESOLVE_TYPE_ONACTUATE = 'onActuate';\r\nconst RESOLVE_TO_ZERO = 'urn:mpeg:dash:resolve-to-zero:2013';\r\n\r\nfunction XlinkController(config) {\r\n\r\n    config = config || {};\r\n    let context = this.context;\r\n    let eventBus = EventBus(context).getInstance();\r\n    const urlUtils = URLUtils(context).getInstance();\r\n\r\n    let instance,\r\n        matchers,\r\n        iron,\r\n        manifest,\r\n        converter,\r\n        xlinkLoader;\r\n\r\n    function setup() {\r\n        eventBus.on(Events.XLINK_ELEMENT_LOADED, onXlinkElementLoaded, instance);\r\n\r\n        xlinkLoader = XlinkLoader(context).create({\r\n            errHandler: config.errHandler,\r\n            dashMetrics: config.dashMetrics,\r\n            mediaPlayerModel: config.mediaPlayerModel,\r\n            requestModifier: config.requestModifier,\r\n            settings: config.settings\r\n        });\r\n    }\r\n\r\n    function setMatchers(value) {\r\n        if (value) {\r\n            matchers = value;\r\n        }\r\n    }\r\n\r\n    function setIron(value) {\r\n        if (value) {\r\n            iron = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * <p>Triggers the resolution of the xlink.onLoad attributes in the manifest file </p>\r\n     * @param {Object} mpd - the manifest\r\n     */\r\n    function resolveManifestOnLoad(mpd) {\r\n        let elements;\r\n        // First resolve all periods, so unnecessary requests inside onLoad Periods with Default content are avoided\r\n        converter = new X2JS({\r\n            escapeMode:         false,\r\n            attributePrefix:    '',\r\n            arrayAccessForm:    'property',\r\n            emptyNodeForm:      'object',\r\n            stripWhitespaces:   false,\r\n            enableToStringFunc: false,\r\n            ignoreRoot:         true,\r\n            matchers:           matchers\r\n        });\r\n\r\n        manifest = mpd;\r\n        elements = getElementsToResolve(manifest.Period_asArray, manifest, DashConstants.PERIOD, RESOLVE_TYPE_ONLOAD);\r\n        resolve(elements, DashConstants.PERIOD, RESOLVE_TYPE_ONLOAD);\r\n    }\r\n\r\n    function reset() {\r\n        eventBus.off(Events.XLINK_ELEMENT_LOADED, onXlinkElementLoaded, instance);\r\n\r\n        if (xlinkLoader) {\r\n            xlinkLoader.reset();\r\n            xlinkLoader = null;\r\n        }\r\n    }\r\n\r\n    function resolve(elements, type, resolveType) {\r\n        let resolveObject = {};\r\n        let element,\r\n            url;\r\n\r\n        resolveObject.elements = elements;\r\n        resolveObject.type = type;\r\n        resolveObject.resolveType = resolveType;\r\n        // If nothing to resolve, directly call allElementsLoaded\r\n        if (resolveObject.elements.length === 0) {\r\n            onXlinkAllElementsLoaded(resolveObject);\r\n        }\r\n        for (let i = 0; i < resolveObject.elements.length; i++) {\r\n            element = resolveObject.elements[i];\r\n            if (urlUtils.isHTTPURL(element.url)) {\r\n                url = element.url;\r\n            } else {\r\n                url = element.originalContent.BaseURL + element.url;\r\n            }\r\n            xlinkLoader.load(url, element, resolveObject);\r\n        }\r\n    }\r\n\r\n    function onXlinkElementLoaded(event) {\r\n        let element,\r\n            resolveObject;\r\n\r\n        const openingTag = '<response>';\r\n        const closingTag = '</response>';\r\n        let mergedContent = '';\r\n\r\n        element = event.element;\r\n        resolveObject = event.resolveObject;\r\n        // if the element resolved into content parse the content\r\n        if (element.resolvedContent) {\r\n            let index = 0;\r\n            // we add a parent elements so the converter is able to parse multiple elements of the same type which are not wrapped inside a container\r\n            if (element.resolvedContent.indexOf('<?xml') === 0) {\r\n                index = element.resolvedContent.indexOf('?>') + 2; //find the closing position of the xml declaration, if it exists.\r\n            }\r\n            mergedContent = element.resolvedContent.substr(0,index) + openingTag + element.resolvedContent.substr(index) + closingTag;\r\n            element.resolvedContent = converter.xml_str2json(mergedContent);\r\n        }\r\n        if (isResolvingFinished(resolveObject)) {\r\n            onXlinkAllElementsLoaded(resolveObject);\r\n        }\r\n    }\r\n\r\n    // We got to wait till all elements of the current queue are resolved before merging back\r\n    function onXlinkAllElementsLoaded (resolveObject) {\r\n        let elements = [];\r\n        let i,\r\n            obj;\r\n\r\n        mergeElementsBack(resolveObject);\r\n        if (resolveObject.resolveType === RESOLVE_TYPE_ONACTUATE) {\r\n            eventBus.trigger(Events.XLINK_READY, { manifest: manifest });\r\n        }\r\n        if (resolveObject.resolveType === RESOLVE_TYPE_ONLOAD) {\r\n            switch (resolveObject.type) {\r\n                // Start resolving the other elements. We can do Adaptation Set and EventStream in parallel\r\n                case DashConstants.PERIOD:\r\n                    for (i = 0; i < manifest[DashConstants.PERIOD + '_asArray'].length; i++) {\r\n                        obj = manifest[DashConstants.PERIOD + '_asArray'][i];\r\n                        if (obj.hasOwnProperty(DashConstants.ADAPTATION_SET + '_asArray')) {\r\n                            elements = elements.concat(getElementsToResolve(obj[DashConstants.ADAPTATION_SET + '_asArray'], obj, DashConstants.ADAPTATION_SET, RESOLVE_TYPE_ONLOAD));\r\n                        }\r\n                        if (obj.hasOwnProperty(DashConstants.EVENT_STREAM + '_asArray')) {\r\n                            elements = elements.concat(getElementsToResolve(obj[DashConstants.EVENT_STREAM + '_asArray'], obj, DashConstants.EVENT_STREAM, RESOLVE_TYPE_ONLOAD));\r\n                        }\r\n                    }\r\n                    resolve(elements, DashConstants.ADAPTATION_SET, RESOLVE_TYPE_ONLOAD);\r\n                    break;\r\n                case DashConstants.ADAPTATION_SET:\r\n                    // TODO: Resolve SegmentList here\r\n                    eventBus.trigger(Events.XLINK_READY, { manifest: manifest });\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    // Returns the elements with the specific resolve Type\r\n    function getElementsToResolve(elements, parentElement, type, resolveType) {\r\n        let toResolve = [];\r\n        let element,\r\n            i,\r\n            xlinkObject;\r\n        // first remove all the resolve-to-zero elements\r\n        for (i = elements.length - 1; i >= 0; i--) {\r\n            element = elements[i];\r\n            if (element.hasOwnProperty('xlink:href') && element['xlink:href'] === RESOLVE_TO_ZERO) {\r\n                elements.splice(i, 1);\r\n            }\r\n        }\r\n        // now get the elements with the right resolve type\r\n        for (i = 0; i < elements.length; i++) {\r\n            element = elements[i];\r\n            if (element.hasOwnProperty('xlink:href') && element.hasOwnProperty('xlink:actuate') && element['xlink:actuate'] === resolveType) {\r\n                xlinkObject = createXlinkObject(element['xlink:href'], parentElement, type, i, resolveType, element);\r\n                toResolve.push(xlinkObject);\r\n            }\r\n        }\r\n        return toResolve;\r\n    }\r\n\r\n    function mergeElementsBack(resolveObject) {\r\n        let resolvedElements = [];\r\n        let element,\r\n            type,\r\n            obj,\r\n            i,\r\n            j,\r\n            k;\r\n        // Start merging back from the end because of index shifting. Note that the elements with the same parent have to be ordered by index ascending\r\n        for (i = resolveObject.elements.length - 1; i >= 0; i --) {\r\n            element = resolveObject.elements[i];\r\n            type = element.type + '_asArray';\r\n\r\n            // Element couldn't be resolved or is TODO Inappropriate target: Remove all Xlink attributes\r\n            if (!element.resolvedContent || isInappropriateTarget()) {\r\n                delete element.originalContent['xlink:actuate'];\r\n                delete element.originalContent['xlink:href'];\r\n                resolvedElements.push(element.originalContent);\r\n            }\r\n            // Element was successfully resolved\r\n            else if (element.resolvedContent) {\r\n                for (j = 0; j < element.resolvedContent[type].length; j++) {\r\n                    //TODO Contains another Xlink attribute with xlink:actuate set to onload. Remove all xLink attributes\r\n                    obj = element.resolvedContent[type][j];\r\n                    resolvedElements.push(obj);\r\n                }\r\n            }\r\n            // Replace the old elements in the parent with the resolved ones\r\n            element.parentElement[type].splice(element.index, 1);\r\n            for (k = 0; k < resolvedElements.length; k++) {\r\n                element.parentElement[type].splice(element.index + k, 0, resolvedElements[k]);\r\n            }\r\n            resolvedElements = [];\r\n        }\r\n        if (resolveObject.elements.length > 0) {\r\n            iron.run(manifest);\r\n        }\r\n    }\r\n\r\n    function createXlinkObject(url, parentElement, type, index, resolveType, originalContent) {\r\n        return {\r\n            url: url,\r\n            parentElement: parentElement,\r\n            type: type,\r\n            index: index,\r\n            resolveType: resolveType,\r\n            originalContent: originalContent,\r\n            resolvedContent: null,\r\n            resolved: false\r\n        };\r\n    }\r\n\r\n    // Check if all pending requests are finished\r\n    function isResolvingFinished(elementsToResolve) {\r\n        let i,\r\n            obj;\r\n        for (i = 0; i < elementsToResolve.elements.length; i++) {\r\n            obj = elementsToResolve.elements[i];\r\n            if (obj.resolved === false) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // TODO : Do some syntax check here if the target is valid or not\r\n    function isInappropriateTarget() {\r\n        return false;\r\n    }\r\n\r\n    instance = {\r\n        resolveManifestOnLoad: resolveManifestOnLoad,\r\n        setMatchers: setMatchers,\r\n        setIron: setIron,\r\n        reset: reset\r\n    };\r\n\r\n    setup();\r\n    return instance;\r\n}\r\n\r\nXlinkController.__dashjs_factory_name = 'XlinkController';\r\nexport default FactoryMaker.getClassFactory(XlinkController);\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport DVBErrorsTranslator from './utils/DVBErrorsTranslator';\r\nimport MetricsReportingEvents from './MetricsReportingEvents';\r\nimport MetricsCollectionController from './controllers/MetricsCollectionController';\r\nimport MetricsHandlerFactory from './metrics/MetricsHandlerFactory';\r\nimport ReportingFactory from './reporting/ReportingFactory';\r\n\r\nfunction MetricsReporting() {\r\n\r\n    let context = this.context;\r\n    let instance,\r\n        dvbErrorsTranslator;\r\n\r\n    /**\r\n     * Create a MetricsCollectionController, and a DVBErrorsTranslator\r\n     * @param {Object} config - dependancies from owner\r\n     * @return {MetricsCollectionController} Metrics Collection Controller\r\n     */\r\n    function createMetricsReporting(config) {\r\n        dvbErrorsTranslator = DVBErrorsTranslator(context).getInstance({\r\n            eventBus: config.eventBus,\r\n            dashMetrics: config.dashMetrics,\r\n            metricsConstants: config.metricsConstants,\r\n            events: config.events\r\n        });\r\n\r\n        return MetricsCollectionController(context).create(config);\r\n    }\r\n\r\n    /**\r\n     * Get the ReportingFactory to allow new reporters to be registered\r\n     * @return {ReportingFactory} Reporting Factory\r\n     */\r\n    function getReportingFactory() {\r\n        return ReportingFactory(context).getInstance();\r\n    }\r\n\r\n    /**\r\n     * Get the MetricsHandlerFactory to allow new handlers to be registered\r\n     * @return {MetricsHandlerFactory} Metrics Handler Factory\r\n     */\r\n    function getMetricsHandlerFactory() {\r\n        return MetricsHandlerFactory(context).getInstance();\r\n    }\r\n\r\n    instance = {\r\n        createMetricsReporting:     createMetricsReporting,\r\n        getReportingFactory:        getReportingFactory,\r\n        getMetricsHandlerFactory:   getMetricsHandlerFactory\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nMetricsReporting.__dashjs_factory_name = 'MetricsReporting';\r\nconst factory = dashjs.FactoryMaker.getClassFactory(MetricsReporting); /* jshint ignore:line */\r\nfactory.events = MetricsReportingEvents;\r\ndashjs.FactoryMaker.updateClassFactory(MetricsReporting.__dashjs_factory_name, factory); /* jshint ignore:line */\r\nexport default factory;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport EventsBase from '../../core/events/EventsBase';\r\n\r\nclass MetricsReportingEvents extends EventsBase {\r\n    constructor () {\r\n        super();\r\n\r\n        this.METRICS_INITIALISATION_COMPLETE = 'internal_metricsReportingInitialized';\r\n        this.BECAME_REPORTING_PLAYER = 'internal_becameReportingPlayer';\r\n\r\n        /**\r\n         * Triggered when CMCD data was generated for a HTTP request\r\n         * @event MetricsReportingEvents#CMCD_DATA_GENERATED\r\n         */\r\n        this.CMCD_DATA_GENERATED = 'cmcdDataGenerated';\r\n    }\r\n}\r\n\r\nlet metricsReportingEvents = new MetricsReportingEvents();\r\nexport default metricsReportingEvents;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport MetricsController from './MetricsController';\r\nimport ManifestParsing from '../utils/ManifestParsing';\r\nimport MetricsReportingEvents from '../MetricsReportingEvents';\r\n\r\nfunction MetricsCollectionController(config) {\r\n\r\n    config = config || {};\r\n    let instance;\r\n    let metricsControllers = {};\r\n    let context = this.context;\r\n    let eventBus = config.eventBus;\r\n    const events = config.events;\r\n\r\n    function update(e) {\r\n        if (e.error) {\r\n            return;\r\n        }\r\n\r\n        // start by assuming all existing controllers need removing\r\n        let controllersToRemove = Object.keys(metricsControllers);\r\n\r\n        const metrics = ManifestParsing(context).getInstance({\r\n            adapter: config.adapter,\r\n            constants: config.constants\r\n        }).getMetrics(e.manifest);\r\n\r\n        metrics.forEach(m => {\r\n            const key = JSON.stringify(m);\r\n\r\n            if (!metricsControllers.hasOwnProperty(key)) {\r\n                try {\r\n                    let controller = MetricsController(context).create(config);\r\n                    controller.initialize(m);\r\n                    metricsControllers[key] = controller;\r\n                } catch (e) {\r\n                    // fail quietly\r\n                }\r\n            } else {\r\n                // we still need this controller - delete from removal list\r\n                controllersToRemove.splice(key, 1);\r\n            }\r\n        });\r\n\r\n        // now remove the unwanted controllers\r\n        controllersToRemove.forEach(c => {\r\n            metricsControllers[c].reset();\r\n            delete metricsControllers[c];\r\n        });\r\n\r\n        eventBus.trigger(MetricsReportingEvents.METRICS_INITIALISATION_COMPLETE);\r\n    }\r\n\r\n    function resetMetricsControllers() {\r\n        Object.keys(metricsControllers).forEach(key => {\r\n            metricsControllers[key].reset();\r\n        });\r\n\r\n        metricsControllers = {};\r\n    }\r\n\r\n    function setup() {\r\n        eventBus.on(events.MANIFEST_UPDATED, update, instance);\r\n        eventBus.on(events.STREAM_TEARDOWN_COMPLETE, resetMetricsControllers, instance);\r\n    }\r\n\r\n    function reset() {\r\n        eventBus.off(events.MANIFEST_UPDATED, update, instance);\r\n        eventBus.off(events.STREAM_TEARDOWN_COMPLETE, resetMetricsControllers, instance);\r\n    }\r\n\r\n    instance = {\r\n        reset: reset\r\n    };\r\n\r\n    setup();\r\n    return instance;\r\n}\r\n\r\nMetricsCollectionController.__dashjs_factory_name = 'MetricsCollectionController';\r\nexport default dashjs.FactoryMaker.getClassFactory(MetricsCollectionController); /* jshint ignore:line */\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport RangeController from './RangeController';\r\nimport ReportingController from './ReportingController';\r\nimport MetricsHandlersController from './MetricsHandlersController';\r\n\r\nfunction MetricsController(config) {\r\n\r\n    config = config || {};\r\n    let metricsHandlersController,\r\n        reportingController,\r\n        rangeController,\r\n        instance;\r\n\r\n    let context = this.context;\r\n\r\n    function initialize(metricsEntry) {\r\n        try {\r\n            rangeController = RangeController(context).create({\r\n                mediaElement: config.mediaElement\r\n            });\r\n\r\n            rangeController.initialize(metricsEntry.Range);\r\n\r\n            reportingController = ReportingController(context).create({\r\n                debug: config.debug,\r\n                metricsConstants: config.metricsConstants\r\n            });\r\n\r\n            reportingController.initialize(metricsEntry.Reporting, rangeController);\r\n\r\n            metricsHandlersController = MetricsHandlersController(context).create({\r\n                debug: config.debug,\r\n                eventBus: config.eventBus,\r\n                metricsConstants: config.metricsConstants,\r\n                events: config.events\r\n            });\r\n\r\n            metricsHandlersController.initialize(metricsEntry.metrics, reportingController);\r\n        } catch (e) {\r\n            reset();\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    function reset() {\r\n        if (metricsHandlersController) {\r\n            metricsHandlersController.reset();\r\n        }\r\n\r\n        if (reportingController) {\r\n            reportingController.reset();\r\n        }\r\n\r\n        if (rangeController) {\r\n            rangeController.reset();\r\n        }\r\n    }\r\n\r\n    instance = {\r\n        initialize: initialize,\r\n        reset:      reset\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nMetricsController.__dashjs_factory_name = 'MetricsController';\r\nexport default dashjs.FactoryMaker.getClassFactory(MetricsController); /* jshint ignore:line */\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport MetricsHandlerFactory from '../metrics/MetricsHandlerFactory';\r\n\r\nfunction MetricsHandlersController(config) {\r\n\r\n    config = config || {};\r\n    let handlers = [];\r\n\r\n    let instance;\r\n    const context = this.context;\r\n    const eventBus = config.eventBus;\r\n    const Events = config.events;\r\n\r\n    let metricsHandlerFactory = MetricsHandlerFactory(context).getInstance({\r\n        debug: config.debug,\r\n        eventBus: config.eventBus,\r\n        metricsConstants: config.metricsConstants\r\n    });\r\n\r\n    function handle(e) {\r\n        handlers.forEach(handler => {\r\n            handler.handleNewMetric(e.metric, e.value, e.mediaType);\r\n        });\r\n    }\r\n\r\n    function initialize(metrics, reportingController) {\r\n        metrics.split(',').forEach(\r\n            (m, midx, ms) => {\r\n                let handler;\r\n\r\n                // there is a bug in ISO23009-1 where the metrics attribute\r\n                // is a comma-separated list but HttpList key can contain a\r\n                // comma enclosed by ().\r\n                if ((m.indexOf('(') !== -1) && m.indexOf(')') === -1) {\r\n                    let nextm = ms[midx + 1];\r\n\r\n                    if (nextm &&\r\n                            (nextm.indexOf('(') === -1) &&\r\n                            (nextm.indexOf(')') !== -1)) {\r\n                        m += ',' + nextm;\r\n\r\n                        // delete the next metric so forEach does not visit.\r\n                        delete ms[midx + 1];\r\n                    }\r\n                }\r\n\r\n                handler = metricsHandlerFactory.create(\r\n                    m,\r\n                    reportingController\r\n                );\r\n\r\n                if (handler) {\r\n                    handlers.push(handler);\r\n                }\r\n            }\r\n        );\r\n\r\n        eventBus.on(\r\n            Events.METRIC_ADDED,\r\n            handle,\r\n            instance\r\n        );\r\n\r\n        eventBus.on(\r\n            Events.METRIC_UPDATED,\r\n            handle,\r\n            instance\r\n        );\r\n    }\r\n\r\n    function reset() {\r\n        eventBus.off(\r\n            Events.METRIC_ADDED,\r\n            handle,\r\n            instance\r\n        );\r\n\r\n        eventBus.off(\r\n            Events.METRIC_UPDATED,\r\n            handle,\r\n            instance\r\n        );\r\n\r\n        handlers.forEach(handler => handler.reset());\r\n\r\n        handlers = [];\r\n    }\r\n\r\n    instance = {\r\n        initialize: initialize,\r\n        reset:      reset\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nMetricsHandlersController.__dashjs_factory_name = 'MetricsHandlersController';\r\nexport default dashjs.FactoryMaker.getClassFactory(MetricsHandlersController); /* jshint ignore:line */\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport CustomTimeRanges from '../../utils/CustomTimeRanges';\r\n\r\nfunction RangeController(config) {\r\n\r\n    config = config || {};\r\n    let useWallClockTime = false;\r\n    let context = this.context;\r\n    let instance,\r\n        ranges;\r\n\r\n    let mediaElement = config.mediaElement;\r\n\r\n    function initialize(rs) {\r\n        if (rs && rs.length) {\r\n            rs.forEach(r => {\r\n                let start = r.starttime;\r\n                let end = start + r.duration;\r\n\r\n                ranges.add(start, end);\r\n            });\r\n\r\n            useWallClockTime = !!rs[0]._useWallClockTime;\r\n        }\r\n    }\r\n\r\n    function reset() {\r\n        ranges.clear();\r\n    }\r\n\r\n    function setup() {\r\n        ranges = CustomTimeRanges(context).create();\r\n    }\r\n\r\n    function isEnabled() {\r\n        let numRanges = ranges.length;\r\n        let time;\r\n\r\n        if (!numRanges) {\r\n            return true;\r\n        }\r\n\r\n        // When not present, DASH Metrics reporting is requested\r\n        // for the whole duration of the content.\r\n        time = useWallClockTime ?\r\n                (new Date().getTime() / 1000) :\r\n                mediaElement.currentTime;\r\n\r\n        for (let i = 0; i < numRanges; i += 1) {\r\n            let start = ranges.start(i);\r\n            let end = ranges.end(i);\r\n\r\n            if ((start <= time) && (time < end)) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    instance = {\r\n        initialize: initialize,\r\n        reset:      reset,\r\n        isEnabled:  isEnabled\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\nRangeController.__dashjs_factory_name = 'RangeController';\r\nexport default dashjs.FactoryMaker.getClassFactory(RangeController); /* jshint ignore:line */\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport ReportingFactory from '../reporting/ReportingFactory';\r\n\r\nfunction ReportingController(config) {\r\n\r\n    let reporters = [];\r\n    let instance;\r\n\r\n    const reportingFactory = ReportingFactory(this.context).getInstance(config);\r\n\r\n    function initialize(reporting, rangeController) {\r\n        // \"if multiple Reporting elements are present, it is expected that\r\n        // the client processes one of the recognized reporting schemes.\"\r\n        // to ignore this, and support multiple Reporting per Metric,\r\n        // simply change the 'some' below to 'forEach'\r\n        reporting.some(r => {\r\n            let reporter = reportingFactory.create(r, rangeController);\r\n\r\n            if (reporter) {\r\n                reporters.push(reporter);\r\n                return true;\r\n            }\r\n        });\r\n    }\r\n\r\n    function reset() {\r\n        reporters.forEach(r => r.reset());\r\n        reporters = [];\r\n    }\r\n\r\n    function report(type, vos) {\r\n        reporters.forEach(r => r.report(type, vos));\r\n    }\r\n\r\n    instance = {\r\n        initialize: initialize,\r\n        reset:      reset,\r\n        report:     report\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nReportingController.__dashjs_factory_name = 'ReportingController';\r\nexport default dashjs.FactoryMaker.getClassFactory(ReportingController); /* jshint ignore:line */\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport BufferLevel from './handlers/BufferLevelHandler';\r\nimport DVBErrors from './handlers/DVBErrorsHandler';\r\nimport HttpList from './handlers/HttpListHandler';\r\nimport GenericMetricHandler from './handlers/GenericMetricHandler';\r\n\r\nfunction MetricsHandlerFactory(config) {\r\n\r\n    config = config || {};\r\n    let instance;\r\n    const logger = config.debug ? config.debug.getLogger(instance) : {};\r\n\r\n    // group 1: key, [group 3: n [, group 5: type]]\r\n    let keyRegex = /([a-zA-Z]*)(\\(([0-9]*)(\\,\\s*([a-zA-Z]*))?\\))?/;\r\n\r\n    const context = this.context;\r\n    let knownFactoryProducts = {\r\n        BufferLevel:    BufferLevel,\r\n        DVBErrors:      DVBErrors,\r\n        HttpList:       HttpList,\r\n        PlayList:       GenericMetricHandler,\r\n        RepSwitchList:  GenericMetricHandler,\r\n        TcpList:        GenericMetricHandler\r\n    };\r\n\r\n    function create(listType, reportingController) {\r\n        var matches = listType.match(keyRegex);\r\n        var handler;\r\n\r\n        if (!matches) {\r\n            return;\r\n        }\r\n\r\n        try {\r\n            handler = knownFactoryProducts[matches[1]](context).create({\r\n                eventBus: config.eventBus,\r\n                metricsConstants: config.metricsConstants\r\n            });\r\n\r\n            handler.initialize(\r\n                matches[1],\r\n                reportingController,\r\n                matches[3],\r\n                matches[5]\r\n            );\r\n        } catch (e) {\r\n            handler = null;\r\n            logger.error(`MetricsHandlerFactory: Could not create handler for type ${matches[1]} with args ${matches[3]}, ${matches[5]} (${e.message})`);\r\n        }\r\n\r\n        return handler;\r\n    }\r\n\r\n    function register(key, handler) {\r\n        knownFactoryProducts[key] = handler;\r\n    }\r\n\r\n    function unregister(key) {\r\n        delete knownFactoryProducts[key];\r\n    }\r\n\r\n    instance = {\r\n        create:     create,\r\n        register:   register,\r\n        unregister: unregister\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nMetricsHandlerFactory.__dashjs_factory_name = 'MetricsHandlerFactory';\r\nexport default dashjs.FactoryMaker.getSingletonFactory(MetricsHandlerFactory); /* jshint ignore:line */\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport HandlerHelpers from '../../utils/HandlerHelpers';\r\n\r\nfunction BufferLevelHandler(config) {\r\n\r\n    config = config || {};\r\n    let instance,\r\n        reportingController,\r\n        n,\r\n        name,\r\n        interval,\r\n        lastReportedTime;\r\n\r\n    let context = this.context;\r\n    let handlerHelpers = HandlerHelpers(context).getInstance();\r\n\r\n    let storedVOs = [];\r\n\r\n    const metricsConstants = config.metricsConstants;\r\n\r\n    function getLowestBufferLevelVO() {\r\n        try {\r\n            return Object.keys(storedVOs).map(\r\n                key => storedVOs[key]\r\n            ).reduce(\r\n                (a, b) => {\r\n                    return (a.level < b.level) ? a : b;\r\n                }\r\n            );\r\n        } catch (e) {\r\n            return;\r\n        }\r\n    }\r\n\r\n    function intervalCallback() {\r\n        let vo = getLowestBufferLevelVO();\r\n\r\n        if (vo) {\r\n            if (lastReportedTime !== vo.t) {\r\n                lastReportedTime = vo.t;\r\n                reportingController.report(name, vo);\r\n            }\r\n        }\r\n    }\r\n\r\n    function initialize(basename, rc, n_ms) {\r\n        if (rc) {\r\n            // this will throw if n is invalid, to be\r\n            // caught by the initialize caller.\r\n            n = handlerHelpers.validateN(n_ms);\r\n            reportingController = rc;\r\n            name = handlerHelpers.reconstructFullMetricName(basename, n_ms);\r\n            interval = setInterval(intervalCallback, n);\r\n        }\r\n    }\r\n\r\n    function reset() {\r\n        clearInterval(interval);\r\n        interval = null;\r\n        n = 0;\r\n        reportingController = null;\r\n        lastReportedTime = null;\r\n    }\r\n\r\n    function handleNewMetric(metric, vo, type) {\r\n        if (metric === metricsConstants.BUFFER_LEVEL) {\r\n            storedVOs[type] = vo;\r\n        }\r\n    }\r\n\r\n    instance = {\r\n        initialize:         initialize,\r\n        reset:              reset,\r\n        handleNewMetric:    handleNewMetric\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nBufferLevelHandler.__dashjs_factory_name = 'BufferLevelHandler';\r\nexport default dashjs.FactoryMaker.getClassFactory(BufferLevelHandler); /* jshint ignore:line */\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport MetricsReportingEvents from '../../MetricsReportingEvents';\r\n\r\nfunction DVBErrorsHandler(config) {\r\n\r\n    config = config || {};\r\n    let instance,\r\n        reportingController;\r\n\r\n    let eventBus = config.eventBus;\r\n    const metricsConstants = config.metricsConstants;\r\n\r\n    function onInitialisationComplete() {\r\n        // we only want to report this once per call to initialize\r\n        eventBus.off(\r\n            MetricsReportingEvents.METRICS_INITIALISATION_COMPLETE,\r\n            onInitialisationComplete,\r\n            this\r\n        );\r\n\r\n        // Note: A Player becoming a reporting Player is itself\r\n        // something which is recorded by the DVBErrors metric.\r\n        eventBus.trigger(MetricsReportingEvents.BECAME_REPORTING_PLAYER);\r\n    }\r\n\r\n    function initialize(unused, rc) {\r\n        if (rc) {\r\n            reportingController = rc;\r\n\r\n            eventBus.on(\r\n                MetricsReportingEvents.METRICS_INITIALISATION_COMPLETE,\r\n                onInitialisationComplete,\r\n                this\r\n            );\r\n        }\r\n    }\r\n\r\n    function reset() {\r\n        reportingController = null;\r\n    }\r\n\r\n    function handleNewMetric(metric, vo) {\r\n        // simply pass metric straight through\r\n        if (metric === metricsConstants.DVB_ERRORS) {\r\n            if (reportingController) {\r\n                reportingController.report(metric, vo);\r\n            }\r\n        }\r\n    }\r\n\r\n    instance = {\r\n        initialize:         initialize,\r\n        reset:              reset,\r\n        handleNewMetric:    handleNewMetric\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nexport default dashjs.FactoryMaker.getClassFactory(DVBErrorsHandler); /* jshint ignore:line */\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n /**\r\n  * @ignore\r\n  */\r\nfunction GenericMetricHandler() {\r\n\r\n    let instance,\r\n        metricName,\r\n        reportingController;\r\n\r\n    function initialize(name, rc) {\r\n        metricName = name;\r\n        reportingController = rc;\r\n    }\r\n\r\n    function reset() {\r\n        reportingController = null;\r\n        metricName = undefined;\r\n    }\r\n\r\n    function handleNewMetric(metric, vo) {\r\n        // simply pass metric straight through\r\n        if (metric === metricName) {\r\n            if (reportingController) {\r\n                reportingController.report(metricName, vo);\r\n            }\r\n        }\r\n    }\r\n\r\n    instance = {\r\n        initialize:         initialize,\r\n        reset:              reset,\r\n        handleNewMetric:    handleNewMetric\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nGenericMetricHandler.__dashjs_factory_name = 'GenericMetricHandler';\r\nexport default dashjs.FactoryMaker.getClassFactory(GenericMetricHandler); /* jshint ignore:line */\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport HandlerHelpers from '../../utils/HandlerHelpers';\r\n\r\nfunction HttpListHandler(config) {\r\n\r\n    config = config || {};\r\n    let instance,\r\n        reportingController,\r\n        n,\r\n        type,\r\n        name,\r\n        interval;\r\n\r\n    let storedVos = [];\r\n\r\n    let handlerHelpers = HandlerHelpers(this.context).getInstance();\r\n\r\n    const metricsConstants = config.metricsConstants;\r\n\r\n    function intervalCallback() {\r\n        var vos = storedVos;\r\n\r\n        if (vos.length) {\r\n            if (reportingController) {\r\n                reportingController.report(name, vos);\r\n            }\r\n        }\r\n\r\n        storedVos = [];\r\n    }\r\n\r\n    function initialize(basename, rc, n_ms, requestType) {\r\n        if (rc) {\r\n\r\n            // this will throw if n is invalid, to be\r\n            // caught by the initialize caller.\r\n            n = handlerHelpers.validateN(n_ms);\r\n\r\n            reportingController = rc;\r\n\r\n            if (requestType && requestType.length) {\r\n                type = requestType;\r\n            }\r\n\r\n            name = handlerHelpers.reconstructFullMetricName(\r\n                basename,\r\n                n_ms,\r\n                requestType\r\n            );\r\n\r\n            interval = setInterval(intervalCallback, n);\r\n        }\r\n    }\r\n\r\n    function reset() {\r\n        clearInterval(interval);\r\n        interval = null;\r\n        n = null;\r\n        type = null;\r\n        storedVos = [];\r\n        reportingController = null;\r\n    }\r\n\r\n    function handleNewMetric(metric, vo) {\r\n        if (metric === metricsConstants.HTTP_REQUEST) {\r\n            if (!type || (type === vo.type)) {\r\n                storedVos.push(vo);\r\n            }\r\n        }\r\n    }\r\n\r\n    instance = {\r\n        initialize:         initialize,\r\n        reset:              reset,\r\n        handleNewMetric:    handleNewMetric\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nHttpListHandler.__dashjs_factory_name = 'HttpListHandler';\r\nexport default dashjs.FactoryMaker.getClassFactory(HttpListHandler); /* jshint ignore:line */\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport DVBReporting from './reporters/DVBReporting';\r\n\r\nfunction ReportingFactory(config) {\r\n    config = config || {};\r\n\r\n    const knownReportingSchemeIdUris = {\r\n        'urn:dvb:dash:reporting:2014': DVBReporting\r\n    };\r\n\r\n    const context = this.context;\r\n    let instance;\r\n    const logger = config.debug ? config.debug.getLogger(instance) : {};\r\n    const metricsConstants = config.metricsConstants;\r\n\r\n    function create(entry, rangeController) {\r\n        let reporting;\r\n\r\n        try {\r\n            reporting = knownReportingSchemeIdUris[entry.schemeIdUri](context).create({\r\n                metricsConstants: metricsConstants\r\n            });\r\n\r\n            reporting.initialize(entry, rangeController);\r\n        } catch (e) {\r\n            reporting = null;\r\n            logger.error(`ReportingFactory: could not create Reporting with schemeIdUri ${entry.schemeIdUri} (${e.message})`);\r\n        }\r\n\r\n        return reporting;\r\n    }\r\n\r\n    function register(schemeIdUri, moduleName) {\r\n        knownReportingSchemeIdUris[schemeIdUri] = moduleName;\r\n    }\r\n\r\n    function unregister(schemeIdUri) {\r\n        delete knownReportingSchemeIdUris[schemeIdUri];\r\n    }\r\n\r\n    instance = {\r\n        create:     create,\r\n        register:   register,\r\n        unregister: unregister\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nReportingFactory.__dashjs_factory_name = 'ReportingFactory';\r\nexport default dashjs.FactoryMaker.getSingletonFactory(ReportingFactory); /* jshint ignore:line */\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport MetricSerialiser from '../../utils/MetricSerialiser';\r\nimport RNG from '../../utils/RNG';\r\n\r\nfunction DVBReporting(config) {\r\n    config = config || {};\r\n    let instance;\r\n\r\n    let context = this.context;\r\n    let metricSerialiser,\r\n        randomNumberGenerator,\r\n        reportingPlayerStatusDecided,\r\n        isReportingPlayer,\r\n        reportingUrl,\r\n        rangeController;\r\n\r\n    let USE_DRAFT_DVB_SPEC = true;\r\n    let allowPendingRequestsToCompleteOnReset = true;\r\n    let pendingRequests = [];\r\n\r\n    const metricsConstants = config.metricsConstants;\r\n\r\n    function setup() {\r\n        metricSerialiser = MetricSerialiser(context).getInstance();\r\n        randomNumberGenerator = RNG(context).getInstance();\r\n\r\n        resetInitialSettings();\r\n    }\r\n\r\n    function doGetRequest(url, successCB, failureCB) {\r\n        let req = new XMLHttpRequest();\r\n        const oncomplete = function () {\r\n            let reqIndex = pendingRequests.indexOf(req);\r\n\r\n            if (reqIndex === -1) {\r\n                return;\r\n            } else {\r\n                pendingRequests.splice(reqIndex, 1);\r\n            }\r\n\r\n            if ((req.status >= 200) && (req.status < 300)) {\r\n                if (successCB) {\r\n                    successCB();\r\n                }\r\n            } else {\r\n                if (failureCB) {\r\n                    failureCB();\r\n                }\r\n            }\r\n        };\r\n\r\n        pendingRequests.push(req);\r\n\r\n        try {\r\n            req.open('GET', url);\r\n            req.onloadend = oncomplete;\r\n            req.onerror = oncomplete;\r\n            req.send();\r\n        } catch (e) {\r\n            req.onerror();\r\n        }\r\n    }\r\n\r\n    function report(type, vos) {\r\n        if (!Array.isArray(vos)) {\r\n            vos = [vos];\r\n        }\r\n\r\n        // If the Player is not a reporting Player, then the Player shall\r\n        // not report any errors.\r\n        // ... In addition to any time restrictions specified by a Range\r\n        // element within the Metrics element.\r\n        if (isReportingPlayer && rangeController.isEnabled()) {\r\n\r\n            // This reporting mechanism operates by creating one HTTP GET\r\n            // request for every entry in the top level list of the metric.\r\n            vos.forEach(function (vo) {\r\n                let url = metricSerialiser.serialise(vo);\r\n\r\n                // this has been proposed for errata\r\n                if (USE_DRAFT_DVB_SPEC && (type !== metricsConstants.DVB_ERRORS)) {\r\n                    url = `metricname=${type}&${url}`;\r\n                }\r\n\r\n                // Take the value of the @reportingUrl attribute, append a\r\n                // question mark ('?') character and then append the string\r\n                // created in the previous step.\r\n                url = `${reportingUrl}?${url}`;\r\n\r\n                // Make an HTTP GET request to the URL contained within the\r\n                // string created in the previous step.\r\n                doGetRequest(url, null, function () {\r\n                    // If the Player is unable to make the report, for\r\n                    // example because the @reportingUrl is invalid, the\r\n                    // host cannot be reached, or an HTTP status code other\r\n                    // than one in the 200 series is received, the Player\r\n                    // shall cease being a reporting Player for the\r\n                    // duration of the MPD.\r\n                    isReportingPlayer = false;\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    function initialize(entry, rc) {\r\n        let probability;\r\n\r\n        rangeController = rc;\r\n\r\n        reportingUrl = entry.dvb_reportingUrl;\r\n\r\n        // If a required attribute is missing, the Reporting descriptor may\r\n        // be ignored by the Player\r\n        if (!reportingUrl) {\r\n            throw new Error(\r\n                'required parameter missing (dvb:reportingUrl)'\r\n            );\r\n        }\r\n\r\n        // A Player's status, as a reporting Player or not, shall remain\r\n        // static for the duration of the MPD, regardless of MPD updates.\r\n        // (i.e. only calling reset (or failure) changes this state)\r\n        if (!reportingPlayerStatusDecided) {\r\n            probability = entry.dvb_probability;\r\n            // TS 103 285 Clause 10.12.3.4\r\n            // If the @probability attribute is set to 1000, it shall be a reporting Player.\r\n            // If the @probability attribute is absent it will take the default value of 1000.\r\n            // For any other value of the @probability attribute, it shall decide at random whether to be a\r\n            // reporting Player, such that the probability of being one is @probability/1000.\r\n            if (probability && (probability === 1000 || ((probability / 1000) >= randomNumberGenerator.random()))) {\r\n                isReportingPlayer = true;\r\n            }\r\n\r\n            reportingPlayerStatusDecided = true;\r\n        }\r\n    }\r\n\r\n    function resetInitialSettings() {\r\n        reportingPlayerStatusDecided = false;\r\n        isReportingPlayer = false;\r\n        reportingUrl = null;\r\n        rangeController = null;\r\n    }\r\n\r\n    function reset() {\r\n        if (!allowPendingRequestsToCompleteOnReset) {\r\n            pendingRequests.forEach(req => req.abort());\r\n            pendingRequests = [];\r\n        }\r\n\r\n        resetInitialSettings();\r\n    }\r\n\r\n    instance = {\r\n        report:     report,\r\n        initialize: initialize,\r\n        reset:      reset\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\nDVBReporting.__dashjs_factory_name = 'DVBReporting';\r\nexport default dashjs.FactoryMaker.getClassFactory(DVBReporting); /* jshint ignore:line */\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport DVBErrors from '../vo/DVBErrors';\r\nimport MetricsReportingEvents from '../MetricsReportingEvents';\r\n\r\nfunction DVBErrorsTranslator(config) {\r\n\r\n    config = config || {};\r\n    let instance,\r\n        mpd;\r\n    const eventBus = config.eventBus;\r\n    const dashMetrics = config.dashMetrics;\r\n    const metricsConstants = config.metricsConstants;\r\n    //MediaPlayerEvents have been added to Events in MediaPlayer class\r\n    const Events = config.events;\r\n\r\n    function report(vo) {\r\n        let o = new DVBErrors();\r\n\r\n        if (!mpd) {\r\n            return;\r\n        }\r\n\r\n        for (const key in vo) {\r\n            if (vo.hasOwnProperty(key)) {\r\n                o[key] = vo[key];\r\n            }\r\n        }\r\n\r\n        if (!o.mpdurl) {\r\n            o.mpdurl = mpd.originalUrl || mpd.url;\r\n        }\r\n\r\n        if (!o.terror) {\r\n            o.terror = new Date();\r\n        }\r\n\r\n        dashMetrics.addDVBErrors(o);\r\n    }\r\n\r\n    function onManifestUpdate(e) {\r\n        if (e.error) {\r\n            return;\r\n        }\r\n\r\n        mpd = e.manifest;\r\n    }\r\n\r\n    function onServiceLocationChanged(e) {\r\n        report({\r\n            errorcode:          DVBErrors.BASE_URL_CHANGED,\r\n            servicelocation:    e.entry\r\n        });\r\n    }\r\n\r\n    function onBecameReporter() {\r\n        report({\r\n            errorcode: DVBErrors.BECAME_REPORTER\r\n        });\r\n    }\r\n\r\n    function handleHttpMetric(vo) {\r\n        if ((vo.responsecode === 0) ||      // connection failure - unknown\r\n                (vo.responsecode >= 400) || // HTTP error status code\r\n                (vo.responsecode < 100) ||  // unknown status codes\r\n                (vo.responsecode >= 600)) { // unknown status codes\r\n            report({\r\n                errorcode:          vo.responsecode || DVBErrors.CONNECTION_ERROR,\r\n                url:                vo.url,\r\n                terror:             vo.tresponse,\r\n                servicelocation:    vo._serviceLocation\r\n            });\r\n        }\r\n    }\r\n\r\n    function onMetricEvent(e) {\r\n        switch (e.metric) {\r\n        case metricsConstants.HTTP_REQUEST:\r\n            handleHttpMetric(e.value);\r\n            break;\r\n        default:\r\n            break;\r\n        }\r\n    }\r\n\r\n    function onPlaybackError(e) {\r\n        let reason = e.error ? e.error.code : 0;\r\n        let errorcode;\r\n\r\n        switch (reason) {\r\n            case MediaError.MEDIA_ERR_NETWORK:\r\n                errorcode = DVBErrors.CONNECTION_ERROR;\r\n                break;\r\n            case MediaError.MEDIA_ERR_DECODE:\r\n                errorcode = DVBErrors.CORRUPT_MEDIA_OTHER;\r\n                break;\r\n            default:\r\n                return;\r\n        }\r\n\r\n        report({\r\n            errorcode: errorcode\r\n        });\r\n    }\r\n\r\n    function initialise() {\r\n        eventBus.on(Events.MANIFEST_UPDATED, onManifestUpdate, instance);\r\n        eventBus.on(\r\n            Events.SERVICE_LOCATION_BLACKLIST_CHANGED,\r\n            onServiceLocationChanged,\r\n            instance\r\n        );\r\n        eventBus.on(Events.METRIC_ADDED, onMetricEvent, instance);\r\n        eventBus.on(Events.METRIC_UPDATED, onMetricEvent, instance);\r\n        eventBus.on(Events.PLAYBACK_ERROR, onPlaybackError, instance);\r\n        eventBus.on(\r\n            MetricsReportingEvents.BECAME_REPORTING_PLAYER,\r\n            onBecameReporter,\r\n            instance\r\n        );\r\n    }\r\n\r\n    function reset() {\r\n        eventBus.off(Events.MANIFEST_UPDATED, onManifestUpdate, instance);\r\n        eventBus.off(\r\n            Events.SERVICE_LOCATION_BLACKLIST_CHANGED,\r\n            onServiceLocationChanged,\r\n            instance\r\n        );\r\n        eventBus.off(Events.METRIC_ADDED, onMetricEvent, instance);\r\n        eventBus.off(Events.METRIC_UPDATED, onMetricEvent, instance);\r\n        eventBus.off(Events.PLAYBACK_ERROR, onPlaybackError, instance);\r\n        eventBus.off(\r\n            MetricsReportingEvents.BECAME_REPORTING_PLAYER,\r\n            onBecameReporter,\r\n            instance\r\n        );\r\n    }\r\n\r\n    instance = {\r\n        initialise: initialise,\r\n        reset:      reset\r\n    };\r\n\r\n    initialise();\r\n\r\n    return instance;\r\n}\r\n\r\nDVBErrorsTranslator.__dashjs_factory_name = 'DVBErrorsTranslator';\r\nexport default dashjs.FactoryMaker.getSingletonFactory(DVBErrorsTranslator); /* jshint ignore:line */\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n /**\r\n  * @ignore\r\n  */\r\nfunction HandlerHelpers() {\r\n    return {\r\n        reconstructFullMetricName: function (key, n, type) {\r\n            let mn = key;\r\n\r\n            if (n) {\r\n                mn += '(' + n;\r\n\r\n                if (type && type.length) {\r\n                    mn += ',' + type;\r\n                }\r\n\r\n                mn += ')';\r\n            }\r\n\r\n            return mn;\r\n        },\r\n\r\n        validateN: function (n_ms) {\r\n            if (!n_ms) {\r\n                throw new Error('missing n');\r\n            }\r\n\r\n            if (isNaN(n_ms)) {\r\n                throw new Error('n is NaN');\r\n            }\r\n\r\n            // n is a positive integer is defined to refer to the metric\r\n            // in which the buffer level is recorded every n ms.\r\n            if (n_ms < 0) {\r\n                throw new Error('n must be positive');\r\n            }\r\n\r\n            return n_ms;\r\n        }\r\n    };\r\n}\r\n\r\nHandlerHelpers.__dashjs_factory_name = 'HandlerHelpers';\r\nexport default dashjs.FactoryMaker.getSingletonFactory(HandlerHelpers); /* jshint ignore:line */\r\n","import Metrics from '../vo/Metrics';\r\nimport Range from '../vo/Range';\r\nimport Reporting from '../vo/Reporting';\r\n\r\nfunction ManifestParsing (config) {\r\n    config = config || {};\r\n    let instance;\r\n    let adapter = config.adapter;\r\n    const constants = config.constants;\r\n\r\n    function getMetricsRangeStartTime(manifest, dynamic, range) {\r\n        let voPeriods,\r\n            reportingStartTime;\r\n        let presentationStartTime = 0;\r\n\r\n        if (dynamic) {\r\n            // For services with MPD@type='dynamic', the start time is\r\n            // indicated in wall clock time by adding the value of this\r\n            // attribute to the value of the MPD@availabilityStartTime\r\n            // attribute.\r\n            presentationStartTime = adapter.getAvailabilityStartTime(manifest) / 1000;\r\n        } else {\r\n            // For services with MPD@type='static', the start time is indicated\r\n            // in Media Presentation time and is relative to the PeriodStart\r\n            // time of the first Period in this MPD.\r\n            voPeriods = adapter.getRegularPeriods(manifest);\r\n\r\n            if (voPeriods.length) {\r\n                presentationStartTime = voPeriods[0].start;\r\n            }\r\n        }\r\n\r\n        // When not present, DASH Metrics collection is\r\n        // requested from the beginning of content\r\n        // consumption.\r\n        reportingStartTime = presentationStartTime;\r\n\r\n        if (range && range.hasOwnProperty(constants.START_TIME)) {\r\n            reportingStartTime += range.starttime;\r\n        }\r\n\r\n        return reportingStartTime;\r\n    }\r\n\r\n    function getMetrics(manifest) {\r\n        let metrics = [];\r\n\r\n        if (manifest && manifest.Metrics_asArray) {\r\n            manifest.Metrics_asArray.forEach(metric => {\r\n                var metricEntry = new Metrics();\r\n                var isDynamic = adapter.getIsDynamic(manifest);\r\n\r\n                if (metric.hasOwnProperty('metrics')) {\r\n                    metricEntry.metrics = metric.metrics;\r\n                } else {\r\n                    return;\r\n                }\r\n\r\n                if (metric.Range_asArray) {\r\n                    metric.Range_asArray.forEach(range => {\r\n                        var rangeEntry = new Range();\r\n\r\n                        rangeEntry.starttime =\r\n                            getMetricsRangeStartTime(manifest, isDynamic, range);\r\n\r\n                        if (range.hasOwnProperty('duration')) {\r\n                            rangeEntry.duration = range.duration;\r\n                        } else {\r\n                            // if not present, the value is identical to the\r\n                            // Media Presentation duration.\r\n                            rangeEntry.duration = adapter.getDuration(manifest);\r\n                        }\r\n\r\n                        rangeEntry._useWallClockTime = isDynamic;\r\n\r\n                        metricEntry.Range.push(rangeEntry);\r\n                    });\r\n                }\r\n\r\n                if (metric.Reporting_asArray) {\r\n                    metric.Reporting_asArray.forEach(reporting => {\r\n                        var reportingEntry = new Reporting();\r\n\r\n                        if (reporting.hasOwnProperty(constants.SCHEME_ID_URI)) {\r\n                            reportingEntry.schemeIdUri = reporting.schemeIdUri;\r\n                        } else {\r\n                            // Invalid Reporting. schemeIdUri must be set. Ignore.\r\n                            return;\r\n                        }\r\n\r\n                        if (reporting.hasOwnProperty('value')) {\r\n                            reportingEntry.value = reporting.value;\r\n                        }\r\n\r\n                        if (reporting.hasOwnProperty(constants.DVB_REPORTING_URL)) {\r\n                            reportingEntry.dvb_reportingUrl = reporting[constants.DVB_REPORTING_URL];\r\n                        }\r\n\r\n                        if (reporting.hasOwnProperty(constants.DVB_PROBABILITY)) {\r\n                            reportingEntry.dvb_probability = reporting[constants.DVB_PROBABILITY];\r\n                        }\r\n\r\n                        metricEntry.Reporting.push(reportingEntry);\r\n                    });\r\n                } else {\r\n                    // Invalid Metrics. At least one reporting must be present. Ignore\r\n                    return;\r\n                }\r\n\r\n                metrics.push(metricEntry);\r\n            });\r\n        }\r\n\r\n        return metrics;\r\n    }\r\n\r\n    instance = {\r\n        getMetrics: getMetrics\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nManifestParsing.__dashjs_factory_name = 'ManifestParsing';\r\nexport default dashjs.FactoryMaker.getSingletonFactory(ManifestParsing); /* jshint ignore:line */","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n/**\r\n * @ignore\r\n */\r\nfunction MetricSerialiser() {\r\n\r\n    // For each entry in the top level list within the metric (in the case\r\n    // of the DVBErrors metric each entry corresponds to an \"error event\"\r\n    // described in clause 10.8.4) the Player shall:\r\n    function serialise(metric) {\r\n        let pairs = [];\r\n        let obj = [];\r\n        let key,\r\n            value;\r\n\r\n        // Take each (key, value) pair from the metric entry and create a\r\n        // string consisting of the name of the key, followed by an equals\r\n        // ('=') character, followed by the string representation of the\r\n        // value. The string representation of the value is created based\r\n        // on the type of the value following the instructions in Table 22.\r\n        for (key in metric) {\r\n            if (metric.hasOwnProperty(key) && (key.indexOf('_') !== 0)) {\r\n                value = metric[key];\r\n\r\n                // we want to ensure that keys still end up in the report\r\n                // even if there is no value\r\n                if ((value === undefined) || (value === null)) {\r\n                    value = '';\r\n                }\r\n\r\n                // DVB A168 10.12.4 Table 22\r\n                if (Array.isArray(value)) {\r\n                    // if trace or similar is null, do not include in output\r\n                    if (!value.length) {\r\n                        continue;\r\n                    }\r\n\r\n                    obj = [];\r\n\r\n                    value.forEach(function (v) {\r\n                        let isBuiltIn = Object.prototype.toString.call(v).slice(8, -1) !== 'Object';\r\n\r\n                        obj.push(isBuiltIn ? v : serialise(v));\r\n                    });\r\n\r\n                    value = obj.map(encodeURIComponent).join(',');\r\n                } else if (typeof value === 'string') {\r\n                    value = encodeURIComponent(value);\r\n                } else if (value instanceof Date) {\r\n                    value = value.toISOString();\r\n                } else if (typeof value === 'number') {\r\n                    value = Math.round(value);\r\n                }\r\n\r\n                pairs.push(key + '=' + value);\r\n            }\r\n        }\r\n\r\n        // Concatenate the strings created in the previous step with an\r\n        // ampersand ('&') character between each one.\r\n        return pairs.join('&');\r\n    }\r\n\r\n    return {\r\n        serialise: serialise\r\n    };\r\n}\r\n\r\nMetricSerialiser.__dashjs_factory_name = 'MetricSerialiser';\r\nexport default dashjs.FactoryMaker.getSingletonFactory(MetricSerialiser); /* jshint ignore:line */\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n /**\r\n  * @ignore\r\n  */\r\nfunction RNG() {\r\n\r\n    // check whether secure random numbers are available. if not, revert to\r\n    // using Math.random\r\n    let crypto = window.crypto || window.msCrypto;\r\n\r\n    // could just as easily use any other array type by changing line below\r\n    let ArrayType = Uint32Array;\r\n    let MAX_VALUE = Math.pow(2, ArrayType.BYTES_PER_ELEMENT * 8) - 1;\r\n\r\n    // currently there is only one client for this code, and that only uses\r\n    // a single random number per initialisation. may want to increase this\r\n    // number if more consumers in the future\r\n    let NUM_RANDOM_NUMBERS = 10;\r\n\r\n    let randomNumbers,\r\n        index,\r\n        instance;\r\n\r\n    function initialise() {\r\n        if (crypto) {\r\n            if (!randomNumbers) {\r\n                randomNumbers = new ArrayType(NUM_RANDOM_NUMBERS);\r\n            }\r\n            crypto.getRandomValues(randomNumbers);\r\n            index = 0;\r\n        }\r\n    }\r\n\r\n    function rand(min, max) {\r\n        let r;\r\n\r\n        if (!min) {\r\n            min = 0;\r\n        }\r\n\r\n        if (!max) {\r\n            max = 1;\r\n        }\r\n\r\n        if (crypto) {\r\n            if (index === randomNumbers.length) {\r\n                initialise();\r\n            }\r\n\r\n            r = randomNumbers[index] / MAX_VALUE;\r\n            index += 1;\r\n        } else {\r\n            r = Math.random();\r\n        }\r\n\r\n        return (r * (max - min)) + min;\r\n    }\r\n\r\n    instance = {\r\n        random: rand\r\n    };\r\n\r\n    initialise();\r\n\r\n    return instance;\r\n}\r\n\r\nRNG.__dashjs_factory_name = 'RNG';\r\nexport default dashjs.FactoryMaker.getSingletonFactory(RNG); /* jshint ignore:line */\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @class\r\n * @ignore\r\n */\r\nclass DVBErrors {\r\n    constructor() {\r\n        this.mpdurl = null;\r\n        // String - Absolute URL from which the MPD was originally\r\n        // retrieved (MPD updates will not change this value).\r\n\r\n        this.errorcode = null;\r\n        // String - The value of errorcode depends upon the type\r\n        // of error being reported. For an error listed in the\r\n        // ErrorType column below the value is as described in the\r\n        // Value column.\r\n        //\r\n        // ErrorType                                            Value\r\n        // ---------                                            -----\r\n        // HTTP error status code                               HTTP status code\r\n        // Unknown HTTP status code                             HTTP status code\r\n        // SSL connection failed                                \"SSL\" followed by SSL alert value\r\n        // DNS resolution failed                                \"C00\"\r\n        // Host unreachable                                     \"C01\"\r\n        // Connection refused                                   \"C02\"\r\n        // Connection error – Not otherwise specified           \"C03\"\r\n        // Corrupt media – ISO BMFF container cannot be parsed  \"M00\"\r\n        // Corrupt media – Not otherwise specified              \"M01\"\r\n        // Changing Base URL in use due to errors               \"F00\"\r\n        // Becoming an error reporting Player                   \"S00\"\r\n\r\n        this.terror = null;\r\n        // Real-Time - Date and time at which error occurred in UTC,\r\n        // formatted as a combined date and time according to ISO 8601.\r\n\r\n        this.url = null;\r\n        // String - Absolute URL from which data was being requested\r\n        // when this error occurred. If the error report is in relation\r\n        // to corrupt media or changing BaseURL, this may be a null\r\n        // string if the URL from which the media was obtained or\r\n        // which led to the change of BaseURL is no longer known.\r\n\r\n        this.ipaddress = null;\r\n        // String - IP Address which the host name in \"url\" resolved to.\r\n        // If the error report is in relation to corrupt media or\r\n        // changing BaseURL, this may be a null string if the URL\r\n        // from which the media was obtained or which led to the\r\n        // change of BaseURL is no longer known.\r\n\r\n        this.servicelocation = null;\r\n        // String - The value of the serviceLocation field in the\r\n        // BaseURL being used. In the event of this report indicating\r\n        // a change of BaseURL this is the value from the BaseURL\r\n        // being moved from.\r\n    }\r\n}\r\n\r\nDVBErrors.SSL_CONNECTION_FAILED_PREFIX = 'SSL';\r\nDVBErrors.DNS_RESOLUTION_FAILED =        'C00';\r\nDVBErrors.HOST_UNREACHABLE =             'C01';\r\nDVBErrors.CONNECTION_REFUSED =           'C02';\r\nDVBErrors.CONNECTION_ERROR =             'C03';\r\nDVBErrors.CORRUPT_MEDIA_ISOBMFF =        'M00';\r\nDVBErrors.CORRUPT_MEDIA_OTHER =          'M01';\r\nDVBErrors.BASE_URL_CHANGED =             'F00';\r\nDVBErrors.BECAME_REPORTER =              'S00';\r\n\r\nexport default DVBErrors;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @class\r\n * @ignore\r\n */\r\nclass Metrics {\r\n    constructor() {\r\n\r\n        this.metrics = '';\r\n        this.Range = [];\r\n        this.Reporting = [];\r\n    }\r\n}\r\n\r\nexport default Metrics;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @class\r\n * @ignore\r\n */\r\nclass Range {\r\n    constructor() {\r\n\r\n        // as defined in ISO23009-1\r\n        this.starttime = 0;\r\n        this.duration = Infinity;\r\n\r\n        // for internal use\r\n        this._useWallClockTime = false;\r\n    }\r\n}\r\n\r\nexport default Range;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @class\r\n * @ignore\r\n */\r\n\r\n// TS 103 285 Clause 10.12.3.3\r\nconst DEFAULT_DVB_PROBABILITY = 1000;\r\n\r\nclass Reporting {\r\n    constructor() {\r\n\r\n        this.schemeIdUri = '';\r\n        this.value = '';\r\n\r\n        // DVB Extensions\r\n        this.dvb_reportingUrl = '';\r\n        this.dvb_probability = DEFAULT_DVB_PROBABILITY;\r\n    }\r\n}\r\n\r\nexport default Reporting;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport ObjectUtils from '../utils/ObjectUtils';\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\n\r\nconst DEFAULT_INDEX = NaN;\r\n\r\nclass Node {\r\n    constructor(_baseUrls, _selectedIdx) {\r\n        this.data = {\r\n            baseUrls: _baseUrls || null,\r\n            selectedIdx: _selectedIdx || DEFAULT_INDEX\r\n        };\r\n        this.children = [];\r\n    }\r\n}\r\n\r\nfunction BaseURLTreeModel() {\r\n    let instance,\r\n        root,\r\n        adapter;\r\n\r\n    const context = this.context;\r\n    const objectUtils = ObjectUtils(context).getInstance();\r\n\r\n    function setup() {\r\n        reset();\r\n    }\r\n\r\n    function setConfig(config) {\r\n        if (config.adapter) {\r\n            adapter = config.adapter;\r\n        }\r\n    }\r\n\r\n    function checkConfig() {\r\n        if (!adapter || !adapter.hasOwnProperty('getBaseURLsFromElement') || !adapter.hasOwnProperty('getRepresentationSortFunction')) {\r\n            throw new Error('setConfig function has to be called previously');\r\n        }\r\n    }\r\n\r\n    function updateChildData(node, index, element) {\r\n        const baseUrls = adapter.getBaseURLsFromElement(element);\r\n\r\n        if (!node[index]) {\r\n            node[index] = new Node(baseUrls);\r\n        } else {\r\n            if (!objectUtils.areEqual(baseUrls, node[index].data.baseUrls)) {\r\n                node[index].data.baseUrls = baseUrls;\r\n                node[index].data.selectedIdx = DEFAULT_INDEX;\r\n            }\r\n        }\r\n    }\r\n\r\n    function getBaseURLCollectionsFromManifest(manifest) {\r\n        checkConfig();\r\n        const baseUrls = adapter.getBaseURLsFromElement(manifest);\r\n\r\n        if (!objectUtils.areEqual(baseUrls, root.data.baseUrls)) {\r\n            root.data.baseUrls = baseUrls;\r\n            root.data.selectedIdx = DEFAULT_INDEX;\r\n        }\r\n\r\n        if (manifest && manifest.Period_asArray) {\r\n            manifest.Period_asArray.forEach((p, pi) => {\r\n                updateChildData(root.children, pi, p);\r\n\r\n                if (p.AdaptationSet_asArray) {\r\n                    p.AdaptationSet_asArray.forEach((a, ai) => {\r\n                        updateChildData(root.children[pi].children, ai, a);\r\n\r\n                        if (a.Representation_asArray) {\r\n                            a.Representation_asArray.sort(\r\n                                adapter.getRepresentationSortFunction()\r\n                            ).forEach((r, ri) => {\r\n                                updateChildData(\r\n                                    root.children[pi].children[ai].children,\r\n                                    ri,\r\n                                    r\r\n                                );\r\n                            });\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    function walk(callback, node) {\r\n        const target = node || root;\r\n\r\n        callback(target.data);\r\n\r\n        if (target.children) {\r\n            target.children.forEach(child => walk(callback, child));\r\n        }\r\n    }\r\n\r\n    function invalidateSelectedIndexes(serviceLocation) {\r\n        walk((data) => {\r\n            if (!isNaN(data.selectedIdx)) {\r\n                if (serviceLocation === data.baseUrls[data.selectedIdx].serviceLocation) {\r\n                    data.selectedIdx = DEFAULT_INDEX;\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    function update(manifest) {\r\n        getBaseURLCollectionsFromManifest(manifest);\r\n    }\r\n\r\n    function reset() {\r\n        root = new Node();\r\n    }\r\n\r\n    function getForPath(path) {\r\n        let target = root;\r\n        const nodes = [target.data];\r\n\r\n        if (path) {\r\n            path.forEach(p => {\r\n                target = target.children[p];\r\n\r\n                if (target) {\r\n                    nodes.push(target.data);\r\n                }\r\n            });\r\n        }\r\n\r\n        return nodes.filter(n => n.baseUrls.length);\r\n    }\r\n\r\n    instance = {\r\n        reset: reset,\r\n        update: update,\r\n        getForPath: getForPath,\r\n        invalidateSelectedIndexes: invalidateSelectedIndexes,\r\n        setConfig: setConfig\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\nBaseURLTreeModel.__dashjs_factory_name = 'BaseURLTreeModel';\r\nexport default FactoryMaker.getClassFactory(BaseURLTreeModel);\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport EventBus from '../../core/EventBus';\r\nimport MediaPlayerEvents from '../MediaPlayerEvents';\r\nimport MetricsReportingEvents from '../metrics/MetricsReportingEvents';\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\nimport Debug from '../../core/Debug';\r\nimport Settings from '../../core/Settings';\r\nimport {HTTPRequest} from '../vo/metrics/HTTPRequest';\r\nimport DashManifestModel from '../../dash/models/DashManifestModel';\r\nimport Utils from '../../core/Utils';\r\n\r\nconst CMCD_REQUEST_FIELD_NAME = 'CMCD';\r\nconst CMCD_VERSION = 1;\r\nconst OBJECT_TYPES = {\r\n    MANIFEST: 'm',\r\n    AUDIO: 'a',\r\n    VIDEO: 'v',\r\n    INIT: 'i',\r\n    CAPTION: 'c',\r\n    ISOBMFF_TEXT_TRACK: 'tt',\r\n    ENCRYPTION_KEY: 'k',\r\n    OTHER: 'o'\r\n};\r\nconst STREAMING_FORMATS = {\r\n    DASH: 'd',\r\n    MSS: 's'\r\n};\r\nconst STREAM_TYPES = {\r\n    VOD: 'v',\r\n    LIVE: 'l'\r\n};\r\n\r\nfunction CmcdModel() {\r\n\r\n    let logger,\r\n        dashManifestModel,\r\n        instance,\r\n        internalData,\r\n        abrController,\r\n        dashMetrics,\r\n        playbackController,\r\n        _isStartup,\r\n        _bufferLevelStarved,\r\n        _initialMediaRequestsDone;\r\n\r\n    let context = this.context;\r\n    let eventBus = EventBus(context).getInstance();\r\n    let settings = Settings(context).getInstance();\r\n\r\n    function setup() {\r\n        logger = Debug(context).getInstance().getLogger(instance);\r\n        dashManifestModel = DashManifestModel(context).getInstance();\r\n\r\n        _resetInitialSettings();\r\n    }\r\n\r\n    function initialize() {\r\n        eventBus.on(MediaPlayerEvents.PLAYBACK_RATE_CHANGED, _onPlaybackRateChanged, instance);\r\n        eventBus.on(MediaPlayerEvents.MANIFEST_LOADED, _onManifestLoaded, instance);\r\n        eventBus.on(MediaPlayerEvents.BUFFER_LEVEL_STATE_CHANGED, _onBufferLevelStateChanged, instance);\r\n        eventBus.on(MediaPlayerEvents.PLAYBACK_SEEKED, _onPlaybackSeeked, instance);\r\n    }\r\n\r\n    function setConfig(config) {\r\n        if (!config) return;\r\n\r\n        if (config.abrController) {\r\n            abrController = config.abrController;\r\n        }\r\n\r\n        if (config.dashMetrics) {\r\n            dashMetrics = config.dashMetrics;\r\n        }\r\n\r\n        if (config.playbackController) {\r\n            playbackController = config.playbackController;\r\n        }\r\n    }\r\n\r\n    function _resetInitialSettings() {\r\n        internalData = {\r\n            pr: 1,\r\n            nor: null,\r\n            st: null,\r\n            sf: null,\r\n            sid: `${Utils.generateUuid()}`,\r\n            cid: null\r\n        };\r\n        _bufferLevelStarved = {};\r\n        _isStartup = {};\r\n        _initialMediaRequestsDone = {};\r\n    }\r\n\r\n    function getQueryParameter(request) {\r\n        try {\r\n            if (settings.get().streaming.cmcd && settings.get().streaming.cmcd.enabled) {\r\n                const cmcdData = _getCmcdData(request);\r\n                const finalPayloadString = _buildFinalString(cmcdData);\r\n\r\n                eventBus.trigger(MetricsReportingEvents.CMCD_DATA_GENERATED, {\r\n                    url: request.url,\r\n                    mediaType: request.mediaType,\r\n                    cmcdData,\r\n                    cmcdString: finalPayloadString\r\n                });\r\n                return {\r\n                    key: CMCD_REQUEST_FIELD_NAME,\r\n                    value: finalPayloadString\r\n                };\r\n            }\r\n\r\n            return null;\r\n        } catch (e) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    function _getCmcdData(request) {\r\n        try {\r\n            let cmcdData = null;\r\n\r\n            if (request.type === HTTPRequest.MPD_TYPE) {\r\n                return _getCmcdDataForMpd(request);\r\n            } else if (request.type === HTTPRequest.MEDIA_SEGMENT_TYPE) {\r\n                _initForMediaType(request.mediaType);\r\n                return _getCmcdDataForMediaSegment(request);\r\n            } else if (request.type === HTTPRequest.INIT_SEGMENT_TYPE) {\r\n                return _getCmcdDataForInitSegment(request);\r\n            } else if (request.type === HTTPRequest.OTHER_TYPE || request.type === HTTPRequest.XLINK_EXPANSION_TYPE) {\r\n                return _getCmcdDataForOther(request);\r\n            }\r\n\r\n            return cmcdData;\r\n        } catch (e) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    function _getCmcdDataForMpd() {\r\n        const data = _getGenericCmcdData();\r\n\r\n        data.ot = `${OBJECT_TYPES.MANIFEST}`;\r\n\r\n        return data;\r\n    }\r\n\r\n    function _getCmcdDataForMediaSegment(request) {\r\n        const data = _getGenericCmcdData();\r\n        const encodedBitrate = _getBitrateByRequest(request);\r\n        const d = _getObjectDurationByRequest(request);\r\n        const ot = request.mediaType === 'video' ? `${OBJECT_TYPES.VIDEO}` : request.mediaType === 'audio' ? `${OBJECT_TYPES.AUDIO}` : request.mediaType === 'fragmentedText' ? `${OBJECT_TYPES.CAPTION}` : null;\r\n        const mtp = _getMeasuredThroughputByType(request.mediaType);\r\n        const dl = _getDeadlineByType(request.mediaType);\r\n        const bl = _getBufferLevelByType(request.mediaType);\r\n        const tb = _getTopBitrateByType(request.mediaType);\r\n        const pr = internalData.pr;\r\n\r\n        if (encodedBitrate) {\r\n            data.br = encodedBitrate;\r\n        }\r\n\r\n        if (ot) {\r\n            data.ot = ot;\r\n        }\r\n\r\n        if (!isNaN(d)) {\r\n            data.d = d;\r\n        }\r\n\r\n        if (!isNaN(mtp)) {\r\n            data.mtp = mtp;\r\n        }\r\n\r\n        if (!isNaN(dl)) {\r\n            data.dl = dl;\r\n        }\r\n\r\n        if (!isNaN(bl)) {\r\n            data.bl = bl;\r\n        }\r\n\r\n        if (!isNaN(tb)) {\r\n            data.tb = tb;\r\n        }\r\n\r\n        if (!isNaN(pr) && pr !== 1) {\r\n            data.pr = pr;\r\n        }\r\n\r\n        if (_bufferLevelStarved[request.mediaType]) {\r\n            data.bs = true;\r\n            _bufferLevelStarved[request.mediaType] = false;\r\n        }\r\n\r\n        if (_isStartup[request.mediaType] || !_initialMediaRequestsDone[request.mediaType]) {\r\n            data.su = true;\r\n            _isStartup[request.mediaType] = false;\r\n            _initialMediaRequestsDone[request.mediaType] = true;\r\n        }\r\n\r\n        return data;\r\n    }\r\n\r\n    function _initForMediaType(mediaType) {\r\n\r\n        if (!_initialMediaRequestsDone.hasOwnProperty(mediaType)) {\r\n            _initialMediaRequestsDone[mediaType] = false;\r\n        }\r\n\r\n        if (!_isStartup.hasOwnProperty(mediaType)) {\r\n            _isStartup[mediaType] = false;\r\n        }\r\n\r\n        if (!_bufferLevelStarved.hasOwnProperty(mediaType)) {\r\n            _bufferLevelStarved[mediaType] = false;\r\n        }\r\n    }\r\n\r\n    function _getCmcdDataForInitSegment() {\r\n        const data = _getGenericCmcdData();\r\n\r\n        data.ot = `${OBJECT_TYPES.INIT}`;\r\n        data.su = true;\r\n\r\n        return data;\r\n    }\r\n\r\n    function _getCmcdDataForOther() {\r\n        const data = _getGenericCmcdData();\r\n\r\n        data.ot = `${OBJECT_TYPES.OTHER}`;\r\n\r\n        return data;\r\n    }\r\n\r\n\r\n    function _getGenericCmcdData() {\r\n        const data = {};\r\n\r\n        let cid = settings.get().streaming.cmcd.cid ? settings.get().streaming.cmcd.cid : internalData.cid;\r\n\r\n        data.v = CMCD_VERSION;\r\n        data.sid = settings.get().streaming.cmcd.sid ? settings.get().streaming.cmcd.sid : internalData.sid;\r\n\r\n        data.sid = `${data.sid}`;\r\n\r\n        if (cid) {\r\n            data.cid = `${cid}`;\r\n        }\r\n\r\n        if (!isNaN(internalData.pr) && internalData.pr !== 1 && internalData.pr !== null) {\r\n            data.pr = internalData.pr;\r\n        }\r\n\r\n        if (internalData.st) {\r\n            data.st = internalData.st;\r\n        }\r\n\r\n        if (internalData.sf) {\r\n            data.sf = internalData.sf;\r\n        }\r\n\r\n        return data;\r\n    }\r\n\r\n    function _getBitrateByRequest(request) {\r\n        try {\r\n            const quality = request.quality;\r\n            const bitrateList = request.mediaInfo.bitrateList;\r\n\r\n            return parseInt(bitrateList[quality].bandwidth / 1000);\r\n        } catch (e) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    function _getTopBitrateByType(mediaType) {\r\n        try {\r\n            const info = abrController.getTopBitrateInfoFor(mediaType);\r\n            return Math.round(info.bitrate / 1000);\r\n        } catch (e) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    function _getObjectDurationByRequest(request) {\r\n        try {\r\n            return !isNaN(request.duration) ? Math.round(request.duration * 1000) : null;\r\n        } catch (e) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    function _getMeasuredThroughputByType(mediaType) {\r\n        try {\r\n            return parseInt(abrController.getThroughputHistory().getSafeAverageThroughput(mediaType) / 100) * 100;\r\n        } catch (e) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    function _getDeadlineByType(mediaType) {\r\n        try {\r\n            const playbackRate = internalData.pr;\r\n            const bufferLevel = dashMetrics.getCurrentBufferLevel(mediaType);\r\n\r\n            if (!isNaN(playbackRate) && !isNaN(bufferLevel)) {\r\n                return parseInt((bufferLevel / playbackRate) * 10) * 100;\r\n            }\r\n\r\n            return null;\r\n        } catch (e) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    function _getBufferLevelByType(mediaType) {\r\n        try {\r\n            const bufferLevel = dashMetrics.getCurrentBufferLevel(mediaType);\r\n\r\n            if (!isNaN(bufferLevel)) {\r\n                return parseInt(bufferLevel * 10) * 100;\r\n            }\r\n\r\n            return null;\r\n        } catch (e) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    function _onPlaybackRateChanged(data) {\r\n        try {\r\n            internalData.pr = data.playbackRate;\r\n        } catch (e) {\r\n\r\n        }\r\n    }\r\n\r\n    function _onManifestLoaded(data) {\r\n        try {\r\n            const isDynamic = dashManifestModel.getIsDynamic(data.data);\r\n            const st = isDynamic ? `${STREAM_TYPES.LIVE}` : `${STREAM_TYPES.VOD}`;\r\n            const sf = data.protocol && data.protocol === 'MSS' ? `${STREAMING_FORMATS.MSS}` : `${STREAMING_FORMATS.DASH}`;\r\n\r\n            internalData.st = `${st}`;\r\n            internalData.sf = `${sf}`;\r\n        } catch (e) {\r\n        }\r\n    }\r\n\r\n    function _onBufferLevelStateChanged(data) {\r\n        try {\r\n            if (data.state && data.mediaType) {\r\n                if (data.state === MediaPlayerEvents.BUFFER_EMPTY) {\r\n\r\n                    if (!_bufferLevelStarved[data.mediaType]) {\r\n                        _bufferLevelStarved[data.mediaType] = true;\r\n                    }\r\n                    if (!_isStartup[data.mediaType]) {\r\n                        _isStartup[data.mediaType] = true;\r\n                    }\r\n                }\r\n            }\r\n        } catch (e) {\r\n\r\n        }\r\n    }\r\n\r\n    function _onPlaybackSeeked() {\r\n        for (let key in _bufferLevelStarved) {\r\n            if (_bufferLevelStarved.hasOwnProperty(key)) {\r\n                _bufferLevelStarved[key] = true;\r\n            }\r\n        }\r\n\r\n        for (let key in _isStartup) {\r\n            if (_isStartup.hasOwnProperty(key)) {\r\n                _isStartup[key] = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    function _buildFinalString(cmcdData) {\r\n        try {\r\n            if (!cmcdData) {\r\n                return null;\r\n            }\r\n            const keys = Object.keys(cmcdData).sort((a, b) =>a.localeCompare(b));\r\n            const length = keys.length;\r\n\r\n            let cmcdString = keys.reduce((acc, key, index) => {\r\n                if (key === 'v' && cmcdData[key] === 1) return acc; // Version key should only be reported if it is != 1\r\n                if (typeof cmcdData[key] === 'string' && (key !== 'ot' || key !== 'sf' || key !== 'st')) {\r\n                    let string = cmcdData[key].replace(/\"/g, '\\\"');\r\n                    acc += `${key}=\"${string}\"`;\r\n                } else {\r\n                    acc += `${key}=${cmcdData[key]}`;\r\n                }\r\n                if (index < length - 1) {\r\n                    acc += ',';\r\n                }\r\n\r\n                return acc;\r\n            }, '');\r\n\r\n            cmcdString = cmcdString.replace(/=true/g, '');\r\n\r\n            return cmcdString;\r\n        } catch (e) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    function reset() {\r\n        eventBus.off(MediaPlayerEvents.PLAYBACK_RATE_CHANGED, _onPlaybackRateChanged, this);\r\n        eventBus.off(MediaPlayerEvents.MANIFEST_LOADED, _onManifestLoaded, this);\r\n        eventBus.off(MediaPlayerEvents.BUFFER_LEVEL_STATE_CHANGED, _onBufferLevelStateChanged, instance);\r\n        eventBus.off(MediaPlayerEvents.PLAYBACK_SEEKED, _onPlaybackSeeked, instance);\r\n\r\n        _resetInitialSettings();\r\n    }\r\n\r\n    instance = {\r\n        getQueryParameter,\r\n        setConfig,\r\n        reset,\r\n        initialize\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\nCmcdModel.__dashjs_factory_name = 'CmcdModel';\r\nexport default FactoryMaker.getSingletonFactory(CmcdModel);\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\nimport FragmentRequest from '../vo/FragmentRequest';\r\n\r\nconst FRAGMENT_MODEL_LOADING = 'loading';\r\nconst FRAGMENT_MODEL_EXECUTED = 'executed';\r\nconst FRAGMENT_MODEL_CANCELED = 'canceled';\r\nconst FRAGMENT_MODEL_FAILED = 'failed';\r\n\r\nfunction FragmentModel(config) {\r\n\r\n    config = config || {};\r\n    const eventBus = config.eventBus;\r\n    const events = config.events;\r\n    const dashMetrics = config.dashMetrics;\r\n    const fragmentLoader = config.fragmentLoader;\r\n    const debug = config.debug;\r\n    const streamInfo = config.streamInfo;\r\n    const type = config.type;\r\n\r\n    let instance,\r\n        logger,\r\n        executedRequests,\r\n        loadingRequests;\r\n\r\n    function setup() {\r\n        logger = debug.getLogger(instance);\r\n        resetInitialSettings();\r\n        eventBus.on(events.LOADING_COMPLETED, onLoadingCompleted, instance);\r\n        eventBus.on(events.LOADING_DATA_PROGRESS, onLoadingInProgress, instance);\r\n        eventBus.on(events.LOADING_ABANDONED, onLoadingAborted, instance);\r\n    }\r\n\r\n    function getStreamId() {\r\n        return streamInfo.id;\r\n    }\r\n\r\n    function getType() {\r\n        return type;\r\n    }\r\n\r\n    function isFragmentLoaded(request) {\r\n        const isEqualComplete = function (req1, req2) {\r\n            return ((req1.action === FragmentRequest.ACTION_COMPLETE) && (req1.action === req2.action));\r\n        };\r\n\r\n        const isEqualMedia = function (req1, req2) {\r\n            return !isNaN(req1.index) && (req1.startTime === req2.startTime) && (req1.adaptationIndex === req2.adaptationIndex) && (req1.type === req2.type);\r\n        };\r\n\r\n        const isEqualInit = function (req1, req2) {\r\n            return isNaN(req1.index) && isNaN(req2.index) && (req1.quality === req2.quality);\r\n        };\r\n\r\n        const check = function (requests) {\r\n            let isLoaded = false;\r\n\r\n            requests.some(req => {\r\n                if (isEqualMedia(request, req) || isEqualInit(request, req) || isEqualComplete(request, req)) {\r\n                    isLoaded = true;\r\n                    return isLoaded;\r\n                }\r\n            });\r\n            return isLoaded;\r\n        };\r\n\r\n        if (!request) {\r\n            return false;\r\n        }\r\n\r\n        return check(executedRequests);\r\n    }\r\n\r\n    function isFragmentLoadedOrPending(request) {\r\n        let isLoaded = false;\r\n        let i = 0;\r\n        let req;\r\n\r\n        // First, check if the fragment has already been loaded\r\n        isLoaded = isFragmentLoaded(request);\r\n\r\n        // Then, check if the fragment is about to be loeaded\r\n        if (!isLoaded) {\r\n            for (i = 0; i < loadingRequests.length; i++) {\r\n                req = loadingRequests[i];\r\n                if ((request.url === req.url) && (request.startTime === req.startTime)) {\r\n                    isLoaded = true;\r\n                }\r\n            }\r\n        }\r\n\r\n        return isLoaded;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * Gets an array of {@link FragmentRequest} objects\r\n     *\r\n     * @param {Object} filter The object with properties by which the method filters the requests to be returned.\r\n     *  the only mandatory property is state, which must be a value from\r\n     *  other properties should match the properties of {@link FragmentRequest}. E.g.:\r\n     *  getRequests({state: FragmentModel.FRAGMENT_MODEL_EXECUTED, quality: 0}) - returns\r\n     *  all the requests from executedRequests array where requests.quality = filter.quality\r\n     *\r\n     * @returns {Array}\r\n     * @memberof FragmentModel#\r\n     */\r\n    function getRequests(filter) {\r\n        const states = filter ? filter.state instanceof Array ? filter.state : [filter.state] : [];\r\n\r\n        let filteredRequests = [];\r\n        states.forEach(state => {\r\n            const requests = getRequestsForState(state);\r\n            filteredRequests = filteredRequests.concat(filterRequests(requests, filter));\r\n        });\r\n\r\n        return filteredRequests;\r\n    }\r\n\r\n    function getRequestThreshold(req) {\r\n        return isNaN(req.duration) ? 0.25 : Math.min(req.duration / 8, 0.5);\r\n    }\r\n\r\n    function removeExecutedRequestsBeforeTime(time) {\r\n        executedRequests = executedRequests.filter(req => {\r\n            const threshold = getRequestThreshold(req);\r\n            return isNaN(req.startTime) || (time !== undefined ? req.startTime >= time - threshold : false);\r\n        });\r\n    }\r\n\r\n    function removeExecutedRequestsAfterTime(time) {\r\n        executedRequests = executedRequests.filter(req => {\r\n            return isNaN(req.startTime) || (time !== undefined ? req.startTime < time : false);\r\n        });\r\n    }\r\n\r\n    function removeExecutedRequestsInTimeRange(start, end) {\r\n        if (end <= start + 0.5) {\r\n            return;\r\n        }\r\n\r\n        executedRequests = executedRequests.filter(req => {\r\n            const threshold = getRequestThreshold(req);\r\n            return (isNaN(req.startTime) || req.startTime >= (end - threshold)) ||\r\n                (isNaN(req.duration) || (req.startTime + req.duration) <= (start + threshold));\r\n        });\r\n    }\r\n\r\n    // Remove requests that are not \"represented\" by any of buffered ranges\r\n    function syncExecutedRequestsWithBufferedRange(bufferedRanges, streamDuration) {\r\n        if (!bufferedRanges || bufferedRanges.length === 0) {\r\n            removeExecutedRequestsBeforeTime();\r\n            return;\r\n        }\r\n\r\n        let start = 0;\r\n        for (let i = 0, ln = bufferedRanges.length; i < ln; i++) {\r\n            removeExecutedRequestsInTimeRange(start, bufferedRanges.start(i));\r\n            start = bufferedRanges.end(i);\r\n        }\r\n        if (streamDuration > 0) {\r\n            removeExecutedRequestsInTimeRange(start, streamDuration);\r\n        }\r\n    }\r\n\r\n    function abortRequests() {\r\n        logger.debug('abort requests');\r\n        fragmentLoader.abort();\r\n        loadingRequests = [];\r\n    }\r\n\r\n    function executeRequest(request) {\r\n        switch (request.action) {\r\n            case FragmentRequest.ACTION_COMPLETE:\r\n                executedRequests.push(request);\r\n                addSchedulingInfoMetrics(request, FRAGMENT_MODEL_EXECUTED);\r\n                logger.debug('STREAM_COMPLETED');\r\n                eventBus.trigger(events.STREAM_COMPLETED,\r\n                    { request: request },\r\n                    { streamId: request.mediaInfo.streamInfo.id, mediaType: request.mediaType }\r\n                );\r\n                break;\r\n            case FragmentRequest.ACTION_DOWNLOAD:\r\n                addSchedulingInfoMetrics(request, FRAGMENT_MODEL_LOADING);\r\n                loadingRequests.push(request);\r\n                loadCurrentFragment(request);\r\n                break;\r\n            default:\r\n                logger.warn('Unknown request action.');\r\n        }\r\n    }\r\n\r\n    function loadCurrentFragment(request) {\r\n        eventBus.trigger(events.FRAGMENT_LOADING_STARTED,\r\n            { request: request },\r\n            { streamId: streamInfo.id, mediaType: type }\r\n        );\r\n        fragmentLoader.load(request);\r\n    }\r\n\r\n    function getRequestForTime(arr, time, threshold) {\r\n        // loop through the executed requests and pick the one for which the playback interval matches the given time\r\n        const lastIdx = arr.length - 1;\r\n        for (let i = lastIdx; i >= 0; i--) {\r\n            const req = arr[i];\r\n            const start = req.startTime;\r\n            const end = start + req.duration;\r\n            threshold = !isNaN(threshold) ? threshold : getRequestThreshold(req);\r\n            if ((!isNaN(start) && !isNaN(end) && ((time + threshold) >= start) && ((time - threshold) < end)) || (isNaN(start) && isNaN(time))) {\r\n                return req;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    function filterRequests(arr, filter) {\r\n        // for time use a specific filtration function\r\n        if (filter.hasOwnProperty('time')) {\r\n            return [getRequestForTime(arr, filter.time, filter.threshold)];\r\n        }\r\n\r\n        return arr.filter(request => {\r\n            for (const prop in filter) {\r\n                if (prop === 'state') continue;\r\n                if (filter.hasOwnProperty(prop) && request[prop] != filter[prop]) return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    function getRequestsForState(state) {\r\n        let requests;\r\n        switch (state) {\r\n            case FRAGMENT_MODEL_LOADING:\r\n                requests = loadingRequests;\r\n                break;\r\n            case FRAGMENT_MODEL_EXECUTED:\r\n                requests = executedRequests;\r\n                break;\r\n            default:\r\n                requests = [];\r\n        }\r\n        return requests;\r\n    }\r\n\r\n    function addSchedulingInfoMetrics(request, state) {\r\n        dashMetrics.addSchedulingInfo(request, state);\r\n        dashMetrics.addRequestsQueue(request.mediaType, loadingRequests, executedRequests);\r\n    }\r\n\r\n    function onLoadingCompleted(e) {\r\n        if (e.sender !== fragmentLoader) return;\r\n\r\n        loadingRequests.splice(loadingRequests.indexOf(e.request), 1);\r\n\r\n        if (e.response && !e.error) {\r\n            executedRequests.push(e.request);\r\n        }\r\n\r\n        addSchedulingInfoMetrics(e.request, e.error ? FRAGMENT_MODEL_FAILED : FRAGMENT_MODEL_EXECUTED);\r\n\r\n        eventBus.trigger(events.FRAGMENT_LOADING_COMPLETED,\r\n            {\r\n                request: e.request,\r\n                response: e.response,\r\n                error: e.error,\r\n                sender: this\r\n            },\r\n            { streamId: streamInfo.id, mediaType: type }\r\n        );\r\n    }\r\n\r\n    function onLoadingInProgress(e) {\r\n        if (e.sender !== fragmentLoader) return;\r\n\r\n        eventBus.trigger(events.FRAGMENT_LOADING_PROGRESS,\r\n            {\r\n                request: e.request,\r\n                response: e.response,\r\n                error: e.error,\r\n                sender: this\r\n            },\r\n            { streamId: streamInfo.id, mediaType: type }\r\n        );\r\n    }\r\n\r\n    function onLoadingAborted(e) {\r\n        if (e.sender !== fragmentLoader) return;\r\n\r\n        eventBus.trigger(events.FRAGMENT_LOADING_ABANDONED,\r\n            { request: e.request },\r\n            { streamId: streamInfo.id, mediaType: type }\r\n        );\r\n    }\r\n\r\n    function resetInitialSettings() {\r\n        executedRequests = [];\r\n        loadingRequests = [];\r\n    }\r\n\r\n    function reset() {\r\n        eventBus.off(events.LOADING_COMPLETED, onLoadingCompleted, this);\r\n        eventBus.off(events.LOADING_DATA_PROGRESS, onLoadingInProgress, this);\r\n        eventBus.off(events.LOADING_ABANDONED, onLoadingAborted, this);\r\n\r\n        if (fragmentLoader) {\r\n            fragmentLoader.reset();\r\n        }\r\n        resetInitialSettings();\r\n    }\r\n\r\n    function addExecutedRequest(request) {\r\n        executedRequests.push(request);\r\n    }\r\n\r\n    instance = {\r\n        getStreamId: getStreamId,\r\n        getType: getType,\r\n        getRequests: getRequests,\r\n        isFragmentLoaded: isFragmentLoaded,\r\n        isFragmentLoadedOrPending: isFragmentLoadedOrPending,\r\n        removeExecutedRequestsBeforeTime: removeExecutedRequestsBeforeTime,\r\n        removeExecutedRequestsAfterTime: removeExecutedRequestsAfterTime,\r\n        syncExecutedRequestsWithBufferedRange: syncExecutedRequestsWithBufferedRange,\r\n        abortRequests: abortRequests,\r\n        executeRequest: executeRequest,\r\n        reset: reset,\r\n        addExecutedRequest: addExecutedRequest\r\n    };\r\n\r\n    setup();\r\n    return instance;\r\n}\r\n\r\nFragmentModel.__dashjs_factory_name = 'FragmentModel';\r\nconst factory = FactoryMaker.getClassFactory(FragmentModel);\r\nfactory.FRAGMENT_MODEL_LOADING = FRAGMENT_MODEL_LOADING;\r\nfactory.FRAGMENT_MODEL_EXECUTED = FRAGMENT_MODEL_EXECUTED;\r\nfactory.FRAGMENT_MODEL_CANCELED = FRAGMENT_MODEL_CANCELED;\r\nfactory.FRAGMENT_MODEL_FAILED = FRAGMENT_MODEL_FAILED;\r\nFactoryMaker.updateClassFactory(FragmentModel.__dashjs_factory_name, factory);\r\nexport default factory;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport EventBus from '../../core/EventBus';\r\nimport Events from '../../core/events/Events';\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\n\r\nfunction ManifestModel() {\r\n\r\n    let context = this.context;\r\n    let eventBus = EventBus(context).getInstance();\r\n\r\n    let instance,\r\n        manifest;\r\n\r\n    function getValue() {\r\n        return manifest;\r\n    }\r\n\r\n    function setValue(value) {\r\n        manifest = value;\r\n        if (value) {\r\n            eventBus.trigger(Events.MANIFEST_LOADED,  { data: value });\r\n        }\r\n    }\r\n\r\n    instance = {\r\n        getValue: getValue,\r\n        setValue: setValue\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nManifestModel.__dashjs_factory_name = 'ManifestModel';\r\nexport default FactoryMaker.getSingletonFactory(ManifestModel);\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport UTCTiming from '../../dash/vo/UTCTiming';\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\nimport Constants from '../constants/Constants';\r\nimport ABRRulesCollection from '../rules/abr/ABRRulesCollection';\r\nimport Settings from '../../core/Settings';\r\nimport {checkParameterType} from '../utils/SupervisorTools';\r\n\r\n\r\nconst DEFAULT_MIN_BUFFER_TIME = 12;\r\nconst DEFAULT_MIN_BUFFER_TIME_FAST_SWITCH = 20;\r\n\r\nconst DEFAULT_LOW_LATENCY_LIVE_DELAY = 3.0;\r\nconst LOW_LATENCY_REDUCTION_FACTOR = 10;\r\nconst LOW_LATENCY_MULTIPLY_FACTOR = 5;\r\nconst DEFAULT_LIVE_LATENCY_CATCHUP_THRESHOLD_FACTOR = 4;\r\nconst MINIMUM_LIVE_LATENCY_CATCHUP = 5;\r\n\r\nconst DEFAULT_XHR_WITH_CREDENTIALS = false;\r\n\r\nfunction MediaPlayerModel() {\r\n\r\n    let instance,\r\n        UTCTimingSources,\r\n        xhrWithCredentials,\r\n        customABRRule;\r\n\r\n    const DEFAULT_UTC_TIMING_SOURCE = {\r\n        scheme: 'urn:mpeg:dash:utc:http-xsdate:2014',\r\n        value: 'http://time.akamai.com/?iso&ms'\r\n    };\r\n    const context = this.context;\r\n    const settings = Settings(context).getInstance();\r\n\r\n    function setup() {\r\n        UTCTimingSources = [];\r\n        xhrWithCredentials = {\r\n            default: DEFAULT_XHR_WITH_CREDENTIALS\r\n        };\r\n        customABRRule = [];\r\n    }\r\n\r\n    //TODO Should we use Object.define to have setters/getters? makes more readable code on other side.\r\n    function findABRCustomRuleIndex(rulename) {\r\n        let i;\r\n        for (i = 0; i < customABRRule.length; i++) {\r\n            if (customABRRule[i].rulename === rulename) {\r\n                return i;\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    function getABRCustomRules() {\r\n        return customABRRule;\r\n    }\r\n\r\n    function addABRCustomRule(type, rulename, rule) {\r\n        if (typeof type !== 'string' || (type !== ABRRulesCollection.ABANDON_FRAGMENT_RULES && type !== ABRRulesCollection.QUALITY_SWITCH_RULES) ||\r\n            typeof rulename !== 'string') {\r\n            throw Constants.BAD_ARGUMENT_ERROR;\r\n        }\r\n        let index = findABRCustomRuleIndex(rulename);\r\n        if (index === -1) {\r\n            // add rule\r\n            customABRRule.push({\r\n                type: type,\r\n                rulename: rulename,\r\n                rule: rule\r\n            });\r\n        } else {\r\n            // update rule\r\n            customABRRule[index].type = type;\r\n            customABRRule[index].rule = rule;\r\n        }\r\n    }\r\n\r\n    function removeABRCustomRule(rulename) {\r\n        if (rulename) {\r\n            let index = findABRCustomRuleIndex(rulename);\r\n            //if no rulename custom rule has been found, do nothing\r\n            if (index !== -1) {\r\n                // remove rule\r\n                customABRRule.splice(index, 1);\r\n            }\r\n        } else {\r\n            //if no rulename is defined, remove all ABR custome rules\r\n            customABRRule = [];\r\n        }\r\n    }\r\n\r\n    function getStableBufferTime() {\r\n        if (settings.get().streaming.lowLatencyEnabled) {\r\n            return getLiveDelay() * 0.6;\r\n        }\r\n\r\n        const stableBufferTime = settings.get().streaming.stableBufferTime;\r\n        return stableBufferTime > -1 ? stableBufferTime : settings.get().streaming.fastSwitchEnabled ? DEFAULT_MIN_BUFFER_TIME_FAST_SWITCH : DEFAULT_MIN_BUFFER_TIME;\r\n    }\r\n\r\n    function getRetryAttemptsForType(type) {\r\n        const lowLatencyMultiplyFactor = !isNaN(settings.get().streaming.retryAttempts.lowLatencyMultiplyFactor) ? settings.get().streaming.retryAttempts.lowLatencyMultiplyFactor : LOW_LATENCY_MULTIPLY_FACTOR;\r\n\r\n        return settings.get().streaming.lowLatencyEnabled ? settings.get().streaming.retryAttempts[type] * lowLatencyMultiplyFactor : settings.get().streaming.retryAttempts[type];\r\n    }\r\n\r\n    function getRetryIntervalsForType(type) {\r\n        const lowLatencyReductionFactor = !isNaN(settings.get().streaming.retryIntervals.lowLatencyReductionFactor) ? settings.get().streaming.retryIntervals.lowLatencyReductionFactor : LOW_LATENCY_REDUCTION_FACTOR;\r\n\r\n        return settings.get().streaming.lowLatencyEnabled ? settings.get().streaming.retryIntervals[type] / lowLatencyReductionFactor : settings.get().streaming.retryIntervals[type];\r\n    }\r\n\r\n    function getLiveDelay() {\r\n        if (settings.get().streaming.lowLatencyEnabled) {\r\n            return settings.get().streaming.liveDelay || DEFAULT_LOW_LATENCY_LIVE_DELAY;\r\n        }\r\n        return settings.get().streaming.liveDelay;\r\n    }\r\n\r\n    function getLiveCatchupLatencyThreshold() {\r\n        try {\r\n            const liveCatchupLatencyThreshold = settings.get().streaming.liveCatchup.latencyThreshold;\r\n            const liveDelay = getLiveDelay();\r\n\r\n            if (liveCatchupLatencyThreshold !== null && !isNaN(liveCatchupLatencyThreshold)) {\r\n                return Math.max(liveCatchupLatencyThreshold, liveDelay);\r\n            }\r\n\r\n\r\n            const liveCatchupMinDrift = settings.get().streaming.liveCatchup.minDrift;\r\n            const maximumLiveDelay = !isNaN(liveDelay) && liveDelay ? !isNaN(liveCatchupMinDrift) ? settings.get().streaming.liveCatchup.minDrift + getLiveDelay() : getLiveDelay() : NaN;\r\n\r\n            if (maximumLiveDelay && !isNaN(maximumLiveDelay)) {\r\n                return Math.max(maximumLiveDelay * DEFAULT_LIVE_LATENCY_CATCHUP_THRESHOLD_FACTOR, MINIMUM_LIVE_LATENCY_CATCHUP);\r\n            }\r\n\r\n            return NaN;\r\n\r\n        } catch (e) {\r\n            return NaN;\r\n        }\r\n    }\r\n\r\n    function addUTCTimingSource(schemeIdUri, value) {\r\n        removeUTCTimingSource(schemeIdUri, value); //check if it already exists and remove if so.\r\n        let vo = new UTCTiming();\r\n        vo.schemeIdUri = schemeIdUri;\r\n        vo.value = value;\r\n        UTCTimingSources.push(vo);\r\n    }\r\n\r\n    function getUTCTimingSources() {\r\n        return UTCTimingSources;\r\n    }\r\n\r\n    function removeUTCTimingSource(schemeIdUri, value) {\r\n        checkParameterType(schemeIdUri, 'string');\r\n        checkParameterType(value, 'string');\r\n        UTCTimingSources.forEach(function (obj, idx) {\r\n            if (obj.schemeIdUri === schemeIdUri && obj.value === value) {\r\n                UTCTimingSources.splice(idx, 1);\r\n            }\r\n        });\r\n    }\r\n\r\n    function clearDefaultUTCTimingSources() {\r\n        UTCTimingSources = [];\r\n    }\r\n\r\n    function restoreDefaultUTCTimingSources() {\r\n        addUTCTimingSource(DEFAULT_UTC_TIMING_SOURCE.scheme, DEFAULT_UTC_TIMING_SOURCE.value);\r\n    }\r\n\r\n    function setXHRWithCredentialsForType(type, value) {\r\n        if (!type) {\r\n            Object.keys(xhrWithCredentials).forEach(key => {\r\n                setXHRWithCredentialsForType(key, value);\r\n            });\r\n        } else {\r\n            xhrWithCredentials[type] = !!value;\r\n        }\r\n    }\r\n\r\n    function getXHRWithCredentialsForType(type) {\r\n        const useCreds = xhrWithCredentials[type];\r\n\r\n        return useCreds === undefined ? xhrWithCredentials.default : useCreds;\r\n    }\r\n\r\n    function getDefaultUtcTimingSource() {\r\n        return DEFAULT_UTC_TIMING_SOURCE;\r\n    }\r\n\r\n    function reset() {\r\n        //TODO need to figure out what props to persist across sessions and which to reset if any.\r\n        //setup();\r\n    }\r\n\r\n    instance = {\r\n        getABRCustomRules,\r\n        addABRCustomRule,\r\n        removeABRCustomRule,\r\n        getStableBufferTime,\r\n        getRetryAttemptsForType,\r\n        getRetryIntervalsForType,\r\n        getLiveDelay,\r\n        getLiveCatchupLatencyThreshold,\r\n        addUTCTimingSource,\r\n        removeUTCTimingSource,\r\n        getUTCTimingSources,\r\n        clearDefaultUTCTimingSources,\r\n        restoreDefaultUTCTimingSources,\r\n        setXHRWithCredentialsForType,\r\n        getXHRWithCredentialsForType,\r\n        getDefaultUtcTimingSource,\r\n        reset\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\n//TODO see if you can move this and not export and just getter to get default value.\r\nMediaPlayerModel.__dashjs_factory_name = 'MediaPlayerModel';\r\nexport default FactoryMaker.getSingletonFactory(MediaPlayerModel);\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport Constants from '../constants/Constants';\r\nimport MetricsConstants from '../constants/MetricsConstants';\r\nimport MetricsList from '../vo/MetricsList';\r\nimport { HTTPRequest, HTTPRequestTrace } from '../vo/metrics/HTTPRequest';\r\nimport TrackSwitch from '../vo/metrics/RepresentationSwitch';\r\nimport BufferLevel from '../vo/metrics/BufferLevel';\r\nimport BufferState from '../vo/metrics/BufferState';\r\nimport DVRInfo from '../vo/metrics/DVRInfo';\r\nimport DroppedFrames from '../vo/metrics/DroppedFrames';\r\nimport { ManifestUpdate, ManifestUpdateStreamInfo, ManifestUpdateRepresentationInfo } from '../vo/metrics/ManifestUpdate';\r\nimport SchedulingInfo from '../vo/metrics/SchedulingInfo';\r\nimport EventBus from '../../core/EventBus';\r\nimport RequestsQueue from '../vo/metrics/RequestsQueue';\r\nimport Events from '../../core/events/Events';\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\n\r\nfunction MetricsModel(config) {\r\n\r\n    config = config || {};\r\n\r\n    const settings = config.settings;\r\n\r\n    let context = this.context;\r\n    let eventBus = EventBus(context).getInstance();\r\n\r\n    let instance,\r\n        streamMetrics;\r\n\r\n    function setup() {\r\n        streamMetrics = {};\r\n    }\r\n\r\n    function metricsChanged() {\r\n        eventBus.trigger(Events.METRICS_CHANGED);\r\n    }\r\n\r\n    function metricChanged(mediaType) {\r\n        eventBus.trigger(Events.METRIC_CHANGED, { mediaType: mediaType });\r\n        metricsChanged();\r\n    }\r\n\r\n    function metricUpdated(mediaType, metricType, vo) {\r\n        eventBus.trigger(Events.METRIC_UPDATED, { mediaType: mediaType, metric: metricType, value: vo });\r\n        metricChanged(mediaType);\r\n    }\r\n\r\n    function metricAdded(mediaType, metricType, vo) {\r\n        eventBus.trigger(Events.METRIC_ADDED, { mediaType: mediaType, metric: metricType, value: vo });\r\n        metricChanged(mediaType);\r\n    }\r\n\r\n    function clearCurrentMetricsForType(type) {\r\n        delete streamMetrics[type];\r\n        metricChanged(type);\r\n    }\r\n\r\n    function clearAllCurrentMetrics() {\r\n        streamMetrics = {};\r\n        metricsChanged();\r\n    }\r\n\r\n    function getMetricsFor(type, readOnly) {\r\n        let metrics = null;\r\n\r\n        if (!type) {\r\n            return metrics;\r\n        }\r\n\r\n        if (streamMetrics.hasOwnProperty(type)) {\r\n            metrics = streamMetrics[type];\r\n        } else if (!readOnly) {\r\n            metrics = new MetricsList();\r\n            streamMetrics[type] = metrics;\r\n        }\r\n\r\n        return metrics;\r\n    }\r\n\r\n    function pushMetrics(type, list, value) {\r\n        let metrics = getMetricsFor(type);\r\n        if (metrics !== null) {\r\n            metrics[list].push(value);\r\n            if ( metrics[list].length > settings.get().streaming.metricsMaxListDepth ) {\r\n                metrics[list].shift();\r\n            }\r\n        }\r\n    }\r\n\r\n    function appendHttpTrace(httpRequest, s, d, b) {\r\n        let vo = new HTTPRequestTrace();\r\n\r\n        vo.s = s;\r\n        vo.d = d;\r\n        vo.b = b;\r\n\r\n        httpRequest.trace.push(vo);\r\n\r\n        if (!httpRequest.interval) {\r\n            httpRequest.interval = 0;\r\n        }\r\n\r\n        httpRequest.interval += d;\r\n\r\n        return vo;\r\n    }\r\n\r\n    function addHttpRequest(mediaType, tcpid, type, url, quality, actualurl, serviceLocation, range, trequest, tresponse, tfinish, responsecode, mediaduration, responseHeaders, traces) {\r\n        let vo = new HTTPRequest();\r\n\r\n        // ISO 23009-1 D.4.3 NOTE 2:\r\n        // All entries for a given object will have the same URL and range\r\n        // and so can easily be correlated. If there were redirects or\r\n        // failures there will be one entry for each redirect/failure.\r\n        // The redirect-to URL or alternative url (where multiple have been\r\n        // provided in the MPD) will appear as the actualurl of the next\r\n        // entry with the same url value.\r\n        if (actualurl && (actualurl !== url)) {\r\n\r\n            // given the above, add an entry for the original request\r\n            addHttpRequest(\r\n                mediaType,\r\n                null,\r\n                type,\r\n                url,\r\n                quality,\r\n                null,\r\n                null,\r\n                range,\r\n                trequest,\r\n                null, // unknown\r\n                null, // unknown\r\n                null, // unknown, probably a 302\r\n                mediaduration,\r\n                null,\r\n                null\r\n            );\r\n\r\n            vo.actualurl = actualurl;\r\n        }\r\n\r\n        vo.tcpid = tcpid;\r\n        vo.type = type;\r\n        vo.url = url;\r\n        vo.range = range;\r\n        vo.trequest = trequest;\r\n        vo.tresponse = tresponse;\r\n        vo.responsecode = responsecode;\r\n\r\n        vo._tfinish = tfinish;\r\n        vo._stream = mediaType;\r\n        vo._mediaduration = mediaduration;\r\n        vo._quality = quality;\r\n        vo._responseHeaders = responseHeaders;\r\n        vo._serviceLocation = serviceLocation;\r\n\r\n        if (traces) {\r\n            traces.forEach(trace => {\r\n                appendHttpTrace(vo, trace.s, trace.d, trace.b);\r\n            });\r\n        } else {\r\n            // The interval and trace shall be absent for redirect and failure records.\r\n            delete vo.interval;\r\n            delete vo.trace;\r\n        }\r\n\r\n        pushAndNotify(mediaType, MetricsConstants.HTTP_REQUEST, vo);\r\n    }\r\n\r\n    function addRepresentationSwitch(mediaType, t, mt, to, lto) {\r\n        let vo = new TrackSwitch();\r\n\r\n        vo.t = t;\r\n        vo.mt = mt;\r\n        vo.to = to;\r\n\r\n        if (lto) {\r\n            vo.lto = lto;\r\n        } else {\r\n            delete vo.lto;\r\n        }\r\n\r\n        pushAndNotify(mediaType, MetricsConstants.TRACK_SWITCH, vo);\r\n    }\r\n\r\n    function pushAndNotify(mediaType, metricType, metricObject) {\r\n        pushMetrics(mediaType, metricType, metricObject);\r\n        metricAdded(mediaType, metricType, metricObject);\r\n    }\r\n\r\n    function addBufferLevel(mediaType, t, level) {\r\n        let vo = new BufferLevel();\r\n        vo.t = t;\r\n        vo.level = level;\r\n\r\n        pushAndNotify(mediaType, MetricsConstants.BUFFER_LEVEL, vo);\r\n    }\r\n\r\n    function addBufferState(mediaType, state, target) {\r\n        let vo = new BufferState();\r\n        vo.target = target;\r\n        vo.state = state;\r\n\r\n        pushAndNotify(mediaType, MetricsConstants.BUFFER_STATE, vo);\r\n    }\r\n\r\n    function addDVRInfo(mediaType, currentTime, mpd, range) {\r\n        let vo = new DVRInfo();\r\n        vo.time = currentTime ;\r\n        vo.range = range;\r\n        vo.manifestInfo = mpd;\r\n\r\n        pushAndNotify(mediaType, MetricsConstants.DVR_INFO, vo);\r\n    }\r\n\r\n    function addDroppedFrames(mediaType, quality) {\r\n        let vo = new DroppedFrames();\r\n        let list = getMetricsFor(mediaType).DroppedFrames;\r\n\r\n        if (!quality) {\r\n            return;\r\n        }\r\n\r\n        vo.time = quality.creationTime;\r\n        vo.droppedFrames = quality.droppedVideoFrames;\r\n\r\n        if (list.length > 0 && list[list.length - 1] == vo) {\r\n            return;\r\n        }\r\n\r\n        pushAndNotify(mediaType, MetricsConstants.DROPPED_FRAMES, vo);\r\n    }\r\n\r\n    function addSchedulingInfo(mediaType, t, type, startTime, availabilityStartTime, duration, quality, range, state) {\r\n        let vo = new SchedulingInfo();\r\n\r\n        vo.mediaType = mediaType;\r\n        vo.t = t;\r\n\r\n        vo.type = type;\r\n        vo.startTime = startTime;\r\n        vo.availabilityStartTime = availabilityStartTime;\r\n        vo.duration = duration;\r\n        vo.quality = quality;\r\n        vo.range = range;\r\n\r\n        vo.state = state;\r\n\r\n        pushAndNotify(mediaType, MetricsConstants.SCHEDULING_INFO, vo);\r\n    }\r\n\r\n    function addRequestsQueue(mediaType, loadingRequests, executedRequests) {\r\n        let vo = new RequestsQueue();\r\n\r\n        vo.loadingRequests = loadingRequests;\r\n        vo.executedRequests = executedRequests;\r\n\r\n        getMetricsFor(mediaType).RequestsQueue = vo;\r\n        metricAdded(mediaType, MetricsConstants.REQUESTS_QUEUE, vo);\r\n    }\r\n\r\n    function addManifestUpdate(mediaType, type, requestTime, fetchTime, availabilityStartTime, presentationStartTime, clientTimeOffset, currentTime, buffered, latency) {\r\n        let vo = new ManifestUpdate();\r\n\r\n        vo.mediaType = mediaType;\r\n        vo.type = type;\r\n        vo.requestTime = requestTime; // when this manifest update was requested\r\n        vo.fetchTime = fetchTime; // when this manifest update was received\r\n        vo.availabilityStartTime = availabilityStartTime;\r\n        vo.presentationStartTime = presentationStartTime; // the seek point (liveEdge for dynamic, Stream[0].startTime for static)\r\n        vo.clientTimeOffset = clientTimeOffset; // the calculated difference between the server and client wall clock time\r\n        vo.currentTime = currentTime; // actual element.currentTime\r\n        vo.buffered = buffered; // actual element.ranges\r\n        vo.latency = latency; // (static is fixed value of zero. dynamic should be ((Now-@availabilityStartTime) - currentTime)\r\n\r\n        pushMetrics(Constants.STREAM, MetricsConstants.MANIFEST_UPDATE, vo);\r\n        metricAdded(mediaType, MetricsConstants.MANIFEST_UPDATE, vo);\r\n    }\r\n\r\n    function updateManifestUpdateInfo(manifestUpdate, updatedFields) {\r\n        if (manifestUpdate) {\r\n            for (let field in updatedFields) {\r\n                manifestUpdate[field] = updatedFields[field];\r\n            }\r\n\r\n            metricUpdated(manifestUpdate.mediaType, MetricsConstants.MANIFEST_UPDATE, manifestUpdate);\r\n        }\r\n    }\r\n\r\n    function addManifestUpdateStreamInfo(manifestUpdate, id, index, start, duration) {\r\n        if (manifestUpdate) {\r\n            let vo = new ManifestUpdateStreamInfo();\r\n\r\n            vo.id = id;\r\n            vo.index = index;\r\n            vo.start = start;\r\n            vo.duration = duration;\r\n\r\n            manifestUpdate.streamInfo.push(vo);\r\n            metricUpdated(manifestUpdate.mediaType, MetricsConstants.MANIFEST_UPDATE_STREAM_INFO, manifestUpdate);\r\n        }\r\n    }\r\n\r\n    function addManifestUpdateRepresentationInfo(manifestUpdate, id, index, streamIndex, mediaType, presentationTimeOffset, startNumber, fragmentInfoType) {\r\n        if (manifestUpdate && manifestUpdate.representationInfo) {\r\n\r\n            const vo = new ManifestUpdateRepresentationInfo();\r\n            vo.id = id;\r\n            vo.index = index;\r\n            vo.streamIndex = streamIndex;\r\n            vo.mediaType = mediaType;\r\n            vo.startNumber = startNumber;\r\n            vo.fragmentInfoType = fragmentInfoType;\r\n            vo.presentationTimeOffset = presentationTimeOffset;\r\n\r\n            manifestUpdate.representationInfo.push(vo);\r\n            metricUpdated(manifestUpdate.mediaType, MetricsConstants.MANIFEST_UPDATE_TRACK_INFO, manifestUpdate);\r\n        }\r\n    }\r\n\r\n    function addPlayList(vo) {\r\n        if (vo.trace && Array.isArray(vo.trace)) {\r\n            vo.trace.forEach(trace => {\r\n                if (trace.hasOwnProperty('subreplevel') && !trace.subreplevel) {\r\n                    delete trace.subreplevel;\r\n                }\r\n            });\r\n        } else {\r\n            delete vo.trace;\r\n        }\r\n\r\n        pushAndNotify(Constants.STREAM, MetricsConstants.PLAY_LIST, vo);\r\n    }\r\n\r\n    function addDVBErrors(vo) {\r\n        pushAndNotify(Constants.STREAM, MetricsConstants.DVB_ERRORS, vo);\r\n    }\r\n\r\n    instance = {\r\n        clearCurrentMetricsForType: clearCurrentMetricsForType,\r\n        clearAllCurrentMetrics: clearAllCurrentMetrics,\r\n        getMetricsFor: getMetricsFor,\r\n        addHttpRequest: addHttpRequest,\r\n        addRepresentationSwitch: addRepresentationSwitch,\r\n        addBufferLevel: addBufferLevel,\r\n        addBufferState: addBufferState,\r\n        addDVRInfo: addDVRInfo,\r\n        addDroppedFrames: addDroppedFrames,\r\n        addSchedulingInfo: addSchedulingInfo,\r\n        addRequestsQueue: addRequestsQueue,\r\n        addManifestUpdate: addManifestUpdate,\r\n        updateManifestUpdateInfo: updateManifestUpdateInfo,\r\n        addManifestUpdateStreamInfo: addManifestUpdateStreamInfo,\r\n        addManifestUpdateRepresentationInfo: addManifestUpdateRepresentationInfo,\r\n        addPlayList: addPlayList,\r\n        addDVBErrors: addDVBErrors\r\n    };\r\n\r\n    setup();\r\n    return instance;\r\n}\r\n\r\nMetricsModel.__dashjs_factory_name = 'MetricsModel';\r\nexport default FactoryMaker.getSingletonFactory(MetricsModel);\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport URIFragmentData from '../vo/URIFragmentData';\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\n\r\n/**\r\n * Model class managing URI fragments.\r\n * @ignore\r\n */\r\nfunction URIFragmentModel() {\r\n\r\n    let instance,\r\n        URIFragmentDataVO;\r\n\r\n    /**\r\n     * @param {string} uri The URI to parse for fragment extraction\r\n     * @memberof module:URIFragmentModel\r\n     * @instance\r\n     */\r\n    function initialize(uri) {\r\n        URIFragmentDataVO = new URIFragmentData();\r\n\r\n        if (!uri) return null;\r\n\r\n        const hashIndex = uri.indexOf('#');\r\n        if (hashIndex !== -1) {\r\n            const fragments = uri.substr(hashIndex + 1).split('&');\r\n            for (let i = 0, len = fragments.length; i < len; ++i) {\r\n                const fragment = fragments[i];\r\n                const equalIndex = fragment.indexOf('=');\r\n                if (equalIndex !== -1) {\r\n                    const key = fragment.substring(0,equalIndex);\r\n                    if (URIFragmentDataVO.hasOwnProperty(key)) {\r\n                        URIFragmentDataVO[key] = fragment.substr(equalIndex + 1);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @returns {URIFragmentData} Object containing supported URI fragments\r\n     * @memberof module:URIFragmentModel\r\n     * @instance\r\n     */\r\n    function getURIFragmentData() {\r\n        return URIFragmentDataVO;\r\n    }\r\n\r\n    instance = {\r\n        initialize: initialize,\r\n        getURIFragmentData: getURIFragmentData\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nURIFragmentModel.__dashjs_factory_name = 'URIFragmentModel';\r\nexport default FactoryMaker.getSingletonFactory(URIFragmentModel);\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\nimport EventBus from '../../core/EventBus';\r\nimport Events from '../../core/events/Events';\r\nimport Debug from '../../core/Debug';\r\n\r\nfunction VideoModel() {\r\n\r\n    let instance,\r\n        logger,\r\n        element,\r\n        TTMLRenderingDiv,\r\n        previousPlaybackRate;\r\n\r\n    const VIDEO_MODEL_WRONG_ELEMENT_TYPE = 'element is not video or audio DOM type!';\r\n\r\n    const context = this.context;\r\n    const eventBus = EventBus(context).getInstance();\r\n    const stalledStreams = [];\r\n\r\n    function setup() {\r\n        logger = Debug(context).getInstance().getLogger(instance);\r\n    }\r\n\r\n    function initialize() {\r\n        eventBus.on(Events.PLAYBACK_PLAYING, onPlaying, this);\r\n    }\r\n\r\n    function reset() {\r\n        eventBus.off(Events.PLAYBACK_PLAYING, onPlaying, this);\r\n    }\r\n\r\n    function onPlaybackCanPlay() {\r\n        if (element) {\r\n            element.playbackRate = previousPlaybackRate || 1;\r\n            element.removeEventListener('canplay', onPlaybackCanPlay);\r\n        }\r\n    }\r\n\r\n    function setPlaybackRate(value) {\r\n        if (!element) return;\r\n        if (element.readyState <= 2 && value > 0) {\r\n            // If media element hasn't loaded enough data to play yet, wait until it has\r\n            element.addEventListener('canplay', onPlaybackCanPlay);\r\n        } else {\r\n            element.playbackRate = value;\r\n        }\r\n    }\r\n\r\n    //TODO Move the DVR window calculations from MediaPlayer to Here.\r\n    function setCurrentTime(currentTime, stickToBuffered) {\r\n        if (element) {\r\n            //_currentTime = currentTime;\r\n\r\n            // We don't set the same currentTime because it can cause firing unexpected Pause event in IE11\r\n            // providing playbackRate property equals to zero.\r\n            if (element.currentTime == currentTime) return;\r\n\r\n            // TODO Despite the fact that MediaSource 'open' event has been fired IE11 cannot set videoElement.currentTime\r\n            // immediately (it throws InvalidStateError). It seems that this is related to videoElement.readyState property\r\n            // Initially it is 0, but soon after 'open' event it goes to 1 and setting currentTime is allowed. Chrome allows to\r\n            // set currentTime even if readyState = 0.\r\n            // setTimeout is used to workaround InvalidStateError in IE11\r\n            try {\r\n                currentTime = stickToBuffered ? stickTimeToBuffered(currentTime) : currentTime;\r\n                element.currentTime = currentTime;\r\n            } catch (e) {\r\n                if (element.readyState === 0 && e.code === e.INVALID_STATE_ERR) {\r\n                    setTimeout(function () {\r\n                        element.currentTime = currentTime;\r\n                    }, 400);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function stickTimeToBuffered(time) {\r\n        const buffered = getBufferRange();\r\n        let closestTime = time;\r\n        let closestDistance = 9999999999;\r\n        if (buffered) {\r\n            for (let i = 0; i < buffered.length; i++) {\r\n                const start = buffered.start(i);\r\n                const end = buffered.end(i);\r\n                const distanceToStart = Math.abs(start - time);\r\n                const distanceToEnd = Math.abs(end - time);\r\n\r\n                if (time >= start && time <= end) {\r\n                    return time;\r\n                }\r\n\r\n                if (distanceToStart < closestDistance) {\r\n                    closestDistance = distanceToStart;\r\n                    closestTime = start;\r\n                }\r\n\r\n                if (distanceToEnd < closestDistance) {\r\n                    closestDistance = distanceToEnd;\r\n                    closestTime = end;\r\n                }\r\n            }\r\n        }\r\n        return closestTime;\r\n    }\r\n\r\n    function getElement() {\r\n        return element;\r\n    }\r\n\r\n    function setElement(value) {\r\n        //add check of value type\r\n        if (value === null || value === undefined || (value && (/^(VIDEO|AUDIO)$/i).test(value.nodeName))) {\r\n            element = value;\r\n            // Workaround to force Firefox to fire the canplay event.\r\n            if (element) {\r\n                element.preload = 'auto';\r\n            }\r\n        } else {\r\n            throw VIDEO_MODEL_WRONG_ELEMENT_TYPE;\r\n        }\r\n    }\r\n\r\n    function setSource(source) {\r\n        if (element) {\r\n            if (source) {\r\n                element.src = source;\r\n            } else {\r\n                element.removeAttribute('src');\r\n                element.load();\r\n            }\r\n        }\r\n    }\r\n\r\n    function getSource() {\r\n        return element ? element.src : null;\r\n    }\r\n\r\n    function getTTMLRenderingDiv() {\r\n        return TTMLRenderingDiv;\r\n    }\r\n\r\n    function setTTMLRenderingDiv(div) {\r\n        TTMLRenderingDiv = div;\r\n        // The styling will allow the captions to match the video window size and position.\r\n        TTMLRenderingDiv.style.position = 'absolute';\r\n        TTMLRenderingDiv.style.display = 'flex';\r\n        TTMLRenderingDiv.style.overflow = 'hidden';\r\n        TTMLRenderingDiv.style.pointerEvents = 'none';\r\n        TTMLRenderingDiv.style.top = 0;\r\n        TTMLRenderingDiv.style.left = 0;\r\n    }\r\n\r\n    function setStallState(type, state) {\r\n        stallStream(type, state);\r\n    }\r\n\r\n    function isStalled() {\r\n        return (stalledStreams.length > 0);\r\n    }\r\n\r\n    function addStalledStream(type) {\r\n        let event;\r\n\r\n        if (type === null || !element || element.seeking || stalledStreams.indexOf(type) !== -1) {\r\n            return;\r\n        }\r\n\r\n        stalledStreams.push(type);\r\n        if (element && stalledStreams.length === 1) {\r\n            // Halt playback until nothing is stalled.\r\n            event = document.createEvent('Event');\r\n            event.initEvent('waiting', true, false);\r\n            previousPlaybackRate = element.playbackRate;\r\n            setPlaybackRate(0);\r\n            element.dispatchEvent(event);\r\n        }\r\n    }\r\n\r\n    function removeStalledStream(type) {\r\n        let index = stalledStreams.indexOf(type);\r\n        let event;\r\n\r\n        if (type === null) {\r\n            return;\r\n        }\r\n        if (index !== -1) {\r\n            stalledStreams.splice(index, 1);\r\n        }\r\n        // If nothing is stalled resume playback.\r\n        if (element && isStalled() === false && element.playbackRate === 0) {\r\n            setPlaybackRate(previousPlaybackRate || 1);\r\n            if (!element.paused) {\r\n                event = document.createEvent('Event');\r\n                event.initEvent('playing', true, false);\r\n                element.dispatchEvent(event);\r\n            }\r\n        }\r\n    }\r\n\r\n    function stallStream(type, isStalled) {\r\n        if (isStalled) {\r\n            addStalledStream(type);\r\n        } else {\r\n            removeStalledStream(type);\r\n        }\r\n    }\r\n\r\n    //Calling play on the element will emit playing - even if the stream is stalled. If the stream is stalled, emit a waiting event.\r\n    function onPlaying() {\r\n        if (element && isStalled() && element.playbackRate === 0) {\r\n            const event = document.createEvent('Event');\r\n            event.initEvent('waiting', true, false);\r\n            element.dispatchEvent(event);\r\n        }\r\n    }\r\n\r\n    function getPlaybackQuality() {\r\n        if (!element) { return null; }\r\n        let hasWebKit = ('webkitDroppedFrameCount' in element) && ('webkitDecodedFrameCount' in element);\r\n        let hasQuality = ('getVideoPlaybackQuality' in element);\r\n        let result = null;\r\n\r\n        if (hasQuality) {\r\n            result = element.getVideoPlaybackQuality();\r\n        } else if (hasWebKit) {\r\n            result = {\r\n                droppedVideoFrames: element.webkitDroppedFrameCount,\r\n                totalVideoFrames: element.webkitDroppedFrameCount + element.webkitDecodedFrameCount,\r\n                creationTime: new Date()\r\n            };\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    function play() {\r\n        if (element) {\r\n            element.autoplay = true;\r\n            const p = element.play();\r\n            if (p && p.catch && typeof Promise !== 'undefined') {\r\n                p.catch((e) => {\r\n                    if (e.name === 'NotAllowedError') {\r\n                        eventBus.trigger(Events.PLAYBACK_NOT_ALLOWED);\r\n                    }\r\n                    logger.warn(`Caught pending play exception - continuing (${e})`);\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    function isPaused() {\r\n        return element ? element.paused : null;\r\n    }\r\n\r\n    function pause() {\r\n        if (element) {\r\n            element.pause();\r\n            element.autoplay = false;\r\n        }\r\n    }\r\n\r\n    function isSeeking() {\r\n        return element ? element.seeking : null;\r\n    }\r\n\r\n    function getTime() {\r\n        return element ? element.currentTime : null;\r\n    }\r\n\r\n    function getPlaybackRate() {\r\n        return element ? element.playbackRate : null;\r\n    }\r\n\r\n    function getPlayedRanges() {\r\n        return element ? element.played : null;\r\n    }\r\n\r\n    function getEnded() {\r\n        return element ? element.ended : null;\r\n    }\r\n\r\n    function addEventListener(eventName, eventCallBack) {\r\n        if (element) {\r\n            element.addEventListener(eventName, eventCallBack);\r\n        }\r\n    }\r\n\r\n    function removeEventListener(eventName, eventCallBack) {\r\n        if (element) {\r\n            element.removeEventListener(eventName, eventCallBack);\r\n        }\r\n    }\r\n\r\n    function getReadyState() {\r\n        return element ? element.readyState : NaN;\r\n    }\r\n\r\n    function getBufferRange() {\r\n        return element ? element.buffered : null;\r\n    }\r\n\r\n    function getClientWidth() {\r\n        return element ? element.clientWidth : NaN;\r\n    }\r\n\r\n    function getClientHeight() {\r\n        return element ? element.clientHeight : NaN;\r\n    }\r\n\r\n    function getVideoWidth() {\r\n        return element ? element.videoWidth : NaN;\r\n    }\r\n\r\n    function getVideoHeight() {\r\n        return element ? element.videoHeight : NaN;\r\n    }\r\n\r\n    function getVideoRelativeOffsetTop() {\r\n        const parentElement = element.parentNode.host || element.parentNode;\r\n        return parentElement ? element.getBoundingClientRect().top - parentElement.getBoundingClientRect().top : NaN;\r\n    }\r\n\r\n    function getVideoRelativeOffsetLeft() {\r\n        const parentElement = element.parentNode.host || element.parentNode;\r\n        return parentElement ? element.getBoundingClientRect().left - parentElement.getBoundingClientRect().left : NaN;\r\n    }\r\n\r\n    function getTextTracks() {\r\n        return element ? element.textTracks : [];\r\n    }\r\n\r\n    function getTextTrack(kind, label, lang, isTTML, isEmbedded) {\r\n        if (element) {\r\n            for (let i = 0; i < element.textTracks.length; i++) {\r\n                //label parameter could be a number (due to adaptationSet), but label, the attribute of textTrack, is a string => to modify...\r\n                //label could also be undefined (due to adaptationSet)\r\n                if (element.textTracks[i].kind === kind && (label ? element.textTracks[i].label == label : true) &&\r\n                   element.textTracks[i].language === lang && element.textTracks[i].isTTML === isTTML && element.textTracks[i].isEmbedded === isEmbedded) {\r\n                    return element.textTracks[i];\r\n                }\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    function addTextTrack(kind, label, lang, isTTML, isEmbedded) {\r\n        if (!element) {\r\n            return null;\r\n        }\r\n        // check if track of same type has not been already created for previous stream\r\n        // then use it (no way to remove existing text track from video element)\r\n        let track = getTextTrack(kind, label, lang, isTTML, isEmbedded);\r\n        if (!track) {\r\n            track = element.addTextTrack(kind, label, lang);\r\n            track.isEmbedded = isEmbedded;\r\n            track.isTTML = isTTML;\r\n        }\r\n        return track;\r\n    }\r\n\r\n    function appendChild(childElement) {\r\n        if (element) {\r\n            element.appendChild(childElement);\r\n            //in Chrome, we need to differenciate textTrack with same lang, kind and label but different format (vtt, ttml, etc...)\r\n            if (childElement.isTTML !== undefined) {\r\n                element.textTracks[element.textTracks.length - 1].isTTML = childElement.isTTML;\r\n                element.textTracks[element.textTracks.length - 1].isEmbedded = childElement.isEmbedded;\r\n            }\r\n        }\r\n    }\r\n\r\n    function removeChild(childElement) {\r\n        if (element) {\r\n            element.removeChild(childElement);\r\n        }\r\n    }\r\n\r\n    instance = {\r\n        initialize: initialize,\r\n        setCurrentTime: setCurrentTime,\r\n        play: play,\r\n        isPaused: isPaused,\r\n        pause: pause,\r\n        isStalled,\r\n        isSeeking: isSeeking,\r\n        getTime: getTime,\r\n        getPlaybackRate: getPlaybackRate,\r\n        setPlaybackRate: setPlaybackRate,\r\n        getPlayedRanges: getPlayedRanges,\r\n        getEnded: getEnded,\r\n        setStallState: setStallState,\r\n        getElement: getElement,\r\n        setElement: setElement,\r\n        setSource: setSource,\r\n        getSource: getSource,\r\n        getTTMLRenderingDiv: getTTMLRenderingDiv,\r\n        setTTMLRenderingDiv: setTTMLRenderingDiv,\r\n        getPlaybackQuality: getPlaybackQuality,\r\n        addEventListener: addEventListener,\r\n        removeEventListener: removeEventListener,\r\n        getReadyState: getReadyState,\r\n        getBufferRange: getBufferRange,\r\n        getClientWidth: getClientWidth,\r\n        getClientHeight: getClientHeight,\r\n        getTextTracks: getTextTracks,\r\n        getTextTrack: getTextTrack,\r\n        addTextTrack: addTextTrack,\r\n        appendChild: appendChild,\r\n        removeChild: removeChild,\r\n        getVideoWidth: getVideoWidth,\r\n        getVideoHeight: getVideoHeight,\r\n        getVideoRelativeOffsetTop: getVideoRelativeOffsetTop,\r\n        getVideoRelativeOffsetLeft: getVideoRelativeOffsetLeft,\r\n        reset: reset\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\nVideoModel.__dashjs_factory_name = 'VideoModel';\r\nexport default FactoryMaker.getSingletonFactory(VideoModel);\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\nimport Settings from '../../core/Settings';\r\nimport Constants from '../constants/Constants';\r\n\r\n/**\r\n * @module FetchLoader\r\n * @ignore\r\n * @description Manages download of resources via HTTP using fetch.\r\n * @param {Object} cfg - dependencies from parent\r\n */\r\nfunction FetchLoader(cfg) {\r\n\r\n    cfg = cfg || {};\r\n    const context = this.context;\r\n    const requestModifier = cfg.requestModifier;\r\n    const boxParser = cfg.boxParser;\r\n    const settings = Settings(context).getInstance();\r\n    let instance;\r\n\r\n    function load(httpRequest) {\r\n\r\n        // Variables will be used in the callback functions\r\n        const requestStartTime = new Date();\r\n        const request = httpRequest.request;\r\n\r\n        const headers = new Headers(); /*jshint ignore:line*/\r\n        if (request.range) {\r\n            headers.append('Range', 'bytes=' + request.range);\r\n        }\r\n\r\n        if (!request.requestStartDate) {\r\n            request.requestStartDate = requestStartTime;\r\n        }\r\n\r\n        if (requestModifier) {\r\n            // modifyRequestHeader expects a XMLHttpRequest object so,\r\n            // to keep backward compatibility, we should expose a setRequestHeader method\r\n            // TODO: Remove RequestModifier dependency on XMLHttpRequest object and define\r\n            // a more generic way to intercept/modify requests\r\n            requestModifier.modifyRequestHeader({\r\n                setRequestHeader: function (header, value) {\r\n                    headers.append(header, value);\r\n                }\r\n            });\r\n        }\r\n\r\n        let abortController;\r\n        if (typeof window.AbortController === 'function') {\r\n            abortController = new AbortController(); /*jshint ignore:line*/\r\n            httpRequest.abortController = abortController;\r\n            abortController.signal.onabort = httpRequest.onabort;\r\n        }\r\n\r\n        const reqOptions = {\r\n            method: httpRequest.method,\r\n            headers: headers,\r\n            credentials: httpRequest.withCredentials ? 'include' : undefined,\r\n            signal: abortController ? abortController.signal : undefined\r\n        };\r\n\r\n        fetch(httpRequest.url, reqOptions).then(function (response) {\r\n            if (!httpRequest.response) {\r\n                httpRequest.response = {};\r\n            }\r\n            httpRequest.response.status = response.status;\r\n            httpRequest.response.statusText = response.statusText;\r\n            httpRequest.response.responseURL = response.url;\r\n\r\n            if (!response.ok) {\r\n                httpRequest.onerror();\r\n            }\r\n\r\n            let responseHeaders = '';\r\n            for (const key of response.headers.keys()) {\r\n                responseHeaders += key + ': ' + response.headers.get(key) + '\\r\\n';\r\n            }\r\n            httpRequest.response.responseHeaders = responseHeaders;\r\n\r\n            if (!response.body) {\r\n                // Fetch returning a ReadableStream response body is not currently supported by all browsers.\r\n                // Browser compatibility: https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\r\n                // If it is not supported, returning the whole segment when it's ready (as xhr)\r\n                return response.arrayBuffer().then(function (buffer) {\r\n                    httpRequest.response.response = buffer;\r\n                    const event = {\r\n                        loaded: buffer.byteLength,\r\n                        total: buffer.byteLength,\r\n                        stream: false\r\n                    };\r\n                    httpRequest.progress(event);\r\n                    httpRequest.onload();\r\n                    httpRequest.onend();\r\n                    return;\r\n                });\r\n            }\r\n\r\n            const totalBytes = parseInt(response.headers.get('Content-Length'), 10);\r\n            let bytesReceived = 0;\r\n            let signaledFirstByte = false;\r\n            let remaining = new Uint8Array();\r\n            let offset = 0;\r\n\r\n            httpRequest.reader = response.body.getReader();\r\n            let downloadedData = [];\r\n            let startTimeData = [];\r\n            let endTimeData = [];\r\n            let lastChunkWasFinished = true;\r\n            const calculationMode = settings.get().streaming.abr.fetchThroughputCalculationMode;\r\n\r\n            const processResult = function ({ value, done }) { // Bug fix Parse whenever data is coming [value] better than 1ms looking that increase CPU\r\n                if (done) {\r\n                    if (remaining) {\r\n                        // If there is pending data, call progress so network metrics\r\n                        // are correctly generated\r\n                        // Same structure as https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequestEventTarget/\r\n                        httpRequest.progress({\r\n                            loaded: bytesReceived,\r\n                            total: isNaN(totalBytes) ? bytesReceived : totalBytes,\r\n                            lengthComputable: true,\r\n                            time: calculateDownloadedTime(calculationMode, startTimeData, endTimeData, downloadedData, bytesReceived),\r\n                            stream: true\r\n                        });\r\n\r\n                        httpRequest.response.response = remaining.buffer;\r\n                    }\r\n                    httpRequest.onload();\r\n                    httpRequest.onend();\r\n                    return;\r\n                }\r\n\r\n                if (value && value.length > 0) {\r\n                    remaining = concatTypedArray(remaining, value);\r\n                    bytesReceived += value.length;\r\n\r\n                    downloadedData.push({\r\n                        ts: Date.now(),\r\n                        bytes: value.length\r\n                    });\r\n\r\n                    if (calculationMode === Constants.ABR_FETCH_THROUGHPUT_CALCULATION_MOOF_PARSING && lastChunkWasFinished) {\r\n                        // Parse the payload and capture the the 'moof' box\r\n                        const boxesInfo = boxParser.findLastTopIsoBoxCompleted(['moof'], remaining, offset);\r\n                        if (boxesInfo.found) {\r\n                            // Store the beginning time of each chunk download in array StartTimeData\r\n                            lastChunkWasFinished = false;\r\n                            startTimeData.push({\r\n                                ts: performance.now(), /* jshint ignore:line */\r\n                                bytes: value.length\r\n                            });\r\n                        }\r\n                    }\r\n\r\n                    const boxesInfo = boxParser.findLastTopIsoBoxCompleted(['moov', 'mdat'], remaining, offset);\r\n                    if (boxesInfo.found) {\r\n                        const end = boxesInfo.lastCompletedOffset + boxesInfo.size;\r\n\r\n                        // Store the end time of each chunk download  with its size in array EndTimeData\r\n                        if (calculationMode === Constants.ABR_FETCH_THROUGHPUT_CALCULATION_MOOF_PARSING) {\r\n                            lastChunkWasFinished = true;\r\n                            endTimeData.push({\r\n                                ts: performance.now(), /* jshint ignore:line */\r\n                                bytes: remaining.length\r\n                            });\r\n                        }\r\n\r\n                        // If we are going to pass full buffer, avoid copying it and pass\r\n                        // complete buffer. Otherwise clone the part of the buffer that is completed\r\n                        // and adjust remaining buffer. A clone is needed because ArrayBuffer of a typed-array\r\n                        // keeps a reference to the original data\r\n                        let data;\r\n                        if (end === remaining.length) {\r\n                            data = remaining;\r\n                            remaining = new Uint8Array();\r\n                        } else {\r\n                            data = new Uint8Array(remaining.subarray(0, end));\r\n                            remaining = remaining.subarray(end);\r\n                        }\r\n                        // Announce progress but don't track traces. Throughput measures are quite unstable\r\n                        // when they are based in small amount of data\r\n                        httpRequest.progress({\r\n                            data: data.buffer,\r\n                            lengthComputable: false,\r\n                            noTrace: true\r\n                        });\r\n\r\n                        offset = 0;\r\n                    } else {\r\n                        offset = boxesInfo.lastCompletedOffset;\r\n                        // Call progress so it generates traces that will be later used to know when the first byte\r\n                        // were received\r\n                        if (!signaledFirstByte) {\r\n                            httpRequest.progress({\r\n                                lengthComputable: false,\r\n                                noTrace: true\r\n                            });\r\n                            signaledFirstByte = true;\r\n                        }\r\n                    }\r\n                }\r\n                read(httpRequest, processResult);\r\n            };\r\n            read(httpRequest, processResult);\r\n        })\r\n            .catch(function (e) {\r\n                if (httpRequest.onerror) {\r\n                    httpRequest.onerror(e);\r\n                }\r\n            });\r\n    }\r\n\r\n    function read(httpRequest, processResult) {\r\n        httpRequest.reader.read()\r\n            .then(processResult)\r\n            .catch(function (e) {\r\n                if (httpRequest.onerror && httpRequest.response.status === 200) {\r\n                    // Error, but response code is 200, trigger error\r\n                    httpRequest.onerror(e);\r\n                }\r\n            });\r\n    }\r\n\r\n    function concatTypedArray(remaining, data) {\r\n        if (remaining.length === 0) {\r\n            return data;\r\n        }\r\n        const result = new Uint8Array(remaining.length + data.length);\r\n        result.set(remaining);\r\n        result.set(data, remaining.length);\r\n        return result;\r\n    }\r\n\r\n    function abort(request) {\r\n        if (request.abortController) {\r\n            // For firefox and edge\r\n            request.abortController.abort();\r\n        } else if (request.reader) {\r\n            // For Chrome\r\n            try {\r\n                request.reader.cancel();\r\n                request.onabort();\r\n            } catch (e) {\r\n                // throw exceptions (TypeError) when reader was previously closed,\r\n                // for example, because a network issue\r\n            }\r\n        }\r\n    }\r\n\r\n    // Compute the download time of a segment\r\n    function calculateDownloadedTime(calculationMode, startTimeData, endTimeData, downloadedData, bytesReceived) {\r\n        switch (calculationMode) {\r\n            case Constants.ABR_FETCH_THROUGHPUT_CALCULATION_MOOF_PARSING:\r\n                return _calculateDownloadedTimeByMoofParsing(startTimeData, endTimeData);\r\n            case Constants.ABR_FETCH_THROUGHPUT_CALCULATION_DOWNLOADED_DATA:\r\n                return _calculateDownloadedTimeByBytesReceived(downloadedData, bytesReceived);\r\n            default:\r\n                return _calculateDownloadedTimeByBytesReceived(downloadedData, bytesReceived);\r\n        }\r\n    }\r\n\r\n    function _calculateDownloadedTimeByMoofParsing(startTimeData, endTimeData) {\r\n        try {\r\n            let datum, datumE;\r\n            // Filter the first and last chunks in a segment in both arrays [StartTimeData and EndTimeData]\r\n            datum = startTimeData.filter((data, i) => i > 0 && i < startTimeData.length - 1);\r\n            datumE = endTimeData.filter((dataE, i) => i > 0 && i < endTimeData.length - 1);\r\n            // Compute the download time of a segment based on the filtered data [last chunk end time - first chunk beginning time]\r\n            let segDownloadTime = 0;\r\n            if (datum.length > 1) {\r\n                for (let i = 0; i < datum.length; i++) {\r\n                    if (datum[i] && datumE[i]) {\r\n                        let chunkDownladTime = datumE[i].ts - datum[i].ts;\r\n                        segDownloadTime += chunkDownladTime;\r\n                    }\r\n                }\r\n\r\n                return segDownloadTime;\r\n            }\r\n            return null;\r\n        } catch (e) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    function _calculateDownloadedTimeByBytesReceived(downloadedData, bytesReceived) {\r\n        try {\r\n            downloadedData = downloadedData.filter(data => data.bytes > ((bytesReceived / 4) / downloadedData.length));\r\n            if (downloadedData.length > 1) {\r\n                let time = 0;\r\n                const avgTimeDistance = (downloadedData[downloadedData.length - 1].ts - downloadedData[0].ts) / downloadedData.length;\r\n                downloadedData.forEach((data, index) => {\r\n                    // To be counted the data has to be over a threshold\r\n                    const next = downloadedData[index + 1];\r\n                    if (next) {\r\n                        const distance = next.ts - data.ts;\r\n                        time += distance < avgTimeDistance ? distance : 0;\r\n                    }\r\n                });\r\n                return time;\r\n            }\r\n            return null;\r\n        } catch (e) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    instance = {\r\n        load: load,\r\n        abort: abort,\r\n        calculateDownloadedTime: calculateDownloadedTime\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nFetchLoader.__dashjs_factory_name = 'FetchLoader';\r\n\r\nconst factory = FactoryMaker.getClassFactory(FetchLoader);\r\nexport default factory;\r\n\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport XHRLoader from './XHRLoader';\r\nimport FetchLoader from './FetchLoader';\r\nimport {HTTPRequest} from '../vo/metrics/HTTPRequest';\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\nimport DashJSError from '../vo/DashJSError';\r\nimport CmcdModel from '../models/CmcdModel';\r\nimport Utils from '../../core/Utils';\r\nimport Debug from '../../core/Debug';\r\n\r\n/**\r\n * @module HTTPLoader\r\n * @ignore\r\n * @description Manages download of resources via HTTP.\r\n * @param {Object} cfg - dependancies from parent\r\n */\r\nfunction HTTPLoader(cfg) {\r\n\r\n    cfg = cfg || {};\r\n\r\n    const context = this.context;\r\n    const errHandler = cfg.errHandler;\r\n    const dashMetrics = cfg.dashMetrics;\r\n    const mediaPlayerModel = cfg.mediaPlayerModel;\r\n    const requestModifier = cfg.requestModifier;\r\n    const boxParser = cfg.boxParser;\r\n    const useFetch = cfg.useFetch || false;\r\n    const errors = cfg.errors;\r\n    const requestTimeout = cfg.requestTimeout || 0;\r\n\r\n    let instance,\r\n        requests,\r\n        delayedRequests,\r\n        retryRequests,\r\n        downloadErrorToRequestTypeMap,\r\n        cmcdModel,\r\n        logger;\r\n\r\n    function setup() {\r\n        logger = Debug(context).getInstance().getLogger(instance);\r\n        requests = [];\r\n        delayedRequests = [];\r\n        retryRequests = [];\r\n        cmcdModel = CmcdModel(context).getInstance();\r\n\r\n        downloadErrorToRequestTypeMap = {\r\n            [HTTPRequest.MPD_TYPE]: errors.DOWNLOAD_ERROR_ID_MANIFEST_CODE,\r\n            [HTTPRequest.XLINK_EXPANSION_TYPE]: errors.DOWNLOAD_ERROR_ID_XLINK_CODE,\r\n            [HTTPRequest.INIT_SEGMENT_TYPE]: errors.DOWNLOAD_ERROR_ID_INITIALIZATION_CODE,\r\n            [HTTPRequest.MEDIA_SEGMENT_TYPE]: errors.DOWNLOAD_ERROR_ID_CONTENT_CODE,\r\n            [HTTPRequest.INDEX_SEGMENT_TYPE]: errors.DOWNLOAD_ERROR_ID_CONTENT_CODE,\r\n            [HTTPRequest.BITSTREAM_SWITCHING_SEGMENT_TYPE]: errors.DOWNLOAD_ERROR_ID_CONTENT_CODE,\r\n            [HTTPRequest.OTHER_TYPE]: errors.DOWNLOAD_ERROR_ID_CONTENT_CODE\r\n        };\r\n    }\r\n\r\n    function internalLoad(config, remainingAttempts) {\r\n        const request = config.request;\r\n        const traces = [];\r\n        let firstProgress = true;\r\n        let needFailureReport = true;\r\n        let requestStartTime = new Date();\r\n        let lastTraceTime = requestStartTime;\r\n        let lastTraceReceivedCount = 0;\r\n        let httpRequest;\r\n\r\n        if (!requestModifier || !dashMetrics || !errHandler) {\r\n            throw new Error('config object is not correct or missing');\r\n        }\r\n\r\n        const handleLoaded = function (success) {\r\n            needFailureReport = false;\r\n\r\n            request.requestStartDate = requestStartTime;\r\n            request.requestEndDate = new Date();\r\n            request.firstByteDate = request.firstByteDate || requestStartTime;\r\n\r\n            if (!request.checkExistenceOnly) {\r\n                dashMetrics.addHttpRequest(request, httpRequest.response ? httpRequest.response.responseURL : null,\r\n                    httpRequest.response ? httpRequest.response.status : null,\r\n                    httpRequest.response && httpRequest.response.getAllResponseHeaders ? httpRequest.response.getAllResponseHeaders() :\r\n                        httpRequest.response ? httpRequest.response.responseHeaders : [],\r\n                    success ? traces : null);\r\n\r\n                if (request.type === HTTPRequest.MPD_TYPE) {\r\n                    dashMetrics.addManifestUpdate(request.type, request.requestStartDate, request.requestEndDate);\r\n                }\r\n            }\r\n        };\r\n\r\n        const onloadend = function () {\r\n            if (requests.indexOf(httpRequest) === -1) {\r\n                return;\r\n            } else {\r\n                requests.splice(requests.indexOf(httpRequest), 1);\r\n            }\r\n\r\n            if (needFailureReport) {\r\n                handleLoaded(false);\r\n\r\n                if (remainingAttempts > 0) {\r\n                    remainingAttempts--;\r\n                    let retryRequest = {config: config};\r\n                    retryRequests.push(retryRequest);\r\n                    retryRequest.timeout = setTimeout(function () {\r\n                        if (retryRequests.indexOf(retryRequest) === -1) {\r\n                            return;\r\n                        } else {\r\n                            retryRequests.splice(retryRequests.indexOf(retryRequest), 1);\r\n                        }\r\n                        internalLoad(config, remainingAttempts);\r\n                    }, mediaPlayerModel.getRetryIntervalsForType(request.type));\r\n                } else {\r\n                    errHandler.error(new DashJSError(downloadErrorToRequestTypeMap[request.type], request.url + ' is not available', {\r\n                        request: request,\r\n                        response: httpRequest.response\r\n                    }));\r\n\r\n                    if (config.error) {\r\n                        config.error(request, 'error', httpRequest.response.statusText);\r\n                    }\r\n\r\n                    if (config.complete) {\r\n                        config.complete(request, httpRequest.response.statusText);\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        const progress = function (event) {\r\n            const currentTime = new Date();\r\n\r\n            if (firstProgress) {\r\n                firstProgress = false;\r\n                if (!event.lengthComputable ||\r\n                    (event.lengthComputable && event.total !== event.loaded)) {\r\n                    request.firstByteDate = currentTime;\r\n                }\r\n            }\r\n\r\n            if (event.lengthComputable) {\r\n                request.bytesLoaded = event.loaded;\r\n                request.bytesTotal = event.total;\r\n            }\r\n\r\n            if (!event.noTrace) {\r\n                traces.push({\r\n                    s: lastTraceTime,\r\n                    d: event.time ? event.time : currentTime.getTime() - lastTraceTime.getTime(),\r\n                    b: [event.loaded ? event.loaded - lastTraceReceivedCount : 0]\r\n                });\r\n\r\n                lastTraceTime = currentTime;\r\n                lastTraceReceivedCount = event.loaded;\r\n            }\r\n\r\n            if (config.progress && event) {\r\n                config.progress(event);\r\n            }\r\n        };\r\n\r\n        const onload = function () {\r\n            if (httpRequest.response.status >= 200 && httpRequest.response.status <= 299) {\r\n                handleLoaded(true);\r\n\r\n                if (config.success) {\r\n                    config.success(httpRequest.response.response, httpRequest.response.statusText, httpRequest.response.responseURL);\r\n                }\r\n\r\n                if (config.complete) {\r\n                    config.complete(request, httpRequest.response.statusText);\r\n                }\r\n            }\r\n        };\r\n\r\n        const onabort = function () {\r\n            if (config.abort) {\r\n                config.abort(request);\r\n            }\r\n        };\r\n\r\n        const ontimeout = function (event) {\r\n            let timeoutMessage;\r\n            if (event.lengthComputable) {\r\n                let percentageComplete = (event.loaded / event.total) * 100;\r\n                timeoutMessage = 'Request timeout: loaded: ' + event.loaded + ', out of: ' + event.total + ' : ' + percentageComplete.toFixed(3) + '% Completed';\r\n            } else {\r\n                timeoutMessage = 'Request timeout: non-computable download size';\r\n            }\r\n            logger.warn(timeoutMessage);\r\n        };\r\n\r\n        let loader;\r\n        if (useFetch && window.fetch && request.responseType === 'arraybuffer' && request.type === HTTPRequest.MEDIA_SEGMENT_TYPE) {\r\n            loader = FetchLoader(context).create({\r\n                requestModifier: requestModifier,\r\n                boxParser: boxParser\r\n            });\r\n        } else {\r\n            loader = XHRLoader(context).create({\r\n                requestModifier: requestModifier\r\n            });\r\n        }\r\n\r\n        let modifiedUrl = requestModifier.modifyRequestURL(request.url);\r\n        const additionalQueryParameter = _getAdditionalQueryParameter(request);\r\n        modifiedUrl = Utils.addAditionalQueryParameterToUrl(modifiedUrl, additionalQueryParameter);\r\n        const verb = request.checkExistenceOnly ? HTTPRequest.HEAD : HTTPRequest.GET;\r\n        const withCredentials = mediaPlayerModel.getXHRWithCredentialsForType(request.type);\r\n\r\n\r\n        httpRequest = {\r\n            url: modifiedUrl,\r\n            method: verb,\r\n            withCredentials: withCredentials,\r\n            request: request,\r\n            onload: onload,\r\n            onend: onloadend,\r\n            onerror: onloadend,\r\n            progress: progress,\r\n            onabort: onabort,\r\n            ontimeout: ontimeout,\r\n            loader: loader,\r\n            timeout: requestTimeout\r\n        };\r\n\r\n        // Adds the ability to delay single fragment loading time to control buffer.\r\n        let now = new Date().getTime();\r\n        if (isNaN(request.delayLoadingTime) || now >= request.delayLoadingTime) {\r\n            // no delay - just send\r\n            requests.push(httpRequest);\r\n            loader.load(httpRequest);\r\n        } else {\r\n            // delay\r\n            let delayedRequest = {httpRequest: httpRequest};\r\n            delayedRequests.push(delayedRequest);\r\n            delayedRequest.delayTimeout = setTimeout(function () {\r\n                if (delayedRequests.indexOf(delayedRequest) === -1) {\r\n                    return;\r\n                } else {\r\n                    delayedRequests.splice(delayedRequests.indexOf(delayedRequest), 1);\r\n                }\r\n                try {\r\n                    requestStartTime = new Date();\r\n                    lastTraceTime = requestStartTime;\r\n                    requests.push(delayedRequest.httpRequest);\r\n                    loader.load(delayedRequest.httpRequest);\r\n                } catch (e) {\r\n                    delayedRequest.httpRequest.onerror();\r\n                }\r\n            }, (request.delayLoadingTime - now));\r\n        }\r\n    }\r\n\r\n    function _getAdditionalQueryParameter(request) {\r\n        try {\r\n            const additionalQueryParameter = [];\r\n            const cmcdQueryParameter = cmcdModel.getQueryParameter(request);\r\n\r\n            if (cmcdQueryParameter) {\r\n                additionalQueryParameter.push(cmcdQueryParameter);\r\n            }\r\n\r\n            return additionalQueryParameter;\r\n        } catch (e) {\r\n            return [];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Initiates a download of the resource described by config.request\r\n     * @param {Object} config - contains request (FragmentRequest or derived type), and callbacks\r\n     * @memberof module:HTTPLoader\r\n     * @instance\r\n     */\r\n    function load(config) {\r\n        if (config.request) {\r\n            internalLoad(\r\n                config,\r\n                mediaPlayerModel.getRetryAttemptsForType(\r\n                    config.request.type\r\n                )\r\n            );\r\n        } else {\r\n            if (config.error) {\r\n                config.error(config.request, 'error');\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Aborts any inflight downloads\r\n     * @memberof module:HTTPLoader\r\n     * @instance\r\n     */\r\n    function abort() {\r\n        retryRequests.forEach(t => {\r\n            clearTimeout(t.timeout);\r\n            // abort request in order to trigger LOADING_ABANDONED event\r\n            if (t.config.request && t.config.abort) {\r\n                t.config.abort(t.config.request);\r\n            }\r\n        });\r\n        retryRequests = [];\r\n\r\n        delayedRequests.forEach(x => clearTimeout(x.delayTimeout));\r\n        delayedRequests = [];\r\n\r\n        requests.forEach(x => {\r\n            // abort will trigger onloadend which we don't want\r\n            // when deliberately aborting inflight requests -\r\n            // set them to undefined so they are not called\r\n            x.onloadend = x.onerror = x.onprogress = undefined;\r\n            x.loader.abort(x);\r\n        });\r\n        requests = [];\r\n    }\r\n\r\n    instance = {\r\n        load: load,\r\n        abort: abort\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\nHTTPLoader.__dashjs_factory_name = 'HTTPLoader';\r\n\r\nconst factory = FactoryMaker.getClassFactory(HTTPLoader);\r\nexport default factory;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\nimport HTTPLoader from '../../streaming/net/HTTPLoader';\r\n\r\n/**\r\n * @module\r\n * @description Choose right url loader for scheme\r\n * @ignore\r\n */\r\nfunction SchemeLoaderFactory() {\r\n\r\n    let instance;\r\n\r\n    let schemeLoaderMap;\r\n\r\n    function registerLoader(scheme, loader) {\r\n        schemeLoaderMap[scheme] = loader;\r\n    }\r\n\r\n    function unregisterLoader(scheme) {\r\n        if (schemeLoaderMap[scheme]) {\r\n            delete schemeLoaderMap[scheme];\r\n        }\r\n    }\r\n\r\n    function unregisterAllLoader() {\r\n        schemeLoaderMap = {};\r\n    }\r\n\r\n    function getLoader(url) {\r\n\r\n        // iterates through schemeLoaderMap to find a loader for the scheme\r\n        for (var scheme in schemeLoaderMap) {\r\n            if (schemeLoaderMap.hasOwnProperty(scheme) && url.startsWith(scheme)) {\r\n                return schemeLoaderMap[scheme];\r\n            }\r\n        }\r\n\r\n        return HTTPLoader;\r\n    }\r\n\r\n    function reset() {\r\n        unregisterAllLoader();\r\n    }\r\n\r\n    function setup() {\r\n        reset();\r\n    }\r\n\r\n    setup();\r\n\r\n    instance = {\r\n        getLoader: getLoader,\r\n        registerLoader: registerLoader,\r\n        unregisterLoader: unregisterLoader,\r\n        unregisterAllLoader: unregisterAllLoader,\r\n        reset: reset\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nSchemeLoaderFactory.__dashjs_factory_name = 'SchemeLoaderFactory';\r\nconst factory = FactoryMaker.getSingletonFactory(SchemeLoaderFactory);\r\nexport default factory;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\nimport SchemeLoaderFactory from '../../streaming/net/SchemeLoaderFactory';\r\n\r\n/**\r\n * @class URLLoader\r\n * @description  Call Offline Loader or Online Loader dependaing on URL\r\n * @param {Object} cfg - dependances\r\n * @ignore\r\n*/\r\nfunction URLLoader(cfg) {\r\n\r\n    cfg = cfg || {};\r\n    const context = this.context;\r\n\r\n    let instance,\r\n        schemeLoaderFactory,\r\n        loader;\r\n\r\n    schemeLoaderFactory = SchemeLoaderFactory(context).getInstance();\r\n\r\n    function load(config) {\r\n\r\n        let loaderFactory = schemeLoaderFactory.getLoader(config && config.request ? config.request.url : null);\r\n        loader = loaderFactory(context).create({\r\n            errHandler: cfg.errHandler,\r\n            mediaPlayerModel: cfg.mediaPlayerModel,\r\n            requestModifier: cfg.requestModifier,\r\n            useFetch: cfg.useFetch || null,\r\n            dashMetrics: cfg.dashMetrics,\r\n            boxParser: cfg.boxParser ? cfg.boxParser : null,\r\n            constants: cfg.constants ? cfg.constants : null,\r\n            dashConstants: cfg.dashConstants ? cfg.dashConstants : null,\r\n            urlUtils: cfg.urlUtils ? cfg.urlUtils : null,\r\n            requestTimeout: !isNaN(cfg.requestTimeout) ? cfg.requestTimeout : 0,\r\n            errors: cfg.errors\r\n        });\r\n\r\n        loader.load(config);\r\n    }\r\n\r\n    function abort() {\r\n        if (loader) {\r\n            loader.abort();\r\n        }\r\n    }\r\n    instance = {\r\n        load: load,\r\n        abort: abort\r\n    };\r\n\r\n    return instance;\r\n\r\n}\r\nURLLoader.__dashjs_factory_name = 'URLLoader';\r\n\r\nconst factory = FactoryMaker.getClassFactory(URLLoader);\r\nexport default factory;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\n\r\n/**\r\n * @module XHRLoader\r\n * @ignore\r\n * @description Manages download of resources via HTTP.\r\n * @param {Object} cfg - dependencies from parent\r\n */\r\nfunction XHRLoader(cfg) {\r\n\r\n    cfg = cfg || {};\r\n    const requestModifier = cfg.requestModifier;\r\n\r\n    let instance;\r\n\r\n    function load(httpRequest) {\r\n\r\n        // Variables will be used in the callback functions\r\n        const requestStartTime = new Date();\r\n        const request = httpRequest.request;\r\n\r\n        let xhr = new XMLHttpRequest();\r\n        xhr.open(httpRequest.method, httpRequest.url, true);\r\n\r\n        if (request.responseType) {\r\n            xhr.responseType = request.responseType;\r\n        }\r\n\r\n        if (request.range) {\r\n            xhr.setRequestHeader('Range', 'bytes=' + request.range);\r\n        }\r\n\r\n        if (!request.requestStartDate) {\r\n            request.requestStartDate = requestStartTime;\r\n        }\r\n\r\n        if (requestModifier) {\r\n            xhr = requestModifier.modifyRequestHeader(xhr);\r\n        }\r\n\r\n        xhr.withCredentials = httpRequest.withCredentials;\r\n\r\n        xhr.onload = httpRequest.onload;\r\n        xhr.onloadend = httpRequest.onend;\r\n        xhr.onerror = httpRequest.onerror;\r\n        xhr.onprogress = httpRequest.progress;\r\n        xhr.onabort = httpRequest.onabort;\r\n        xhr.ontimeout = httpRequest.ontimeout;\r\n        xhr.timeout = httpRequest.timeout;\r\n\r\n        xhr.send();\r\n\r\n        httpRequest.response = xhr;\r\n    }\r\n\r\n    function abort(request) {\r\n        const x = request.response;\r\n        x.onloadend = x.onerror = x.onprogress = undefined; //Ignore events from aborted requests.\r\n        x.abort();\r\n    }\r\n\r\n    instance = {\r\n        load: load,\r\n        abort: abort\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nXHRLoader.__dashjs_factory_name = 'XHRLoader';\r\n\r\nconst factory = FactoryMaker.getClassFactory(XHRLoader);\r\nexport default factory;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n/**\r\n * @class\r\n * @ignore\r\n */\r\nclass CommonEncryption {\r\n    /**\r\n     * Find and return the ContentProtection element in the given array\r\n     * that indicates support for MPEG Common Encryption\r\n     *\r\n     * @param {Array} cpArray array of content protection elements\r\n     * @returns {Object|null} the Common Encryption content protection element or\r\n     * null if one was not found\r\n     */\r\n    static findCencContentProtection(cpArray) {\r\n        let retVal = null;\r\n        for (let i = 0; i < cpArray.length; ++i) {\r\n            let cp = cpArray[i];\r\n            if (cp.schemeIdUri.toLowerCase() === 'urn:mpeg:dash:mp4protection:2011' &&\r\n                (cp.value.toLowerCase() === 'cenc' || cp.value.toLowerCase() === 'cbcs'))\r\n                retVal = cp;\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    /**\r\n     * Returns just the data portion of a single PSSH\r\n     *\r\n     * @param {ArrayBuffer} pssh - the PSSH\r\n     * @return {ArrayBuffer} data portion of the PSSH\r\n     */\r\n    static getPSSHData(pssh) {\r\n        let offset = 8; // Box size and type fields\r\n        let view = new DataView(pssh);\r\n\r\n        // Read version\r\n        let version = view.getUint8(offset);\r\n\r\n        offset += 20; // Version (1), flags (3), system ID (16)\r\n\r\n        if (version > 0) {\r\n            offset += 4 + (16 * view.getUint32(offset)); // Key ID count (4) and All key IDs (16*count)\r\n        }\r\n\r\n        offset += 4; // Data size\r\n        return pssh.slice(offset);\r\n    }\r\n\r\n    /**\r\n     * Returns the PSSH associated with the given key system from the concatenated\r\n     * list of PSSH boxes in the given initData\r\n     *\r\n     * @param {KeySystem} keySystem the desired\r\n     * key system\r\n     * @param {ArrayBuffer} initData 'cenc' initialization data.  Concatenated list of PSSH.\r\n     * @returns {ArrayBuffer|null} The PSSH box data corresponding to the given key system, null if not found\r\n     * or null if a valid association could not be found.\r\n     */\r\n    static getPSSHForKeySystem(keySystem, initData) {\r\n        let psshList = CommonEncryption.parsePSSHList(initData);\r\n        if (keySystem && psshList.hasOwnProperty(keySystem.uuid.toLowerCase())) {\r\n            return psshList[keySystem.uuid.toLowerCase()];\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Parse a standard common encryption PSSH which contains a simple\r\n     * base64-encoding of the init data\r\n     *\r\n     * @param {Object} cpData the ContentProtection element\r\n     * @param {BASE64} BASE64 reference\r\n     * @returns {ArrayBuffer|null} the init data or null if not found\r\n     */\r\n    static parseInitDataFromContentProtection(cpData, BASE64) {\r\n        if ('pssh' in cpData) {\r\n\r\n            // Remove whitespaces and newlines from pssh text\r\n            cpData.pssh.__text = cpData.pssh.__text.replace(/\\r?\\n|\\r/g, '').replace(/\\s+/g, '');\r\n\r\n            return BASE64.decodeArray(cpData.pssh.__text).buffer;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Parses list of PSSH boxes into keysystem-specific PSSH data\r\n     *\r\n     * @param {ArrayBuffer} data - the concatenated list of PSSH boxes as provided by\r\n     * CDM as initialization data when CommonEncryption content is detected\r\n     * @returns {Object|Array} an object that has a property named according to each of\r\n     * the detected key system UUIDs (e.g. 00000000-0000-0000-0000-0000000000)\r\n     * and a ArrayBuffer (the entire PSSH box) as the property value\r\n     */\r\n    static parsePSSHList(data) {\r\n\r\n        if (data === null || data === undefined)\r\n            return [];\r\n\r\n        let dv = new DataView(data.buffer || data); // data.buffer first for Uint8Array support\r\n        let done = false;\r\n        let pssh = {};\r\n\r\n        // TODO: Need to check every data read for end of buffer\r\n        let byteCursor = 0;\r\n        while (!done) {\r\n\r\n            let size,\r\n                nextBox,\r\n                version,\r\n                systemID,\r\n                psshDataSize;\r\n            let boxStart = byteCursor;\r\n\r\n            if (byteCursor >= dv.buffer.byteLength)\r\n                break;\r\n\r\n            /* Box size */\r\n            size = dv.getUint32(byteCursor);\r\n            nextBox = byteCursor + size;\r\n            byteCursor += 4;\r\n\r\n            /* Verify PSSH */\r\n            if (dv.getUint32(byteCursor) !== 0x70737368) {\r\n                byteCursor = nextBox;\r\n                continue;\r\n            }\r\n            byteCursor += 4;\r\n\r\n            /* Version must be 0 or 1 */\r\n            version = dv.getUint8(byteCursor);\r\n            if (version !== 0 && version !== 1) {\r\n                byteCursor = nextBox;\r\n                continue;\r\n            }\r\n            byteCursor++;\r\n\r\n            byteCursor += 3; /* skip flags */\r\n\r\n            // 16-byte UUID/SystemID\r\n            systemID = '';\r\n            let i, val;\r\n            for (i = 0; i < 4; i++) {\r\n                val = dv.getUint8(byteCursor + i).toString(16);\r\n                systemID += (val.length === 1) ? '0' + val : val;\r\n            }\r\n            byteCursor += 4;\r\n            systemID += '-';\r\n            for (i = 0; i < 2; i++) {\r\n                val = dv.getUint8(byteCursor + i).toString(16);\r\n                systemID += (val.length === 1) ? '0' + val : val;\r\n            }\r\n            byteCursor += 2;\r\n            systemID += '-';\r\n            for (i = 0; i < 2; i++) {\r\n                val = dv.getUint8(byteCursor + i).toString(16);\r\n                systemID += (val.length === 1) ? '0' + val : val;\r\n            }\r\n            byteCursor += 2;\r\n            systemID += '-';\r\n            for (i = 0; i < 2; i++) {\r\n                val = dv.getUint8(byteCursor + i).toString(16);\r\n                systemID += (val.length === 1) ? '0' + val : val;\r\n            }\r\n            byteCursor += 2;\r\n            systemID += '-';\r\n            for (i = 0; i < 6; i++) {\r\n                val = dv.getUint8(byteCursor + i).toString(16);\r\n                systemID += (val.length === 1) ? '0' + val : val;\r\n            }\r\n            byteCursor += 6;\r\n\r\n            systemID = systemID.toLowerCase();\r\n\r\n            /* PSSH Data Size */\r\n            psshDataSize = dv.getUint32(byteCursor);\r\n            byteCursor += 4;\r\n\r\n            /* PSSH Data */\r\n            pssh[systemID] = dv.buffer.slice(boxStart, nextBox);\r\n            byteCursor = nextBox;\r\n        }\r\n\r\n        return pssh;\r\n    }\r\n}\r\n\r\nexport default CommonEncryption;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport ProtectionController from './controllers/ProtectionController';\r\nimport ProtectionKeyController from './controllers/ProtectionKeyController';\r\nimport ProtectionEvents from './ProtectionEvents';\r\nimport ProtectionErrors from './errors/ProtectionErrors';\r\nimport ProtectionModel_21Jan2015 from './models/ProtectionModel_21Jan2015';\r\nimport ProtectionModel_3Feb2014 from './models/ProtectionModel_3Feb2014';\r\nimport ProtectionModel_01b from './models/ProtectionModel_01b';\r\n\r\nconst APIS_ProtectionModel_01b = [\r\n    // Un-prefixed as per spec\r\n    {\r\n        // Video Element\r\n        generateKeyRequest: 'generateKeyRequest',\r\n        addKey: 'addKey',\r\n        cancelKeyRequest: 'cancelKeyRequest',\r\n\r\n        // Events\r\n        needkey: 'needkey',\r\n        keyerror: 'keyerror',\r\n        keyadded: 'keyadded',\r\n        keymessage: 'keymessage'\r\n    },\r\n    // Webkit-prefixed (early Chrome versions and Chrome with EME disabled in chrome://flags)\r\n    {\r\n        // Video Element\r\n        generateKeyRequest: 'webkitGenerateKeyRequest',\r\n        addKey: 'webkitAddKey',\r\n        cancelKeyRequest: 'webkitCancelKeyRequest',\r\n\r\n        // Events\r\n        needkey: 'webkitneedkey',\r\n        keyerror: 'webkitkeyerror',\r\n        keyadded: 'webkitkeyadded',\r\n        keymessage: 'webkitkeymessage'\r\n    }\r\n];\r\n\r\nconst APIS_ProtectionModel_3Feb2014 = [\r\n    // Un-prefixed as per spec\r\n    // Chrome 38-39 (and some earlier versions) with chrome://flags -- Enable Encrypted Media Extensions\r\n    {\r\n        // Video Element\r\n        setMediaKeys: 'setMediaKeys',\r\n        // MediaKeys\r\n        MediaKeys: 'MediaKeys',\r\n        // MediaKeySession\r\n        release: 'close',\r\n\r\n        // Events\r\n        needkey: 'needkey',\r\n        error: 'keyerror',\r\n        message: 'keymessage',\r\n        ready: 'keyadded',\r\n        close: 'keyclose'\r\n    },\r\n    // MS-prefixed (IE11, Windows 8.1)\r\n    {\r\n        // Video Element\r\n        setMediaKeys: 'msSetMediaKeys',\r\n        // MediaKeys\r\n        MediaKeys: 'MSMediaKeys',\r\n        // MediaKeySession\r\n        release: 'close',\r\n        // Events\r\n        needkey: 'msneedkey',\r\n        error: 'mskeyerror',\r\n        message: 'mskeymessage',\r\n        ready: 'mskeyadded',\r\n        close: 'mskeyclose'\r\n    }\r\n];\r\n\r\nfunction Protection() {\r\n    let instance;\r\n    const context = this.context;\r\n\r\n    /**\r\n     * Create a ProtectionController and associated ProtectionModel for use with\r\n     * a single piece of content.\r\n     *\r\n     * @param {Object} config\r\n     * @return {ProtectionController} protection controller\r\n     *\r\n     */\r\n    function createProtectionSystem(config) {\r\n        let controller = null;\r\n\r\n        const protectionKeyController = ProtectionKeyController(context).getInstance();\r\n        protectionKeyController.setConfig({ debug: config.debug, BASE64: config.BASE64 });\r\n        protectionKeyController.initialize();\r\n\r\n        let protectionModel =  getProtectionModel(config);\r\n\r\n        if (!controller && protectionModel) {//TODO add ability to set external controller if still needed at all?\r\n            controller = ProtectionController(context).create({\r\n                protectionModel: protectionModel,\r\n                protectionKeyController: protectionKeyController,\r\n                eventBus: config.eventBus,\r\n                debug: config.debug,\r\n                events: config.events,\r\n                BASE64: config.BASE64,\r\n                constants: config.constants\r\n            });\r\n            config.capabilities.setEncryptedMediaSupported(true);\r\n        }\r\n        return controller;\r\n    }\r\n\r\n    function getProtectionModel(config) {\r\n        const debug = config.debug;\r\n        const logger = debug.getLogger(instance);\r\n        const eventBus = config.eventBus;\r\n        const errHandler = config.errHandler;\r\n        const videoElement = config.videoModel ? config.videoModel.getElement() : null;\r\n\r\n        if ((!videoElement || videoElement.onencrypted !== undefined) &&\r\n            (!videoElement || videoElement.mediaKeys !== undefined)) {\r\n            logger.info('EME detected on this user agent! (ProtectionModel_21Jan2015)');\r\n            return ProtectionModel_21Jan2015(context).create({ debug: debug, eventBus: eventBus, events: config.events });\r\n        } else if (getAPI(videoElement, APIS_ProtectionModel_3Feb2014)) {\r\n            logger.info('EME detected on this user agent! (ProtectionModel_3Feb2014)');\r\n            return ProtectionModel_3Feb2014(context).create({ debug: debug, eventBus: eventBus, events: config.events, api: getAPI(videoElement, APIS_ProtectionModel_3Feb2014) });\r\n        } else if (getAPI(videoElement, APIS_ProtectionModel_01b)) {\r\n            logger.info('EME detected on this user agent! (ProtectionModel_01b)');\r\n            return ProtectionModel_01b(context).create({ debug: debug, eventBus: eventBus, errHandler: errHandler, events: config.events, api: getAPI(videoElement, APIS_ProtectionModel_01b) });\r\n        } else {\r\n            logger.warn('No supported version of EME detected on this user agent! - Attempts to play encrypted content will fail!');\r\n            return null;\r\n        }\r\n    }\r\n\r\n    function getAPI(videoElement, apis) {\r\n        for (let i = 0; i < apis.length; i++) {\r\n            const api = apis[i];\r\n            // detect if api is supported by browser\r\n            // check only first function in api -> should be fine\r\n            if (typeof videoElement[api[Object.keys(api)[0]]] !== 'function') {\r\n                continue;\r\n            }\r\n\r\n            return api;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    instance = {\r\n        createProtectionSystem: createProtectionSystem\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nProtection.__dashjs_factory_name = 'Protection';\r\nconst factory = dashjs.FactoryMaker.getClassFactory(Protection); /* jshint ignore:line */\r\nfactory.events = ProtectionEvents;\r\nfactory.errors = ProtectionErrors;\r\ndashjs.FactoryMaker.updateClassFactory(Protection.__dashjs_factory_name, factory); /* jshint ignore:line */\r\nexport default factory;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport EventsBase from '../../core/events/EventsBase';\r\n/**\r\n * @class\r\n  */\r\nclass ProtectionEvents extends EventsBase {\r\n    /**\r\n     * @description Public facing external events to be used when including protection package.\r\n     * All public events will be aggregated into the MediaPlayerEvents Class and can be accessed\r\n     * via MediaPlayer.events.  public_ is the prefix that we use to move event names to MediaPlayerEvents.\r\n     */\r\n    constructor () {\r\n        super();\r\n\r\n        /**\r\n         * Event ID for events delivered when the protection set receives\r\n         * a key message from the CDM\r\n         *\r\n         * @ignore\r\n         */\r\n        this.INTERNAL_KEY_MESSAGE = 'internalKeyMessage';\r\n\r\n        /**\r\n         * Event ID for events delivered when a key system selection procedure\r\n         * completes\r\n         * @ignore\r\n         */\r\n        this.INTERNAL_KEY_SYSTEM_SELECTED = 'internalKeySystemSelected';\r\n\r\n        /**\r\n         * Event ID for events delivered when the status of one decryption keys has changed\r\n         * @ignore\r\n         */\r\n        this.INTERNAL_KEY_STATUS_CHANGED = 'internalkeyStatusChanged';\r\n\r\n        /**\r\n         * Event ID for events delivered when a new key has been added\r\n         *\r\n         * @constant\r\n         * @deprecated The latest versions of the EME specification no longer\r\n         * use this event.  {@MediaPlayer.models.protectionModel.eventList.KEY_STATUSES_CHANGED}\r\n         * is preferred.\r\n         * @event ProtectionEvents#KEY_ADDED\r\n         */\r\n        this.KEY_ADDED = 'public_keyAdded';\r\n        /**\r\n         * Event ID for events delivered when an error is encountered by the CDM\r\n         * while processing a license server response message\r\n         * @event ProtectionEvents#KEY_ERROR\r\n         */\r\n        this.KEY_ERROR = 'public_keyError';\r\n\r\n        /**\r\n         * Event ID for events delivered when the protection set receives\r\n         * a key message from the CDM\r\n         * @event ProtectionEvents#KEY_MESSAGE\r\n         */\r\n        this.KEY_MESSAGE = 'public_keyMessage';\r\n\r\n        /**\r\n         * Event ID for events delivered when a key session close\r\n         * process has completed\r\n         * @event ProtectionEvents#KEY_SESSION_CLOSED\r\n         */\r\n        this.KEY_SESSION_CLOSED = 'public_keySessionClosed';\r\n\r\n        /**\r\n         * Event ID for events delivered when a new key sessions creation\r\n         * process has completed\r\n         * @event ProtectionEvents#KEY_SESSION_CREATED\r\n         */\r\n        this.KEY_SESSION_CREATED = 'public_keySessionCreated';\r\n\r\n        /**\r\n         * Event ID for events delivered when a key session removal\r\n         * process has completed\r\n         * @event ProtectionEvents#KEY_SESSION_REMOVED\r\n         */\r\n        this.KEY_SESSION_REMOVED = 'public_keySessionRemoved';\r\n\r\n        /**\r\n         * Event ID for events delivered when the status of one or more\r\n         * decryption keys has changed\r\n         * @event ProtectionEvents#KEY_STATUSES_CHANGED\r\n         */\r\n        this.KEY_STATUSES_CHANGED = 'public_keyStatusesChanged';\r\n\r\n        /**\r\n         * Event ID for events delivered when a key system access procedure\r\n         * has completed\r\n         * @ignore\r\n         */\r\n        this.KEY_SYSTEM_ACCESS_COMPLETE = 'public_keySystemAccessComplete';\r\n\r\n        /**\r\n         * Event ID for events delivered when a key system selection procedure\r\n         * completes\r\n         * @event ProtectionEvents#KEY_SYSTEM_SELECTED\r\n         */\r\n        this.KEY_SYSTEM_SELECTED = 'public_keySystemSelected';\r\n\r\n        /**\r\n         * Event ID for events delivered when a license request procedure\r\n         * has completed\r\n         * @event ProtectionEvents#LICENSE_REQUEST_COMPLETE\r\n         */\r\n        this.LICENSE_REQUEST_COMPLETE = 'public_licenseRequestComplete';\r\n\r\n        /**\r\n         * Sending a license rquest\r\n         * @event ProtectionEvents#LICENSE_REQUEST_SENDING\r\n         */\r\n        this.LICENSE_REQUEST_SENDING = 'public_licenseRequestSending';\r\n\r\n        /**\r\n         * Event ID for needkey/encrypted events\r\n         * @ignore\r\n         */\r\n        this.NEED_KEY = 'needkey';\r\n\r\n        /**\r\n         * Event ID for events delivered when the Protection system is detected and created.\r\n         * @event ProtectionEvents#PROTECTION_CREATED\r\n         */\r\n        this.PROTECTION_CREATED = 'public_protectioncreated';\r\n\r\n        /**\r\n         * Event ID for events delivered when the Protection system is destroyed.\r\n         * @event ProtectionEvents#PROTECTION_DESTROYED\r\n         */\r\n        this.PROTECTION_DESTROYED = 'public_protectiondestroyed';\r\n\r\n        /**\r\n         * Event ID for events delivered when a new server certificate has\r\n         * been delivered to the CDM\r\n         * @ignore\r\n         */\r\n        this.SERVER_CERTIFICATE_UPDATED = 'serverCertificateUpdated';\r\n\r\n        /**\r\n         * Event ID for events delivered when the process of shutting down\r\n         * a protection set has completed\r\n         * @ignore\r\n         */\r\n        this.TEARDOWN_COMPLETE =  'protectionTeardownComplete';\r\n\r\n        /**\r\n         * Event ID for events delivered when a HTMLMediaElement has been\r\n         * associated with the protection set\r\n         * @ignore\r\n         */\r\n        this.VIDEO_ELEMENT_SELECTED = 'videoElementSelected';\r\n    }\r\n}\r\n\r\nlet protectionEvents = new ProtectionEvents();\r\nexport default protectionEvents;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport CommonEncryption from '../CommonEncryption';\r\nimport MediaCapability from '../vo/MediaCapability';\r\nimport KeySystemConfiguration from '../vo/KeySystemConfiguration';\r\nimport ProtectionErrors from '../errors/ProtectionErrors';\r\nimport DashJSError from '../../vo/DashJSError';\r\n\r\nconst NEEDKEY_BEFORE_INITIALIZE_RETRIES = 5;\r\nconst NEEDKEY_BEFORE_INITIALIZE_TIMEOUT = 500;\r\n\r\nconst LICENSE_SERVER_REQUEST_RETRIES = 3;\r\nconst LICENSE_SERVER_REQUEST_RETRY_INTERVAL = 1000;\r\nconst LICENSE_SERVER_REQUEST_DEFAULT_TIMEOUT = 8000;\r\n\r\n/**\r\n * @module ProtectionController\r\n * @description Provides access to media protection information and functionality.  Each\r\n * ProtectionController manages a single {@link MediaPlayer.models.ProtectionModel}\r\n * which encapsulates a set of protection information (EME APIs, selected key system,\r\n * key sessions).  The APIs of ProtectionController mostly align with the latest EME\r\n * APIs.  Key system selection is mostly automated when combined with app-overrideable\r\n * functionality provided in {@link ProtectionKeyController}.\r\n * @todo ProtectionController does almost all of its tasks automatically after init() is\r\n * called.  Applications might want more control over this process and want to go through\r\n * each step manually (key system selection, session creation, session maintenance).\r\n * @param {Object} config\r\n */\r\n\r\nfunction ProtectionController(config) {\r\n\r\n    config = config || {};\r\n    const protectionKeyController = config.protectionKeyController;\r\n    let protectionModel = config.protectionModel;\r\n    const eventBus = config.eventBus;\r\n    const events = config.events;\r\n    const debug = config.debug;\r\n    const BASE64 = config.BASE64;\r\n    const constants = config.constants;\r\n    let needkeyRetries = [];\r\n\r\n    let instance,\r\n        logger,\r\n        pendingNeedKeyData,\r\n        mediaInfoArr,\r\n        protDataSet,\r\n        sessionType,\r\n        robustnessLevel,\r\n        keySystem;\r\n\r\n    function setup() {\r\n        logger = debug.getLogger(instance);\r\n        pendingNeedKeyData = [];\r\n        mediaInfoArr = [];\r\n        sessionType = 'temporary';\r\n        robustnessLevel = '';\r\n    }\r\n\r\n    function checkConfig() {\r\n        if (!eventBus || !eventBus.hasOwnProperty('on') || !protectionKeyController || !protectionKeyController.hasOwnProperty('getSupportedKeySystemsFromContentProtection')) {\r\n            throw new Error('Missing config parameter(s)');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Initialize this protection system with a given audio\r\n     * or video stream information.\r\n     *\r\n     * @param {StreamInfo} [mediaInfo] Media information\r\n     * @memberof module:ProtectionController\r\n     * @instance\r\n     * @todo This API will change when we have better support for allowing applications\r\n     * to select different adaptation sets for playback.  Right now it is clunky for\r\n     * applications to create {@link StreamInfo} with the right information,\r\n     * @ignore\r\n     */\r\n    function initializeForMedia(mediaInfo) {\r\n        // Not checking here if a session for similar KS/KID combination is already created\r\n        // because still don't know which keysystem will be selected.\r\n        // Once Keysystem is selected and before creating the session, we will do that check\r\n        // so we create the strictly necessary DRM sessions\r\n        if (!mediaInfo) {\r\n            throw new Error('mediaInfo can not be null or undefined');\r\n        }\r\n\r\n        checkConfig();\r\n\r\n        eventBus.on(events.INTERNAL_KEY_MESSAGE, onKeyMessage, this);\r\n        eventBus.on(events.INTERNAL_KEY_STATUS_CHANGED, onKeyStatusChanged, this);\r\n\r\n        mediaInfoArr.push(mediaInfo);\r\n\r\n        // ContentProtection elements are specified at the AdaptationSet level, so the CP for audio\r\n        // and video will be the same.  Just use one valid MediaInfo object\r\n        const supportedKS = protectionKeyController.getSupportedKeySystemsFromContentProtection(mediaInfo.contentProtection);\r\n        if (supportedKS && supportedKS.length > 0) {\r\n            selectKeySystem(supportedKS, true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns a set of supported key systems and CENC initialization data\r\n     * from the given array of ContentProtection elements.  Only\r\n     * key systems that are supported by this player will be returned.\r\n     * Key systems are returned in priority order (highest first).\r\n     *\r\n     * @param {Array.<Object>} cps - array of content protection elements parsed\r\n     * from the manifest\r\n     * @returns {Array.<Object>} array of objects indicating which supported key\r\n     * systems were found.  Empty array is returned if no\r\n     * supported key systems were found\r\n     * @memberof module:ProtectionKeyController\r\n     * @instance\r\n     * @ignore\r\n     */\r\n    function getSupportedKeySystemsFromContentProtection(cps) {\r\n        checkConfig();\r\n        return protectionKeyController.getSupportedKeySystemsFromContentProtection(cps);\r\n    }\r\n\r\n    /**\r\n     * Create a new key session associated with the given initialization data from\r\n     * the MPD or from the PSSH box in the media\r\n     *\r\n     * @param {ArrayBuffer} initData the initialization data\r\n     * @param {Uint8Array} cdmData the custom data to provide to licenser\r\n     * @memberof module:ProtectionController\r\n     * @instance\r\n     * @fires ProtectionController#KeySessionCreated\r\n     * @todo In older versions of the EME spec, there was a one-to-one relationship between\r\n     * initialization data and key sessions.  That is no longer true in the latest APIs.  This\r\n     * API will need to modified (and a new \"generateRequest(keySession, initData)\" API created)\r\n     * to come up to speed with the latest EME standard\r\n     * @ignore\r\n     */\r\n    function createKeySession(initData, cdmData) {\r\n        const initDataForKS = CommonEncryption.getPSSHForKeySystem(keySystem, initData);\r\n        const protData = getProtData(keySystem);\r\n        if (initDataForKS) {\r\n\r\n            // Check for duplicate initData\r\n            const currentInitData = protectionModel.getAllInitData();\r\n            for (let i = 0; i < currentInitData.length; i++) {\r\n                if (protectionKeyController.initDataEquals(initDataForKS, currentInitData[i])) {\r\n                    logger.info('DRM: Ignoring initData because we have already seen it!');\r\n                    return;\r\n                }\r\n            }\r\n            try {\r\n                protectionModel.createKeySession(initDataForKS, protData, getSessionType(keySystem), cdmData);\r\n            } catch (error) {\r\n                eventBus.trigger(events.KEY_SESSION_CREATED, {\r\n                    data: null,\r\n                    error: new DashJSError(ProtectionErrors.KEY_SESSION_CREATED_ERROR_CODE, ProtectionErrors.KEY_SESSION_CREATED_ERROR_MESSAGE + error.message)\r\n                });\r\n            }\r\n        } else if (initData) {\r\n            protectionModel.createKeySession(initData, protData, getSessionType(keySystem), cdmData);\r\n        } else {\r\n            eventBus.trigger(events.KEY_SESSION_CREATED, {\r\n                data: null,\r\n                error: new DashJSError(ProtectionErrors.KEY_SESSION_CREATED_ERROR_CODE, ProtectionErrors.KEY_SESSION_CREATED_ERROR_MESSAGE + 'Selected key system is ' + (keySystem ? keySystem.systemString : null) + '.  needkey/encrypted event contains no initData corresponding to that key system!')\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Loads a key session with the given session ID from persistent storage.  This\r\n     * essentially creates a new key session\r\n     *\r\n     * @param {string} sessionID\r\n     * @param {string} initData\r\n     * @memberof module:ProtectionController\r\n     * @instance\r\n     * @fires ProtectionController#KeySessionCreated\r\n     * @ignore\r\n     */\r\n    function loadKeySession(sessionID, initData) {\r\n        checkConfig();\r\n        protectionModel.loadKeySession(sessionID, initData, getSessionType(keySystem));\r\n    }\r\n\r\n    /**\r\n     * Removes the given key session from persistent storage and closes the session\r\n     * as if {@link ProtectionController#closeKeySession}\r\n     * was called\r\n     *\r\n     * @param {SessionToken} sessionToken the session\r\n     * token\r\n     * @memberof module:ProtectionController\r\n     * @instance\r\n     * @fires ProtectionController#KeySessionRemoved\r\n     * @fires ProtectionController#KeySessionClosed\r\n     * @ignore\r\n     */\r\n    function removeKeySession(sessionToken) {\r\n        checkConfig();\r\n        protectionModel.removeKeySession(sessionToken);\r\n    }\r\n\r\n    /**\r\n     * Closes the key session and releases all associated decryption keys.  These\r\n     * keys will no longer be available for decrypting media\r\n     *\r\n     * @param {SessionToken} sessionToken the session\r\n     * token\r\n     * @memberof module:ProtectionController\r\n     * @instance\r\n     * @fires ProtectionController#KeySessionClosed\r\n     * @ignore\r\n     */\r\n    function closeKeySession(sessionToken) {\r\n        checkConfig();\r\n        protectionModel.closeKeySession(sessionToken);\r\n    }\r\n\r\n    /**\r\n     * Sets a server certificate for use by the CDM when signing key messages\r\n     * intended for a particular license server.  This will fire\r\n     * an error event if a key system has not yet been selected.\r\n     *\r\n     * @param {ArrayBuffer} serverCertificate a CDM-specific license server\r\n     * certificate\r\n     * @memberof module:ProtectionController\r\n     * @instance\r\n     * @fires ProtectionController#ServerCertificateUpdated\r\n     */\r\n    function setServerCertificate(serverCertificate) {\r\n        checkConfig();\r\n        protectionModel.setServerCertificate(serverCertificate);\r\n    }\r\n\r\n    /**\r\n     * Associate this protection system with the given HTMLMediaElement.  This\r\n     * causes the system to register for needkey/encrypted events from the given\r\n     * element and provides a destination for setting of MediaKeys\r\n     *\r\n     * @param {HTMLMediaElement} element the media element to which the protection\r\n     * system should be associated\r\n     * @memberof module:ProtectionController\r\n     * @instance\r\n     */\r\n    function setMediaElement(element) {\r\n        checkConfig();\r\n        if (element) {\r\n            protectionModel.setMediaElement(element);\r\n            eventBus.on(events.NEED_KEY, onNeedKey, this);\r\n        } else if (element === null) {\r\n            protectionModel.setMediaElement(element);\r\n            eventBus.off(events.NEED_KEY, onNeedKey, this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the session type to use when creating key sessions.  Either \"temporary\" or\r\n     * \"persistent-license\".  Default is \"temporary\".\r\n     *\r\n     * @param {string} value the session type\r\n     * @memberof module:ProtectionController\r\n     * @instance\r\n     */\r\n    function setSessionType(value) {\r\n        sessionType = value;\r\n    }\r\n\r\n    /**\r\n     * Sets the robustness level for video and audio capabilities. Optional to remove Chrome warnings.\r\n     * Possible values are SW_SECURE_CRYPTO, SW_SECURE_DECODE, HW_SECURE_CRYPTO, HW_SECURE_CRYPTO, HW_SECURE_DECODE, HW_SECURE_ALL.\r\n     *\r\n     * @param {string} level the robustness level\r\n     * @memberof module:ProtectionController\r\n     * @instance\r\n     */\r\n    function setRobustnessLevel(level) {\r\n        robustnessLevel = level;\r\n    }\r\n\r\n    /**\r\n     * Attach KeySystem-specific data to use for license acquisition with EME\r\n     *\r\n     * @param {Object} data an object containing property names corresponding to\r\n     * key system name strings (e.g. \"org.w3.clearkey\") and associated values\r\n     * being instances of {@link ProtectionData}\r\n     * @memberof module:ProtectionController\r\n     * @instance\r\n     * @ignore\r\n     */\r\n    function setProtectionData(data) {\r\n        protDataSet = data;\r\n        protectionKeyController.setProtectionData(data);\r\n    }\r\n\r\n    /**\r\n     * Stop method is called when current playback is stopped/resetted.\r\n     *\r\n     * @memberof module:ProtectionController\r\n     * @instance\r\n     */\r\n    function stop() {\r\n        if (protectionModel) {\r\n            protectionModel.stop();\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Destroys all protection data associated with this protection set.  This includes\r\n     * deleting all key sessions. In the case of persistent key sessions, the sessions\r\n     * will simply be unloaded and not deleted.  Additionally, if this protection set is\r\n     * associated with a HTMLMediaElement, it will be detached from that element.\r\n     *\r\n     * @memberof module:ProtectionController\r\n     * @instance\r\n     * @ignore\r\n     */\r\n    function reset() {\r\n        checkConfig();\r\n\r\n        eventBus.off(events.INTERNAL_KEY_MESSAGE, onKeyMessage, this);\r\n        eventBus.off(events.INTERNAL_KEY_STATUS_CHANGED, onKeyStatusChanged, this);\r\n\r\n        setMediaElement(null);\r\n\r\n        keySystem = undefined;//TODO-Refactor look at why undefined is needed for this. refactor\r\n\r\n        if (protectionModel) {\r\n            protectionModel.reset();\r\n            protectionModel = null;\r\n        }\r\n\r\n        needkeyRetries.forEach(retryTimeout => clearTimeout(retryTimeout));\r\n        needkeyRetries = [];\r\n\r\n        mediaInfoArr = [];\r\n    }\r\n\r\n    ///////////////\r\n    // Private\r\n    ///////////////\r\n\r\n    function getProtData(keySystem) {\r\n        let protData = null;\r\n        if (keySystem) {\r\n            const keySystemString = keySystem.systemString;\r\n\r\n            if (protDataSet) {\r\n                protData = (keySystemString in protDataSet) ? protDataSet[keySystemString] : null;\r\n            }\r\n        }\r\n        return protData;\r\n    }\r\n\r\n    function getKeySystemConfiguration(keySystem) {\r\n        const protData = getProtData(keySystem);\r\n        const audioCapabilities = [];\r\n        const videoCapabilities = [];\r\n        const audioRobustness = (protData && protData.audioRobustness && protData.audioRobustness.length > 0) ? protData.audioRobustness : robustnessLevel;\r\n        const videoRobustness = (protData && protData.videoRobustness && protData.videoRobustness.length > 0) ? protData.videoRobustness : robustnessLevel;\r\n        const ksSessionType = getSessionType(keySystem);\r\n        const distinctiveIdentifier = (protData && protData.distinctiveIdentifier) ? protData.distinctiveIdentifier : 'optional';\r\n        const persistentState = (protData && protData.persistentState) ? protData.persistentState : (ksSessionType === 'temporary') ? 'optional' : 'required';\r\n\r\n        mediaInfoArr.forEach((media) => {\r\n            if (media.type === constants.AUDIO) {\r\n                audioCapabilities.push(new MediaCapability(media.codec, audioRobustness));\r\n            } else if (media.type === constants.VIDEO) {\r\n                videoCapabilities.push(new MediaCapability(media.codec, videoRobustness));\r\n            }\r\n        });\r\n\r\n        return new KeySystemConfiguration(\r\n            audioCapabilities, videoCapabilities, distinctiveIdentifier,\r\n            persistentState,\r\n            [ksSessionType]);\r\n    }\r\n\r\n    function getSessionType(keySystem) {\r\n        const protData = getProtData(keySystem);\r\n        const ksSessionType = (protData && protData.sessionType) ? protData.sessionType : sessionType;\r\n        return ksSessionType;\r\n    }\r\n\r\n    function selectKeySystem(supportedKS, fromManifest) {\r\n        const self = this;\r\n        const requestedKeySystems = [];\r\n\r\n        // Reorder key systems according to priority order provided in protectionData\r\n        supportedKS = supportedKS.sort((ksA, ksB) => {\r\n            let indexA = (protDataSet && protDataSet[ksA.ks.systemString] && protDataSet[ksA.ks.systemString].priority >= 0) ? protDataSet[ksA.ks.systemString].priority : supportedKS.length;\r\n            let indexB = (protDataSet && protDataSet[ksB.ks.systemString] && protDataSet[ksB.ks.systemString].priority >= 0) ? protDataSet[ksB.ks.systemString].priority : supportedKS.length;\r\n            return indexA - indexB;\r\n        });\r\n\r\n        let ksIdx;\r\n        if (keySystem) {\r\n            // We have a key system\r\n            for (ksIdx = 0; ksIdx < supportedKS.length; ksIdx++) {\r\n                if (keySystem === supportedKS[ksIdx].ks) {\r\n\r\n                    requestedKeySystems.push({\r\n                        ks: supportedKS[ksIdx].ks,\r\n                        configs: [getKeySystemConfiguration(keySystem)]\r\n                    });\r\n\r\n                    // Ensure that we would be granted key system access using the key\r\n                    // system and codec information\r\n                    const onKeySystemAccessComplete = function (event) {\r\n                        eventBus.off(events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self);\r\n                        if (event.error) {\r\n                            if (!fromManifest) {\r\n                                eventBus.trigger(events.KEY_SYSTEM_SELECTED, { error: new DashJSError(ProtectionErrors.KEY_SYSTEM_ACCESS_DENIED_ERROR_CODE, ProtectionErrors.KEY_SYSTEM_ACCESS_DENIED_ERROR_MESSAGE + event.error) });\r\n                            }\r\n                        } else {\r\n                            logger.info('DRM: KeySystem Access Granted');\r\n                            eventBus.trigger(events.KEY_SYSTEM_SELECTED, { data: event.data });\r\n                            const protData = getProtData(keySystem);\r\n                            if (protectionKeyController.isClearKey(keySystem)) {\r\n                                // For Clearkey: if parameters for generating init data was provided by the user, use them for generating\r\n                                // initData and overwrite possible initData indicated in encrypted event (EME)\r\n                                if (protData && protData.hasOwnProperty('clearkeys')) {\r\n                                    const initData = {kids: Object.keys(protData.clearkeys)};\r\n                                    supportedKS[ksIdx].initData = new TextEncoder().encode(JSON.stringify(initData));\r\n                                }\r\n                            }\r\n                            if (supportedKS[ksIdx].sessionId) {\r\n                                // Load MediaKeySession with sessionId\r\n                                loadKeySession(supportedKS[ksIdx].sessionId, supportedKS[ksIdx].initData);\r\n                            } else if (supportedKS[ksIdx].initData) {\r\n                                // Create new MediaKeySession with initData\r\n                                createKeySession(supportedKS[ksIdx].initData, supportedKS[ksIdx].cdmData);\r\n                            }\r\n                        }\r\n                    };\r\n                    eventBus.on(events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self);\r\n                    protectionModel.requestKeySystemAccess(requestedKeySystems);\r\n                    break;\r\n                }\r\n            }\r\n        } else if (keySystem === undefined) {\r\n            // First time through, so we need to select a key system\r\n            keySystem = null;\r\n            pendingNeedKeyData.push(supportedKS);\r\n\r\n            // Add all key systems to our request list since we have yet to select a key system\r\n            for (let i = 0; i < supportedKS.length; i++) {\r\n                requestedKeySystems.push({\r\n                    ks: supportedKS[i].ks,\r\n                    configs: [getKeySystemConfiguration(supportedKS[i].ks)]\r\n                });\r\n            }\r\n\r\n            let keySystemAccess;\r\n            const onKeySystemAccessComplete = function (event) {\r\n                eventBus.off(events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self);\r\n                if (event.error) {\r\n                    keySystem = undefined;\r\n                    eventBus.off(events.INTERNAL_KEY_SYSTEM_SELECTED, onKeySystemSelected, self);\r\n                    if (!fromManifest) {\r\n                        eventBus.trigger(events.KEY_SYSTEM_SELECTED, {\r\n                            data: null,\r\n                            error: new DashJSError(ProtectionErrors.KEY_SYSTEM_ACCESS_DENIED_ERROR_CODE, ProtectionErrors.KEY_SYSTEM_ACCESS_DENIED_ERROR_MESSAGE + event.error)\r\n                        });\r\n                    }\r\n                } else {\r\n                    keySystemAccess = event.data;\r\n                    logger.info('DRM: KeySystem Access Granted (' + keySystemAccess.keySystem.systemString + ')!  Selecting key system...');\r\n                    protectionModel.selectKeySystem(keySystemAccess);\r\n                }\r\n            };\r\n            var onKeySystemSelected = function (event) {\r\n                eventBus.off(events.INTERNAL_KEY_SYSTEM_SELECTED, onKeySystemSelected, self);\r\n                eventBus.off(events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self);\r\n                if (!event.error) {\r\n                    if (!protectionModel) {\r\n                        return;\r\n                    }\r\n                    keySystem = protectionModel.getKeySystem();\r\n                    eventBus.trigger(events.KEY_SYSTEM_SELECTED, { data: keySystemAccess });\r\n                    // Set server certificate from protData\r\n                    const protData = getProtData(keySystem);\r\n                    if (protData && protData.serverCertificate && protData.serverCertificate.length > 0) {\r\n                        protectionModel.setServerCertificate(BASE64.decodeArray(protData.serverCertificate).buffer);\r\n                    }\r\n                    for (let i = 0; i < pendingNeedKeyData.length; i++) {\r\n                        for (ksIdx = 0; ksIdx < pendingNeedKeyData[i].length; ksIdx++) {\r\n                            if (keySystem === pendingNeedKeyData[i][ksIdx].ks) {\r\n                                if (protectionKeyController.isClearKey(keySystem)) {\r\n                                    // For Clearkey: if parameters for generating init data was provided by the user, use them for generating\r\n                                    // initData and overwrite possible initData indicated in encrypted event (EME)\r\n                                    if (protData && protData.hasOwnProperty('clearkeys')) {\r\n                                        const initData = {kids: Object.keys(protData.clearkeys)};\r\n                                        pendingNeedKeyData[i][ksIdx].initData = new TextEncoder().encode(JSON.stringify(initData));\r\n                                    }\r\n                                }\r\n                                if (pendingNeedKeyData[i][ksIdx].sessionId) {\r\n                                    // Load MediaKeySession with sessionId\r\n                                    loadKeySession(pendingNeedKeyData[i][ksIdx].sessionId, pendingNeedKeyData[i][ksIdx].initData);\r\n                                } else if (pendingNeedKeyData[i][ksIdx].initData !== null) {\r\n                                    // Create new MediaKeySession with initData\r\n                                    createKeySession(pendingNeedKeyData[i][ksIdx].initData, pendingNeedKeyData[i][ksIdx].cdmData);\r\n                                }\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                } else {\r\n                    keySystem = undefined;\r\n                    if (!fromManifest) {\r\n                        eventBus.trigger(events.KEY_SYSTEM_SELECTED, {\r\n                            data: null,\r\n                            error: new DashJSError(ProtectionErrors.KEY_SYSTEM_ACCESS_DENIED_ERROR_CODE, ProtectionErrors.KEY_SYSTEM_ACCESS_DENIED_ERROR_MESSAGE + 'Error selecting key system! -- ' + event.error)\r\n                        });\r\n                    }\r\n                }\r\n            };\r\n            eventBus.on(events.INTERNAL_KEY_SYSTEM_SELECTED, onKeySystemSelected, self);\r\n            eventBus.on(events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self);\r\n            protectionModel.requestKeySystemAccess(requestedKeySystems);\r\n        } else {\r\n            // We are in the process of selecting a key system, so just save the data\r\n            pendingNeedKeyData.push(supportedKS);\r\n        }\r\n    }\r\n\r\n    function sendLicenseRequestCompleteEvent(data, error) {\r\n        eventBus.trigger(events.LICENSE_REQUEST_COMPLETE, { data: data, error: error });\r\n    }\r\n\r\n    function onKeyStatusChanged(e) {\r\n        if (e.error) {\r\n            eventBus.trigger(events.KEY_STATUSES_CHANGED, { data: null, error: e.error });\r\n        } else {\r\n            logger.debug('DRM: key status = ' + e.status);\r\n        }\r\n    }\r\n\r\n    function onKeyMessage(e) {\r\n        logger.debug('DRM: onKeyMessage');\r\n\r\n        // Dispatch event to applications indicating we received a key message\r\n        const keyMessage = e.data;\r\n        eventBus.trigger(events.KEY_MESSAGE, { data: keyMessage });\r\n        const messageType = (keyMessage.messageType) ? keyMessage.messageType : 'license-request';\r\n        const message = keyMessage.message;\r\n        const sessionToken = keyMessage.sessionToken;\r\n        const protData = getProtData(keySystem);\r\n        const keySystemString = keySystem ? keySystem.systemString : null;\r\n        const licenseServerData = protectionKeyController.getLicenseServer(keySystem, protData, messageType);\r\n        const eventData = {sessionToken: sessionToken, messageType: messageType};\r\n\r\n        // Ensure message from CDM is not empty\r\n        if (!message || message.byteLength === 0) {\r\n            sendLicenseRequestCompleteEvent(eventData, new DashJSError(ProtectionErrors.MEDIA_KEY_MESSAGE_NO_CHALLENGE_ERROR_CODE, ProtectionErrors.MEDIA_KEY_MESSAGE_NO_CHALLENGE_ERROR_MESSAGE));\r\n            return;\r\n        }\r\n\r\n        // Message not destined for license server\r\n        if (!licenseServerData) {\r\n            logger.debug('DRM: License server request not required for this message (type = ' + e.data.messageType + ').  Session ID = ' + sessionToken.getSessionID());\r\n            sendLicenseRequestCompleteEvent(eventData);\r\n            return;\r\n        }\r\n\r\n        // Perform any special handling for ClearKey\r\n        if (protectionKeyController.isClearKey(keySystem)) {\r\n            const clearkeys = protectionKeyController.processClearKeyLicenseRequest(keySystem, protData, message);\r\n            if (clearkeys) {\r\n                logger.debug('DRM: ClearKey license request handled by application!');\r\n                sendLicenseRequestCompleteEvent(eventData);\r\n                protectionModel.updateKeySession(sessionToken, clearkeys);\r\n                return;\r\n            }\r\n        }\r\n\r\n        // All remaining key system scenarios require a request to a remote license server\r\n        // Determine license server URL\r\n        let url = null;\r\n        if (protData && protData.serverURL) {\r\n            const serverURL = protData.serverURL;\r\n            if (typeof serverURL === 'string' && serverURL !== '') {\r\n                url = serverURL;\r\n            } else if (typeof serverURL === 'object' && serverURL.hasOwnProperty(messageType)) {\r\n                url = serverURL[messageType];\r\n            }\r\n        } else if (protData && protData.laURL && protData.laURL !== '') {\r\n            // TODO: Deprecated!\r\n            url = protData.laURL;\r\n        } else {\r\n            // For clearkey use the url defined in the manifest\r\n            if (protectionKeyController.isClearKey(keySystem)) {\r\n                url = keySystem.getLicenseServerUrlFromMediaInfo(mediaInfoArr);\r\n            } else {\r\n                const psshData = CommonEncryption.getPSSHData(sessionToken.initData);\r\n                url = keySystem.getLicenseServerURLFromInitData(psshData);\r\n                if (!url) {\r\n                    url = e.data.laURL;\r\n                }\r\n            }\r\n        }\r\n        // Possibly update or override the URL based on the message\r\n        url = licenseServerData.getServerURLFromMessage(url, message, messageType);\r\n\r\n        // Ensure valid license server URL\r\n        if (!url) {\r\n            sendLicenseRequestCompleteEvent(eventData, new DashJSError(ProtectionErrors.MEDIA_KEY_MESSAGE_NO_LICENSE_SERVER_URL_ERROR_CODE, ProtectionErrors.MEDIA_KEY_MESSAGE_NO_LICENSE_SERVER_URL_ERROR_MESSAGE));\r\n            return;\r\n        }\r\n\r\n        // Set optional XMLHttpRequest headers from protection data and message\r\n        const reqHeaders = {};\r\n        let withCredentials = false;\r\n        const updateHeaders = function (headers) {\r\n            if (headers) {\r\n                for (const key in headers) {\r\n                    if ('authorization' === key.toLowerCase()) {\r\n                        withCredentials = true;\r\n                    }\r\n                    reqHeaders[key] = headers[key];\r\n                }\r\n            }\r\n        };\r\n        if (protData) {\r\n            updateHeaders(protData.httpRequestHeaders);\r\n        }\r\n        updateHeaders(keySystem.getRequestHeadersFromMessage(message));\r\n\r\n        // Overwrite withCredentials property from protData if present\r\n        if (protData && typeof protData.withCredentials == 'boolean') {\r\n            withCredentials = protData.withCredentials;\r\n        }\r\n\r\n        const reportError = function (xhr, eventData, keySystemString, messageType) {\r\n            const errorMsg = ((xhr.response) ? licenseServerData.getErrorResponse(xhr.response, keySystemString, messageType) : 'NONE');\r\n            sendLicenseRequestCompleteEvent(eventData, new DashJSError(ProtectionErrors.MEDIA_KEY_MESSAGE_LICENSER_ERROR_CODE,\r\n                ProtectionErrors.MEDIA_KEY_MESSAGE_LICENSER_ERROR_MESSAGE + keySystemString + ' update, XHR complete. status is \"' +\r\n                xhr.statusText + '\" (' + xhr.status + '), readyState is ' + xhr.readyState + '.  Response is ' + errorMsg));\r\n        };\r\n\r\n        const onLoad = function (xhr) {\r\n            if (!protectionModel) {\r\n                return;\r\n            }\r\n\r\n            if (xhr.status === 200) {\r\n                const licenseMessage = licenseServerData.getLicenseMessage(xhr.response, keySystemString, messageType);\r\n                if (licenseMessage !== null) {\r\n                    sendLicenseRequestCompleteEvent(eventData);\r\n                    protectionModel.updateKeySession(sessionToken, licenseMessage);\r\n                } else {\r\n                    reportError(xhr, eventData, keySystemString, messageType);\r\n                }\r\n            } else {\r\n                reportError(xhr, eventData, keySystemString, messageType);\r\n            }\r\n        };\r\n\r\n        const onAbort = function (xhr) {\r\n            sendLicenseRequestCompleteEvent(eventData, new DashJSError(ProtectionErrors.MEDIA_KEY_MESSAGE_LICENSER_ERROR_CODE,\r\n                ProtectionErrors.MEDIA_KEY_MESSAGE_LICENSER_ERROR_MESSAGE + keySystemString + ' update, XHR aborted. status is \"' +\r\n                xhr.statusText + '\" (' + xhr.status + '), readyState is ' + xhr.readyState));\r\n        };\r\n\r\n        const onError = function (xhr) {\r\n            sendLicenseRequestCompleteEvent(eventData, new DashJSError(ProtectionErrors.MEDIA_KEY_MESSAGE_LICENSER_ERROR_CODE,\r\n                ProtectionErrors.MEDIA_KEY_MESSAGE_LICENSER_ERROR_MESSAGE + keySystemString + ' update, XHR error. status is \"' +\r\n                xhr.statusText + '\" (' + xhr.status + '), readyState is ' + xhr.readyState));\r\n        };\r\n\r\n        //const reqPayload = keySystem.getLicenseRequestFromMessage(message);\r\n        const reqPayload = keySystem.getLicenseRequestFromMessage(message);\r\n        const reqMethod = licenseServerData.getHTTPMethod(messageType);\r\n        const responseType = licenseServerData.getResponseType(keySystemString, messageType);\r\n        const timeout = protData && !isNaN(protData.httpTimeout) ? protData.httpTimeout : LICENSE_SERVER_REQUEST_DEFAULT_TIMEOUT;\r\n        const sessionId = sessionToken.getSessionID() || null;\r\n\r\n        doLicenseRequest(url, reqHeaders, reqMethod, responseType, withCredentials, reqPayload,\r\n            LICENSE_SERVER_REQUEST_RETRIES, timeout, onLoad, onAbort, onError, sessionId);\r\n    }\r\n\r\n    // Implement license requests with a retry mechanism to avoid temporary network issues to affect playback experience\r\n    function doLicenseRequest(url, headers, method, responseType, withCredentials, payload, retriesCount, timeout, onLoad, onAbort, onError, sessionId) {\r\n        const xhr = new XMLHttpRequest();\r\n\r\n        xhr.open(method, url, true);\r\n        xhr.responseType = responseType;\r\n        xhr.withCredentials = withCredentials;\r\n        if (timeout > 0) {\r\n            xhr.timeout = timeout;\r\n        }\r\n        for (const key in headers) {\r\n            xhr.setRequestHeader(key, headers[key]);\r\n        }\r\n\r\n        const retryRequest = function () {\r\n            // fail silently and retry\r\n            retriesCount--;\r\n            setTimeout(function () {\r\n                doLicenseRequest(url, headers, method, responseType, withCredentials, payload,\r\n                    retriesCount, timeout, onLoad, onAbort, onError, sessionId);\r\n            }, LICENSE_SERVER_REQUEST_RETRY_INTERVAL);\r\n        };\r\n\r\n        xhr.onload = function () {\r\n            if (this.status === 200 || retriesCount <= 0) {\r\n                onLoad(this);\r\n            } else {\r\n                logger.warn('License request failed (' + this.status + '). Retrying it... Pending retries: ' + retriesCount);\r\n                retryRequest();\r\n            }\r\n        };\r\n\r\n        xhr.ontimeout = xhr.onerror = function () {\r\n            if (retriesCount <= 0) {\r\n                onError(this);\r\n            } else {\r\n                logger.warn('License request network request failed . Retrying it... Pending retries: ' + retriesCount);\r\n                retryRequest();\r\n            }\r\n        };\r\n\r\n        xhr.onabort = function () {\r\n            onAbort(this);\r\n        };\r\n\r\n        eventBus.trigger(events.LICENSE_REQUEST_SENDING, {\r\n            url,\r\n            headers,\r\n            payload,\r\n            sessionId\r\n        });\r\n\r\n        xhr.send(payload);\r\n    }\r\n\r\n    function onNeedKey(event, retry) {\r\n        logger.debug('DRM: onNeedKey');\r\n        // Ignore non-cenc initData\r\n        if (event.key.initDataType !== 'cenc') {\r\n            logger.warn('DRM:  Only \\'cenc\\' initData is supported!  Ignoring initData of type: ' + event.key.initDataType);\r\n            return;\r\n        }\r\n\r\n        if (mediaInfoArr.length === 0) {\r\n            logger.warn('DRM: onNeedKey called before initializeForMedia, wait until initialized');\r\n            retry = typeof retry === 'undefined' ? 1 : retry + 1;\r\n            if (retry < NEEDKEY_BEFORE_INITIALIZE_RETRIES) {\r\n                needkeyRetries.push(setTimeout(() => {\r\n                    onNeedKey(event, retry);\r\n                }, NEEDKEY_BEFORE_INITIALIZE_TIMEOUT));\r\n                return;\r\n            }\r\n\r\n        }\r\n\r\n        // Some browsers return initData as Uint8Array (IE), some as ArrayBuffer (Chrome).\r\n        // Convert to ArrayBuffer\r\n        let abInitData = event.key.initData;\r\n        if (ArrayBuffer.isView(abInitData)) {\r\n            abInitData = abInitData.buffer;\r\n        }\r\n\r\n        // If key system has already been selected and initData already seen, then do nothing\r\n        if (keySystem) {\r\n            const initDataForKS = CommonEncryption.getPSSHForKeySystem(keySystem, abInitData);\r\n            if (initDataForKS) {\r\n\r\n                // Check for duplicate initData\r\n                const currentInitData = protectionModel.getAllInitData();\r\n                for (let i = 0; i < currentInitData.length; i++) {\r\n                    if (protectionKeyController.initDataEquals(initDataForKS, currentInitData[i])) {\r\n                        logger.warn('DRM: Ignoring initData because we have already seen it!');\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        logger.debug('DRM: initData:', String.fromCharCode.apply(null, new Uint8Array(abInitData)));\r\n\r\n        const supportedKS = protectionKeyController.getSupportedKeySystems(abInitData, protDataSet);\r\n        if (supportedKS.length === 0) {\r\n            logger.debug('DRM: Received needkey event with initData, but we don\\'t support any of the key systems!');\r\n            return;\r\n        }\r\n\r\n        selectKeySystem(supportedKS, false);\r\n    }\r\n\r\n    function getKeySystems() {\r\n        return protectionKeyController ? protectionKeyController.getKeySystems() : [];\r\n    }\r\n\r\n    function setKeySystems(keySystems) {\r\n        if (protectionKeyController) {\r\n            protectionKeyController.setKeySystems(keySystems);\r\n        }\r\n    }\r\n\r\n    instance = {\r\n        initializeForMedia: initializeForMedia,\r\n        createKeySession: createKeySession,\r\n        loadKeySession: loadKeySession,\r\n        removeKeySession: removeKeySession,\r\n        closeKeySession: closeKeySession,\r\n        setServerCertificate: setServerCertificate,\r\n        setMediaElement: setMediaElement,\r\n        setSessionType: setSessionType,\r\n        setRobustnessLevel: setRobustnessLevel,\r\n        setProtectionData: setProtectionData,\r\n        getSupportedKeySystemsFromContentProtection: getSupportedKeySystemsFromContentProtection,\r\n        getKeySystems: getKeySystems,\r\n        setKeySystems: setKeySystems,\r\n        stop: stop,\r\n        reset: reset\r\n    };\r\n\r\n    setup();\r\n    return instance;\r\n}\r\n\r\nProtectionController.__dashjs_factory_name = 'ProtectionController';\r\nexport default dashjs.FactoryMaker.getClassFactory(ProtectionController); /* jshint ignore:line */\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport CommonEncryption from './../CommonEncryption';\r\nimport KeySystemClearKey from './../drm/KeySystemClearKey';\r\nimport KeySystemW3CClearKey from './../drm/KeySystemW3CClearKey';\r\nimport KeySystemWidevine from './../drm/KeySystemWidevine';\r\nimport KeySystemPlayReady from './../drm/KeySystemPlayReady';\r\nimport DRMToday from './../servers/DRMToday';\r\nimport PlayReady from './../servers/PlayReady';\r\nimport Widevine from './../servers/Widevine';\r\nimport ClearKey from './../servers/ClearKey';\r\nimport ProtectionConstants from '../../constants/ProtectionConstants';\r\n\r\n/**\r\n * @module ProtectionKeyController\r\n * @ignore\r\n * @description Media protection key system functionality that can be modified/overridden by applications\r\n */\r\nfunction ProtectionKeyController() {\r\n\r\n    let context = this.context;\r\n\r\n    let instance,\r\n        debug,\r\n        logger,\r\n        keySystems,\r\n        BASE64,\r\n        clearkeyKeySystem,\r\n        clearkeyW3CKeySystem;\r\n\r\n    function setConfig(config) {\r\n        if (!config) return;\r\n\r\n        if (config.debug) {\r\n            debug = config.debug;\r\n            logger = debug.getLogger(instance);\r\n        }\r\n\r\n        if (config.BASE64) {\r\n            BASE64 = config.BASE64;\r\n        }\r\n    }\r\n\r\n    function initialize() {\r\n        keySystems = [];\r\n\r\n        let keySystem;\r\n\r\n        // PlayReady\r\n        keySystem = KeySystemPlayReady(context).getInstance({BASE64: BASE64});\r\n        keySystems.push(keySystem);\r\n\r\n        // Widevine\r\n        keySystem = KeySystemWidevine(context).getInstance({BASE64: BASE64});\r\n        keySystems.push(keySystem);\r\n\r\n        // ClearKey\r\n        keySystem = KeySystemClearKey(context).getInstance({BASE64: BASE64});\r\n        keySystems.push(keySystem);\r\n        clearkeyKeySystem = keySystem;\r\n\r\n        // W3C ClearKey\r\n        keySystem = KeySystemW3CClearKey(context).getInstance({BASE64: BASE64, debug: debug});\r\n        keySystems.push(keySystem);\r\n        clearkeyW3CKeySystem = keySystem;\r\n    }\r\n\r\n    /**\r\n     * Returns a prioritized list of key systems supported\r\n     * by this player (not necessarily those supported by the\r\n     * user agent)\r\n     *\r\n     * @returns {Array.<KeySystem>} a prioritized\r\n     * list of key systems\r\n     * @memberof module:ProtectionKeyController\r\n     * @instance\r\n     */\r\n    function getKeySystems() {\r\n        return keySystems;\r\n    }\r\n\r\n    /**\r\n     * Sets the prioritized list of key systems to be supported\r\n     * by this player.\r\n     *\r\n     * @param {Array.<KeySystem>} newKeySystems the new prioritized\r\n     * list of key systems\r\n     * @memberof module:ProtectionKeyController\r\n     * @instance\r\n     */\r\n    function setKeySystems(newKeySystems) {\r\n        keySystems = newKeySystems;\r\n    }\r\n\r\n    /**\r\n     * Returns the key system associated with the given key system string\r\n     * name (i.e. 'org.w3.clearkey')\r\n     *\r\n     * @param {string} systemString the system string\r\n     * @returns {KeySystem|null} the key system\r\n     * or null if no supported key system is associated with the given key\r\n     * system string\r\n     * @memberof module:ProtectionKeyController\r\n     * @instance\r\n     */\r\n    function getKeySystemBySystemString(systemString) {\r\n        for (let i = 0; i < keySystems.length; i++) {\r\n            if (keySystems[i].systemString === systemString) {\r\n                return keySystems[i];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Determines whether the given key system is ClearKey.  This is\r\n     * necessary because the EME spec defines ClearKey and its method\r\n     * for providing keys to the key session; and this method has changed\r\n     * between the various API versions.  Our EME-specific ProtectionModels\r\n     * must know if the system is ClearKey so that it can format the keys\r\n     * according to the particular spec version.\r\n     *\r\n     * @param {Object} keySystem the key\r\n     * @returns {boolean} true if this is the ClearKey key system, false\r\n     * otherwise\r\n     * @memberof module:ProtectionKeyController\r\n     * @instance\r\n     */\r\n    function isClearKey(keySystem) {\r\n        return (keySystem === clearkeyKeySystem || keySystem === clearkeyW3CKeySystem);\r\n    }\r\n\r\n    /**\r\n     * Check equality of initData array buffers.\r\n     *\r\n     * @param {ArrayBuffer} initData1 - first initData\r\n     * @param {ArrayBuffer} initData2 - second initData\r\n     * @returns {boolean} true if the initData arrays are equal in size and\r\n     * contents, false otherwise\r\n     * @memberof module:ProtectionKeyController\r\n     * @instance\r\n     */\r\n    function initDataEquals(initData1, initData2) {\r\n        if (initData1.byteLength === initData2.byteLength) {\r\n            let data1 = new Uint8Array(initData1);\r\n            let data2 = new Uint8Array(initData2);\r\n\r\n            for (let j = 0; j < data1.length; j++) {\r\n                if (data1[j] !== data2[j]) {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Returns a set of supported key systems and CENC initialization data\r\n     * from the given array of ContentProtection elements.  Only\r\n     * key systems that are supported by this player will be returned.\r\n     * Key systems are returned in priority order (highest first).\r\n     *\r\n     * @param {Array.<Object>} cps - array of content protection elements parsed\r\n     * from the manifest\r\n     * @returns {Array.<Object>} array of objects indicating which supported key\r\n     * systems were found.  Empty array is returned if no\r\n     * supported key systems were found\r\n     * @memberof module:ProtectionKeyController\r\n     * @instance\r\n     */\r\n    function getSupportedKeySystemsFromContentProtection(cps) {\r\n        let cp, ks, ksIdx, cpIdx;\r\n        let supportedKS = [];\r\n\r\n        if (cps) {\r\n            const cencContentProtection = CommonEncryption.findCencContentProtection(cps);\r\n            for (ksIdx = 0; ksIdx < keySystems.length; ++ksIdx) {\r\n                ks = keySystems[ksIdx];\r\n                for (cpIdx = 0; cpIdx < cps.length; ++cpIdx) {\r\n                    cp = cps[cpIdx];\r\n                    if (cp.schemeIdUri.toLowerCase() === ks.schemeIdURI) {\r\n                        // Look for DRM-specific ContentProtection\r\n                        let initData = ks.getInitData(cp, cencContentProtection);\r\n\r\n                        supportedKS.push({\r\n                            ks: keySystems[ksIdx],\r\n                            initData: initData,\r\n                            cdmData: ks.getCDMData(),\r\n                            sessionId: ks.getSessionId(cp)\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return supportedKS;\r\n    }\r\n\r\n    /**\r\n     * Returns key systems supported by this player for the given PSSH\r\n     * initializationData. Only key systems supported by this player\r\n     * that have protection data present will be returned.  Key systems are returned in priority order\r\n     * (highest priority first)\r\n     *\r\n     * @param {ArrayBuffer} initData Concatenated PSSH data for all DRMs\r\n     * supported by the content\r\n     * @param {ProtectionData} protDataSet user specified protection data - license server url etc\r\n     * supported by the content\r\n     * @returns {Array.<Object>} array of objects indicating which supported key\r\n     * systems were found.  Empty array is returned if no\r\n     * supported key systems were found\r\n     * @memberof module:ProtectionKeyController\r\n     * @instance\r\n     */\r\n    function getSupportedKeySystems(initData, protDataSet) {\r\n        let supportedKS = [];\r\n        let pssh = CommonEncryption.parsePSSHList(initData);\r\n        let ks, keySystemString, shouldNotFilterOutKeySystem;\r\n\r\n        for (let ksIdx = 0; ksIdx < keySystems.length; ++ksIdx) {\r\n            ks = keySystems[ksIdx];\r\n            keySystemString = ks.systemString;\r\n            shouldNotFilterOutKeySystem = (protDataSet) ? keySystemString in protDataSet : true;\r\n\r\n            if (ks.uuid in pssh && shouldNotFilterOutKeySystem) {\r\n                supportedKS.push({\r\n                    ks: ks,\r\n                    initData: pssh[ks.uuid],\r\n                    cdmData: ks.getCDMData(),\r\n                    sessionId: ks.getSessionId()\r\n                });\r\n            }\r\n        }\r\n        return supportedKS;\r\n    }\r\n\r\n    /**\r\n     * Returns the license server implementation data that should be used for this request.\r\n     *\r\n     * @param {KeySystem} keySystem the key system\r\n     * associated with this license request\r\n     * @param {ProtectionData} protData protection data to use for the\r\n     * request\r\n     * @param {string} [messageType=\"license-request\"] the message type associated with this\r\n     * request.  Supported message types can be found\r\n     * {@link https://w3c.github.io/encrypted-media/#idl-def-MediaKeyMessageType|here}.\r\n     * @returns {LicenseServer|null} the license server\r\n     * implementation that should be used for this request or null if the player should not\r\n     * pass messages of the given type to a license server\r\n     * @memberof module:ProtectionKeyController\r\n     * @instance\r\n     *\r\n     */\r\n    function getLicenseServer(keySystem, protData, messageType) {\r\n\r\n        // Our default server implementations do not do anything with \"license-release\" or\r\n        // \"individualization-request\" messages, so we just send a success event\r\n        if (messageType === 'license-release' || messageType === 'individualization-request') {\r\n            return null;\r\n        }\r\n\r\n        let licenseServerData = null;\r\n        if (protData && protData.hasOwnProperty('drmtoday')) {\r\n            licenseServerData = DRMToday(context).getInstance({BASE64: BASE64});\r\n        } else if (keySystem.systemString === ProtectionConstants.WIDEVINE_KEYSTEM_STRING) {\r\n            licenseServerData = Widevine(context).getInstance();\r\n        } else if (keySystem.systemString === ProtectionConstants.PLAYREADY_KEYSTEM_STRING) {\r\n            licenseServerData = PlayReady(context).getInstance();\r\n        } else if (keySystem.systemString === ProtectionConstants.CLEARKEY_KEYSTEM_STRING) {\r\n            licenseServerData = ClearKey(context).getInstance();\r\n        }\r\n\r\n        return licenseServerData;\r\n    }\r\n\r\n    /**\r\n     * Allows application-specific retrieval of ClearKey keys.\r\n     *\r\n     * @param {KeySystem} clearkeyKeySystem They exact ClearKey System to be used\r\n     * @param {ProtectionData} protData protection data to use for the\r\n     * request\r\n     * @param {ArrayBuffer} message the key message from the CDM\r\n     * @return {ClearKeyKeySet|null} the clear keys associated with\r\n     * the request or null if no keys can be returned by this function\r\n     * @memberof module:ProtectionKeyController\r\n     * @instance\r\n     */\r\n    function processClearKeyLicenseRequest(clearkeyKeySystem, protData, message) {\r\n        try {\r\n            return clearkeyKeySystem.getClearKeysFromProtectionData(protData, message);\r\n        } catch (error) {\r\n            logger.error('Failed to retrieve clearkeys from ProtectionData');\r\n            return null;\r\n        }\r\n    }\r\n\r\n    function setProtectionData(protectionDataSet) {\r\n        var getProtectionData = function (keySystemString) {\r\n            var protData = null;\r\n            if (protectionDataSet) {\r\n                protData = (keySystemString in protectionDataSet) ? protectionDataSet[keySystemString] : null;\r\n            }\r\n            return protData;\r\n        };\r\n\r\n        for (var i = 0; i < keySystems.length; i++) {\r\n            var keySystem = keySystems[i];\r\n            if (keySystem.hasOwnProperty('init')) {\r\n                keySystem.init(getProtectionData(keySystem.systemString));\r\n            }\r\n        }\r\n    }\r\n\r\n    instance = {\r\n        initialize: initialize,\r\n        setProtectionData: setProtectionData,\r\n        isClearKey: isClearKey,\r\n        initDataEquals: initDataEquals,\r\n        getKeySystems: getKeySystems,\r\n        setKeySystems: setKeySystems,\r\n        getKeySystemBySystemString: getKeySystemBySystemString,\r\n        getSupportedKeySystemsFromContentProtection: getSupportedKeySystemsFromContentProtection,\r\n        getSupportedKeySystems: getSupportedKeySystems,\r\n        getLicenseServer: getLicenseServer,\r\n        processClearKeyLicenseRequest: processClearKeyLicenseRequest,\r\n        setConfig: setConfig\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nProtectionKeyController.__dashjs_factory_name = 'ProtectionKeyController';\r\nexport default dashjs.FactoryMaker.getSingletonFactory(ProtectionKeyController); /* jshint ignore:line */\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport KeyPair from '../vo/KeyPair';\r\nimport ClearKeyKeySet from '../vo/ClearKeyKeySet';\r\nimport CommonEncryption from '../CommonEncryption';\r\nimport ProtectionConstants from '../../constants/ProtectionConstants';\r\n\r\nconst uuid = 'e2719d58-a985-b3c9-781a-b030af78d30e';\r\nconst systemString = ProtectionConstants.CLEARKEY_KEYSTEM_STRING;\r\nconst schemeIdURI = 'urn:uuid:' + uuid;\r\n\r\nfunction KeySystemClearKey(config) {\r\n\r\n    config = config || {};\r\n    let instance;\r\n    const BASE64 = config.BASE64;\r\n    const LICENSE_SERVER_MANIFEST_CONFIGURATIONS = {\r\n        attributes: ['Laurl', 'laurl'],\r\n        prefixes: ['clearkey', 'dashif']\r\n    };\r\n\r\n    /**\r\n     * Returns desired clearkeys (as specified in the CDM message) from protection data\r\n     *\r\n     * @param {ProtectionData} protectionData the protection data\r\n     * @param {ArrayBuffer} message the ClearKey CDM message\r\n     * @returns {ClearKeyKeySet} the key set or null if none found\r\n     * @throws {Error} if a keyID specified in the CDM message was not found in the\r\n     * protection data\r\n     * @memberof KeySystemClearKey\r\n     */\r\n    function getClearKeysFromProtectionData(protectionData, message) {\r\n        let clearkeySet = null;\r\n        if (protectionData) {\r\n            // ClearKey is the only system that does not require a license server URL, so we\r\n            // handle it here when keys are specified in protection data\r\n            const jsonMsg = JSON.parse(String.fromCharCode.apply(null, new Uint8Array(message)));\r\n            const keyPairs = [];\r\n            for (let i = 0; i < jsonMsg.kids.length; i++) {\r\n                const clearkeyID = jsonMsg.kids[i];\r\n                const clearkey = (protectionData.clearkeys && protectionData.clearkeys.hasOwnProperty(clearkeyID)) ? protectionData.clearkeys[clearkeyID] : null;\r\n                if (!clearkey) {\r\n                    throw new Error('DRM: ClearKey keyID (' + clearkeyID + ') is not known!');\r\n                }\r\n                // KeyIDs from CDM are not base64 padded.  Keys may or may not be padded\r\n                keyPairs.push(new KeyPair(clearkeyID, clearkey));\r\n            }\r\n            clearkeySet = new ClearKeyKeySet(keyPairs);\r\n        }\r\n        return clearkeySet;\r\n    }\r\n\r\n    function getInitData(cp, cencContentProtection) {\r\n        try {\r\n            let initData = CommonEncryption.parseInitDataFromContentProtection(cp, BASE64);\r\n\r\n            if (!initData && cencContentProtection) {\r\n                const cencDefaultKid = cencDefaultKidToBase64Representation(cencContentProtection['cenc:default_KID']);\r\n                const data = {kids: [cencDefaultKid]};\r\n                initData = new TextEncoder().encode(JSON.stringify(data));\r\n            }\r\n\r\n            return initData;\r\n        } catch (e) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    function cencDefaultKidToBase64Representation(cencDefaultKid) {\r\n        try {\r\n            let kid = cencDefaultKid.replace(/-/g, '');\r\n            kid = btoa(kid.match(/\\w{2}/g).map((a) => {\r\n                return String.fromCharCode(parseInt(a, 16));\r\n            }).join(''));\r\n            return kid.replace(/=/g, '');\r\n        } catch (e) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    function getRequestHeadersFromMessage(/*message*/) {\r\n        // Set content type to application/json by default\r\n        return {\r\n            'Content-Type': 'application/json'\r\n        };\r\n    }\r\n\r\n    function getLicenseRequestFromMessage(message) {\r\n        return JSON.parse(String.fromCharCode.apply(null, new Uint8Array(message)));\r\n    }\r\n\r\n    function getLicenseServerURLFromInitData(/*initData*/) {\r\n        return null;\r\n    }\r\n\r\n    function getLicenseServerUrlFromMediaInfo(mediaInfo) {\r\n        try {\r\n            if (!mediaInfo || mediaInfo.length === 0) {\r\n                return null;\r\n            }\r\n            let i = 0;\r\n            let licenseServer = null;\r\n            while (i < mediaInfo.length && !licenseServer) {\r\n                const info = mediaInfo[i];\r\n                if (info && info.contentProtection && info.contentProtection.length > 0) {\r\n                    const clearkeyProtData = info.contentProtection.filter((cp) => {\r\n                        return cp.schemeIdUri && cp.schemeIdUri === schemeIdURI;\r\n                    });\r\n                    if (clearkeyProtData && clearkeyProtData.length > 0) {\r\n                        let j = 0;\r\n                        while (j < clearkeyProtData.length && !licenseServer) {\r\n                            const ckData = clearkeyProtData[j];\r\n                            let k = 0;\r\n                            while (k < LICENSE_SERVER_MANIFEST_CONFIGURATIONS.attributes.length && !licenseServer) {\r\n                                let l = 0;\r\n                                const attribute = LICENSE_SERVER_MANIFEST_CONFIGURATIONS.attributes[k];\r\n                                while (l < LICENSE_SERVER_MANIFEST_CONFIGURATIONS.prefixes.length && !licenseServer) {\r\n                                    const prefix = LICENSE_SERVER_MANIFEST_CONFIGURATIONS.prefixes[l];\r\n                                    if (ckData[attribute] && ckData[attribute].__prefix && ckData[attribute].__prefix === prefix && ckData[attribute].__text) {\r\n                                        licenseServer = ckData[attribute].__text;\r\n                                    }\r\n                                    l += 1;\r\n                                }\r\n                                k += 1;\r\n                            }\r\n                            j += 1;\r\n                        }\r\n                    }\r\n                }\r\n                i += 1;\r\n            }\r\n            return licenseServer;\r\n        } catch\r\n            (e) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    function getCDMData() {\r\n        return null;\r\n    }\r\n\r\n    function getSessionId(/*cp*/) {\r\n        return null;\r\n    }\r\n\r\n    instance = {\r\n        uuid: uuid,\r\n        schemeIdURI: schemeIdURI,\r\n        systemString: systemString,\r\n        getInitData: getInitData,\r\n        getRequestHeadersFromMessage: getRequestHeadersFromMessage,\r\n        getLicenseRequestFromMessage: getLicenseRequestFromMessage,\r\n        getLicenseServerURLFromInitData: getLicenseServerURLFromInitData,\r\n        getCDMData: getCDMData,\r\n        getSessionId: getSessionId,\r\n        getLicenseServerUrlFromMediaInfo,\r\n        getClearKeysFromProtectionData: getClearKeysFromProtectionData\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nKeySystemClearKey.__dashjs_factory_name = 'KeySystemClearKey';\r\nexport default dashjs.FactoryMaker.getSingletonFactory(KeySystemClearKey); /* jshint ignore:line */\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n/**\r\n * Microsoft PlayReady DRM\r\n *\r\n * @class\r\n * @implements KeySystem\r\n */\r\nimport CommonEncryption from '../CommonEncryption';\r\nimport ProtectionConstants from '../../constants/ProtectionConstants';\r\n\r\nconst uuid = '9a04f079-9840-4286-ab92-e65be0885f95';\r\nconst systemString = ProtectionConstants.PLAYREADY_KEYSTEM_STRING;\r\nconst schemeIdURI = 'urn:uuid:' + uuid;\r\nconst PRCDMData = '<PlayReadyCDMData type=\"LicenseAcquisition\"><LicenseAcquisition version=\"1.0\" Proactive=\"false\"><CustomData encoding=\"base64encoded\">%CUSTOMDATA%</CustomData></LicenseAcquisition></PlayReadyCDMData>';\r\nlet protData;\r\n\r\nfunction KeySystemPlayReady(config) {\r\n\r\n    config = config || {};\r\n    let instance;\r\n    let messageFormat = 'utf-16';\r\n    const BASE64 = config.BASE64;\r\n\r\n    function checkConfig() {\r\n        if (!BASE64 || !BASE64.hasOwnProperty('decodeArray') || !BASE64.hasOwnProperty('decodeArray') ) {\r\n            throw new Error('Missing config parameter(s)');\r\n        }\r\n    }\r\n\r\n    function getRequestHeadersFromMessage(message) {\r\n        let msg,\r\n            xmlDoc;\r\n        const headers = {};\r\n        const parser = new DOMParser();\r\n        const dataview = (messageFormat === 'utf-16') ? new Uint16Array(message) : new Uint8Array(message);\r\n\r\n        msg = String.fromCharCode.apply(null, dataview);\r\n        xmlDoc = parser.parseFromString(msg, 'application/xml');\r\n\r\n        const headerNameList = xmlDoc.getElementsByTagName('name');\r\n        const headerValueList = xmlDoc.getElementsByTagName('value');\r\n        for (let i = 0; i < headerNameList.length; i++) {\r\n            headers[headerNameList[i].childNodes[0].nodeValue] = headerValueList[i].childNodes[0].nodeValue;\r\n        }\r\n        // Some versions of the PlayReady CDM return 'Content' instead of 'Content-Type'.\r\n        // this is NOT w3c conform and license servers may reject the request!\r\n        // -> rename it to proper w3c definition!\r\n        if (headers.hasOwnProperty('Content')) {\r\n            headers['Content-Type'] = headers.Content;\r\n            delete headers.Content;\r\n        }\r\n        // Set Content-Type header by default if not provided in the the CDM message (<PlayReadyKeyMessage/>)\r\n        // or if the message contains directly the challenge itself (Ex: LG SmartTVs)\r\n        if (!headers.hasOwnProperty('Content-Type')) {\r\n            headers['Content-Type'] = 'text/xml; charset=utf-8';\r\n        }\r\n        return headers;\r\n    }\r\n\r\n    function getLicenseRequestFromMessage(message) {\r\n        let licenseRequest = null;\r\n        const parser = new DOMParser();\r\n        const dataview = (messageFormat === 'utf-16') ? new Uint16Array(message) : new Uint8Array(message);\r\n\r\n        checkConfig();\r\n        const msg = String.fromCharCode.apply(null, dataview);\r\n        const xmlDoc = parser.parseFromString(msg, 'application/xml');\r\n\r\n        if (xmlDoc.getElementsByTagName('PlayReadyKeyMessage')[0]) {\r\n            const Challenge = xmlDoc.getElementsByTagName('Challenge')[0].childNodes[0].nodeValue;\r\n            if (Challenge) {\r\n                licenseRequest = BASE64.decode(Challenge);\r\n            }\r\n        } else {\r\n            // The message from CDM is not a wrapped message as on IE11 and Edge,\r\n            // thus it contains direclty the challenge itself\r\n            // (note that the xmlDoc at this point may be unreadable since it may have been interpreted as UTF-16)\r\n            return message;\r\n        }\r\n\r\n        return licenseRequest;\r\n    }\r\n\r\n    function getLicenseServerURLFromInitData(initData) {\r\n        if (initData) {\r\n            const data = new DataView(initData);\r\n            const numRecords = data.getUint16(4, true);\r\n            let offset = 6;\r\n            const parser = new DOMParser();\r\n\r\n            for (let i = 0; i < numRecords; i++) {\r\n                // Parse the PlayReady Record header\r\n                const recordType = data.getUint16(offset, true);\r\n                offset += 2;\r\n                const recordLength = data.getUint16(offset, true);\r\n                offset += 2;\r\n                if (recordType !== 0x0001) {\r\n                    offset += recordLength;\r\n                    continue;\r\n                }\r\n\r\n                const recordData = initData.slice(offset, offset + recordLength);\r\n                const record = String.fromCharCode.apply(null, new Uint16Array(recordData));\r\n                const xmlDoc = parser.parseFromString(record, 'application/xml');\r\n\r\n                // First try <LA_URL>\r\n                if (xmlDoc.getElementsByTagName('LA_URL')[0]) {\r\n                    const laurl = xmlDoc.getElementsByTagName('LA_URL')[0].childNodes[0].nodeValue;\r\n                    if (laurl) {\r\n                        return laurl;\r\n                    }\r\n                }\r\n\r\n                // Optionally, try <LUI_URL>\r\n                if (xmlDoc.getElementsByTagName('LUI_URL')[0]) {\r\n                    const luiurl = xmlDoc.getElementsByTagName('LUI_URL')[0].childNodes[0].nodeValue;\r\n                    if (luiurl) {\r\n                        return luiurl;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    function getInitData(cpData) {\r\n        // * desc@ getInitData\r\n        // *   generate PSSH data from PROHeader defined in MPD file\r\n        // *   PSSH format:\r\n        // *   size (4)\r\n        // *   box type(PSSH) (8)\r\n        // *   Protection SystemID (16)\r\n        // *   protection system data size (4) - length of decoded PROHeader\r\n        // *   decoded PROHeader data from MPD file\r\n        const PSSHBoxType = new Uint8Array([0x70, 0x73, 0x73, 0x68, 0x00, 0x00, 0x00, 0x00]); //'PSSH' 8 bytes\r\n        const playreadySystemID = new Uint8Array([0x9a, 0x04, 0xf0, 0x79, 0x98, 0x40, 0x42, 0x86, 0xab, 0x92, 0xe6, 0x5b, 0xe0, 0x88, 0x5f, 0x95]);\r\n\r\n        let byteCursor = 0;\r\n        let uint8arraydecodedPROHeader = null;\r\n\r\n        let PROSize,\r\n            PSSHSize,\r\n            PSSHBoxBuffer,\r\n            PSSHBox,\r\n            PSSHData;\r\n\r\n        checkConfig();\r\n        if (!cpData) {\r\n            return null;\r\n        }\r\n        // Handle common encryption PSSH\r\n        if ('pssh' in cpData) {\r\n            return CommonEncryption.parseInitDataFromContentProtection(cpData, BASE64);\r\n        }\r\n        // Handle native MS PlayReady ContentProtection elements\r\n        if ('pro' in cpData) {\r\n            uint8arraydecodedPROHeader = BASE64.decodeArray(cpData.pro.__text);\r\n        }\r\n        else if ('prheader' in cpData) {\r\n            uint8arraydecodedPROHeader = BASE64.decodeArray(cpData.prheader.__text);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n\r\n        PROSize = uint8arraydecodedPROHeader.length;\r\n        PSSHSize = 0x4 + PSSHBoxType.length + playreadySystemID.length + 0x4 + PROSize;\r\n\r\n        PSSHBoxBuffer = new ArrayBuffer(PSSHSize);\r\n\r\n        PSSHBox = new Uint8Array(PSSHBoxBuffer);\r\n        PSSHData = new DataView(PSSHBoxBuffer);\r\n\r\n        PSSHData.setUint32(byteCursor, PSSHSize);\r\n        byteCursor += 0x4;\r\n\r\n        PSSHBox.set(PSSHBoxType, byteCursor);\r\n        byteCursor += PSSHBoxType.length;\r\n\r\n        PSSHBox.set(playreadySystemID, byteCursor);\r\n        byteCursor += playreadySystemID.length;\r\n\r\n        PSSHData.setUint32(byteCursor, PROSize);\r\n        byteCursor += 0x4;\r\n\r\n        PSSHBox.set(uint8arraydecodedPROHeader, byteCursor);\r\n        byteCursor += PROSize;\r\n\r\n        return PSSHBox.buffer;\r\n    }\r\n\r\n    /**\r\n     * It seems that some PlayReady implementations return their XML-based CDM\r\n     * messages using UTF16, while others return them as UTF8.  Use this function\r\n     * to modify the message format to expect when parsing CDM messages.\r\n     *\r\n     * @param {string} format the expected message format.  Either \"utf-8\" or \"utf-16\".\r\n     * @throws {Error} Specified message format is not one of \"utf8\" or \"utf16\"\r\n     */\r\n    function setPlayReadyMessageFormat(format) {\r\n        if (format !== 'utf-8' && format !== 'utf-16') {\r\n            throw new Error('Specified message format is not one of \"utf-8\" or \"utf-16\"');\r\n        }\r\n        messageFormat = format;\r\n    }\r\n\r\n    /**\r\n     * Initialize the Key system with protection data\r\n     * @param {Object} protectionData the protection data\r\n     */\r\n    function init(protectionData) {\r\n        if (protectionData) {\r\n            protData = protectionData;\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Get Playready Custom data\r\n     */\r\n    function getCDMData() {\r\n        let customData,\r\n            cdmData,\r\n            cdmDataBytes,\r\n            i;\r\n\r\n        checkConfig();\r\n        if (protData && protData.cdmData) {\r\n            // Convert custom data into multibyte string\r\n            customData = [];\r\n            for (i = 0; i < protData.cdmData.length; ++i) {\r\n                customData.push(protData.cdmData.charCodeAt(i));\r\n                customData.push(0);\r\n            }\r\n            customData = String.fromCharCode.apply(null, customData);\r\n\r\n            // Encode in Base 64 the custom data string\r\n            customData = BASE64.encode(customData);\r\n\r\n            // Initialize CDM data with Base 64 encoded custom data\r\n            // (see https://msdn.microsoft.com/en-us/library/dn457361.aspx)\r\n            cdmData = PRCDMData.replace('%CUSTOMDATA%', customData);\r\n\r\n            // Convert CDM data into multibyte characters\r\n            cdmDataBytes = [];\r\n            for (i = 0; i < cdmData.length; ++i) {\r\n                cdmDataBytes.push(cdmData.charCodeAt(i));\r\n                cdmDataBytes.push(0);\r\n            }\r\n\r\n            return new Uint8Array(cdmDataBytes).buffer;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    function getSessionId(cp) {\r\n        // Get sessionId from protectionData or from manifest\r\n        if (protData && protData.sessionId) {\r\n            return protData.sessionId;\r\n        } else if (cp && cp.sessionId) {\r\n            return cp.sessionId;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    instance = {\r\n        uuid: uuid,\r\n        schemeIdURI: schemeIdURI,\r\n        systemString: systemString,\r\n        getInitData: getInitData,\r\n        getRequestHeadersFromMessage: getRequestHeadersFromMessage,\r\n        getLicenseRequestFromMessage: getLicenseRequestFromMessage,\r\n        getLicenseServerURLFromInitData: getLicenseServerURLFromInitData,\r\n        getCDMData: getCDMData,\r\n        getSessionId: getSessionId,\r\n        setPlayReadyMessageFormat: setPlayReadyMessageFormat,\r\n        init: init\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nKeySystemPlayReady.__dashjs_factory_name = 'KeySystemPlayReady';\r\nexport default dashjs.FactoryMaker.getSingletonFactory(KeySystemPlayReady); /* jshint ignore:line */\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport KeyPair from '../vo/KeyPair';\r\nimport ClearKeyKeySet from '../vo/ClearKeyKeySet';\r\nimport CommonEncryption from '../CommonEncryption';\r\nimport ProtectionConstants from '../../constants/ProtectionConstants';\r\n\r\nconst uuid = '1077efec-c0b2-4d02-ace3-3c1e52e2fb4b';\r\nconst systemString = ProtectionConstants.CLEARKEY_KEYSTEM_STRING;\r\nconst schemeIdURI = 'urn:uuid:' + uuid;\r\n\r\nfunction KeySystemW3CClearKey(config) {\r\n    let instance;\r\n    const BASE64 = config.BASE64;\r\n    const logger = config.debug.getLogger(instance);\r\n    /**\r\n     * Returns desired clearkeys (as specified in the CDM message) from protection data\r\n     *\r\n     * @param {ProtectionDataSet} protectionData the protection data\r\n     * @param {ArrayBuffer} message the ClearKey CDM message\r\n     * @returns {ClearKeyKeySet} the key set or null if none found\r\n     * @throws {Error} if a keyID specified in the CDM message was not found in the\r\n     * protection data\r\n     * @memberof KeySystemClearKey\r\n     */\r\n    function getClearKeysFromProtectionData(protectionData, message) {\r\n        let clearkeySet = null;\r\n        if (protectionData) {\r\n            // ClearKey is the only system that does not require a license server URL, so we\r\n            // handle it here when keys are specified in protection data\r\n            const jsonMsg = JSON.parse(String.fromCharCode.apply(null, new Uint8Array(message)));\r\n            const keyPairs = [];\r\n            for (let i = 0; i < jsonMsg.kids.length; i++) {\r\n                const clearkeyID = jsonMsg.kids[i];\r\n                const clearkey = (protectionData.clearkeys && protectionData.clearkeys.hasOwnProperty(clearkeyID)) ? protectionData.clearkeys[clearkeyID] : null;\r\n                if (!clearkey) {\r\n                    throw new Error('DRM: ClearKey keyID (' + clearkeyID + ') is not known!');\r\n                }\r\n                // KeyIDs from CDM are not base64 padded.  Keys may or may not be padded\r\n                keyPairs.push(new KeyPair(clearkeyID, clearkey));\r\n            }\r\n            clearkeySet = new ClearKeyKeySet(keyPairs);\r\n\r\n            logger.warn('ClearKey schemeIdURI is using W3C Common PSSH systemID (1077efec-c0b2-4d02-ace3-3c1e52e2fb4b) in Content Protection. See DASH-IF IOP v4.1 section 7.6.2.4');\r\n        }\r\n        return clearkeySet;\r\n    }\r\n\r\n    function getInitData(cp) {\r\n        return CommonEncryption.parseInitDataFromContentProtection(cp, BASE64);\r\n    }\r\n\r\n    function getRequestHeadersFromMessage(/*message*/) {\r\n        return null;\r\n    }\r\n\r\n    function getLicenseRequestFromMessage(message) {\r\n        return new Uint8Array(message);\r\n    }\r\n\r\n    function getLicenseServerURLFromInitData(/*initData*/) {\r\n        return null;\r\n    }\r\n\r\n    function getCDMData() {\r\n        return null;\r\n    }\r\n\r\n    function getSessionId(/*cp*/) {\r\n        return null;\r\n    }\r\n\r\n    instance = {\r\n        uuid: uuid,\r\n        schemeIdURI: schemeIdURI,\r\n        systemString: systemString,\r\n        getInitData: getInitData,\r\n        getRequestHeadersFromMessage: getRequestHeadersFromMessage,\r\n        getLicenseRequestFromMessage: getLicenseRequestFromMessage,\r\n        getLicenseServerURLFromInitData: getLicenseServerURLFromInitData,\r\n        getCDMData: getCDMData,\r\n        getSessionId: getSessionId,\r\n        getClearKeysFromProtectionData: getClearKeysFromProtectionData\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nKeySystemW3CClearKey.__dashjs_factory_name = 'KeySystemW3CClearKey';\r\nexport default dashjs.FactoryMaker.getSingletonFactory(KeySystemW3CClearKey); /* jshint ignore:line */\r\n\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n/**\r\n * Google Widevine DRM\r\n *\r\n * @class\r\n * @implements MediaPlayer.dependencies.protection.KeySystem\r\n */\r\n\r\nimport CommonEncryption from '../CommonEncryption';\r\nimport ProtectionConstants from '../../constants/ProtectionConstants';\r\n\r\nconst uuid = 'edef8ba9-79d6-4ace-a3c8-27dcd51d21ed';\r\nconst systemString = ProtectionConstants.WIDEVINE_KEYSTEM_STRING;\r\nconst schemeIdURI = 'urn:uuid:' + uuid;\r\n\r\nfunction KeySystemWidevine(config) {\r\n\r\n    config = config || {};\r\n    let instance;\r\n    let protData = null;\r\n    const BASE64 = config.BASE64;\r\n\r\n    function init(protectionData) {\r\n        if (protectionData) {\r\n            protData = protectionData;\r\n        }\r\n    }\r\n\r\n    function getInitData(cp) {\r\n        return CommonEncryption.parseInitDataFromContentProtection(cp, BASE64);\r\n    }\r\n\r\n    function getRequestHeadersFromMessage( /*message*/ ) {\r\n        return null;\r\n    }\r\n\r\n    function getLicenseRequestFromMessage(message) {\r\n        return new Uint8Array(message);\r\n    }\r\n\r\n    function getLicenseServerURLFromInitData( /*initData*/ ) {\r\n        return null;\r\n    }\r\n\r\n    function getCDMData() {\r\n        return null;\r\n    }\r\n\r\n    function getSessionId(cp) {\r\n        // Get sessionId from protectionData or from manifest\r\n        if (protData && protData.sessionId) {\r\n            return protData.sessionId;\r\n        } else if (cp && cp.sessionId) {\r\n            return cp.sessionId;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    instance = {\r\n        uuid: uuid,\r\n        schemeIdURI: schemeIdURI,\r\n        systemString: systemString,\r\n        init: init,\r\n        getInitData: getInitData,\r\n        getRequestHeadersFromMessage: getRequestHeadersFromMessage,\r\n        getLicenseRequestFromMessage: getLicenseRequestFromMessage,\r\n        getLicenseServerURLFromInitData: getLicenseServerURLFromInitData,\r\n        getCDMData: getCDMData,\r\n        getSessionId: getSessionId\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nKeySystemWidevine.__dashjs_factory_name = 'KeySystemWidevine';\r\nexport default dashjs.FactoryMaker.getSingletonFactory(KeySystemWidevine); /* jshint ignore:line */\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport ErrorsBase from '../../../core/errors/ErrorsBase';\r\n/**\r\n * @class\r\n */\r\nclass ProtectionErrors extends ErrorsBase {\r\n\tconstructor () {\r\n        super();\r\n\r\n        /**\r\n         *  Generid key Error code\r\n         */\r\n        this.MEDIA_KEYERR_CODE = 100;\r\n        /**\r\n         *  Error code returned by keyerror api for ProtectionModel_01b\r\n         */\r\n        this.MEDIA_KEYERR_UNKNOWN_CODE = 101;\r\n        /**\r\n         *  Error code returned by keyerror api for ProtectionModel_01b\r\n         */\r\n        this.MEDIA_KEYERR_CLIENT_CODE = 102;\r\n        /**\r\n         *  Error code returned by keyerror api for ProtectionModel_01b\r\n         */\r\n        this.MEDIA_KEYERR_SERVICE_CODE = 103;\r\n        /**\r\n         *  Error code returned by keyerror api for ProtectionModel_01b\r\n         */\r\n        this.MEDIA_KEYERR_OUTPUT_CODE = 104;\r\n        /**\r\n         *  Error code returned by keyerror api for ProtectionModel_01b\r\n         */\r\n        this.MEDIA_KEYERR_HARDWARECHANGE_CODE = 105;\r\n        /**\r\n         *  Error code returned by keyerror api for ProtectionModel_01b\r\n         */\r\n        this.MEDIA_KEYERR_DOMAIN_CODE = 106;\r\n\r\n        /**\r\n         *  Error code returned when an error occured in keymessage event for ProtectionModel_01b\r\n         */\r\n        this.MEDIA_KEY_MESSAGE_ERROR_CODE = 107;\r\n        /**\r\n         *  Error code returned when challenge is invalid in keymessage event (event triggered by CDM)\r\n         */\r\n        this.MEDIA_KEY_MESSAGE_NO_CHALLENGE_ERROR_CODE = 108;\r\n        /**\r\n         *  Error code returned when License server certificate has not been successfully updated\r\n         */\r\n        this.SERVER_CERTIFICATE_UPDATED_ERROR_CODE = 109;\r\n        /**\r\n         *  Error code returned when license validity has expired\r\n         */\r\n        this.KEY_STATUS_CHANGED_EXPIRED_ERROR_CODE = 110;\r\n        /**\r\n         *  Error code returned when no licenser url is defined\r\n         */\r\n        this.MEDIA_KEY_MESSAGE_NO_LICENSE_SERVER_URL_ERROR_CODE = 111;\r\n        /**\r\n         *  Error code returned when key system access is denied\r\n         */\r\n        this.KEY_SYSTEM_ACCESS_DENIED_ERROR_CODE = 112;\r\n        /**\r\n         *  Error code returned when key session has not been successfully created\r\n         */\r\n        this.KEY_SESSION_CREATED_ERROR_CODE = 113;\r\n        /**\r\n         *  Error code returned when license request failed after a keymessage event has been triggered\r\n         */\r\n        this.MEDIA_KEY_MESSAGE_LICENSER_ERROR_CODE = 114;\r\n\r\n        this.MEDIA_KEYERR_UNKNOWN_MESSAGE = 'An unspecified error occurred. This value is used for errors that don\\'t match any of the other codes.';\r\n        this.MEDIA_KEYERR_CLIENT_MESSAGE = 'The Key System could not be installed or updated.';\r\n        this.MEDIA_KEYERR_SERVICE_MESSAGE = 'The message passed into update indicated an error from the license service.';\r\n        this.MEDIA_KEYERR_OUTPUT_MESSAGE = 'There is no available output device with the required characteristics for the content protection system.';\r\n        this.MEDIA_KEYERR_HARDWARECHANGE_MESSAGE = 'A hardware configuration change caused a content protection error.';\r\n        this.MEDIA_KEYERR_DOMAIN_MESSAGE = 'An error occurred in a multi-device domain licensing configuration. The most common error is a failure to join the domain.';\r\n        this.MEDIA_KEY_MESSAGE_ERROR_MESSAGE = 'Multiple key sessions were creates with a user-agent that does not support sessionIDs!! Unpredictable behavior ahead!';\r\n        this.MEDIA_KEY_MESSAGE_NO_CHALLENGE_ERROR_MESSAGE = 'DRM: Empty key message from CDM';\r\n        this.SERVER_CERTIFICATE_UPDATED_ERROR_MESSAGE = 'Error updating server certificate -- ';\r\n        this.KEY_STATUS_CHANGED_EXPIRED_ERROR_MESSAGE = 'DRM: KeyStatusChange error! -- License has expired';\r\n        this.MEDIA_KEY_MESSAGE_NO_LICENSE_SERVER_URL_ERROR_MESSAGE = 'DRM: No license server URL specified!';\r\n        this.KEY_SYSTEM_ACCESS_DENIED_ERROR_MESSAGE = 'DRM: KeySystem Access Denied! -- ';\r\n        this.KEY_SESSION_CREATED_ERROR_MESSAGE = 'DRM: unable to create session! --';\r\n        this.MEDIA_KEY_MESSAGE_LICENSER_ERROR_MESSAGE = 'DRM: licenser error! --';\r\n    }\r\n}\r\n\r\nlet protectionErrors = new ProtectionErrors();\r\nexport default protectionErrors;","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n/**\r\n * Initial implementation of EME\r\n *\r\n * Implemented by Google Chrome prior to v36\r\n *\r\n * @implements ProtectionModel\r\n * @class\r\n */\r\nimport ProtectionKeyController from '../controllers/ProtectionKeyController';\r\nimport NeedKey from '../vo/NeedKey';\r\nimport DashJSError from '../../vo/DashJSError';\r\nimport KeyMessage from '../vo/KeyMessage';\r\nimport KeySystemConfiguration from '../vo/KeySystemConfiguration';\r\nimport KeySystemAccess from '../vo/KeySystemAccess';\r\nimport ProtectionErrors from '../errors/ProtectionErrors';\r\n\r\nfunction ProtectionModel_01b(config) {\r\n\r\n    config = config || {};\r\n    const context = this.context;\r\n    const eventBus = config.eventBus;//Need to pass in here so we can use same instance since this is optional module\r\n    const events = config.events;\r\n    const debug = config.debug;\r\n    const api = config.api;\r\n    const errHandler = config.errHandler;\r\n\r\n    let instance,\r\n        logger,\r\n        videoElement,\r\n        keySystem,\r\n        protectionKeyController,\r\n\r\n        // With this version of the EME APIs, sessionIDs are not assigned to\r\n        // sessions until the first key message is received.  We are assuming\r\n        // that in the case of multiple sessions, key messages will be received\r\n        // in the order that generateKeyRequest() is called.\r\n        // Holding spot for newly-created sessions until we determine whether or\r\n        // not the CDM supports sessionIDs\r\n        pendingSessions,\r\n\r\n        // List of sessions that have been initialized.  Only the first position will\r\n        // be used in the case that the CDM does not support sessionIDs\r\n        sessions,\r\n\r\n        // Not all CDMs support the notion of sessionIDs.  Without sessionIDs\r\n        // there is no way for us to differentiate between sessions, therefore\r\n        // we must only allow a single session.  Once we receive the first key\r\n        // message we can set this flag to determine if more sessions are allowed\r\n        moreSessionsAllowed,\r\n\r\n        // This is our main event handler for all desired HTMLMediaElement events\r\n        // related to EME.  These events are translated into our API-independent\r\n        // versions of the same events\r\n        eventHandler;\r\n\r\n    function setup() {\r\n        logger = debug.getLogger(instance);\r\n        videoElement = null;\r\n        keySystem = null;\r\n        pendingSessions = [];\r\n        sessions = [];\r\n        protectionKeyController = ProtectionKeyController(context).getInstance();\r\n        eventHandler = createEventHandler();\r\n    }\r\n\r\n    function reset() {\r\n        if (videoElement) {\r\n            removeEventListeners();\r\n        }\r\n        for (let i = 0; i < sessions.length; i++) {\r\n            closeKeySession(sessions[i]);\r\n        }\r\n        eventBus.trigger(events.TEARDOWN_COMPLETE);\r\n    }\r\n\r\n    function getKeySystem() {\r\n        return keySystem;\r\n    }\r\n\r\n    function getAllInitData() {\r\n        const retVal = [];\r\n        for (let i = 0; i < pendingSessions.length; i++) {\r\n            retVal.push(pendingSessions[i].initData);\r\n        }\r\n        for (let i = 0; i < sessions.length; i++) {\r\n            retVal.push(sessions[i].initData);\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    function requestKeySystemAccess(ksConfigurations) {\r\n        let ve = videoElement;\r\n        if (!ve) { // Must have a video element to do this capability tests\r\n            ve = document.createElement('video');\r\n        }\r\n\r\n        // Try key systems in order, first one with supported key system configuration\r\n        // is used\r\n        let found = false;\r\n        for (let ksIdx = 0; ksIdx < ksConfigurations.length; ksIdx++) {\r\n            const systemString = ksConfigurations[ksIdx].ks.systemString;\r\n            const configs = ksConfigurations[ksIdx].configs;\r\n            let supportedAudio = null;\r\n            let supportedVideo = null;\r\n\r\n            // Try key system configs in order, first one with supported audio/video\r\n            // is used\r\n            for (let configIdx = 0; configIdx < configs.length; configIdx++) {\r\n                //let audios = configs[configIdx].audioCapabilities;\r\n                const videos = configs[configIdx].videoCapabilities;\r\n                // Look for supported video container/codecs\r\n                if (videos && videos.length !== 0) {\r\n                    supportedVideo = []; // Indicates that we have a requested video config\r\n                    for (let videoIdx = 0; videoIdx < videos.length; videoIdx++) {\r\n                        if (ve.canPlayType(videos[videoIdx].contentType, systemString) !== '') {\r\n                            supportedVideo.push(videos[videoIdx]);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // No supported audio or video in this configuration OR we have\r\n                // requested audio or video configuration that is not supported\r\n                if ((!supportedAudio && !supportedVideo) ||\r\n                    (supportedAudio && supportedAudio.length === 0) ||\r\n                    (supportedVideo && supportedVideo.length === 0)) {\r\n                    continue;\r\n                }\r\n\r\n                // This configuration is supported\r\n                found = true;\r\n                const ksConfig = new KeySystemConfiguration(supportedAudio, supportedVideo);\r\n                const ks = protectionKeyController.getKeySystemBySystemString(systemString);\r\n                eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, { data: new KeySystemAccess(ks, ksConfig) });\r\n                break;\r\n            }\r\n        }\r\n        if (!found) {\r\n            eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, { error: 'Key system access denied! -- No valid audio/video content configurations detected!' });\r\n        }\r\n    }\r\n\r\n    function selectKeySystem(keySystemAccess) {\r\n        keySystem = keySystemAccess.keySystem;\r\n        eventBus.trigger(events.INTERNAL_KEY_SYSTEM_SELECTED);\r\n    }\r\n\r\n    function setMediaElement(mediaElement) {\r\n        if (videoElement === mediaElement) {\r\n            return;\r\n        }\r\n\r\n        // Replacing the previous element\r\n        if (videoElement) {\r\n            removeEventListeners();\r\n\r\n            // Close any open sessions - avoids memory leak on LG webOS 2016/2017 TVs\r\n            for (var i = 0; i < sessions.length; i++) {\r\n                closeKeySession(sessions[i]);\r\n            }\r\n            sessions = [];\r\n        }\r\n\r\n        videoElement = mediaElement;\r\n\r\n        // Only if we are not detaching from the existing element\r\n        if (videoElement) {\r\n            videoElement.addEventListener(api.keyerror, eventHandler);\r\n            videoElement.addEventListener(api.needkey, eventHandler);\r\n            videoElement.addEventListener(api.keymessage, eventHandler);\r\n            videoElement.addEventListener(api.keyadded, eventHandler);\r\n            eventBus.trigger(events.VIDEO_ELEMENT_SELECTED);\r\n        }\r\n    }\r\n\r\n    function createKeySession(initData /*, protData, keySystemType */) {\r\n        if (!keySystem) {\r\n            throw new Error('Can not create sessions until you have selected a key system');\r\n        }\r\n\r\n        // Determine if creating a new session is allowed\r\n        if (moreSessionsAllowed || sessions.length === 0) {\r\n            const newSession = { // Implements SessionToken\r\n                sessionID: null,\r\n                initData: initData,\r\n                getSessionID: function () {\r\n                    return this.sessionID;\r\n                },\r\n\r\n                getExpirationTime: function () {\r\n                    return NaN;\r\n                },\r\n\r\n                getSessionType: function () {\r\n                    return 'temporary';\r\n                }\r\n            };\r\n            pendingSessions.push(newSession);\r\n\r\n            // Send our request to the CDM\r\n            videoElement[api.generateKeyRequest](keySystem.systemString, new Uint8Array(initData));\r\n\r\n            return newSession;\r\n\r\n        } else {\r\n            throw new Error('Multiple sessions not allowed!');\r\n        }\r\n\r\n    }\r\n\r\n    function updateKeySession(sessionToken, message) {\r\n        const sessionID = sessionToken.sessionID;\r\n        if (!protectionKeyController.isClearKey(keySystem)) {\r\n            // Send our request to the CDM\r\n            videoElement[api.addKey](keySystem.systemString,\r\n                new Uint8Array(message), new Uint8Array(sessionToken.initData), sessionID);\r\n        } else {\r\n            // For clearkey, message is a ClearKeyKeySet\r\n            for (let i = 0; i < message.keyPairs.length; i++) {\r\n                videoElement[api.addKey](keySystem.systemString,\r\n                    message.keyPairs[i].key, message.keyPairs[i].keyID, sessionID);\r\n            }\r\n        }\r\n    }\r\n\r\n    function closeKeySession(sessionToken) {\r\n        // Send our request to the CDM\r\n        try {\r\n            videoElement[api.cancelKeyRequest](keySystem.systemString, sessionToken.sessionID);\r\n        } catch (error) {\r\n            eventBus.trigger(events.KEY_SESSION_CLOSED, { data: null, error: 'Error closing session (' + sessionToken.sessionID + ') ' + error.message });\r\n        }\r\n    }\r\n\r\n    function setServerCertificate(/*serverCertificate*/) { /* Not supported */ }\r\n    function loadKeySession(/*sessionID*/) { /* Not supported */ }\r\n    function removeKeySession(/*sessionToken*/) { /* Not supported */ }\r\n\r\n    function createEventHandler() {\r\n        return {\r\n            handleEvent: function (event) {\r\n                let sessionToken = null;\r\n                switch (event.type) {\r\n                    case api.needkey:\r\n                        let initData = ArrayBuffer.isView(event.initData) ? event.initData.buffer : event.initData;\r\n                        eventBus.trigger(events.NEED_KEY, { key: new NeedKey(initData, 'cenc') });\r\n                        break;\r\n\r\n                    case api.keyerror:\r\n                        sessionToken = findSessionByID(sessions, event.sessionId);\r\n                        if (!sessionToken) {\r\n                            sessionToken = findSessionByID(pendingSessions, event.sessionId);\r\n                        }\r\n\r\n                        if (sessionToken) {\r\n                            let code = ProtectionErrors.MEDIA_KEYERR_CODE;\r\n                            let msg = '';\r\n                            switch (event.errorCode.code) {\r\n                                case 1:\r\n                                    code = ProtectionErrors.MEDIA_KEYERR_UNKNOWN_CODE;\r\n                                    msg += 'MEDIA_KEYERR_UNKNOWN - ' + ProtectionErrors.MEDIA_KEYERR_UNKNOWN_MESSAGE;\r\n                                    break;\r\n                                case 2:\r\n                                    code = ProtectionErrors.MEDIA_KEYERR_CLIENT_CODE;\r\n                                    msg += 'MEDIA_KEYERR_CLIENT - ' + ProtectionErrors.MEDIA_KEYERR_CLIENT_MESSAGE;\r\n                                    break;\r\n                                case 3:\r\n                                    code = ProtectionErrors.MEDIA_KEYERR_SERVICE_CODE;\r\n                                    msg += 'MEDIA_KEYERR_SERVICE - ' + ProtectionErrors.MEDIA_KEYERR_SERVICE_MESSAGE;\r\n                                    break;\r\n                                case 4:\r\n                                    code = ProtectionErrors.MEDIA_KEYERR_OUTPUT_CODE;\r\n                                    msg += 'MEDIA_KEYERR_OUTPUT - ' + ProtectionErrors.MEDIA_KEYERR_OUTPUT_MESSAGE;\r\n                                    break;\r\n                                case 5:\r\n                                    code = ProtectionErrors.MEDIA_KEYERR_HARDWARECHANGE_CODE;\r\n                                    msg += 'MEDIA_KEYERR_HARDWARECHANGE - ' + ProtectionErrors.MEDIA_KEYERR_HARDWARECHANGE_MESSAGE;\r\n                                    break;\r\n                                case 6:\r\n                                    code = ProtectionErrors.MEDIA_KEYERR_DOMAIN_CODE;\r\n                                    msg += 'MEDIA_KEYERR_DOMAIN - ' + ProtectionErrors.MEDIA_KEYERR_DOMAIN_MESSAGE;\r\n                                    break;\r\n                            }\r\n                            msg += '  System Code = ' + event.systemCode;\r\n                            // TODO: Build error string based on key error\r\n                            eventBus.trigger(events.KEY_ERROR, { data: new DashJSError(code, msg, sessionToken) });\r\n                        } else {\r\n                            logger.error('No session token found for key error');\r\n                        }\r\n                        break;\r\n\r\n                    case api.keyadded:\r\n                        sessionToken = findSessionByID(sessions, event.sessionId);\r\n                        if (!sessionToken) {\r\n                            sessionToken = findSessionByID(pendingSessions, event.sessionId);\r\n                        }\r\n\r\n                        if (sessionToken) {\r\n                            logger.debug('DRM: Key added.');\r\n                            eventBus.trigger(events.KEY_ADDED, { data: sessionToken });//TODO not sure anything is using sessionToken? why there?\r\n                        } else {\r\n                            logger.debug('No session token found for key added');\r\n                        }\r\n                        break;\r\n\r\n                    case api.keymessage:\r\n                        // If this CDM does not support session IDs, we will be limited\r\n                        // to a single session\r\n                        moreSessionsAllowed = (event.sessionId !== null) && (event.sessionId !== undefined);\r\n\r\n                        // SessionIDs supported\r\n                        if (moreSessionsAllowed) {\r\n                            // Attempt to find an uninitialized token with this sessionID\r\n                            sessionToken = findSessionByID(sessions, event.sessionId);\r\n                            if (!sessionToken && pendingSessions.length > 0) {\r\n\r\n                                // This is the first message for our latest session, so set the\r\n                                // sessionID and add it to our list\r\n                                sessionToken = pendingSessions.shift();\r\n                                sessions.push(sessionToken);\r\n                                sessionToken.sessionID = event.sessionId;\r\n\r\n                                eventBus.trigger(events.KEY_SESSION_CREATED, { data: sessionToken });\r\n                            }\r\n                        } else if (pendingSessions.length > 0) { // SessionIDs not supported\r\n                            sessionToken = pendingSessions.shift();\r\n                            sessions.push(sessionToken);\r\n\r\n                            if (pendingSessions.length !== 0) {\r\n                                errHandler.error(new DashJSError(ProtectionErrors.MEDIA_KEY_MESSAGE_ERROR_CODE, ProtectionErrors.MEDIA_KEY_MESSAGE_ERROR_MESSAGE));\r\n                            }\r\n                        }\r\n\r\n                        if (sessionToken) {\r\n                            let message = ArrayBuffer.isView(event.message) ? event.message.buffer : event.message;\r\n\r\n                            // For ClearKey, the spec mandates that you pass this message to the\r\n                            // addKey method, so we always save it to the token since there is no\r\n                            // way to tell which key system is in use\r\n                            sessionToken.keyMessage = message;\r\n                            eventBus.trigger(events.INTERNAL_KEY_MESSAGE, { data: new KeyMessage(sessionToken, message, event.defaultURL) });\r\n\r\n                        } else {\r\n                            logger.warn('No session token found for key message');\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        };\r\n    }\r\n\r\n\r\n    /**\r\n     * Helper function to retrieve the stored session token based on a given\r\n     * sessionID value\r\n     *\r\n     * @param {Array} sessionArray - the array of sessions to search\r\n     * @param {*} sessionID - the sessionID to search for\r\n     * @returns {*} the session token with the given sessionID\r\n     */\r\n    function findSessionByID(sessionArray, sessionID) {\r\n        if (!sessionID || !sessionArray) {\r\n            return null;\r\n        } else {\r\n            const len = sessionArray.length;\r\n            for (let i = 0; i < len; i++) {\r\n                if (sessionArray[i].sessionID == sessionID) {\r\n                    return sessionArray[i];\r\n                }\r\n            }\r\n            return null;\r\n        }\r\n    }\r\n\r\n    function removeEventListeners() {\r\n        videoElement.removeEventListener(api.keyerror, eventHandler);\r\n        videoElement.removeEventListener(api.needkey, eventHandler);\r\n        videoElement.removeEventListener(api.keymessage, eventHandler);\r\n        videoElement.removeEventListener(api.keyadded, eventHandler);\r\n    }\r\n\r\n    instance = {\r\n        getAllInitData: getAllInitData,\r\n        requestKeySystemAccess: requestKeySystemAccess,\r\n        getKeySystem: getKeySystem,\r\n        selectKeySystem: selectKeySystem,\r\n        setMediaElement: setMediaElement,\r\n        createKeySession: createKeySession,\r\n        updateKeySession: updateKeySession,\r\n        closeKeySession: closeKeySession,\r\n        setServerCertificate: setServerCertificate,\r\n        loadKeySession: loadKeySession,\r\n        removeKeySession: removeKeySession,\r\n        stop: reset,\r\n        reset: reset\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\nProtectionModel_01b.__dashjs_factory_name = 'ProtectionModel_01b';\r\nexport default dashjs.FactoryMaker.getClassFactory(ProtectionModel_01b); /* jshint ignore:line */\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n/**\r\n * Most recent EME implementation\r\n *\r\n * Implemented by Google Chrome v36+ (Windows, OSX, Linux)\r\n *\r\n * @implements ProtectionModel\r\n * @class\r\n */\r\nimport ProtectionKeyController from '../controllers/ProtectionKeyController';\r\nimport NeedKey from '../vo/NeedKey';\r\nimport ProtectionErrors from '../errors/ProtectionErrors';\r\nimport DashJSError from '../../vo/DashJSError';\r\nimport KeyMessage from '../vo/KeyMessage';\r\nimport KeySystemAccess from '../vo/KeySystemAccess';\r\nimport ProtectionConstants from '../../constants/ProtectionConstants';\r\n\r\nfunction ProtectionModel_21Jan2015(config) {\r\n\r\n    config = config || {};\r\n    const context = this.context;\r\n    const eventBus = config.eventBus;//Need to pass in here so we can use same instance since this is optional module\r\n    const events = config.events;\r\n    const debug = config.debug;\r\n\r\n    let instance,\r\n        logger,\r\n        keySystem,\r\n        videoElement,\r\n        mediaKeys,\r\n        sessions,\r\n        eventHandler,\r\n        protectionKeyController;\r\n\r\n    function setup() {\r\n        logger = debug.getLogger(instance);\r\n        keySystem = null;\r\n        videoElement = null;\r\n        mediaKeys = null;\r\n        sessions = [];\r\n        protectionKeyController = ProtectionKeyController(context).getInstance();\r\n        eventHandler = createEventHandler();\r\n    }\r\n\r\n    function reset() {\r\n        const numSessions = sessions.length;\r\n        let session;\r\n\r\n        if (numSessions !== 0) {\r\n            // Called when we are done closing a session.  Success or fail\r\n            const done = function (session) {\r\n                removeSession(session);\r\n                if (sessions.length === 0) {\r\n                    if (videoElement) {\r\n                        videoElement.removeEventListener('encrypted', eventHandler);\r\n                        videoElement.setMediaKeys(null).then(function () {\r\n                            eventBus.trigger(events.TEARDOWN_COMPLETE);\r\n                        });\r\n                    } else {\r\n                        eventBus.trigger(events.TEARDOWN_COMPLETE);\r\n                    }\r\n                }\r\n            };\r\n            for (let i = 0; i < numSessions; i++) {\r\n                session = sessions[i];\r\n                (function (s) {\r\n                    // Override closed promise resolver\r\n                    session.session.closed.then(function () {\r\n                        done(s);\r\n                    });\r\n                    // Close the session and handle errors, otherwise promise\r\n                    // resolver above will be called\r\n                    closeKeySessionInternal(session).catch(function () {\r\n                        done(s);\r\n                    });\r\n\r\n                })(session);\r\n            }\r\n        } else {\r\n            eventBus.trigger(events.TEARDOWN_COMPLETE);\r\n        }\r\n    }\r\n\r\n    function stop() {\r\n        // Close and remove not usable sessions\r\n        let session;\r\n        for (let i = 0; i < sessions.length; i++) {\r\n            session = sessions[i];\r\n            if (!session.getUsable()) {\r\n                closeKeySessionInternal(session).catch(function () {\r\n                    removeSession(session);\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    function getKeySystem() {\r\n        return keySystem;\r\n    }\r\n\r\n    function getAllInitData() {\r\n        const retVal = [];\r\n        for (let i = 0; i < sessions.length; i++) {\r\n            if (sessions[i].initData) {\r\n                retVal.push(sessions[i].initData);\r\n            }\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    function requestKeySystemAccess(ksConfigurations) {\r\n        requestKeySystemAccessInternal(ksConfigurations, 0);\r\n    }\r\n\r\n    function selectKeySystem(keySystemAccess) {\r\n        keySystemAccess.mksa.createMediaKeys().then(function (mkeys) {\r\n            keySystem = keySystemAccess.keySystem;\r\n            mediaKeys = mkeys;\r\n            if (videoElement) {\r\n                videoElement.setMediaKeys(mediaKeys).then(function () {\r\n                    eventBus.trigger(events.INTERNAL_KEY_SYSTEM_SELECTED);\r\n                });\r\n            } else {\r\n                eventBus.trigger(events.INTERNAL_KEY_SYSTEM_SELECTED);\r\n            }\r\n\r\n        }).catch(function () {\r\n            eventBus.trigger(events.INTERNAL_KEY_SYSTEM_SELECTED, { error: 'Error selecting keys system (' + keySystemAccess.keySystem.systemString + ')! Could not create MediaKeys -- TODO' });\r\n        });\r\n    }\r\n\r\n    function setMediaElement(mediaElement) {\r\n        if (videoElement === mediaElement)\r\n            return;\r\n\r\n        // Replacing the previous element\r\n        if (videoElement) {\r\n            videoElement.removeEventListener('encrypted', eventHandler);\r\n            if (videoElement.setMediaKeys) {\r\n                videoElement.setMediaKeys(null);\r\n            }\r\n        }\r\n\r\n        videoElement = mediaElement;\r\n\r\n        // Only if we are not detaching from the existing element\r\n        if (videoElement) {\r\n            videoElement.addEventListener('encrypted', eventHandler);\r\n            if (videoElement.setMediaKeys && mediaKeys) {\r\n                videoElement.setMediaKeys(mediaKeys);\r\n            }\r\n        }\r\n    }\r\n\r\n    function setServerCertificate(serverCertificate) {\r\n        if (!keySystem || !mediaKeys) {\r\n            throw new Error('Can not set server certificate until you have selected a key system');\r\n        }\r\n        mediaKeys.setServerCertificate(serverCertificate).then(function () {\r\n            logger.info('DRM: License server certificate successfully updated.');\r\n            eventBus.trigger(events.SERVER_CERTIFICATE_UPDATED);\r\n        }).catch(function (error) {\r\n            eventBus.trigger(events.SERVER_CERTIFICATE_UPDATED, { error: new DashJSError(ProtectionErrors.SERVER_CERTIFICATE_UPDATED_ERROR_CODE, ProtectionErrors.SERVER_CERTIFICATE_UPDATED_ERROR_MESSAGE + error.name) });\r\n        });\r\n    }\r\n\r\n    function createKeySession(initData, protData, sessionType) {\r\n        if (!keySystem || !mediaKeys) {\r\n            throw new Error('Can not create sessions until you have selected a key system');\r\n        }\r\n\r\n        const session = mediaKeys.createSession(sessionType);\r\n        const sessionToken = createSessionToken(session, initData, sessionType);\r\n        const ks = this.getKeySystem();\r\n\r\n        // Generate initial key request.\r\n        // keyids type is used for clearkey when keys are provided directly in the protection data and then request to a license server is not needed\r\n        const dataType = ks.systemString === ProtectionConstants.CLEARKEY_KEYSTEM_STRING && (initData ||  (protData && protData.clearkeys)) ? 'keyids' : 'cenc';\r\n        session.generateRequest(dataType, initData).then(function () {\r\n            logger.debug('DRM: Session created.  SessionID = ' + sessionToken.getSessionID());\r\n            eventBus.trigger(events.KEY_SESSION_CREATED, { data: sessionToken });\r\n        }).catch(function (/*error*/) {\r\n            // TODO: Better error string\r\n            removeSession(sessionToken);\r\n            // 20190511 disable event trigger when generationrequest failed.\r\n            // because on some case, even media file decryption success, total video decryption failed because of pssh data type error.\r\n            //eventBus.trigger(events.KEY_SESSION_CREATED, {\r\n            //    data: null,\r\n            //    error: new DashJSError(ProtectionErrors.KEY_SESSION_CREATED_ERROR_CODE, ProtectionErrors.KEY_SESSION_CREATED_ERROR_MESSAGE + 'Error generating key request -- ' + error.name)\r\n            //});\r\n        });\r\n    }\r\n\r\n    function updateKeySession(sessionToken, message) {\r\n        const session = sessionToken.session;\r\n\r\n        // Send our request to the key session\r\n        if (protectionKeyController.isClearKey(keySystem)) {\r\n            message = message.toJWK();\r\n        }\r\n        session.update(message).catch(function (error) {\r\n            eventBus.trigger(events.KEY_ERROR, { data: new DashJSError(ProtectionErrors.MEDIA_KEYERR_CODE, 'Error sending update() message! ' + error.name, sessionToken) });\r\n        });\r\n    }\r\n\r\n    function loadKeySession(sessionID, initData, sessionType) {\r\n        if (!keySystem || !mediaKeys) {\r\n            throw new Error('Can not load sessions until you have selected a key system');\r\n        }\r\n\r\n        // Check if session Id is not already loaded or loading\r\n        for (let i = 0; i < sessions.length; i++) {\r\n            if (sessionID === sessions[i].sessionId) {\r\n                logger.warn('DRM: Ignoring session ID because we have already seen it!');\r\n                return;\r\n            }\r\n        }\r\n\r\n        const session = mediaKeys.createSession(sessionType);\r\n        const sessionToken = createSessionToken(session, initData, sessionType, sessionID);\r\n\r\n        // Load persisted session data into our newly created session object\r\n        session.load(sessionID).then(function (success) {\r\n            if (success) {\r\n                logger.debug('DRM: Session loaded.  SessionID = ' + sessionToken.getSessionID());\r\n                eventBus.trigger(events.KEY_SESSION_CREATED, { data: sessionToken });\r\n            } else {\r\n                removeSession(sessionToken);\r\n                eventBus.trigger(events.KEY_SESSION_CREATED, {\r\n                    data: null,\r\n                    error: new DashJSError(ProtectionErrors.KEY_SESSION_CREATED_ERROR_CODE, ProtectionErrors.KEY_SESSION_CREATED_ERROR_MESSAGE + 'Could not load session! Invalid Session ID (' + sessionID + ')')\r\n                });\r\n            }\r\n        }).catch(function (error) {\r\n            removeSession(sessionToken);\r\n            eventBus.trigger(events.KEY_SESSION_CREATED, {\r\n                data: null,\r\n                error: new DashJSError(ProtectionErrors.KEY_SESSION_CREATED_ERROR_CODE, ProtectionErrors.KEY_SESSION_CREATED_ERROR_MESSAGE + 'Could not load session (' + sessionID + ')! ' + error.name)\r\n            });\r\n        });\r\n    }\r\n\r\n    function removeKeySession(sessionToken) {\r\n        const session = sessionToken.session;\r\n\r\n        session.remove().then(function () {\r\n            logger.debug('DRM: Session removed.  SessionID = ' + sessionToken.getSessionID());\r\n            eventBus.trigger(events.KEY_SESSION_REMOVED, { data: sessionToken.getSessionID() });\r\n        }, function (error) {\r\n            eventBus.trigger(events.KEY_SESSION_REMOVED, {\r\n                data: null,\r\n                error: 'Error removing session (' + sessionToken.getSessionID() + '). ' + error.name\r\n            });\r\n\r\n        });\r\n    }\r\n\r\n    function closeKeySession(sessionToken) {\r\n        // Send our request to the key session\r\n        closeKeySessionInternal(sessionToken).catch(function (error) {\r\n            removeSession(sessionToken);\r\n            eventBus.trigger(events.KEY_SESSION_CLOSED, {\r\n                data: null,\r\n                error: 'Error closing session (' + sessionToken.getSessionID() + ') ' + error.name\r\n            });\r\n        });\r\n    }\r\n\r\n    function requestKeySystemAccessInternal(ksConfigurations, idx) {\r\n\r\n        if (navigator.requestMediaKeySystemAccess === undefined ||\r\n            typeof navigator.requestMediaKeySystemAccess !== 'function') {\r\n            eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, { error: 'Insecure origins are not allowed' });\r\n            return;\r\n        }\r\n\r\n        (function (i) {\r\n            const keySystem = ksConfigurations[i].ks;\r\n            const configs = ksConfigurations[i].configs;\r\n            let systemString = keySystem.systemString;\r\n\r\n            // PATCH to support persistent licenses on Edge browser (see issue #2658)\r\n            if (systemString === ProtectionConstants.PLAYREADY_KEYSTEM_STRING && configs[0].persistentState === 'required') {\r\n                systemString += '.recommendation';\r\n            }\r\n\r\n            navigator.requestMediaKeySystemAccess(systemString, configs).then(function (mediaKeySystemAccess) {\r\n                // Chrome 40 does not currently implement MediaKeySystemAccess.getConfiguration()\r\n                const configuration = (typeof mediaKeySystemAccess.getConfiguration === 'function') ?\r\n                    mediaKeySystemAccess.getConfiguration() : null;\r\n                const keySystemAccess = new KeySystemAccess(keySystem, configuration);\r\n                keySystemAccess.mksa = mediaKeySystemAccess;\r\n                eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, { data: keySystemAccess });\r\n\r\n            }).catch(function (error) {\r\n                if (++i < ksConfigurations.length) {\r\n                    requestKeySystemAccessInternal(ksConfigurations, i);\r\n                } else {\r\n                    eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, { error: 'Key system access denied! ' + error.message });\r\n                }\r\n            });\r\n        })(idx);\r\n    }\r\n\r\n    function closeKeySessionInternal(sessionToken) {\r\n        const session = sessionToken.session;\r\n\r\n        // Remove event listeners\r\n        session.removeEventListener('keystatuseschange', sessionToken);\r\n        session.removeEventListener('message', sessionToken);\r\n\r\n        // Send our request to the key session\r\n        return session.close();\r\n    }\r\n\r\n    // This is our main event handler for all desired HTMLMediaElement events\r\n    // related to EME.  These events are translated into our API-independent\r\n    // versions of the same events\r\n    function createEventHandler() {\r\n        return {\r\n            handleEvent: function (event) {\r\n                switch (event.type) {\r\n                    case 'encrypted':\r\n                        if (event.initData) {\r\n                            let initData = ArrayBuffer.isView(event.initData) ? event.initData.buffer : event.initData;\r\n                            eventBus.trigger(events.NEED_KEY, { key: new NeedKey(initData, event.initDataType) });\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        };\r\n    }\r\n\r\n    function removeSession(token) {\r\n        // Remove from our session list\r\n        for (let i = 0; i < sessions.length; i++) {\r\n            if (sessions[i] === token) {\r\n                sessions.splice(i, 1);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function parseKeyStatus(args) {\r\n        // Edge and Chrome implement different version of keystatues, param are not on same order\r\n        let status, keyId;\r\n        if (args && args.length > 0) {\r\n            if (args[0]) {\r\n                if (typeof args[0] === 'string') {\r\n                    status = args[0];\r\n                } else {\r\n                    keyId = args[0];\r\n                }\r\n            }\r\n\r\n            if (args[1]) {\r\n                if (typeof args[1] === 'string') {\r\n                    status = args[1];\r\n                } else {\r\n                    keyId = args[1];\r\n                }\r\n            }\r\n        }\r\n        return {\r\n            status: status,\r\n            keyId: keyId\r\n        };\r\n    }\r\n\r\n    // Function to create our session token objects which manage the EME\r\n    // MediaKeySession and session-specific event handler\r\n    function createSessionToken(session, initData, sessionType, sessionID) {\r\n        const token = { // Implements SessionToken\r\n            session: session,\r\n            initData: initData,\r\n            sessionId: sessionID,\r\n\r\n            // This is our main event handler for all desired MediaKeySession events\r\n            // These events are translated into our API-independent versions of the\r\n            // same events\r\n            handleEvent: function (event) {\r\n                switch (event.type) {\r\n                    case 'keystatuseschange':\r\n                        eventBus.trigger(events.KEY_STATUSES_CHANGED, { data: this });\r\n                        event.target.keyStatuses.forEach(function () {\r\n                            let keyStatus = parseKeyStatus(arguments);\r\n                            switch (keyStatus.status) {\r\n                                case 'expired':\r\n                                    eventBus.trigger(events.INTERNAL_KEY_STATUS_CHANGED, { error: new DashJSError(ProtectionErrors.KEY_STATUS_CHANGED_EXPIRED_ERROR_CODE, ProtectionErrors.KEY_STATUS_CHANGED_EXPIRED_ERROR_MESSAGE) });\r\n                                    break;\r\n                                default:\r\n                                    eventBus.trigger(events.INTERNAL_KEY_STATUS_CHANGED, keyStatus);\r\n                                    break;\r\n                            }\r\n                        });\r\n                        break;\r\n\r\n                    case 'message':\r\n                        let message = ArrayBuffer.isView(event.message) ? event.message.buffer : event.message;\r\n                        eventBus.trigger(events.INTERNAL_KEY_MESSAGE, { data: new KeyMessage(this, message, undefined, event.messageType) });\r\n                        break;\r\n                }\r\n            },\r\n\r\n            getSessionID: function () {\r\n                return session.sessionId;\r\n            },\r\n\r\n            getExpirationTime: function () {\r\n                return session.expiration;\r\n            },\r\n\r\n            getKeyStatuses: function () {\r\n                return session.keyStatuses;\r\n            },\r\n\r\n            getUsable: function () {\r\n                let usable = false;\r\n                session.keyStatuses.forEach(function () {\r\n                    let keyStatus = parseKeyStatus(arguments);\r\n                    if (keyStatus.status === 'usable') {\r\n                        usable = true;\r\n                    }\r\n                });\r\n                return usable;\r\n            },\r\n\r\n            getSessionType: function () {\r\n                return sessionType;\r\n            }\r\n        };\r\n\r\n        // Add all event listeners\r\n        session.addEventListener('keystatuseschange', token);\r\n        session.addEventListener('message', token);\r\n\r\n        // Register callback for session closed Promise\r\n        session.closed.then(function () {\r\n            removeSession(token);\r\n            logger.debug('DRM: Session closed.  SessionID = ' + token.getSessionID());\r\n            eventBus.trigger(events.KEY_SESSION_CLOSED, { data: token.getSessionID() });\r\n        });\r\n\r\n        // Add to our session list\r\n        sessions.push(token);\r\n\r\n        return token;\r\n    }\r\n\r\n    instance = {\r\n        getAllInitData: getAllInitData,\r\n        requestKeySystemAccess: requestKeySystemAccess,\r\n        getKeySystem: getKeySystem,\r\n        selectKeySystem: selectKeySystem,\r\n        setMediaElement: setMediaElement,\r\n        setServerCertificate: setServerCertificate,\r\n        createKeySession: createKeySession,\r\n        updateKeySession: updateKeySession,\r\n        loadKeySession: loadKeySession,\r\n        removeKeySession: removeKeySession,\r\n        closeKeySession: closeKeySession,\r\n        stop: stop,\r\n        reset: reset\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\nProtectionModel_21Jan2015.__dashjs_factory_name = 'ProtectionModel_21Jan2015';\r\nexport default dashjs.FactoryMaker.getClassFactory(ProtectionModel_21Jan2015); /* jshint ignore:line */\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n/**\r\n * Implementation of the EME APIs as of the 3 Feb 2014 state of the specification.\r\n *\r\n * Implemented by Internet Explorer 11 (Windows 8.1)\r\n *\r\n * @implements ProtectionModel\r\n * @class\r\n */\r\n\r\nimport ProtectionKeyController from '../controllers/ProtectionKeyController';\r\nimport NeedKey from '../vo/NeedKey';\r\nimport DashJSError from '../../vo/DashJSError';\r\nimport ProtectionErrors from '../errors/ProtectionErrors';\r\nimport KeyMessage from '../vo/KeyMessage';\r\nimport KeySystemConfiguration from '../vo/KeySystemConfiguration';\r\nimport KeySystemAccess from '../vo/KeySystemAccess';\r\n\r\nfunction ProtectionModel_3Feb2014(config) {\r\n\r\n    config = config || {};\r\n    const context = this.context;\r\n    const eventBus = config.eventBus;//Need to pass in here so we can use same instance since this is optional module\r\n    const events = config.events;\r\n    const debug = config.debug;\r\n    const api = config.api;\r\n\r\n    let instance,\r\n        logger,\r\n        videoElement,\r\n        keySystem,\r\n        mediaKeys,\r\n        keySystemAccess,\r\n        sessions,\r\n        eventHandler,\r\n        protectionKeyController;\r\n\r\n    function setup() {\r\n        logger = debug.getLogger(instance);\r\n        videoElement = null;\r\n        keySystem = null;\r\n        mediaKeys = null;\r\n        keySystemAccess = null;\r\n        sessions = [];\r\n        protectionKeyController = ProtectionKeyController(context).getInstance();\r\n        eventHandler = createEventHandler();\r\n    }\r\n\r\n    function reset() {\r\n        try {\r\n            for (let i = 0; i < sessions.length; i++) {\r\n                closeKeySession(sessions[i]);\r\n            }\r\n            if (videoElement) {\r\n                videoElement.removeEventListener(api.needkey, eventHandler);\r\n            }\r\n            eventBus.trigger(events.TEARDOWN_COMPLETE);\r\n        } catch (error) {\r\n            eventBus.trigger(events.TEARDOWN_COMPLETE, { error: 'Error tearing down key sessions and MediaKeys! -- ' + error.message });\r\n        }\r\n    }\r\n\r\n    function getKeySystem() {\r\n        return keySystem;\r\n    }\r\n\r\n    function getAllInitData() {\r\n        const retVal = [];\r\n        for (let i = 0; i < sessions.length; i++) {\r\n            retVal.push(sessions[i].initData);\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    function requestKeySystemAccess(ksConfigurations) {\r\n\r\n        // Try key systems in order, first one with supported key system configuration\r\n        // is used\r\n        let found = false;\r\n        for (let ksIdx = 0; ksIdx < ksConfigurations.length; ksIdx++) {\r\n            const systemString = ksConfigurations[ksIdx].ks.systemString;\r\n            const configs = ksConfigurations[ksIdx].configs;\r\n            let supportedAudio = null;\r\n            let supportedVideo = null;\r\n\r\n            // Try key system configs in order, first one with supported audio/video\r\n            // is used\r\n            for (let configIdx = 0; configIdx < configs.length; configIdx++) {\r\n                const audios = configs[configIdx].audioCapabilities;\r\n                const videos = configs[configIdx].videoCapabilities;\r\n\r\n                // Look for supported audio container/codecs\r\n                if (audios && audios.length !== 0) {\r\n                    supportedAudio = []; // Indicates that we have a requested audio config\r\n                    for (let audioIdx = 0; audioIdx < audios.length; audioIdx++) {\r\n                        if (window[api.MediaKeys].isTypeSupported(systemString, audios[audioIdx].contentType)) {\r\n                            supportedAudio.push(audios[audioIdx]);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // Look for supported video container/codecs\r\n                if (videos && videos.length !== 0) {\r\n                    supportedVideo = []; // Indicates that we have a requested video config\r\n                    for (let videoIdx = 0; videoIdx < videos.length; videoIdx++) {\r\n                        if (window[api.MediaKeys].isTypeSupported(systemString, videos[videoIdx].contentType)) {\r\n                            supportedVideo.push(videos[videoIdx]);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // No supported audio or video in this configuration OR we have\r\n                // requested audio or video configuration that is not supported\r\n                if ((!supportedAudio && !supportedVideo) ||\r\n                    (supportedAudio && supportedAudio.length === 0) ||\r\n                    (supportedVideo && supportedVideo.length === 0)) {\r\n                    continue;\r\n                }\r\n\r\n                // This configuration is supported\r\n                found = true;\r\n                const ksConfig = new KeySystemConfiguration(supportedAudio, supportedVideo);\r\n                const ks = protectionKeyController.getKeySystemBySystemString(systemString);\r\n                eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, { data: new KeySystemAccess(ks, ksConfig) });\r\n                break;\r\n            }\r\n        }\r\n        if (!found) {\r\n            eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, { error: 'Key system access denied! -- No valid audio/video content configurations detected!' });\r\n        }\r\n    }\r\n\r\n    function selectKeySystem(ksAccess) {\r\n        try {\r\n            mediaKeys = ksAccess.mediaKeys = new window[api.MediaKeys](ksAccess.keySystem.systemString);\r\n            keySystem = ksAccess.keySystem;\r\n            keySystemAccess = ksAccess;\r\n            if (videoElement) {\r\n                setMediaKeys();\r\n            }\r\n            eventBus.trigger(events.INTERNAL_KEY_SYSTEM_SELECTED);\r\n        } catch (error) {\r\n            eventBus.trigger(events.INTERNAL_KEY_SYSTEM_SELECTED, { error: 'Error selecting keys system (' + keySystem.systemString + ')! Could not create MediaKeys -- TODO' });\r\n        }\r\n    }\r\n\r\n    function setMediaElement(mediaElement) {\r\n        if (videoElement === mediaElement)\r\n            return;\r\n\r\n        // Replacing the previous element\r\n        if (videoElement) {\r\n            videoElement.removeEventListener(api.needkey, eventHandler);\r\n        }\r\n\r\n        videoElement = mediaElement;\r\n\r\n        // Only if we are not detaching from the existing element\r\n        if (videoElement) {\r\n            videoElement.addEventListener(api.needkey, eventHandler);\r\n            if (mediaKeys) {\r\n                setMediaKeys();\r\n            }\r\n        }\r\n    }\r\n\r\n    function createKeySession(initData, protData, sessionType, cdmData) {\r\n        if (!keySystem || !mediaKeys || !keySystemAccess) {\r\n            throw new Error('Can not create sessions until you have selected a key system');\r\n        }\r\n\r\n        // Use the first video capability for the contentType.\r\n        // TODO:  Not sure if there is a way to concatenate all capability data into a RFC6386-compatible format\r\n\r\n        // If player is trying to playback Audio only stream - don't error out.\r\n        let capabilities = null;\r\n\r\n        if (keySystemAccess.ksConfiguration.videoCapabilities && keySystemAccess.ksConfiguration.videoCapabilities.length > 0) {\r\n            capabilities = keySystemAccess.ksConfiguration.videoCapabilities[0];\r\n        }\r\n\r\n        if (capabilities === null && keySystemAccess.ksConfiguration.audioCapabilities && keySystemAccess.ksConfiguration.audioCapabilities.length > 0) {\r\n            capabilities = keySystemAccess.ksConfiguration.audioCapabilities[0];\r\n        }\r\n\r\n        if (capabilities === null) {\r\n            throw new Error('Can not create sessions for unknown content types.');\r\n        }\r\n\r\n        const contentType = capabilities.contentType;\r\n        const session = mediaKeys.createSession(contentType, new Uint8Array(initData), cdmData ? new Uint8Array(cdmData) : null);\r\n        const sessionToken = createSessionToken(session, initData);\r\n\r\n        // Add all event listeners\r\n        session.addEventListener(api.error, sessionToken);\r\n        session.addEventListener(api.message, sessionToken);\r\n        session.addEventListener(api.ready, sessionToken);\r\n        session.addEventListener(api.close, sessionToken);\r\n\r\n        // Add to our session list\r\n        sessions.push(sessionToken);\r\n        logger.debug('DRM: Session created.  SessionID = ' + sessionToken.getSessionID());\r\n        eventBus.trigger(events.KEY_SESSION_CREATED, { data: sessionToken });\r\n    }\r\n\r\n    function updateKeySession(sessionToken, message) {\r\n        const session = sessionToken.session;\r\n\r\n        if (!protectionKeyController.isClearKey(keySystem)) {\r\n            // Send our request to the key session\r\n            session.update(new Uint8Array(message));\r\n        } else {\r\n            // For clearkey, message is a ClearKeyKeySet\r\n            session.update(new Uint8Array(message.toJWK()));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Close the given session and release all associated keys.  Following\r\n     * this call, the sessionToken becomes invalid\r\n     *\r\n     * @param {Object} sessionToken - the session token\r\n     */\r\n    function closeKeySession(sessionToken) {\r\n        const session = sessionToken.session;\r\n\r\n        // Remove event listeners\r\n        session.removeEventListener(api.error, sessionToken);\r\n        session.removeEventListener(api.message, sessionToken);\r\n        session.removeEventListener(api.ready, sessionToken);\r\n        session.removeEventListener(api.close, sessionToken);\r\n\r\n        // Remove from our session list\r\n        for (let i = 0; i < sessions.length; i++) {\r\n            if (sessions[i] === sessionToken) {\r\n                sessions.splice(i, 1);\r\n                break;\r\n            }\r\n        }\r\n\r\n        // Send our request to the key session\r\n        session[api.release]();\r\n    }\r\n\r\n    function setServerCertificate(/*serverCertificate*/) { /* Not supported */ }\r\n    function loadKeySession(/*sessionID*/) { /* Not supported */ }\r\n    function removeKeySession(/*sessionToken*/) { /* Not supported */ }\r\n\r\n\r\n    function createEventHandler() {\r\n        return {\r\n            handleEvent: function (event) {\r\n                switch (event.type) {\r\n\r\n                    case api.needkey:\r\n                        if (event.initData) {\r\n                            const initData = ArrayBuffer.isView(event.initData) ? event.initData.buffer : event.initData;\r\n                            eventBus.trigger(events.NEED_KEY, { key: new NeedKey(initData, 'cenc') });\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        };\r\n    }\r\n\r\n\r\n    // IE11 does not let you set MediaKeys until it has entered a certain\r\n    // readyState, so we need this logic to ensure we don't set the keys\r\n    // too early\r\n    function setMediaKeys() {\r\n        let boundDoSetKeys = null;\r\n        const doSetKeys = function () {\r\n            videoElement.removeEventListener('loadedmetadata', boundDoSetKeys);\r\n            videoElement[api.setMediaKeys](mediaKeys);\r\n            eventBus.trigger(events.VIDEO_ELEMENT_SELECTED);\r\n        };\r\n        if (videoElement.readyState >= 1) {\r\n            doSetKeys();\r\n        } else {\r\n            boundDoSetKeys = doSetKeys.bind(this);\r\n            videoElement.addEventListener('loadedmetadata', boundDoSetKeys);\r\n        }\r\n\r\n    }\r\n\r\n    // Function to create our session token objects which manage the EME\r\n    // MediaKeySession and session-specific event handler\r\n    function createSessionToken(keySession, initData) {\r\n        return {\r\n            // Implements SessionToken\r\n            session: keySession,\r\n            initData: initData,\r\n\r\n            getSessionID: function () {\r\n                return this.session.sessionId;\r\n            },\r\n\r\n            getExpirationTime: function () {\r\n                return NaN;\r\n            },\r\n\r\n            getSessionType: function () {\r\n                return 'temporary';\r\n            },\r\n            // This is our main event handler for all desired MediaKeySession events\r\n            // These events are translated into our API-independent versions of the\r\n            // same events\r\n            handleEvent: function (event) {\r\n                switch (event.type) {\r\n                    case api.error:\r\n                        let errorStr = 'KeyError'; // TODO: Make better string from event\r\n                        eventBus.trigger(events.KEY_ERROR, { data: new DashJSError(ProtectionErrors.MEDIA_KEYERR_CODE, errorStr, this) });\r\n                        break;\r\n                    case api.message:\r\n                        let message = ArrayBuffer.isView(event.message) ? event.message.buffer : event.message;\r\n                        eventBus.trigger(events.INTERNAL_KEY_MESSAGE, { data: new KeyMessage(this, message, event.destinationURL) });\r\n                        break;\r\n                    case api.ready:\r\n                        logger.debug('DRM: Key added.');\r\n                        eventBus.trigger(events.KEY_ADDED);\r\n                        break;\r\n\r\n                    case api.close:\r\n                        logger.debug('DRM: Session closed.  SessionID = ' + this.getSessionID());\r\n                        eventBus.trigger(events.KEY_SESSION_CLOSED, { data: this.getSessionID() });\r\n                        break;\r\n                }\r\n            }\r\n        };\r\n    }\r\n\r\n    instance = {\r\n        getAllInitData: getAllInitData,\r\n        requestKeySystemAccess: requestKeySystemAccess,\r\n        getKeySystem: getKeySystem,\r\n        selectKeySystem: selectKeySystem,\r\n        setMediaElement: setMediaElement,\r\n        createKeySession: createKeySession,\r\n        updateKeySession: updateKeySession,\r\n        closeKeySession: closeKeySession,\r\n        setServerCertificate: setServerCertificate,\r\n        loadKeySession: loadKeySession,\r\n        removeKeySession: removeKeySession,\r\n        stop: reset,\r\n        reset: reset\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\nProtectionModel_3Feb2014.__dashjs_factory_name = 'ProtectionModel_3Feb2014';\r\nexport default dashjs.FactoryMaker.getClassFactory(ProtectionModel_3Feb2014); /* jshint ignore:line */\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n/**\r\n * CableLabs ClearKey license server implementation\r\n *\r\n * For testing purposes and evaluating potential uses for ClearKey, we have developed\r\n * a dirt-simple API for requesting ClearKey licenses from a remote server.\r\n *\r\n * @implements LicenseServer\r\n * @class\r\n */\r\nimport KeyPair from '../vo/KeyPair';\r\nimport ClearKeyKeySet from '../vo/ClearKeyKeySet';\r\n\r\nfunction ClearKey() {\r\n\r\n    let instance;\r\n\r\n    function getServerURLFromMessage(url /* message, messageType*/) {\r\n        return url;\r\n    }\r\n\r\n    function getHTTPMethod(/*messageType*/) {\r\n        return 'POST';\r\n    }\r\n\r\n    function getResponseType(/*keySystemStr*/) {\r\n        return 'json';\r\n    }\r\n\r\n    function getLicenseMessage(serverResponse/*, keySystemStr, messageType*/) {\r\n        if (!serverResponse.hasOwnProperty('keys')) {\r\n            return null;\r\n        }\r\n        let keyPairs = [];\r\n        for (let i = 0; i < serverResponse.keys.length; i++) {\r\n            let keypair = serverResponse.keys[i];\r\n            let keyid = keypair.kid.replace(/=/g, '');\r\n            let key = keypair.k.replace(/=/g, '');\r\n\r\n            keyPairs.push(new KeyPair(keyid, key));\r\n        }\r\n        return new ClearKeyKeySet(keyPairs);\r\n    }\r\n\r\n    function getErrorResponse(serverResponse/*, keySystemStr, messageType*/) {\r\n        return String.fromCharCode.apply(null, new Uint8Array(serverResponse));\r\n    }\r\n\r\n    instance = {\r\n        getServerURLFromMessage: getServerURLFromMessage,\r\n        getHTTPMethod: getHTTPMethod,\r\n        getResponseType: getResponseType,\r\n        getLicenseMessage: getLicenseMessage,\r\n        getErrorResponse: getErrorResponse\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nClearKey.__dashjs_factory_name = 'ClearKey';\r\nexport default dashjs.FactoryMaker.getSingletonFactory(ClearKey); /* jshint ignore:line */\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n/**\r\n * CastLabs DRMToday License Server implementation\r\n *\r\n * @implements LicenseServer\r\n * @class\r\n */\r\n\r\nimport ProtectionConstants from '../../constants/ProtectionConstants';\r\n\r\nfunction DRMToday(config) {\r\n\r\n    config = config || {};\r\n    const BASE64 = config.BASE64;\r\n\r\n    const keySystems = {};\r\n    keySystems[ProtectionConstants.WIDEVINE_KEYSTEM_STRING] = {\r\n        responseType: 'json',\r\n        getLicenseMessage: function (response) {\r\n            return BASE64.decodeArray(response.license);\r\n        },\r\n        getErrorResponse: function (response) {\r\n            return response;\r\n        }\r\n    };\r\n    keySystems[ProtectionConstants.PLAYREADY_KEYSTEM_STRING] = {\r\n        responseType: 'arraybuffer',\r\n        getLicenseMessage: function (response) {\r\n            return response;\r\n        },\r\n        getErrorResponse: function (response) {\r\n            return String.fromCharCode.apply(null, new Uint8Array(response));\r\n        }\r\n    };\r\n\r\n    let instance;\r\n\r\n    function checkConfig() {\r\n        if (!BASE64 || !BASE64.hasOwnProperty('decodeArray')) {\r\n            throw new Error('Missing config parameter(s)');\r\n        }\r\n    }\r\n\r\n    function getServerURLFromMessage(url /*, message, messageType*/) {\r\n        return url;\r\n    }\r\n\r\n    function getHTTPMethod(/*messageType*/) {\r\n        return 'POST';\r\n    }\r\n\r\n    function getResponseType(keySystemStr/*, messageType*/) {\r\n        return keySystems[keySystemStr].responseType;\r\n    }\r\n\r\n    function getLicenseMessage(serverResponse, keySystemStr/*, messageType*/) {\r\n        checkConfig();\r\n        return keySystems[keySystemStr].getLicenseMessage(serverResponse);\r\n    }\r\n\r\n    function getErrorResponse(serverResponse, keySystemStr/*, messageType*/) {\r\n        return keySystems[keySystemStr].getErrorResponse(serverResponse);\r\n    }\r\n\r\n    instance = {\r\n        getServerURLFromMessage: getServerURLFromMessage,\r\n        getHTTPMethod: getHTTPMethod,\r\n        getResponseType: getResponseType,\r\n        getLicenseMessage: getLicenseMessage,\r\n        getErrorResponse: getErrorResponse\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nDRMToday.__dashjs_factory_name = 'DRMToday';\r\nexport default dashjs.FactoryMaker.getSingletonFactory(DRMToday); /* jshint ignore:line */","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n/* global escape: true */\r\n\r\n/**\r\n * Microsoft PlayReady Test License Server\r\n *\r\n * For testing content that uses the PlayReady test server at\r\n *\r\n * @implements LicenseServer\r\n * @class\r\n * @ignore\r\n */\r\n\r\nfunction PlayReady() {\r\n\r\n    let instance;\r\n\r\n    const soap = 'http://schemas.xmlsoap.org/soap/envelope/';\r\n\r\n    function uintToString(arrayBuffer) {\r\n        const encodedString = String.fromCharCode.apply(null, new Uint8Array(arrayBuffer));\r\n        const decodedString = decodeURIComponent(escape(encodedString));\r\n        return decodedString;\r\n    }\r\n\r\n    function parseServerResponse(serverResponse) {\r\n        if (window.DOMParser) {\r\n            const stringResponse = uintToString(serverResponse);\r\n            const parser = new window.DOMParser();\r\n            const xmlDoc = parser.parseFromString(stringResponse, 'text/xml');\r\n            const envelope = xmlDoc ? xmlDoc.getElementsByTagNameNS(soap, 'Envelope')[0] : null;\r\n            const body = envelope ? envelope.getElementsByTagNameNS(soap, 'Body')[0] : null;\r\n            const fault = body ? body.getElementsByTagNameNS(soap, 'Fault')[0] : null;\r\n\r\n            if (fault) {\r\n                return null;\r\n            }\r\n        }\r\n        return serverResponse;\r\n    }\r\n\r\n    function parseErrorResponse(serverResponse) {\r\n        let faultstring = '';\r\n        let statusCode = '';\r\n        let message = '';\r\n        let idStart = -1;\r\n        let idEnd = -1;\r\n\r\n        if (window.DOMParser) {\r\n            const stringResponse = uintToString(serverResponse);\r\n            const parser = new window.DOMParser();\r\n            const xmlDoc = parser.parseFromString(stringResponse, 'text/xml');\r\n            const envelope = xmlDoc ? xmlDoc.getElementsByTagNameNS(soap, 'Envelope')[0] : null;\r\n            const body = envelope ? envelope.getElementsByTagNameNS(soap, 'Body')[0] : null;\r\n            const fault = body ? body.getElementsByTagNameNS(soap, 'Fault')[0] : null;\r\n            const detail = fault ? fault.getElementsByTagName('detail')[0] : null;\r\n            const exception = detail ? detail.getElementsByTagName('Exception')[0] : null;\r\n            let node = null;\r\n\r\n            if (fault === null) {\r\n                return stringResponse;\r\n            }\r\n\r\n            node = fault.getElementsByTagName('faultstring')[0].firstChild;\r\n            faultstring = node ? node.nodeValue : null;\r\n\r\n            if (exception !== null) {\r\n                node = exception.getElementsByTagName('StatusCode')[0];\r\n                statusCode = node ? node.firstChild.nodeValue : null;\r\n                node = exception.getElementsByTagName('Message')[0];\r\n                message = node ? node.firstChild.nodeValue : null;\r\n                idStart = message ? message.lastIndexOf('[') + 1 : -1;\r\n                idEnd = message ? message.indexOf(']') : -1;\r\n                message = message ? message.substring(idStart, idEnd) : '';\r\n            }\r\n        }\r\n\r\n        let errorString = `code: ${statusCode}, name: ${faultstring}`;\r\n        if (message) {\r\n            errorString += `, message: ${message}`;\r\n        }\r\n\r\n        return errorString;\r\n    }\r\n\r\n    function getServerURLFromMessage(url /*, message, messageType*/) {\r\n        return url;\r\n    }\r\n\r\n    function getHTTPMethod(/*messageType*/) {\r\n        return 'POST';\r\n    }\r\n\r\n    function getResponseType(/*keySystemStr, messageType*/) {\r\n        return 'arraybuffer';\r\n    }\r\n\r\n    function getLicenseMessage(serverResponse/*, keySystemStr, messageType*/) {\r\n        return parseServerResponse.call(this, serverResponse);\r\n    }\r\n\r\n    function getErrorResponse(serverResponse/*, keySystemStr, messageType*/) {\r\n        return parseErrorResponse.call(this, serverResponse);\r\n    }\r\n\r\n    instance = {\r\n        getServerURLFromMessage: getServerURLFromMessage,\r\n        getHTTPMethod: getHTTPMethod,\r\n        getResponseType: getResponseType,\r\n        getLicenseMessage: getLicenseMessage,\r\n        getErrorResponse: getErrorResponse\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nPlayReady.__dashjs_factory_name = 'PlayReady';\r\nexport default dashjs.FactoryMaker.getSingletonFactory(PlayReady); /* jshint ignore:line */","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n/**\r\n * @ignore\r\n */\r\nfunction Widevine() {\r\n\r\n    let instance;\r\n\r\n    function getServerURLFromMessage(url /*, message, messageType*/) {\r\n        return url;\r\n    }\r\n\r\n    function getHTTPMethod(/*messageType*/) {\r\n        return 'POST';\r\n    }\r\n\r\n    function getResponseType(/*keySystemStr, messageType*/) {\r\n        return 'arraybuffer';\r\n    }\r\n\r\n    function getLicenseMessage(serverResponse/*, keySystemStr, messageType*/) {\r\n        return serverResponse;\r\n    }\r\n\r\n    function getErrorResponse(serverResponse/*, keySystemStr, messageType*/) {\r\n        return String.fromCharCode.apply(null, new Uint8Array(serverResponse));\r\n    }\r\n\r\n    instance = {\r\n        getServerURLFromMessage: getServerURLFromMessage,\r\n        getHTTPMethod: getHTTPMethod,\r\n        getResponseType: getResponseType,\r\n        getLicenseMessage: getLicenseMessage,\r\n        getErrorResponse: getErrorResponse\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nWidevine.__dashjs_factory_name = 'Widevine';\r\nexport default dashjs.FactoryMaker.getSingletonFactory(Widevine); /* jshint ignore:line */","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n/**\r\n * @classdesc A collection of ClearKey encryption keys with an (optional) associated\r\n *  type\r\n * @ignore\r\n */\r\nclass ClearKeyKeySet {\r\n    /**\r\n     * @param {Array.<KeyPair>} keyPairs\r\n     * @param {string} type the type of keys in this set.  One of either 'persistent'\r\n     * or 'temporary'.  Can also be null or undefined.\r\n     * @class\r\n     * @ignore\r\n     */\r\n    constructor(keyPairs, type) {\r\n        if (type && type !== 'persistent' && type !== 'temporary')\r\n            throw new Error('Invalid ClearKey key set type!  Must be one of \\'persistent\\' or \\'temporary\\'');\r\n        this.keyPairs = keyPairs;\r\n        this.type = type;\r\n    }\r\n\r\n    /**\r\n     * Convert this key set to its JSON Web Key (JWK) representation\r\n     *\r\n     * @return {ArrayBuffer} JWK object UTF-8 encoded as ArrayBuffer\r\n     */\r\n    toJWK() {\r\n        let i;\r\n        let numKeys = this.keyPairs.length;\r\n        let jwk = {keys: []};\r\n\r\n        for (i = 0; i < numKeys; i++) {\r\n            let key = {\r\n                kty: 'oct',\r\n                alg: 'A128KW',\r\n                kid: this.keyPairs[i].keyID,\r\n                k: this.keyPairs[i].key\r\n            };\r\n            jwk.keys.push(key);\r\n        }\r\n        if (this.type) {\r\n            jwk.type = this.type;\r\n        }\r\n        let jwkString = JSON.stringify(jwk);\r\n        const len = jwkString.length;\r\n\r\n        // Convert JSON string to ArrayBuffer\r\n        let buf = new ArrayBuffer(len);\r\n        let bView = new Uint8Array(buf);\r\n        for (i = 0; i < len; i++)\r\n            bView[i] = jwkString.charCodeAt(i);\r\n        return buf;\r\n    }\r\n}\r\n\r\nexport default ClearKeyKeySet;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @classdesc EME-independent KeyMessage\r\n * @ignore\r\n */\r\nclass KeyMessage {\r\n    /**\r\n     * @param {SessionToken} sessionToken the session\r\n     * to which the key message is associated\r\n     * @param {ArrayBuffer} message the key message\r\n     * @param {string} defaultURL license acquisition URL provided by the CDM\r\n     * @param {string} messageType Supported message types can be found\r\n     * {@link https://w3c.github.io/encrypted-media/#idl-def-MediaKeyMessageType|here}.\r\n     * @class\r\n     */\r\n    constructor(sessionToken, message, defaultURL, messageType) {\r\n        this.sessionToken = sessionToken;\r\n        this.message = message;\r\n        this.defaultURL = defaultURL;\r\n        this.messageType = messageType ? messageType : 'license-request';\r\n    }\r\n}\r\n\r\nexport default KeyMessage;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @classdesc Represents a 128-bit keyID and 128-bit encryption key\r\n * @ignore\r\n */\r\nclass KeyPair {\r\n    /**\r\n     * @param {string} keyID 128-bit key ID, base64 encoded, with no padding\r\n     * @param {string} key 128-bit encryption key, base64 encoded, with no padding\r\n     * @class\r\n     * @ignore\r\n     */\r\n    constructor(keyID, key) {\r\n        this.keyID = keyID;\r\n        this.key = key;\r\n    }\r\n}\r\n\r\nexport default KeyPair;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @classdesc Creates a new key system access token.  Represents a valid key system for\r\n * given piece of content and key system requirements.  Used to initialize license\r\n * acquisition operations.\r\n * @ignore\r\n */\r\nclass KeySystemAccess {\r\n    /**\r\n     * @param {MediaPlayer.dependencies.protection.KeySystem} keySystem the key system\r\n     * @param {KeySystemConfiguration} ksConfiguration the\r\n     * subset of configurations passed to the key system access request that are supported\r\n     * by this user agent\r\n     * @class\r\n     * @ignore\r\n     */\r\n    constructor(keySystem, ksConfiguration) {\r\n        this.keySystem = keySystem;\r\n        this.ksConfiguration = ksConfiguration;\r\n    }\r\n}\r\n\r\nexport default KeySystemAccess;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n/**\r\n * @classdesc Represents a set of configurations that describe the capabilities desired for\r\n *  support by a given CDM\r\n * @ignore\r\n */\r\nclass KeySystemConfiguration {\r\n    /**\r\n     * @param {Array.<MediaCapability>} audioCapabilities array of\r\n     * desired audio capabilities.  Higher preference capabilities should be placed earlier\r\n     * in the array.\r\n     * @param {Array.<MediaCapability>} videoCapabilities array of\r\n     * desired video capabilities.  Higher preference capabilities should be placed earlier\r\n     * in the array.\r\n     * @param {string} distinctiveIdentifier desired use of distinctive identifiers.\r\n     * One of \"required\", \"optional\", or \"not-allowed\"\r\n     * @param {string} persistentState desired support for persistent storage of\r\n     * key systems.  One of \"required\", \"optional\", or \"not-allowed\"\r\n     * @param {Array.<string>} sessionTypes List of session types that must\r\n     * be supported by the key system\r\n     * @class\r\n     */\r\n    constructor(audioCapabilities, videoCapabilities, distinctiveIdentifier, persistentState, sessionTypes) {\r\n        this.initDataTypes = [ 'cenc' ];\r\n        if (audioCapabilities && audioCapabilities.length) {\r\n            this.audioCapabilities = audioCapabilities;\r\n        }\r\n        if (videoCapabilities && videoCapabilities.length) {\r\n            this.videoCapabilities = videoCapabilities;\r\n        }\r\n        this.distinctiveIdentifier = distinctiveIdentifier;\r\n        this.persistentState = persistentState;\r\n        this.sessionTypes = sessionTypes;\r\n    }\r\n}\r\n\r\nexport default KeySystemConfiguration;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @classdesc A media capability\r\n * @ignore\r\n */\r\nclass MediaCapability {\r\n    /**\r\n     * @param {string} contentType MIME type and codecs (RFC6386)\r\n     * @param {string} robustness\r\n     * @class\r\n     * @ignore\r\n     */\r\n    constructor(contentType, robustness) {\r\n        this.contentType = contentType;\r\n        this.robustness = robustness;\r\n    }\r\n}\r\n\r\nexport default MediaCapability;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @classdesc NeedKey\r\n * @ignore\r\n */\r\nclass NeedKey {\r\n    /**\r\n     * @param {ArrayBuffer} initData the initialization data\r\n     * @param {string} initDataType initialization data type\r\n     * @class\r\n     */\r\n    constructor(initData, initDataType) {\r\n        this.initData = initData;\r\n        this.initDataType = initDataType;\r\n    }\r\n}\r\n\r\nexport default NeedKey;\r\n","\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\n\r\n\r\nfunction DroppedFramesHistory() {\r\n\r\n    let values = [];\r\n    let lastDroppedFrames = 0;\r\n    let lastTotalFrames = 0;\r\n\r\n    function push(index, playbackQuality) {\r\n        let droppedVideoFrames = playbackQuality && playbackQuality.droppedVideoFrames ? playbackQuality.droppedVideoFrames : 0;\r\n        let totalVideoFrames = playbackQuality && playbackQuality.totalVideoFrames ? playbackQuality.totalVideoFrames : 0;\r\n\r\n        let intervalDroppedFrames = droppedVideoFrames - lastDroppedFrames;\r\n        lastDroppedFrames = droppedVideoFrames;\r\n\r\n        let intervalTotalFrames = totalVideoFrames - lastTotalFrames;\r\n        lastTotalFrames = totalVideoFrames;\r\n\r\n        if (!isNaN(index)) {\r\n            if (!values[index]) {\r\n                values[index] = {droppedVideoFrames: intervalDroppedFrames, totalVideoFrames: intervalTotalFrames};\r\n            } else {\r\n                values[index].droppedVideoFrames += intervalDroppedFrames;\r\n                values[index].totalVideoFrames += intervalTotalFrames;\r\n            }\r\n        }\r\n    }\r\n\r\n    function getDroppedFrameHistory() {\r\n        return values;\r\n    }\r\n\r\n    function reset(playbackQuality) {\r\n        values = [];\r\n        lastDroppedFrames = playbackQuality.droppedVideoFrames;\r\n        lastTotalFrames = playbackQuality.totalVideoFrames;\r\n    }\r\n\r\n    return {\r\n        push: push,\r\n        getFrameHistory: getDroppedFrameHistory,\r\n        reset: reset\r\n    };\r\n}\r\n\r\nDroppedFramesHistory.__dashjs_factory_name = 'DroppedFramesHistory';\r\nconst factory = FactoryMaker.getClassFactory(DroppedFramesHistory);\r\nexport default factory;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\n\r\nfunction RulesContext(config) {\r\n\r\n    config = config || {};\r\n    let instance;\r\n    const abrController = config.abrController;\r\n    const switchHistory = config.switchHistory;\r\n    const droppedFramesHistory = config.droppedFramesHistory;\r\n    const currentRequest = config.currentRequest;\r\n    const bufferOccupancyABR = config.useBufferOccupancyABR;\r\n    const l2AABR = config.useL2AABR;\r\n    const loLP = config.useLoLPABR;\r\n    const scheduleController = config.streamProcessor ? config.streamProcessor.getScheduleController() : null;\r\n    const representationInfo = config.streamProcessor ? config.streamProcessor.getRepresentationInfo() : null;\r\n    const videoModel = config.videoModel ? config.videoModel : null;\r\n\r\n    function getMediaType() {\r\n        const mediaInfo = getMediaInfo();\r\n        return mediaInfo ? mediaInfo.type : null;\r\n    }\r\n\r\n    function getStreamInfo() {\r\n        const mediaInfo = getMediaInfo();\r\n        return mediaInfo ? mediaInfo.streamInfo : null;\r\n    }\r\n\r\n    function getMediaInfo() {\r\n        return representationInfo ? representationInfo.mediaInfo : null;\r\n    }\r\n\r\n    function getRepresentationInfo() {\r\n        return representationInfo;\r\n    }\r\n\r\n    function getScheduleController() {\r\n        return scheduleController;\r\n    }\r\n\r\n    function getAbrController() {\r\n        return abrController;\r\n    }\r\n\r\n    function getSwitchHistory() {\r\n        return switchHistory;\r\n    }\r\n\r\n    function getVideoModel() {\r\n        return videoModel;\r\n    }\r\n\r\n    function getDroppedFramesHistory() {\r\n        return droppedFramesHistory;\r\n    }\r\n\r\n    function getCurrentRequest() {\r\n        return currentRequest;\r\n    }\r\n\r\n    function useBufferOccupancyABR() {\r\n        return bufferOccupancyABR;\r\n    }\r\n    function useL2AABR() {\r\n        return l2AABR;\r\n    }\r\n\r\n    function useLoLPABR() {\r\n        return loLP;\r\n    }\r\n\r\n    instance = {\r\n        getMediaType,\r\n        getMediaInfo,\r\n        getDroppedFramesHistory,\r\n        getCurrentRequest,\r\n        getSwitchHistory,\r\n        getStreamInfo,\r\n        getScheduleController,\r\n        getAbrController,\r\n        getRepresentationInfo,\r\n        useBufferOccupancyABR,\r\n        useL2AABR,\r\n        useLoLPABR,\r\n        getVideoModel\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nRulesContext.__dashjs_factory_name = 'RulesContext';\r\nexport default FactoryMaker.getClassFactory(RulesContext);\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\n\r\nconst NO_CHANGE = -1;\r\nconst PRIORITY = {\r\n    DEFAULT: 0.5,\r\n    STRONG: 1,\r\n    WEAK: 0\r\n};\r\n\r\nfunction SwitchRequest(q, r, p) {\r\n    //TODO refactor all the calls to this to use config to be like everything else.\r\n    let instance,\r\n        quality,\r\n        priority,\r\n        reason;\r\n\r\n    // check priority value\r\n    function getPriority(p) {\r\n        let ret = PRIORITY.DEFAULT;\r\n\r\n        // check that p is one of declared priority value\r\n        if (p === PRIORITY.DEFAULT || p === PRIORITY.STRONG || p === PRIORITY.WEAK) {\r\n            ret = p;\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    // init attributes\r\n    quality = (q === undefined) ? NO_CHANGE : q;\r\n    priority = getPriority(p);\r\n    reason = (r === undefined) ? null : r;\r\n\r\n    instance = {\r\n        quality: quality,\r\n        reason: reason,\r\n        priority: priority\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nSwitchRequest.__dashjs_factory_name = 'SwitchRequest';\r\nconst factory = FactoryMaker.getClassFactory(SwitchRequest);\r\nfactory.NO_CHANGE = NO_CHANGE;\r\nfactory.PRIORITY = PRIORITY;\r\nFactoryMaker.updateClassFactory(SwitchRequest.__dashjs_factory_name, factory);\r\n\r\nexport default factory;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\nimport SwitchRequest from './SwitchRequest';\r\n\r\nconst SWITCH_REQUEST_HISTORY_DEPTH = 8; // must be > SwitchHistoryRule SAMPLE_SIZE to enable rule\r\n\r\nfunction SwitchRequestHistory() {\r\n    let switchRequests = []; // running total\r\n    let srHistory = []; // history of each switch\r\n\r\n    function push(switchRequest) {\r\n        if (switchRequest.newValue === SwitchRequest.NO_CHANGE) {\r\n            switchRequest.newValue = switchRequest.oldValue;\r\n        }\r\n        if (!switchRequests[switchRequest.oldValue]) {\r\n            switchRequests[switchRequest.oldValue] = {noDrops: 0, drops: 0, dropSize: 0};\r\n        }\r\n\r\n        // Set switch details\r\n        let indexDiff = switchRequest.newValue - switchRequest.oldValue;\r\n        let drop = (indexDiff < 0) ? 1 : 0;\r\n        let dropSize = drop ? -indexDiff : 0;\r\n        let noDrop = drop ? 0 : 1;\r\n\r\n        // Update running totals\r\n        switchRequests[switchRequest.oldValue].drops += drop;\r\n        switchRequests[switchRequest.oldValue].dropSize += dropSize;\r\n        switchRequests[switchRequest.oldValue].noDrops += noDrop;\r\n\r\n        // Save to history\r\n        srHistory.push({idx: switchRequest.oldValue, noDrop: noDrop, drop: drop, dropSize: dropSize});\r\n\r\n        // Shift earliest switch off srHistory and readjust to keep depth of running totals constant\r\n        if ( srHistory.length > SWITCH_REQUEST_HISTORY_DEPTH ) {\r\n            let srHistoryFirst = srHistory.shift();\r\n            switchRequests[srHistoryFirst.idx].drops -= srHistoryFirst.drop;\r\n            switchRequests[srHistoryFirst.idx].dropSize -= srHistoryFirst.dropSize;\r\n            switchRequests[srHistoryFirst.idx].noDrops -= srHistoryFirst.noDrop;\r\n        }\r\n    }\r\n\r\n    function getSwitchRequests() {\r\n        return switchRequests;\r\n    }\r\n\r\n    function reset() {\r\n        switchRequests = [];\r\n        srHistory = [];\r\n    }\r\n\r\n    return {\r\n        push: push,\r\n        getSwitchRequests: getSwitchRequests,\r\n        reset: reset\r\n    };\r\n}\r\n\r\nSwitchRequestHistory.__dashjs_factory_name = 'SwitchRequestHistory';\r\nconst factory = FactoryMaker.getClassFactory(SwitchRequestHistory);\r\nexport default factory;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2017, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport Constants from '../constants/Constants';\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\n\r\n// throughput generally stored in kbit/s\r\n// latency generally stored in ms\r\n\r\nfunction ThroughputHistory(config) {\r\n\r\n    config = config || {};\r\n    // sliding window constants\r\n    const MAX_MEASUREMENTS_TO_KEEP = 20;\r\n    const AVERAGE_THROUGHPUT_SAMPLE_AMOUNT_LIVE = 3;\r\n    const AVERAGE_THROUGHPUT_SAMPLE_AMOUNT_VOD = 4;\r\n    const AVERAGE_LATENCY_SAMPLE_AMOUNT = 4;\r\n    const THROUGHPUT_DECREASE_SCALE = 1.3;\r\n    const THROUGHPUT_INCREASE_SCALE = 1.3;\r\n\r\n    // EWMA constants\r\n    const EWMA_THROUGHPUT_SLOW_HALF_LIFE_SECONDS = 8;\r\n    const EWMA_THROUGHPUT_FAST_HALF_LIFE_SECONDS = 3;\r\n    const EWMA_LATENCY_SLOW_HALF_LIFE_COUNT = 2;\r\n    const EWMA_LATENCY_FAST_HALF_LIFE_COUNT = 1;\r\n\r\n    const settings = config.settings;\r\n\r\n    let throughputDict,\r\n        latencyDict,\r\n        ewmaThroughputDict,\r\n        ewmaLatencyDict,\r\n        ewmaHalfLife;\r\n\r\n    function setup() {\r\n        ewmaHalfLife = {\r\n            throughputHalfLife: { fast: EWMA_THROUGHPUT_FAST_HALF_LIFE_SECONDS, slow: EWMA_THROUGHPUT_SLOW_HALF_LIFE_SECONDS },\r\n            latencyHalfLife:    { fast: EWMA_LATENCY_FAST_HALF_LIFE_COUNT,      slow: EWMA_LATENCY_SLOW_HALF_LIFE_COUNT }\r\n        };\r\n\r\n        reset();\r\n    }\r\n\r\n    function isCachedResponse(mediaType, latencyMs, downloadTimeMs) {\r\n        if (mediaType === Constants.VIDEO) {\r\n            return downloadTimeMs < settings.get().streaming.cacheLoadThresholds[Constants.VIDEO];\r\n        } else if (mediaType === Constants.AUDIO) {\r\n            return downloadTimeMs < settings.get().streaming.cacheLoadThresholds[Constants.AUDIO];\r\n        }\r\n    }\r\n\r\n    function push(mediaType, httpRequest, useDeadTimeLatency) {\r\n        if (!httpRequest.trace || !httpRequest.trace.length) {\r\n            return;\r\n        }\r\n\r\n        const latencyTimeInMilliseconds = (httpRequest.tresponse.getTime() - httpRequest.trequest.getTime()) || 1;\r\n        const downloadTimeInMilliseconds = (httpRequest._tfinish.getTime() - httpRequest.tresponse.getTime()) || 1; //Make sure never 0 we divide by this value. Avoid infinity!\r\n        const downloadBytes = httpRequest.trace.reduce((a, b) => a + b.b[0], 0);\r\n\r\n        let throughputMeasureTime;\r\n        if (settings.get().streaming.lowLatencyEnabled) {\r\n            throughputMeasureTime = httpRequest.trace.reduce((a, b) => a + b.d, 0);\r\n        } else {\r\n            throughputMeasureTime = useDeadTimeLatency ? downloadTimeInMilliseconds : latencyTimeInMilliseconds + downloadTimeInMilliseconds;\r\n        }\r\n\r\n        const throughput = Math.round((8 * downloadBytes) / throughputMeasureTime); // bits/ms = kbits/s\r\n\r\n        checkSettingsForMediaType(mediaType);\r\n\r\n        if (isCachedResponse(mediaType, latencyTimeInMilliseconds, downloadTimeInMilliseconds)) {\r\n            if (throughputDict[mediaType].length > 0 && !throughputDict[mediaType].hasCachedEntries) {\r\n                // already have some entries which are not cached entries\r\n                // prevent cached fragment loads from skewing the average values\r\n                return;\r\n            } else { // have no entries || have cached entries\r\n                // no uncached entries yet, rely on cached entries because ABR rules need something to go by\r\n                throughputDict[mediaType].hasCachedEntries = true;\r\n            }\r\n        } else if (throughputDict[mediaType] && throughputDict[mediaType].hasCachedEntries) {\r\n            // if we are here then we have some entries already, but they are cached, and now we have a new uncached entry\r\n            clearSettingsForMediaType(mediaType);\r\n        }\r\n\r\n        throughputDict[mediaType].push(throughput);\r\n        if (throughputDict[mediaType].length > MAX_MEASUREMENTS_TO_KEEP) {\r\n            throughputDict[mediaType].shift();\r\n        }\r\n\r\n        latencyDict[mediaType].push(latencyTimeInMilliseconds);\r\n        if (latencyDict[mediaType].length > MAX_MEASUREMENTS_TO_KEEP) {\r\n            latencyDict[mediaType].shift();\r\n        }\r\n\r\n        updateEwmaEstimate(ewmaThroughputDict[mediaType], throughput, 0.001 * downloadTimeInMilliseconds, ewmaHalfLife.throughputHalfLife);\r\n        updateEwmaEstimate(ewmaLatencyDict[mediaType], latencyTimeInMilliseconds, 1, ewmaHalfLife.latencyHalfLife);\r\n    }\r\n\r\n    function updateEwmaEstimate(ewmaObj, value, weight, halfLife) {\r\n        // Note about startup:\r\n        // Estimates start at 0, so early values are underestimated.\r\n        // This effect is countered in getAverageEwma() by dividing the estimates by:\r\n        //     1 - Math.pow(0.5, ewmaObj.totalWeight / halfLife)\r\n\r\n        const fastAlpha = Math.pow(0.5, weight / halfLife.fast);\r\n        ewmaObj.fastEstimate = (1 - fastAlpha) * value + fastAlpha * ewmaObj.fastEstimate;\r\n\r\n        const slowAlpha = Math.pow(0.5, weight / halfLife.slow);\r\n        ewmaObj.slowEstimate = (1 - slowAlpha) * value + slowAlpha * ewmaObj.slowEstimate;\r\n\r\n        ewmaObj.totalWeight += weight;\r\n    }\r\n\r\n    function getSampleSize(isThroughput, mediaType, isLive) {\r\n        let arr,\r\n            sampleSize;\r\n\r\n        if (isThroughput) {\r\n            arr = throughputDict[mediaType];\r\n            sampleSize = isLive ? AVERAGE_THROUGHPUT_SAMPLE_AMOUNT_LIVE : AVERAGE_THROUGHPUT_SAMPLE_AMOUNT_VOD;\r\n        } else {\r\n            arr = latencyDict[mediaType];\r\n            sampleSize = AVERAGE_LATENCY_SAMPLE_AMOUNT;\r\n        }\r\n\r\n        if (!arr) {\r\n            sampleSize = 0;\r\n        } else if (sampleSize >= arr.length) {\r\n            sampleSize = arr.length;\r\n        } else if (isThroughput) {\r\n            // if throughput samples vary a lot, average over a wider sample\r\n            for (let i = 1; i < sampleSize; ++i) {\r\n                const ratio = arr[arr.length - i] / arr[arr.length - i - 1];\r\n                if (ratio >= THROUGHPUT_INCREASE_SCALE || ratio <= 1 / THROUGHPUT_DECREASE_SCALE) {\r\n                    sampleSize += 1;\r\n                    if (sampleSize === arr.length) { // cannot increase sampleSize beyond arr.length\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return sampleSize;\r\n    }\r\n\r\n    function getAverage(isThroughput, mediaType, isDynamic) {\r\n        // only two moving average methods defined at the moment\r\n        return settings.get().streaming.abr.movingAverageMethod !== Constants.MOVING_AVERAGE_SLIDING_WINDOW ?\r\n            getAverageEwma(isThroughput, mediaType) : getAverageSlidingWindow(isThroughput, mediaType, isDynamic);\r\n    }\r\n\r\n    function getAverageSlidingWindow(isThroughput, mediaType, isDynamic) {\r\n        const sampleSize = getSampleSize(isThroughput, mediaType, isDynamic);\r\n        const dict = isThroughput ? throughputDict : latencyDict;\r\n        let arr = dict[mediaType];\r\n\r\n        if (sampleSize === 0 || !arr || arr.length === 0) {\r\n            return NaN;\r\n        }\r\n\r\n        arr = arr.slice(-sampleSize); // still works if sampleSize too large\r\n        // arr.length >= 1\r\n        return arr.reduce((total, elem) => total + elem) / arr.length;\r\n    }\r\n\r\n    function getAverageEwma(isThroughput, mediaType) {\r\n        const halfLife = isThroughput ? ewmaHalfLife.throughputHalfLife : ewmaHalfLife.latencyHalfLife;\r\n        const ewmaObj = isThroughput ? ewmaThroughputDict[mediaType] : ewmaLatencyDict[mediaType];\r\n\r\n        if (!ewmaObj || ewmaObj.totalWeight <= 0) {\r\n            return NaN;\r\n        }\r\n\r\n        // to correct for startup, divide by zero factor = 1 - Math.pow(0.5, ewmaObj.totalWeight / halfLife)\r\n        const fastEstimate = ewmaObj.fastEstimate / (1 - Math.pow(0.5, ewmaObj.totalWeight / halfLife.fast));\r\n        const slowEstimate = ewmaObj.slowEstimate / (1 - Math.pow(0.5, ewmaObj.totalWeight / halfLife.slow));\r\n        return isThroughput ? Math.min(fastEstimate, slowEstimate) : Math.max(fastEstimate, slowEstimate);\r\n    }\r\n\r\n    function getAverageThroughput(mediaType, isDynamic) {\r\n        return getAverage(true, mediaType, isDynamic);\r\n    }\r\n\r\n    function getSafeAverageThroughput(mediaType, isDynamic) {\r\n        let average = getAverageThroughput(mediaType, isDynamic);\r\n        if (!isNaN(average)) {\r\n            average *= settings.get().streaming.abr.bandwidthSafetyFactor;\r\n        }\r\n        return average;\r\n    }\r\n\r\n    function getAverageLatency(mediaType) {\r\n        return getAverage(false, mediaType);\r\n    }\r\n\r\n    function checkSettingsForMediaType(mediaType) {\r\n        throughputDict[mediaType] = throughputDict[mediaType] || [];\r\n        latencyDict[mediaType] = latencyDict[mediaType] || [];\r\n        ewmaThroughputDict[mediaType] = ewmaThroughputDict[mediaType] || {fastEstimate: 0, slowEstimate: 0, totalWeight: 0};\r\n        ewmaLatencyDict[mediaType] = ewmaLatencyDict[mediaType] || {fastEstimate: 0, slowEstimate: 0, totalWeight: 0};\r\n    }\r\n\r\n    function clearSettingsForMediaType(mediaType) {\r\n        delete throughputDict[mediaType];\r\n        delete latencyDict[mediaType];\r\n        delete ewmaThroughputDict[mediaType];\r\n        delete ewmaLatencyDict[mediaType];\r\n        checkSettingsForMediaType(mediaType);\r\n    }\r\n\r\n    function reset() {\r\n        throughputDict = {};\r\n        latencyDict = {};\r\n        ewmaThroughputDict = {};\r\n        ewmaLatencyDict = {};\r\n    }\r\n\r\n    const instance = {\r\n        push: push,\r\n        getAverageThroughput: getAverageThroughput,\r\n        getSafeAverageThroughput: getSafeAverageThroughput,\r\n        getAverageLatency: getAverageLatency,\r\n        reset: reset\r\n    };\r\n\r\n    setup();\r\n    return instance;\r\n}\r\n\r\nThroughputHistory.__dashjs_factory_name = 'ThroughputHistory';\r\nexport default FactoryMaker.getClassFactory(ThroughputHistory);\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport ThroughputRule from './ThroughputRule';\r\nimport InsufficientBufferRule from './InsufficientBufferRule';\r\nimport AbandonRequestsRule from './AbandonRequestsRule';\r\nimport DroppedFramesRule from './DroppedFramesRule';\r\nimport SwitchHistoryRule from './SwitchHistoryRule';\r\nimport BolaRule from './BolaRule';\r\nimport L2ARule from './L2ARule.js';\r\nimport LoLPRule from './lolp/LoLpRule.js';\r\nimport FactoryMaker from '../../../core/FactoryMaker';\r\nimport SwitchRequest from '../SwitchRequest';\r\nimport Constants from '../../constants/Constants';\r\n\r\nconst QUALITY_SWITCH_RULES = 'qualitySwitchRules';\r\nconst ABANDON_FRAGMENT_RULES = 'abandonFragmentRules';\r\n\r\n\r\nfunction ABRRulesCollection(config) {\r\n\r\n    config = config || {};\r\n    const context = this.context;\r\n\r\n    const mediaPlayerModel = config.mediaPlayerModel;\r\n    const dashMetrics = config.dashMetrics;\r\n    const settings = config.settings;\r\n\r\n    let instance,\r\n        qualitySwitchRules,\r\n        abandonFragmentRules;\r\n\r\n    function initialize() {\r\n        qualitySwitchRules = [];\r\n        abandonFragmentRules = [];\r\n\r\n        if (settings.get().streaming.abr.useDefaultABRRules) {\r\n\r\n            // If L2A is used we only need this one rule\r\n            if (settings.get().streaming.abr.ABRStrategy === Constants.ABR_STRATEGY_L2A) {\r\n                qualitySwitchRules.push(\r\n                    L2ARule(context).create({\r\n                        dashMetrics: dashMetrics,\r\n                        mediaPlayerModel: mediaPlayerModel,\r\n                        settings: settings\r\n                    })\r\n                );\r\n            }\r\n            // If LoLP is used we only need this one rule\r\n            else if (settings.get().streaming.abr.ABRStrategy === Constants.ABR_STRATEGY_LoLP) {\r\n                qualitySwitchRules.push(\r\n                    LoLPRule(context).create({\r\n                        dashMetrics: dashMetrics\r\n                    })\r\n                );\r\n            } else {\r\n                // Only one of BolaRule and ThroughputRule will give a switchRequest.quality !== SwitchRequest.NO_CHANGE.\r\n                // This is controlled by useBufferOccupancyABR mechanism in AbrController.\r\n                qualitySwitchRules.push(\r\n                    BolaRule(context).create({\r\n                        dashMetrics: dashMetrics,\r\n                        mediaPlayerModel: mediaPlayerModel,\r\n                        settings: settings\r\n                    })\r\n                );\r\n\r\n                qualitySwitchRules.push(\r\n                    ThroughputRule(context).create({\r\n                        dashMetrics: dashMetrics\r\n                    })\r\n                );\r\n                qualitySwitchRules.push(\r\n                    InsufficientBufferRule(context).create({\r\n                        dashMetrics: dashMetrics\r\n                    })\r\n                );\r\n                qualitySwitchRules.push(\r\n                    SwitchHistoryRule(context).create()\r\n                );\r\n                qualitySwitchRules.push(\r\n                    DroppedFramesRule(context).create()\r\n                );\r\n\r\n                abandonFragmentRules.push(\r\n                    AbandonRequestsRule(context).create({\r\n                        dashMetrics: dashMetrics,\r\n                        mediaPlayerModel: mediaPlayerModel,\r\n                        settings: settings\r\n                    })\r\n                );\r\n            }\r\n        }\r\n\r\n        // add custom ABR rules if any\r\n        const customRules = mediaPlayerModel.getABRCustomRules();\r\n        customRules.forEach(function (rule) {\r\n            if (rule.type === QUALITY_SWITCH_RULES) {\r\n                qualitySwitchRules.push(rule.rule(context).create());\r\n            }\r\n\r\n            if (rule.type === ABANDON_FRAGMENT_RULES) {\r\n                abandonFragmentRules.push(rule.rule(context).create());\r\n            }\r\n        });\r\n    }\r\n\r\n    function getActiveRules(srArray) {\r\n        return srArray.filter(sr => sr.quality > SwitchRequest.NO_CHANGE);\r\n    }\r\n\r\n    function getMinSwitchRequest(srArray) {\r\n        const values = {};\r\n        let i,\r\n            len,\r\n            req,\r\n            newQuality,\r\n            quality;\r\n\r\n        if (srArray.length === 0) {\r\n            return;\r\n        }\r\n\r\n        values[SwitchRequest.PRIORITY.STRONG] = SwitchRequest.NO_CHANGE;\r\n        values[SwitchRequest.PRIORITY.WEAK] = SwitchRequest.NO_CHANGE;\r\n        values[SwitchRequest.PRIORITY.DEFAULT] = SwitchRequest.NO_CHANGE;\r\n\r\n        for (i = 0, len = srArray.length; i < len; i += 1) {\r\n            req = srArray[i];\r\n            if (req.quality !== SwitchRequest.NO_CHANGE) {\r\n                values[req.priority] = values[req.priority] > SwitchRequest.NO_CHANGE ? Math.min(values[req.priority], req.quality) : req.quality;\r\n            }\r\n        }\r\n\r\n        if (values[SwitchRequest.PRIORITY.WEAK] !== SwitchRequest.NO_CHANGE) {\r\n            newQuality = values[SwitchRequest.PRIORITY.WEAK];\r\n        }\r\n\r\n        if (values[SwitchRequest.PRIORITY.DEFAULT] !== SwitchRequest.NO_CHANGE) {\r\n            newQuality = values[SwitchRequest.PRIORITY.DEFAULT];\r\n        }\r\n\r\n        if (values[SwitchRequest.PRIORITY.STRONG] !== SwitchRequest.NO_CHANGE) {\r\n            newQuality = values[SwitchRequest.PRIORITY.STRONG];\r\n        }\r\n\r\n        if (newQuality !== SwitchRequest.NO_CHANGE) {\r\n            quality = newQuality;\r\n        }\r\n\r\n        return SwitchRequest(context).create(quality);\r\n    }\r\n\r\n    function getMaxQuality(rulesContext) {\r\n        const switchRequestArray = qualitySwitchRules.map(rule => rule.getMaxIndex(rulesContext));\r\n        const activeRules = getActiveRules(switchRequestArray);\r\n        const maxQuality = getMinSwitchRequest(activeRules);\r\n\r\n        return maxQuality || SwitchRequest(context).create();\r\n    }\r\n\r\n    function shouldAbandonFragment(rulesContext) {\r\n        const abandonRequestArray = abandonFragmentRules.map(rule => rule.shouldAbandon(rulesContext));\r\n        const activeRules = getActiveRules(abandonRequestArray);\r\n        const shouldAbandon = getMinSwitchRequest(activeRules);\r\n\r\n        return shouldAbandon || SwitchRequest(context).create();\r\n    }\r\n\r\n    function reset() {\r\n        [qualitySwitchRules, abandonFragmentRules].forEach(rules => {\r\n            if (rules && rules.length) {\r\n                rules.forEach(rule => rule.reset && rule.reset());\r\n            }\r\n        });\r\n        qualitySwitchRules = [];\r\n        abandonFragmentRules = [];\r\n    }\r\n\r\n    function getQualitySwitchRules() {\r\n        return qualitySwitchRules;\r\n    }\r\n\r\n    instance = {\r\n        initialize,\r\n        reset,\r\n        getMaxQuality,\r\n        shouldAbandonFragment,\r\n        getQualitySwitchRules\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nABRRulesCollection.__dashjs_factory_name = 'ABRRulesCollection';\r\nconst factory = FactoryMaker.getClassFactory(ABRRulesCollection);\r\nfactory.QUALITY_SWITCH_RULES = QUALITY_SWITCH_RULES;\r\nfactory.ABANDON_FRAGMENT_RULES = ABANDON_FRAGMENT_RULES;\r\nFactoryMaker.updateSingletonFactory(ABRRulesCollection.__dashjs_factory_name, factory);\r\n\r\nexport default factory;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport SwitchRequest from '../SwitchRequest';\r\nimport FactoryMaker from '../../../core/FactoryMaker';\r\nimport Debug from '../../../core/Debug';\r\n\r\nfunction AbandonRequestsRule(config) {\r\n\r\n    config = config || {};\r\n    const ABANDON_MULTIPLIER = 1.8;\r\n    const GRACE_TIME_THRESHOLD = 500;\r\n    const MIN_LENGTH_TO_AVERAGE = 5;\r\n\r\n    const context = this.context;\r\n    const mediaPlayerModel = config.mediaPlayerModel;\r\n    const dashMetrics = config.dashMetrics;\r\n    const settings = config.settings;\r\n\r\n    let instance,\r\n        logger,\r\n        fragmentDict,\r\n        abandonDict,\r\n        throughputArray;\r\n\r\n    function setup() {\r\n        logger = Debug(context).getInstance().getLogger(instance);\r\n        reset();\r\n    }\r\n\r\n    function setFragmentRequestDict(type, id) {\r\n        fragmentDict[type] = fragmentDict[type] || {};\r\n        fragmentDict[type][id] = fragmentDict[type][id] || {};\r\n    }\r\n\r\n    function storeLastRequestThroughputByType(type, throughput) {\r\n        throughputArray[type] = throughputArray[type] || [];\r\n        throughputArray[type].push(throughput);\r\n    }\r\n\r\n    function shouldAbandon(rulesContext) {\r\n        const switchRequest = SwitchRequest(context).create(SwitchRequest.NO_CHANGE, {name: AbandonRequestsRule.__dashjs_factory_name});\r\n\r\n        if (!rulesContext || !rulesContext.hasOwnProperty('getMediaInfo') || !rulesContext.hasOwnProperty('getMediaType') || !rulesContext.hasOwnProperty('getCurrentRequest') ||\r\n            !rulesContext.hasOwnProperty('getRepresentationInfo') || !rulesContext.hasOwnProperty('getAbrController')) {\r\n            return switchRequest;\r\n        }\r\n\r\n        const mediaInfo = rulesContext.getMediaInfo();\r\n        const mediaType = rulesContext.getMediaType();\r\n        const req = rulesContext.getCurrentRequest();\r\n\r\n        if (!isNaN(req.index)) {\r\n            setFragmentRequestDict(mediaType, req.index);\r\n\r\n            const stableBufferTime = mediaPlayerModel.getStableBufferTime();\r\n            const bufferLevel = dashMetrics.getCurrentBufferLevel(mediaType);\r\n            if ( bufferLevel > stableBufferTime ) {\r\n                return switchRequest;\r\n            }\r\n\r\n            const fragmentInfo = fragmentDict[mediaType][req.index];\r\n            if (fragmentInfo === null || req.firstByteDate === null || abandonDict.hasOwnProperty(fragmentInfo.id)) {\r\n                return switchRequest;\r\n            }\r\n\r\n            //setup some init info based on first progress event\r\n            if (fragmentInfo.firstByteTime === undefined) {\r\n                throughputArray[mediaType] = [];\r\n                fragmentInfo.firstByteTime = req.firstByteDate.getTime();\r\n                fragmentInfo.segmentDuration = req.duration;\r\n                fragmentInfo.bytesTotal = req.bytesTotal;\r\n                fragmentInfo.id = req.index;\r\n            }\r\n            fragmentInfo.bytesLoaded = req.bytesLoaded;\r\n            fragmentInfo.elapsedTime = new Date().getTime() - fragmentInfo.firstByteTime;\r\n\r\n            if (fragmentInfo.bytesLoaded > 0 && fragmentInfo.elapsedTime > 0) {\r\n                storeLastRequestThroughputByType(mediaType, Math.round(fragmentInfo.bytesLoaded * 8 / fragmentInfo.elapsedTime));\r\n            }\r\n\r\n            if (throughputArray[mediaType].length >= MIN_LENGTH_TO_AVERAGE &&\r\n                fragmentInfo.elapsedTime > GRACE_TIME_THRESHOLD &&\r\n                fragmentInfo.bytesLoaded < fragmentInfo.bytesTotal) {\r\n\r\n                const totalSampledValue = throughputArray[mediaType].reduce((a, b) => a + b, 0);\r\n                fragmentInfo.measuredBandwidthInKbps = Math.round(totalSampledValue / throughputArray[mediaType].length);\r\n                fragmentInfo.estimatedTimeOfDownload = +((fragmentInfo.bytesTotal * 8 / fragmentInfo.measuredBandwidthInKbps) / 1000).toFixed(2);\r\n\r\n                if (fragmentInfo.estimatedTimeOfDownload < fragmentInfo.segmentDuration * ABANDON_MULTIPLIER || rulesContext.getRepresentationInfo().quality === 0 ) {\r\n                    return switchRequest;\r\n                } else if (!abandonDict.hasOwnProperty(fragmentInfo.id)) {\r\n\r\n                    const abrController = rulesContext.getAbrController();\r\n                    const bytesRemaining = fragmentInfo.bytesTotal - fragmentInfo.bytesLoaded;\r\n                    const bitrateList = abrController.getBitrateList(mediaInfo);\r\n                    const quality = abrController.getQualityForBitrate(mediaInfo, fragmentInfo.measuredBandwidthInKbps * settings.get().streaming.abr.bandwidthSafetyFactor);\r\n                    const minQuality = abrController.getMinAllowedIndexFor(mediaType);\r\n                    const newQuality = (minQuality !== undefined) ? Math.max(minQuality, quality) : quality;\r\n                    const estimateOtherBytesTotal = fragmentInfo.bytesTotal * bitrateList[newQuality].bitrate / bitrateList[abrController.getQualityFor(mediaType)].bitrate;\r\n\r\n                    if (bytesRemaining > estimateOtherBytesTotal) {\r\n                        switchRequest.quality = newQuality;\r\n                        switchRequest.reason.throughput = fragmentInfo.measuredBandwidthInKbps;\r\n                        switchRequest.reason.fragmentID = fragmentInfo.id;\r\n                        abandonDict[fragmentInfo.id] = fragmentInfo;\r\n                        logger.debug('[' + mediaType + '] frag id',fragmentInfo.id,' is asking to abandon and switch to quality to ', newQuality, ' measured bandwidth was', fragmentInfo.measuredBandwidthInKbps);\r\n                        delete fragmentDict[mediaType][fragmentInfo.id];\r\n                    }\r\n                }\r\n            } else if (fragmentInfo.bytesLoaded === fragmentInfo.bytesTotal) {\r\n                delete fragmentDict[mediaType][fragmentInfo.id];\r\n            }\r\n        }\r\n\r\n        return switchRequest;\r\n    }\r\n\r\n    function reset() {\r\n        fragmentDict = {};\r\n        abandonDict = {};\r\n        throughputArray = [];\r\n    }\r\n\r\n    instance = {\r\n        shouldAbandon: shouldAbandon,\r\n        reset: reset\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\nAbandonRequestsRule.__dashjs_factory_name = 'AbandonRequestsRule';\r\nexport default FactoryMaker.getClassFactory(AbandonRequestsRule);\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2016, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n// For a description of the BOLA adaptive bitrate (ABR) algorithm, see http://arxiv.org/abs/1601.06748\r\n\r\nimport MetricsConstants from '../../constants/MetricsConstants';\r\nimport SwitchRequest from '../SwitchRequest';\r\nimport FactoryMaker from '../../../core/FactoryMaker';\r\nimport { HTTPRequest } from '../../vo/metrics/HTTPRequest';\r\nimport EventBus from '../../../core/EventBus';\r\nimport Events from '../../../core/events/Events';\r\nimport Debug from '../../../core/Debug';\r\n\r\n// BOLA_STATE_ONE_BITRATE   : If there is only one bitrate (or initialization failed), always return NO_CHANGE.\r\n// BOLA_STATE_STARTUP       : Set placeholder buffer such that we download fragments at most recently measured throughput.\r\n// BOLA_STATE_STEADY        : Buffer primed, we switch to steady operation.\r\n// TODO: add BOLA_STATE_SEEK and tune BOLA behavior on seeking\r\nconst BOLA_STATE_ONE_BITRATE    = 0;\r\nconst BOLA_STATE_STARTUP        = 1;\r\nconst BOLA_STATE_STEADY         = 2;\r\n\r\nconst MINIMUM_BUFFER_S = 10; // BOLA should never add artificial delays if buffer is less than MINIMUM_BUFFER_S.\r\nconst MINIMUM_BUFFER_PER_BITRATE_LEVEL_S = 2;\r\n// E.g. if there are 5 bitrates, BOLA switches to top bitrate at buffer = 10 + 5 * 2 = 20s.\r\n// If Schedule Controller does not allow buffer to reach that level, it can be achieved through the placeholder buffer level.\r\n\r\nconst PLACEHOLDER_BUFFER_DECAY = 0.99; // Make sure placeholder buffer does not stick around too long.\r\n\r\nfunction BolaRule(config) {\r\n\r\n    config = config || {};\r\n    const context = this.context;\r\n\r\n    const dashMetrics = config.dashMetrics;\r\n    const mediaPlayerModel = config.mediaPlayerModel;\r\n    const eventBus = EventBus(context).getInstance();\r\n\r\n    let instance,\r\n        logger,\r\n        bolaStateDict;\r\n\r\n    function setup() {\r\n        logger = Debug(context).getInstance().getLogger(instance);\r\n        resetInitialSettings();\r\n\r\n        eventBus.on(Events.BUFFER_EMPTY, onBufferEmpty, instance);\r\n        eventBus.on(Events.PLAYBACK_SEEKING, onPlaybackSeeking, instance);\r\n        eventBus.on(Events.MEDIA_FRAGMENT_LOADED, onMediaFragmentLoaded, instance);\r\n        eventBus.on(Events.METRIC_ADDED, onMetricAdded, instance);\r\n        eventBus.on(Events.QUALITY_CHANGE_REQUESTED, onQualityChangeRequested, instance);\r\n        eventBus.on(Events.FRAGMENT_LOADING_ABANDONED, onFragmentLoadingAbandoned, instance);\r\n    }\r\n\r\n    function utilitiesFromBitrates(bitrates) {\r\n        return bitrates.map(b => Math.log(b));\r\n        // no need to worry about offset, utilities will be offset (uniformly) anyway later\r\n    }\r\n\r\n    // NOTE: in live streaming, the real buffer level can drop below minimumBufferS, but bola should not stick to lowest bitrate by using a placeholder buffer level\r\n    function calculateBolaParameters(stableBufferTime, bitrates, utilities) {\r\n        const highestUtilityIndex = utilities.reduce((highestIndex, u, uIndex) => (u > utilities[highestIndex] ? uIndex : highestIndex), 0);\r\n\r\n        if (highestUtilityIndex === 0) {\r\n            // if highestUtilityIndex === 0, then always use lowest bitrate\r\n            return null;\r\n        }\r\n\r\n        const bufferTime = Math.max(stableBufferTime, MINIMUM_BUFFER_S + MINIMUM_BUFFER_PER_BITRATE_LEVEL_S * bitrates.length);\r\n\r\n        // TODO: Investigate if following can be better if utilities are not the default Math.log utilities.\r\n        // If using Math.log utilities, we can choose Vp and gp to always prefer bitrates[0] at minimumBufferS and bitrates[max] at bufferTarget.\r\n        // (Vp * (utility + gp) - bufferLevel) / bitrate has the maxima described when:\r\n        // Vp * (utilities[0] + gp - 1) === minimumBufferS and Vp * (utilities[max] + gp - 1) === bufferTarget\r\n        // giving:\r\n        const gp = (utilities[highestUtilityIndex] - 1) / (bufferTime / MINIMUM_BUFFER_S - 1);\r\n        const Vp = MINIMUM_BUFFER_S / gp;\r\n        // note that expressions for gp and Vp assume utilities[0] === 1, which is true because of normalization\r\n\r\n        return {gp: gp, Vp: Vp};\r\n    }\r\n\r\n    function getInitialBolaState(rulesContext) {\r\n        const initialState = {};\r\n        const mediaInfo = rulesContext.getMediaInfo();\r\n        const bitrates = mediaInfo.bitrateList.map(b => b.bandwidth);\r\n        let utilities = utilitiesFromBitrates(bitrates);\r\n        utilities = utilities.map(u => u - utilities[0] + 1); // normalize\r\n        const stableBufferTime = mediaPlayerModel.getStableBufferTime();\r\n        const params = calculateBolaParameters(stableBufferTime, bitrates, utilities);\r\n\r\n        if (!params) {\r\n            // only happens when there is only one bitrate level\r\n            initialState.state = BOLA_STATE_ONE_BITRATE;\r\n        } else {\r\n            initialState.state = BOLA_STATE_STARTUP;\r\n\r\n            initialState.bitrates = bitrates;\r\n            initialState.utilities = utilities;\r\n            initialState.stableBufferTime = stableBufferTime;\r\n            initialState.Vp = params.Vp;\r\n            initialState.gp = params.gp;\r\n\r\n            initialState.lastQuality = 0;\r\n            clearBolaStateOnSeek(initialState);\r\n        }\r\n\r\n        return initialState;\r\n    }\r\n\r\n    function clearBolaStateOnSeek(bolaState) {\r\n        bolaState.placeholderBuffer = 0;\r\n        bolaState.mostAdvancedSegmentStart = NaN;\r\n        bolaState.lastSegmentWasReplacement = false;\r\n        bolaState.lastSegmentStart = NaN;\r\n        bolaState.lastSegmentDurationS = NaN;\r\n        bolaState.lastSegmentRequestTimeMs = NaN;\r\n        bolaState.lastSegmentFinishTimeMs = NaN;\r\n    }\r\n\r\n    // If the buffer target is changed (can this happen mid-stream?), then adjust BOLA parameters accordingly.\r\n    function checkBolaStateStableBufferTime(bolaState, mediaType) {\r\n        const stableBufferTime = mediaPlayerModel.getStableBufferTime();\r\n        if (bolaState.stableBufferTime !== stableBufferTime) {\r\n            const params = calculateBolaParameters(stableBufferTime, bolaState.bitrates, bolaState.utilities);\r\n            if (params.Vp !== bolaState.Vp || params.gp !== bolaState.gp) {\r\n                // correct placeholder buffer using two criteria:\r\n                // 1. do not change effective buffer level at effectiveBufferLevel === MINIMUM_BUFFER_S ( === Vp * gp )\r\n                // 2. scale placeholder buffer by Vp subject to offset indicated in 1.\r\n\r\n                const bufferLevel = dashMetrics.getCurrentBufferLevel(mediaType);\r\n                let effectiveBufferLevel = bufferLevel + bolaState.placeholderBuffer;\r\n\r\n                effectiveBufferLevel -= MINIMUM_BUFFER_S;\r\n                effectiveBufferLevel *= params.Vp / bolaState.Vp;\r\n                effectiveBufferLevel += MINIMUM_BUFFER_S;\r\n\r\n                bolaState.stableBufferTime = stableBufferTime;\r\n                bolaState.Vp = params.Vp;\r\n                bolaState.gp = params.gp;\r\n                bolaState.placeholderBuffer = Math.max(0, effectiveBufferLevel - bufferLevel);\r\n            }\r\n        }\r\n    }\r\n\r\n    function getBolaState(rulesContext) {\r\n        const mediaType = rulesContext.getMediaType();\r\n        let bolaState = bolaStateDict[mediaType];\r\n        if (!bolaState) {\r\n            bolaState = getInitialBolaState(rulesContext);\r\n            bolaStateDict[mediaType] = bolaState;\r\n        } else if (bolaState.state !== BOLA_STATE_ONE_BITRATE) {\r\n            checkBolaStateStableBufferTime(bolaState, mediaType);\r\n        }\r\n        return bolaState;\r\n    }\r\n\r\n    // The core idea of BOLA.\r\n    function getQualityFromBufferLevel(bolaState, bufferLevel) {\r\n        const bitrateCount = bolaState.bitrates.length;\r\n        let quality = NaN;\r\n        let score = NaN;\r\n        for (let i = 0; i < bitrateCount; ++i) {\r\n            let s = (bolaState.Vp * (bolaState.utilities[i] + bolaState.gp) - bufferLevel) / bolaState.bitrates[i];\r\n            if (isNaN(score) || s >= score) {\r\n                score = s;\r\n                quality = i;\r\n            }\r\n        }\r\n        return quality;\r\n    }\r\n\r\n    // maximum buffer level which prefers to download at quality rather than wait\r\n    function maxBufferLevelForQuality(bolaState, quality) {\r\n        return bolaState.Vp * (bolaState.utilities[quality] + bolaState.gp);\r\n    }\r\n\r\n    // the minimum buffer level that would cause BOLA to choose quality rather than a lower bitrate\r\n    function minBufferLevelForQuality(bolaState, quality) {\r\n        const qBitrate = bolaState.bitrates[quality];\r\n        const qUtility = bolaState.utilities[quality];\r\n\r\n        let min = 0;\r\n        for (let i = quality - 1; i >= 0; --i) {\r\n            // for each bitrate less than bitrates[quality], BOLA should prefer quality (unless other bitrate has higher utility)\r\n            if (bolaState.utilities[i] < bolaState.utilities[quality]) {\r\n                const iBitrate = bolaState.bitrates[i];\r\n                const iUtility = bolaState.utilities[i];\r\n\r\n                const level = bolaState.Vp * (bolaState.gp + (qBitrate * iUtility - iBitrate * qUtility) / (qBitrate - iBitrate));\r\n                min = Math.max(min, level); // we want min to be small but at least level(i) for all i\r\n            }\r\n        }\r\n        return min;\r\n    }\r\n\r\n    /*\r\n     * The placeholder buffer increases the effective buffer that is used to calculate the bitrate.\r\n     * There are two main reasons we might want to increase the placeholder buffer:\r\n     *\r\n     * 1. When a segment finishes downloading, we would expect to get a call on getMaxIndex() regarding the quality for\r\n     *    the next segment. However, there might be a delay before the next call. E.g. when streaming live content, the\r\n     *    next segment might not be available yet. If the call to getMaxIndex() does happens after a delay, we don't\r\n     *    want the delay to change the BOLA decision - we only want to factor download time to decide on bitrate level.\r\n     *\r\n     * 2. It is possible to get a call to getMaxIndex() without having a segment download. The buffer target in dash.js\r\n     *    is different for top-quality segments and lower-quality segments. If getMaxIndex() returns a lower-than-top\r\n     *    quality, then the buffer controller might decide not to download a segment. When dash.js is ready for the next\r\n     *    segment, getMaxIndex() will be called again. We don't want this extra delay to factor in the bitrate decision.\r\n     */\r\n    function updatePlaceholderBuffer(bolaState, mediaType) {\r\n        const nowMs = Date.now();\r\n\r\n        if (!isNaN(bolaState.lastSegmentFinishTimeMs)) {\r\n            // compensate for non-bandwidth-derived delays, e.g., live streaming availability, buffer controller\r\n            const delay = 0.001 * (nowMs - bolaState.lastSegmentFinishTimeMs);\r\n            bolaState.placeholderBuffer += Math.max(0, delay);\r\n        } else if (!isNaN(bolaState.lastCallTimeMs)) {\r\n            // no download after last call, compensate for delay between calls\r\n            const delay = 0.001 * (nowMs - bolaState.lastCallTimeMs);\r\n            bolaState.placeholderBuffer += Math.max(0, delay);\r\n        }\r\n\r\n        bolaState.lastCallTimeMs = nowMs;\r\n        bolaState.lastSegmentStart = NaN;\r\n        bolaState.lastSegmentRequestTimeMs = NaN;\r\n        bolaState.lastSegmentFinishTimeMs = NaN;\r\n\r\n        checkBolaStateStableBufferTime(bolaState, mediaType);\r\n    }\r\n\r\n    function onBufferEmpty() {\r\n        // if we rebuffer, we don't want the placeholder buffer to artificially raise BOLA quality\r\n        for (const mediaType in bolaStateDict) {\r\n            if (bolaStateDict.hasOwnProperty(mediaType) && bolaStateDict[mediaType].state === BOLA_STATE_STEADY) {\r\n                bolaStateDict[mediaType].placeholderBuffer = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    function onPlaybackSeeking() {\r\n        // TODO: 1. Verify what happens if we seek mid-fragment.\r\n        // TODO: 2. If e.g. we have 10s fragments and seek, we might want to download the first fragment at a lower quality to restart playback quickly.\r\n        for (const mediaType in bolaStateDict) {\r\n            if (bolaStateDict.hasOwnProperty(mediaType)) {\r\n                const bolaState = bolaStateDict[mediaType];\r\n                if (bolaState.state !== BOLA_STATE_ONE_BITRATE) {\r\n                    bolaState.state = BOLA_STATE_STARTUP; // TODO: BOLA_STATE_SEEK?\r\n                    clearBolaStateOnSeek(bolaState);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function onMediaFragmentLoaded(e) {\r\n        if (e && e.chunk && e.chunk.mediaInfo) {\r\n            const bolaState = bolaStateDict[e.chunk.mediaInfo.type];\r\n            if (bolaState && bolaState.state !== BOLA_STATE_ONE_BITRATE) {\r\n                const start = e.chunk.start;\r\n                if (isNaN(bolaState.mostAdvancedSegmentStart) || start > bolaState.mostAdvancedSegmentStart) {\r\n                    bolaState.mostAdvancedSegmentStart = start;\r\n                    bolaState.lastSegmentWasReplacement = false;\r\n                } else {\r\n                    bolaState.lastSegmentWasReplacement = true;\r\n                }\r\n\r\n                bolaState.lastSegmentStart = start;\r\n                bolaState.lastSegmentDurationS = e.chunk.duration;\r\n                bolaState.lastQuality = e.chunk.quality;\r\n\r\n                checkNewSegment(bolaState, e.chunk.mediaInfo.type);\r\n            }\r\n        }\r\n    }\r\n\r\n    function onMetricAdded(e) {\r\n        if (e && e.metric === MetricsConstants.HTTP_REQUEST && e.value && e.value.type === HTTPRequest.MEDIA_SEGMENT_TYPE && e.value.trace && e.value.trace.length) {\r\n            const bolaState = bolaStateDict[e.mediaType];\r\n            if (bolaState && bolaState.state !== BOLA_STATE_ONE_BITRATE) {\r\n                bolaState.lastSegmentRequestTimeMs = e.value.trequest.getTime();\r\n                bolaState.lastSegmentFinishTimeMs = e.value._tfinish.getTime();\r\n\r\n                checkNewSegment(bolaState, e.mediaType);\r\n            }\r\n        }\r\n    }\r\n\r\n    /*\r\n     * When a new segment is downloaded, we get two notifications: onMediaFragmentLoaded() and onMetricAdded(). It is\r\n     * possible that the quality for the downloaded segment was lower (not higher) than the quality indicated by BOLA.\r\n     * This might happen because of other rules such as the DroppedFramesRule. When this happens, we trim the\r\n     * placeholder buffer to make BOLA more stable. This mechanism also avoids inflating the buffer when BOLA itself\r\n     * decides not to increase the quality to avoid oscillations.\r\n     *\r\n     * We should also check for replacement segments (fast switching). In this case, a segment is downloaded but does\r\n     * not grow the actual buffer. Fast switching might cause the buffer to deplete, causing BOLA to drop the bitrate.\r\n     * We avoid this by growing the placeholder buffer.\r\n     */\r\n    function checkNewSegment(bolaState, mediaType) {\r\n        if (!isNaN(bolaState.lastSegmentStart) && !isNaN(bolaState.lastSegmentRequestTimeMs) && !isNaN(bolaState.placeholderBuffer)) {\r\n            bolaState.placeholderBuffer *= PLACEHOLDER_BUFFER_DECAY;\r\n\r\n            // Find what maximum buffer corresponding to last segment was, and ensure placeholder is not relatively larger.\r\n            if (!isNaN(bolaState.lastSegmentFinishTimeMs)) {\r\n                const bufferLevel = dashMetrics.getCurrentBufferLevel(mediaType);\r\n                const bufferAtLastSegmentRequest = bufferLevel + 0.001 * (bolaState.lastSegmentFinishTimeMs - bolaState.lastSegmentRequestTimeMs); // estimate\r\n                const maxEffectiveBufferForLastSegment = maxBufferLevelForQuality(bolaState, bolaState.lastQuality);\r\n                const maxPlaceholderBuffer = Math.max(0, maxEffectiveBufferForLastSegment - bufferAtLastSegmentRequest);\r\n                bolaState.placeholderBuffer = Math.min(maxPlaceholderBuffer, bolaState.placeholderBuffer);\r\n            }\r\n\r\n            // then see if we should grow placeholder buffer\r\n\r\n            if (bolaState.lastSegmentWasReplacement && !isNaN(bolaState.lastSegmentDurationS)) {\r\n                // compensate for segments that were downloaded but did not grow the buffer\r\n                bolaState.placeholderBuffer += bolaState.lastSegmentDurationS;\r\n            }\r\n\r\n            bolaState.lastSegmentStart = NaN;\r\n            bolaState.lastSegmentRequestTimeMs = NaN;\r\n        }\r\n    }\r\n\r\n    function onQualityChangeRequested(e) {\r\n        // Useful to store change requests when abandoning a download.\r\n        if (e) {\r\n            const bolaState = bolaStateDict[e.mediaType];\r\n            if (bolaState && bolaState.state !== BOLA_STATE_ONE_BITRATE) {\r\n                bolaState.abrQuality = e.newQuality;\r\n            }\r\n        }\r\n    }\r\n\r\n    function onFragmentLoadingAbandoned(e) {\r\n        if (e) {\r\n            const bolaState = bolaStateDict[e.mediaType];\r\n            if (bolaState && bolaState.state !== BOLA_STATE_ONE_BITRATE) {\r\n                // deflate placeholderBuffer - note that we want to be conservative when abandoning\r\n                const bufferLevel = dashMetrics.getCurrentBufferLevel(e.mediaType);\r\n                let wantEffectiveBufferLevel;\r\n                if (bolaState.abrQuality > 0) {\r\n                    // deflate to point where BOLA just chooses newQuality over newQuality-1\r\n                    wantEffectiveBufferLevel = minBufferLevelForQuality(bolaState, bolaState.abrQuality);\r\n                } else {\r\n                    wantEffectiveBufferLevel = MINIMUM_BUFFER_S;\r\n                }\r\n                const maxPlaceholderBuffer = Math.max(0, wantEffectiveBufferLevel - bufferLevel);\r\n                bolaState.placeholderBuffer = Math.min(bolaState.placeholderBuffer, maxPlaceholderBuffer);\r\n            }\r\n        }\r\n    }\r\n\r\n    function getMaxIndex(rulesContext) {\r\n        const switchRequest = SwitchRequest(context).create();\r\n\r\n        if (!rulesContext || !rulesContext.hasOwnProperty('getMediaInfo') || !rulesContext.hasOwnProperty('getMediaType') ||\r\n            !rulesContext.hasOwnProperty('getScheduleController') || !rulesContext.hasOwnProperty('getStreamInfo') ||\r\n            !rulesContext.hasOwnProperty('getAbrController') || !rulesContext.hasOwnProperty('useBufferOccupancyABR')) {\r\n            return switchRequest;\r\n        }\r\n        const mediaInfo = rulesContext.getMediaInfo();\r\n        const mediaType = rulesContext.getMediaType();\r\n        const scheduleController = rulesContext.getScheduleController();\r\n        const streamInfo = rulesContext.getStreamInfo();\r\n        const abrController = rulesContext.getAbrController();\r\n        const throughputHistory = abrController.getThroughputHistory();\r\n        const streamId = streamInfo ? streamInfo.id : null;\r\n        const isDynamic = streamInfo && streamInfo.manifestInfo && streamInfo.manifestInfo.isDynamic;\r\n        const useBufferOccupancyABR = rulesContext.useBufferOccupancyABR();\r\n        switchRequest.reason = switchRequest.reason || {};\r\n\r\n        if (!useBufferOccupancyABR) {\r\n            return switchRequest;\r\n        }\r\n\r\n        scheduleController.setTimeToLoadDelay(0);\r\n\r\n        const bolaState = getBolaState(rulesContext);\r\n\r\n        if (bolaState.state === BOLA_STATE_ONE_BITRATE) {\r\n            // shouldn't even have been called\r\n            return switchRequest;\r\n        }\r\n\r\n        const bufferLevel = dashMetrics.getCurrentBufferLevel(mediaType);\r\n        const throughput = throughputHistory.getAverageThroughput(mediaType, isDynamic);\r\n        const safeThroughput = throughputHistory.getSafeAverageThroughput(mediaType, isDynamic);\r\n        const latency = throughputHistory.getAverageLatency(mediaType);\r\n        let quality;\r\n\r\n        switchRequest.reason.state = bolaState.state;\r\n        switchRequest.reason.throughput = throughput;\r\n        switchRequest.reason.latency = latency;\r\n\r\n        if (isNaN(throughput)) { // isNaN(throughput) === isNaN(safeThroughput) === isNaN(latency)\r\n            // still starting up - not enough information\r\n            return switchRequest;\r\n        }\r\n\r\n        switch (bolaState.state) {\r\n            case BOLA_STATE_STARTUP:\r\n                quality = abrController.getQualityForBitrate(mediaInfo, safeThroughput, latency);\r\n\r\n                switchRequest.quality = quality;\r\n                switchRequest.reason.throughput = safeThroughput;\r\n\r\n                bolaState.placeholderBuffer = Math.max(0, minBufferLevelForQuality(bolaState, quality) - bufferLevel);\r\n                bolaState.lastQuality = quality;\r\n\r\n                if (!isNaN(bolaState.lastSegmentDurationS) && bufferLevel >= bolaState.lastSegmentDurationS) {\r\n                    bolaState.state = BOLA_STATE_STEADY;\r\n                }\r\n\r\n                break; // BOLA_STATE_STARTUP\r\n\r\n            case BOLA_STATE_STEADY:\r\n\r\n                // NB: The placeholder buffer is added to bufferLevel to come up with a bitrate.\r\n                //     This might lead BOLA to be too optimistic and to choose a bitrate that would lead to rebuffering -\r\n                //     if the real buffer bufferLevel runs out, the placeholder buffer cannot prevent rebuffering.\r\n                //     However, the InsufficientBufferRule takes care of this scenario.\r\n\r\n                updatePlaceholderBuffer(bolaState, mediaType);\r\n\r\n                quality = getQualityFromBufferLevel(bolaState, bufferLevel + bolaState.placeholderBuffer);\r\n\r\n                // we want to avoid oscillations\r\n                // We implement the \"BOLA-O\" variant: when network bandwidth lies between two encoded bitrate levels, stick to the lowest level.\r\n                const qualityForThroughput = abrController.getQualityForBitrate(mediaInfo, safeThroughput, latency);\r\n                if (quality > bolaState.lastQuality && quality > qualityForThroughput) {\r\n                    // only intervene if we are trying to *increase* quality to an *unsustainable* level\r\n                    // we are only avoid oscillations - do not drop below last quality\r\n\r\n                    quality = Math.max(qualityForThroughput, bolaState.lastQuality);\r\n                }\r\n\r\n                // We do not want to overfill buffer with low quality chunks.\r\n                // Note that there will be no delay if buffer level is below MINIMUM_BUFFER_S, probably even with some margin higher than MINIMUM_BUFFER_S.\r\n                let delayS = Math.max(0, bufferLevel + bolaState.placeholderBuffer - maxBufferLevelForQuality(bolaState, quality));\r\n\r\n                // First reduce placeholder buffer, then tell schedule controller to pause.\r\n                if (delayS <= bolaState.placeholderBuffer) {\r\n                    bolaState.placeholderBuffer -= delayS;\r\n                    delayS = 0;\r\n                } else {\r\n                    delayS -= bolaState.placeholderBuffer;\r\n                    bolaState.placeholderBuffer = 0;\r\n\r\n                    if (quality < abrController.getTopQualityIndexFor(mediaType, streamId)) {\r\n                        // At top quality, allow schedule controller to decide how far to fill buffer.\r\n                        scheduleController.setTimeToLoadDelay(1000 * delayS);\r\n                    } else {\r\n                        delayS = 0;\r\n                    }\r\n                }\r\n\r\n                switchRequest.quality = quality;\r\n                switchRequest.reason.throughput = throughput;\r\n                switchRequest.reason.latency = latency;\r\n                switchRequest.reason.bufferLevel = bufferLevel;\r\n                switchRequest.reason.placeholderBuffer = bolaState.placeholderBuffer;\r\n                switchRequest.reason.delay = delayS;\r\n\r\n                bolaState.lastQuality = quality;\r\n                // keep bolaState.state === BOLA_STATE_STEADY\r\n\r\n                break; // BOLA_STATE_STEADY\r\n\r\n            default:\r\n                logger.debug('BOLA ABR rule invoked in bad state.');\r\n                // should not arrive here, try to recover\r\n                switchRequest.quality = abrController.getQualityForBitrate(mediaInfo, safeThroughput, latency);\r\n                switchRequest.reason.state = bolaState.state;\r\n                switchRequest.reason.throughput = safeThroughput;\r\n                switchRequest.reason.latency = latency;\r\n                bolaState.state = BOLA_STATE_STARTUP;\r\n                clearBolaStateOnSeek(bolaState);\r\n        }\r\n\r\n        return switchRequest;\r\n    }\r\n\r\n    function resetInitialSettings() {\r\n        bolaStateDict = {};\r\n    }\r\n\r\n    function reset() {\r\n        resetInitialSettings();\r\n\r\n        eventBus.off(Events.BUFFER_EMPTY, onBufferEmpty, instance);\r\n        eventBus.off(Events.PLAYBACK_SEEKING, onPlaybackSeeking, instance);\r\n        eventBus.off(Events.MEDIA_FRAGMENT_LOADED, onMediaFragmentLoaded, instance);\r\n        eventBus.off(Events.METRIC_ADDED, onMetricAdded, instance);\r\n        eventBus.off(Events.QUALITY_CHANGE_REQUESTED, onQualityChangeRequested, instance);\r\n        eventBus.off(Events.FRAGMENT_LOADING_ABANDONED, onFragmentLoadingAbandoned, instance);\r\n    }\r\n\r\n    instance = {\r\n        getMaxIndex: getMaxIndex,\r\n        reset: reset\r\n    };\r\n\r\n    setup();\r\n    return instance;\r\n}\r\n\r\nBolaRule.__dashjs_factory_name = 'BolaRule';\r\nexport default FactoryMaker.getClassFactory(BolaRule);\r\n","\r\nimport FactoryMaker from '../../../core/FactoryMaker';\r\nimport SwitchRequest from '../SwitchRequest';\r\nimport Debug from '../../../core/Debug';\r\n\r\nfunction DroppedFramesRule() {\r\n\r\n    const context = this.context;\r\n    let instance,\r\n        logger;\r\n\r\n    const DROPPED_PERCENTAGE_FORBID = 0.15;\r\n    const GOOD_SAMPLE_SIZE = 375; //Don't apply the rule until this many frames have been rendered(and counted under those indices).\r\n\r\n    function setup() {\r\n        logger = Debug(context).getInstance().getLogger(instance);\r\n    }\r\n\r\n    function getMaxIndex(rulesContext) {\r\n        const switchRequest = SwitchRequest(context).create();\r\n\r\n        if (!rulesContext || !rulesContext.hasOwnProperty('getDroppedFramesHistory')) {\r\n            return switchRequest;\r\n        }\r\n        const droppedFramesHistory = rulesContext.getDroppedFramesHistory();\r\n        if (droppedFramesHistory) {\r\n            const dfh = droppedFramesHistory.getFrameHistory();\r\n            let droppedFrames = 0;\r\n            let totalFrames = 0;\r\n            let maxIndex = SwitchRequest.NO_CHANGE;\r\n            for (let i = 1; i < dfh.length; i++) { //No point in measuring dropped frames for the zeroeth index.\r\n                if (dfh[i]) {\r\n                    droppedFrames = dfh[i].droppedVideoFrames;\r\n                    totalFrames = dfh[i].totalVideoFrames;\r\n\r\n                    if (totalFrames > GOOD_SAMPLE_SIZE && droppedFrames / totalFrames > DROPPED_PERCENTAGE_FORBID) {\r\n                        maxIndex = i - 1;\r\n                        logger.debug('index: ' + maxIndex + ' Dropped Frames: ' + droppedFrames + ' Total Frames: ' + totalFrames);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            return SwitchRequest(context).create(maxIndex, {droppedFrames: droppedFrames});\r\n        }\r\n\r\n        return switchRequest;\r\n    }\r\n\r\n    instance = {\r\n        getMaxIndex: getMaxIndex\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\nDroppedFramesRule.__dashjs_factory_name = 'DroppedFramesRule';\r\nexport default FactoryMaker.getClassFactory(DroppedFramesRule);","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport EventBus from '../../../core/EventBus';\r\nimport Events from '../../../core/events/Events';\r\nimport FactoryMaker from '../../../core/FactoryMaker';\r\nimport Debug from '../../../core/Debug';\r\nimport SwitchRequest from '../SwitchRequest';\r\nimport Constants from '../../constants/Constants';\r\nimport MetricsConstants from '../../constants/MetricsConstants';\r\n\r\nfunction InsufficientBufferRule(config) {\r\n\r\n    config = config || {};\r\n    const INSUFFICIENT_BUFFER_SAFETY_FACTOR = 0.5;\r\n    const SEGMENT_IGNORE_COUNT = 2;\r\n\r\n    const context = this.context;\r\n\r\n    const eventBus = EventBus(context).getInstance();\r\n    const dashMetrics = config.dashMetrics;\r\n\r\n    let instance,\r\n        logger,\r\n        bufferStateDict;\r\n\r\n    function setup() {\r\n        logger = Debug(context).getInstance().getLogger(instance);\r\n        resetInitialSettings();\r\n        eventBus.on(Events.PLAYBACK_SEEKING, onPlaybackSeeking, instance);\r\n        eventBus.on(Events.BYTES_APPENDED_END_FRAGMENT, onEndFragment, instance);\r\n    }\r\n\r\n    function checkConfig() {\r\n        if (!dashMetrics || !dashMetrics.hasOwnProperty('getCurrentBufferLevel') || !dashMetrics.hasOwnProperty('getCurrentBufferState')) {\r\n            throw new Error(Constants.MISSING_CONFIG_ERROR);\r\n        }\r\n    }\r\n\r\n    /*\r\n     * InsufficientBufferRule does not kick in before the first BUFFER_LOADED event happens. This is reset at every seek.\r\n     *\r\n     * If a BUFFER_EMPTY event happens, then InsufficientBufferRule returns switchRequest.quality=0 until BUFFER_LOADED happens.\r\n     *\r\n     * Otherwise InsufficientBufferRule gives a maximum bitrate depending on throughput and bufferLevel such that\r\n     * a whole fragment can be downloaded before the buffer runs out, subject to a conservative safety factor of 0.5.\r\n     * If the bufferLevel is low, then InsufficientBufferRule avoids rebuffering risk.\r\n     * If the bufferLevel is high, then InsufficientBufferRule give a high MaxIndex allowing other rules to take over.\r\n     */\r\n    function getMaxIndex(rulesContext) {\r\n        const switchRequest = SwitchRequest(context).create();\r\n\r\n        if (!rulesContext || !rulesContext.hasOwnProperty('getMediaType')) {\r\n            return switchRequest;\r\n        }\r\n\r\n        checkConfig();\r\n\r\n        const mediaType = rulesContext.getMediaType();\r\n        const currentBufferState = dashMetrics.getCurrentBufferState(mediaType);\r\n        const representationInfo = rulesContext.getRepresentationInfo();\r\n        const fragmentDuration = representationInfo.fragmentDuration;\r\n\r\n        // Don't ask for a bitrate change if there is not info about buffer state or if fragmentDuration is not defined\r\n        if (shouldIgnore(mediaType) || !fragmentDuration) {\r\n            return switchRequest;\r\n        }\r\n\r\n        if (currentBufferState && currentBufferState.state === MetricsConstants.BUFFER_EMPTY) {\r\n            logger.debug('[' + mediaType + '] Switch to index 0; buffer is empty.');\r\n            switchRequest.quality = 0;\r\n            switchRequest.reason = 'InsufficientBufferRule: Buffer is empty';\r\n        } else {\r\n            const mediaInfo = rulesContext.getMediaInfo();\r\n            const abrController = rulesContext.getAbrController();\r\n            const throughputHistory = abrController.getThroughputHistory();\r\n\r\n            const bufferLevel = dashMetrics.getCurrentBufferLevel(mediaType);\r\n            const throughput = throughputHistory.getAverageThroughput(mediaType);\r\n            const latency = throughputHistory.getAverageLatency(mediaType);\r\n            const bitrate = throughput * (bufferLevel / fragmentDuration) * INSUFFICIENT_BUFFER_SAFETY_FACTOR;\r\n\r\n            switchRequest.quality = abrController.getQualityForBitrate(mediaInfo, bitrate, latency);\r\n            switchRequest.reason = 'InsufficientBufferRule: being conservative to avoid immediate rebuffering';\r\n        }\r\n\r\n        return switchRequest;\r\n    }\r\n\r\n    function shouldIgnore(mediaType) {\r\n        return bufferStateDict[mediaType].ignoreCount > 0;\r\n    }\r\n\r\n    function resetInitialSettings() {\r\n        bufferStateDict = {};\r\n        bufferStateDict[Constants.VIDEO] = {ignoreCount: SEGMENT_IGNORE_COUNT};\r\n        bufferStateDict[Constants.AUDIO] = {ignoreCount: SEGMENT_IGNORE_COUNT};\r\n    }\r\n\r\n    function onPlaybackSeeking() {\r\n        resetInitialSettings();\r\n    }\r\n\r\n    function onEndFragment(e) {\r\n        if (!isNaN(e.startTime) && (e.mediaType === Constants.AUDIO || e.mediaType === Constants.VIDEO)) {\r\n            if (bufferStateDict[e.mediaType].ignoreCount > 0) {\r\n                bufferStateDict[e.mediaType].ignoreCount--;\r\n            }\r\n        }\r\n    }\r\n\r\n    function reset() {\r\n        resetInitialSettings();\r\n        eventBus.off(Events.PLAYBACK_SEEKING, onPlaybackSeeking, instance);\r\n        eventBus.off(Events.BYTES_APPENDED_END_FRAGMENT, onEndFragment, instance);\r\n    }\r\n\r\n    instance = {\r\n        getMaxIndex: getMaxIndex,\r\n        reset: reset\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\nInsufficientBufferRule.__dashjs_factory_name = 'InsufficientBufferRule';\r\nexport default FactoryMaker.getClassFactory(InsufficientBufferRule);\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2020, Unified Streaming.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n// For a description of the Learn2Adapt-LowLatency (L2A-LL) bitrate adaptation algorithm, see https://github.com/unifiedstreaming/Learn2Adapt-LowLatency/blob/master/Online_learning_for_bitrate_adaptation_in_low_latency_live_streaming_CR.pdf\r\n\r\nimport MetricsConstants from '../../constants/MetricsConstants';\r\nimport SwitchRequest from '../SwitchRequest';\r\nimport FactoryMaker from '../../../core/FactoryMaker';\r\nimport {HTTPRequest} from '../../vo/metrics/HTTPRequest';\r\nimport EventBus from '../../../core/EventBus';\r\nimport Events from '../../../core/events/Events';\r\nimport Debug from '../../../core/Debug';\r\nimport Constants from '../../constants/Constants';\r\n\r\nconst L2A_STATE_ONE_BITRATE = 0; // If there is only one bitrate (or initialization failed), always return NO_CHANGE.\r\nconst L2A_STATE_STARTUP = 1; // Set placeholder buffer such that we download fragments at most recently measured throughput.\r\nconst L2A_STATE_STEADY = 2; // Buffer primed, we switch to steady operation.\r\n\r\n\r\nfunction L2ARule(config) {\r\n    config = config || {};\r\n    const context = this.context;\r\n\r\n    const dashMetrics = config.dashMetrics;\r\n    const eventBus = EventBus(context).getInstance();\r\n\r\n    let instance,\r\n        l2AStateDict,\r\n        l2AParameterDict,\r\n        logger;\r\n\r\n    /**\r\n     * Setup function to initialize L2ARule\r\n     */\r\n    function setup() {\r\n        logger = Debug(context).getInstance().getLogger(instance);\r\n        _resetInitialSettings();\r\n\r\n        eventBus.on(Events.PLAYBACK_SEEKING, _onPlaybackSeeking, instance);\r\n        eventBus.on(Events.MEDIA_FRAGMENT_LOADED, _onMediaFragmentLoaded, instance);\r\n        eventBus.on(Events.METRIC_ADDED, _onMetricAdded, instance);\r\n        eventBus.on(Events.QUALITY_CHANGE_REQUESTED, _onQualityChangeRequested, instance);\r\n    }\r\n\r\n    /**\r\n     * Sets the initial state of the algorithm. Calls the initialize function for the paramteters.\r\n     * @param {object} rulesContext\r\n     * @return {object} initialState\r\n     * @private\r\n     */\r\n    function _getInitialL2AState(rulesContext) {\r\n        const initialState = {};\r\n        const mediaInfo = rulesContext.getMediaInfo();\r\n        const bitrates = mediaInfo.bitrateList.map((b) => {\r\n            return b.bandwidth / 1000;\r\n        });\r\n\r\n        initialState.state = L2A_STATE_STARTUP;\r\n        initialState.bitrates = bitrates;\r\n        initialState.lastQuality = 0;\r\n\r\n        _initializeL2AParameters(mediaInfo);\r\n        _clearL2AStateOnSeek(initialState);\r\n\r\n        return initialState;\r\n    }\r\n\r\n    /**\r\n     * Initializes the parameters of the algorithm. This will be done once for each media type.\r\n     * @param {object} mediaInfo\r\n     * @private\r\n     */\r\n    function _initializeL2AParameters(mediaInfo) {\r\n\r\n        if (!mediaInfo || !mediaInfo.type) {\r\n            return;\r\n        }\r\n        l2AParameterDict[mediaInfo.type] = {};\r\n        l2AParameterDict[mediaInfo.type].w = []; //Vector of probabilities associated with bitrate decisions\r\n        l2AParameterDict[mediaInfo.type].prev_w = []; //Vector of probabilities associated with bitrate decisions calculated in the previous step\r\n        l2AParameterDict[mediaInfo.type].Q = 0; //Initialization of Lagrangian multiplier (This keeps track of the buffer displacement)\r\n        l2AParameterDict[mediaInfo.type].segment_request_start_s = 0;\r\n        l2AParameterDict[mediaInfo.type].segment_download_finish_s = 0;\r\n        l2AParameterDict[mediaInfo.type].B_target = 1.5; //Target buffer level\r\n    }\r\n\r\n\r\n    /**\r\n     * Clears the state object\r\n     * @param {object} l2AState\r\n     * @private\r\n     */\r\n    function _clearL2AStateOnSeek(l2AState) {\r\n        l2AState.placeholderBuffer = 0;\r\n        l2AState.mostAdvancedSegmentStart = NaN;\r\n        l2AState.lastSegmentWasReplacement = false;\r\n        l2AState.lastSegmentStart = NaN;\r\n        l2AState.lastSegmentDurationS = NaN;\r\n        l2AState.lastSegmentRequestTimeMs = NaN;\r\n        l2AState.lastSegmentFinishTimeMs = NaN;\r\n    }\r\n\r\n\r\n    /**\r\n     * Returns the state object for a fiven media type. If the state object is not yet defined _getInitialL2AState is called\r\n     * @param {object} rulesContext\r\n     * @return {object} l2AState\r\n     * @private\r\n     */\r\n    function _getL2AState(rulesContext) {\r\n        const mediaType = rulesContext.getMediaType();\r\n        let l2AState = l2AStateDict[mediaType];\r\n\r\n        if (!l2AState) {\r\n            l2AState = _getInitialL2AState(rulesContext);\r\n            l2AStateDict[mediaType] = l2AState;\r\n        }\r\n\r\n        return l2AState;\r\n    }\r\n\r\n    /**\r\n     * Event handler for the seeking event.\r\n     * @private\r\n     */\r\n    function _onPlaybackSeeking() {\r\n        for (const mediaType in l2AStateDict) {\r\n            if (l2AStateDict.hasOwnProperty(mediaType)) {\r\n                const l2aState = l2AStateDict[mediaType];\r\n                if (l2aState.state !== L2A_STATE_ONE_BITRATE) {\r\n                    l2aState.state = L2A_STATE_STARTUP;\r\n                    _clearL2AStateOnSeek(l2aState);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Event handler for the mediaFragmentLoaded event\r\n     * @param {object} e\r\n     * @private\r\n     */\r\n    function _onMediaFragmentLoaded(e) {\r\n        if (e && e.chunk && e.chunk.mediaInfo) {\r\n            const l2AState = l2AStateDict[e.chunk.mediaInfo.type];\r\n            const l2AParameters = l2AParameterDict[e.chunk.mediaInfo.type];\r\n\r\n            if (l2AState && l2AState.state !== L2A_STATE_ONE_BITRATE) {\r\n                const start = e.chunk.start;\r\n                if (isNaN(l2AState.mostAdvancedSegmentStart) || start > l2AState.mostAdvancedSegmentStart) {\r\n                    l2AState.mostAdvancedSegmentStart = start;\r\n                    l2AState.lastSegmentWasReplacement = false;\r\n                } else {\r\n                    l2AState.lastSegmentWasReplacement = true;\r\n                }\r\n\r\n                l2AState.lastSegmentStart = start;\r\n                l2AState.lastSegmentDurationS = e.chunk.duration;\r\n                l2AState.lastQuality = e.chunk.quality;\r\n\r\n                _checkNewSegment(l2AState, l2AParameters);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Event handler for the metricAdded event\r\n     * @param {object} e\r\n     * @private\r\n     */\r\n    function _onMetricAdded(e) {\r\n        if (e && e.metric === MetricsConstants.HTTP_REQUEST && e.value && e.value.type === HTTPRequest.MEDIA_SEGMENT_TYPE && e.value.trace && e.value.trace.length) {\r\n            const l2AState = l2AStateDict[e.mediaType];\r\n            const l2AParameters = l2AParameterDict[e.mediaType];\r\n\r\n            if (l2AState && l2AState.state !== L2A_STATE_ONE_BITRATE) {\r\n                l2AState.lastSegmentRequestTimeMs = e.value.trequest.getTime();\r\n                l2AState.lastSegmentFinishTimeMs = e.value._tfinish.getTime();\r\n                _checkNewSegment(l2AState, l2AParameters);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * When a new metric has been added or a media fragment has been loaded the state is adjusted accordingly\r\n     * @param {object} L2AState\r\n     * @param {object} l2AParameters\r\n     * @private\r\n     */\r\n    function _checkNewSegment(L2AState, l2AParameters) {\r\n        if (!isNaN(L2AState.lastSegmentStart) && !isNaN(L2AState.lastSegmentRequestTimeMs)) {\r\n            l2AParameters.segment_request_start_s = 0.001 * L2AState.lastSegmentRequestTimeMs;\r\n            l2AParameters.segment_download_finish_s = 0.001 * L2AState.lastSegmentFinishTimeMs;\r\n            L2AState.lastSegmentStart = NaN;\r\n            L2AState.lastSegmentRequestTimeMs = NaN;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Event handler for the qualityChangeRequested event\r\n     * @param {object} e\r\n     * @private\r\n     */\r\n    function _onQualityChangeRequested(e) {\r\n        // Useful to store change requests when abandoning a download.\r\n        if (e && e.mediaType) {\r\n            const L2AState = l2AStateDict[e.mediaType];\r\n            if (L2AState && L2AState.state !== L2A_STATE_ONE_BITRATE) {\r\n                L2AState.abrQuality = e.newQuality;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Dot multiplication of two arrays\r\n     * @param {array} arr1\r\n     * @param {array} arr2\r\n     * @return {number} sumdot\r\n     * @private\r\n     */\r\n\r\n    function _dotmultiplication(arr1, arr2) {\r\n        if (arr1.length !== arr2.length) {\r\n            return -1;\r\n        }\r\n        let sumdot = 0;\r\n        for (let i = 0; i < arr1.length; i++) {\r\n            sumdot = sumdot + arr1[i] * arr2[i];\r\n        }\r\n        return sumdot;\r\n    }\r\n\r\n    /**\r\n     * Project an n-dim vector y to the simplex Dn\r\n     * Dn = { x : x n-dim, 1 >= x >= 0, sum(x) = 1}\r\n     * Algorithm is explained at http://arxiv.org/abs/1101.6081\r\n     * @param {array} arr\r\n     * @return {array}\r\n     * @constructor\r\n     */\r\n    function euclideanProjection(arr) {\r\n        const m = arr.length;\r\n        let bget = false;\r\n        let arr2 = [];\r\n        for (let ii = 0; ii < m; ++ii) {\r\n            arr2[ii] = arr[ii];\r\n        }\r\n        let s = arr.sort(function (a, b) {\r\n            return b - a;\r\n        });\r\n        let tmpsum = 0;\r\n        let tmax = 0;\r\n        let x = [];\r\n        for (let ii = 0; ii < m - 1; ++ii) {\r\n            tmpsum = tmpsum + s[ii];\r\n            tmax = (tmpsum - 1) / (ii + 1);\r\n            if (tmax >= s[ii + 1]) {\r\n                bget = true;\r\n                break;\r\n            }\r\n        }\r\n        if (!bget) {\r\n            tmax = (tmpsum + s[m - 1] - 1) / m;\r\n        }\r\n        for (let ii = 0; ii < m; ++ii) {\r\n            x[ii] = Math.max(arr2[ii] - tmax, 0);\r\n        }\r\n        return x;\r\n    }\r\n\r\n    /**\r\n     * Returns a switch request object indicating which quality is to be played\r\n     * @param {object} rulesContext\r\n     * @return {object}\r\n     */\r\n    function getMaxIndex(rulesContext) {\r\n        const switchRequest = SwitchRequest(context).create();\r\n        const horizon = 4; // Optimization horizon (The amount of steps required to achieve convergence)\r\n        const vl = Math.pow(horizon, 0.99);// Cautiousness parameter, used to control aggressiveness of the bitrate decision process.\r\n        const alpha = Math.max(Math.pow(horizon, 1), vl * Math.sqrt(horizon));// Step size, used for gradient descent exploration granularity\r\n        const mediaInfo = rulesContext.getMediaInfo();\r\n        const mediaType = rulesContext.getMediaType();\r\n        const bitrates = mediaInfo.bitrateList.map(b => b.bandwidth);\r\n        const bitrateCount = bitrates.length;\r\n        const scheduleController = rulesContext.getScheduleController();\r\n        const streamInfo = rulesContext.getStreamInfo();\r\n        const abrController = rulesContext.getAbrController();\r\n        const throughputHistory = abrController.getThroughputHistory();\r\n        const isDynamic = streamInfo && streamInfo.manifestInfo && streamInfo.manifestInfo.isDynamic;\r\n        const useL2AABR = rulesContext.useL2AABR();\r\n        const bufferLevel = dashMetrics.getCurrentBufferLevel(mediaType, true);\r\n        const safeThroughput = throughputHistory.getSafeAverageThroughput(mediaType, isDynamic);\r\n        const throughput = throughputHistory.getAverageThroughput(mediaType, isDynamic); // In kbits/s\r\n        const react = 2; // Reactiveness to volatility (abrupt throughput drops), used to re-calibrate Lagrangian multiplier Q\r\n        const latency = throughputHistory.getAverageLatency(mediaType);\r\n        const videoModel = rulesContext.getVideoModel();\r\n        let quality;\r\n        let currentPlaybackRate = videoModel.getPlaybackRate();\r\n\r\n        if (!rulesContext || !rulesContext.hasOwnProperty('getMediaInfo') || !rulesContext.hasOwnProperty('getMediaType') ||\r\n            !rulesContext.hasOwnProperty('getScheduleController') || !rulesContext.hasOwnProperty('getStreamInfo') ||\r\n            !rulesContext.hasOwnProperty('getAbrController') || !rulesContext.hasOwnProperty('useL2AABR')) {\r\n            return switchRequest;\r\n        }\r\n\r\n        switchRequest.reason = switchRequest.reason || {};\r\n\r\n        if ((!useL2AABR) || (mediaType === Constants.AUDIO)) {// L2A decides bitrate only for video. Audio to be included in decision process in a later stage\r\n            return switchRequest;\r\n        }\r\n\r\n        scheduleController.setTimeToLoadDelay(0);\r\n\r\n        const l2AState = _getL2AState(rulesContext);\r\n\r\n        if (l2AState.state === L2A_STATE_ONE_BITRATE) {\r\n            // shouldn't even have been called\r\n            return switchRequest;\r\n        }\r\n\r\n        const l2AParameter = l2AParameterDict[mediaType];\r\n\r\n        if (!l2AParameter) {\r\n            return switchRequest;\r\n        }\r\n\r\n        switchRequest.reason.state = l2AState.state;\r\n        switchRequest.reason.throughput = throughput;\r\n        switchRequest.reason.latency = latency;\r\n\r\n        if (isNaN(throughput)) {\r\n            // still starting up - not enough information\r\n            return switchRequest;\r\n        }\r\n\r\n        switch (l2AState.state) {\r\n            case L2A_STATE_STARTUP:\r\n                quality = abrController.getQualityForBitrate(mediaInfo, safeThroughput, latency);//During strat-up phase abr.controller is responsible for bitrate decisions.\r\n                switchRequest.quality = quality;\r\n                switchRequest.reason.throughput = safeThroughput;\r\n                l2AState.lastQuality = quality;\r\n\r\n                if (!isNaN(l2AState.lastSegmentDurationS) && bufferLevel >= l2AParameter.B_target) {\r\n                    l2AState.state = L2A_STATE_STEADY;\r\n                    l2AParameter.Q = vl;// Initialization of Q langrangian multiplier\r\n                    // Update of probability vector w, to be used in main adaptation logic of L2A below (steady state)\r\n                    for (let i = 0; i < bitrateCount; ++i) {\r\n                        if (i === l2AState.lastQuality) {\r\n                            l2AParameter.prev_w[i] = 1;\r\n                        } else {\r\n                            l2AParameter.prev_w[i] = 0;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                break; // L2A_STATE_STARTUP\r\n            case L2A_STATE_STEADY:\r\n                let diff1 = [];//Used to calculate the difference between consecutive decisions (w-w_prev)\r\n\r\n                // Manual calculation of latency and throughput during previous request\r\n                let throughputMeasureTime = dashMetrics.getCurrentHttpRequest(mediaType).trace.reduce((a, b) => a + b.d, 0);\r\n                const downloadBytes = dashMetrics.getCurrentHttpRequest(mediaType).trace.reduce((a, b) => a + b.b[0], 0);\r\n                let lastthroughput = Math.round((8 * downloadBytes) / throughputMeasureTime); // bits/ms = kbits/s\r\n\r\n                if (lastthroughput < 1) {\r\n                    lastthroughput = 1;\r\n                }//To avoid division with 0 (avoid infinity) in case of an absolute network outage\r\n\r\n                let V = l2AState.lastSegmentDurationS;\r\n                let sign = 1;\r\n\r\n                //Main adaptation logic of L2A-LL\r\n                for (let i = 0; i < bitrateCount; ++i) {\r\n                    bitrates[i] = bitrates[i] / 1000; // Originally in bps, now in Kbps\r\n                    if (currentPlaybackRate * bitrates[i] > lastthroughput) {// In this case buffer would deplete, leading to a stall, which increases latency and thus the particular probability of selsection of bitrate[i] should be decreased.\r\n                        sign = -1;\r\n                    }\r\n                    // The objective of L2A is to minimize the overall latency=request-response time + buffer length after download+ potential stalling (if buffer less than chunk downlad time)\r\n                    l2AParameter.w[i] = l2AParameter.prev_w[i] + sign * (V / (2 * alpha)) * ((l2AParameter.Q + vl) * (currentPlaybackRate * bitrates[i] / lastthroughput));//Lagrangian descent\r\n                }\r\n\r\n                // Apply euclidean projection on w to ensure w expresses a probability distribution\r\n                l2AParameter.w = euclideanProjection(l2AParameter.w);\r\n\r\n                for (let i = 0; i < bitrateCount; ++i) {\r\n                    diff1[i] = l2AParameter.w[i] - l2AParameter.prev_w[i];\r\n                    l2AParameter.prev_w[i] = l2AParameter.w[i];\r\n                }\r\n\r\n                // Lagrangian multiplier Q calculation:\r\n                l2AParameter.Q = Math.max(0, l2AParameter.Q - V + V * currentPlaybackRate * ((_dotmultiplication(bitrates, l2AParameter.prev_w) + _dotmultiplication(bitrates, diff1)) / lastthroughput));\r\n\r\n                // Quality is calculated as argmin of the absolute difference between available bitrates (bitrates[i]) and bitrate estimation (dotmultiplication(w,bitrates)).\r\n                let temp = [];\r\n                for (let i = 0; i < bitrateCount; ++i) {\r\n                    temp[i] = Math.abs(bitrates[i] - _dotmultiplication(l2AParameter.w, bitrates));\r\n                }\r\n\r\n                // Quality is calculated based on the probability distribution w (the output of L2A)\r\n                quality = temp.indexOf(Math.min(...temp));\r\n\r\n                // We employ a cautious -stepwise- ascent\r\n                if (quality > l2AState.lastQuality) {\r\n                    if (bitrates[l2AState.lastQuality + 1] <= lastthroughput) {\r\n                        quality = l2AState.lastQuality + 1;\r\n                    }\r\n                }\r\n\r\n                // Provision against bitrate over-estimation, by re-calibrating the Lagrangian multiplier Q, to be taken into account for the next chunk\r\n                if (bitrates[quality] >= lastthroughput) {\r\n                    l2AParameter.Q = react * Math.max(vl, l2AParameter.Q);\r\n                }\r\n\r\n                switchRequest.quality = quality;\r\n                switchRequest.reason.throughput = throughput;\r\n                switchRequest.reason.latency = latency;\r\n                switchRequest.reason.bufferLevel = bufferLevel;\r\n                l2AState.lastQuality = switchRequest.quality;\r\n                break;\r\n            default:\r\n                // should not arrive here, try to recover\r\n                logger.debug('L2A ABR rule invoked in bad state.');\r\n                switchRequest.quality = abrController.getQualityForBitrate(mediaInfo, safeThroughput, latency);\r\n                switchRequest.reason.state = l2AState.state;\r\n                switchRequest.reason.throughput = safeThroughput;\r\n                switchRequest.reason.latency = latency;\r\n                l2AState.state = L2A_STATE_STARTUP;\r\n                _clearL2AStateOnSeek(l2AState);\r\n        }\r\n        return switchRequest;\r\n    }\r\n\r\n    /**\r\n     * Reset objects to their initial state\r\n     * @private\r\n     */\r\n    function _resetInitialSettings() {\r\n        l2AStateDict = {};\r\n        l2AParameterDict = {};\r\n    }\r\n\r\n    /**\r\n     * Reset the rule\r\n     */\r\n    function reset() {\r\n        _resetInitialSettings();\r\n        eventBus.off(Events.PLAYBACK_SEEKING, _onPlaybackSeeking, instance);\r\n        eventBus.off(Events.MEDIA_FRAGMENT_LOADED, _onMediaFragmentLoaded, instance);\r\n        eventBus.off(Events.METRIC_ADDED, _onMetricAdded, instance);\r\n        eventBus.off(Events.QUALITY_CHANGE_REQUESTED, _onQualityChangeRequested, instance);\r\n    }\r\n\r\n    instance = {\r\n        getMaxIndex: getMaxIndex,\r\n        reset: reset\r\n    };\r\n\r\n    setup();\r\n    return instance;\r\n}\r\n\r\nL2ARule.__dashjs_factory_name = 'L2ARule';\r\nexport default FactoryMaker.getClassFactory(L2ARule);\r\n","\r\nimport FactoryMaker from '../../../core/FactoryMaker';\r\nimport Debug from '../../../core/Debug';\r\nimport SwitchRequest from '../SwitchRequest';\r\n\r\nfunction SwitchHistoryRule() {\r\n\r\n    const context = this.context;\r\n\r\n    let instance,\r\n        logger;\r\n\r\n    //MAX_SWITCH is the number of drops made. It doesn't consider the size of the drop.\r\n    const MAX_SWITCH = 0.075;\r\n\r\n    //Before this number of switch requests(no switch or actual), don't apply the rule.\r\n    //must be < SwitchRequestHistory SWITCH_REQUEST_HISTORY_DEPTH to enable rule\r\n    const SAMPLE_SIZE = 6;\r\n\r\n    function setup() {\r\n        logger = Debug(context).getInstance().getLogger(instance);\r\n    }\r\n\r\n    function getMaxIndex(rulesContext) {\r\n        const switchRequestHistory = rulesContext ? rulesContext.getSwitchHistory() : null;\r\n        const switchRequests = switchRequestHistory ? switchRequestHistory.getSwitchRequests() : [];\r\n        let drops = 0;\r\n        let noDrops = 0;\r\n        let dropSize = 0;\r\n        const switchRequest = SwitchRequest(context).create();\r\n\r\n        for (let i = 0; i < switchRequests.length; i++) {\r\n            if (switchRequests[i] !== undefined) {\r\n                drops += switchRequests[i].drops;\r\n                noDrops += switchRequests[i].noDrops;\r\n                dropSize += switchRequests[i].dropSize;\r\n\r\n                if (drops + noDrops >= SAMPLE_SIZE && (drops / noDrops > MAX_SWITCH)) {\r\n                    switchRequest.quality = (i > 0 && switchRequests[i].drops > 0) ? i - 1 : i;\r\n                    switchRequest.reason = {index: switchRequest.quality, drops: drops, noDrops: noDrops, dropSize: dropSize};\r\n                    logger.debug('Switch history rule index: ' + switchRequest.quality + ' samples: ' + (drops + noDrops) + ' drops: ' + drops);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return switchRequest;\r\n    }\r\n\r\n    instance = {\r\n        getMaxIndex: getMaxIndex\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\n\r\nSwitchHistoryRule.__dashjs_factory_name = 'SwitchHistoryRule';\r\nexport default FactoryMaker.getClassFactory(SwitchHistoryRule);\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport FactoryMaker from '../../../core/FactoryMaker';\r\nimport Debug from '../../../core/Debug';\r\nimport SwitchRequest from '../SwitchRequest';\r\nimport Constants from '../../constants/Constants';\r\nimport MetricsConstants from '../../constants/MetricsConstants';\r\n\r\nfunction ThroughputRule(config) {\r\n\r\n    config = config || {};\r\n    const context = this.context;\r\n    const dashMetrics = config.dashMetrics;\r\n\r\n    let instance,\r\n        logger;\r\n\r\n    function setup() {\r\n        logger = Debug(context).getInstance().getLogger(instance);\r\n    }\r\n\r\n    function checkConfig() {\r\n        if (!dashMetrics || !dashMetrics.hasOwnProperty('getCurrentBufferState')) {\r\n            throw new Error(Constants.MISSING_CONFIG_ERROR);\r\n        }\r\n    }\r\n\r\n    function getMaxIndex(rulesContext) {\r\n        const switchRequest = SwitchRequest(context).create();\r\n\r\n        if (!rulesContext || !rulesContext.hasOwnProperty('getMediaInfo') || !rulesContext.hasOwnProperty('getMediaType') || !rulesContext.hasOwnProperty('useBufferOccupancyABR') ||\r\n            !rulesContext.hasOwnProperty('getAbrController') || !rulesContext.hasOwnProperty('getScheduleController')) {\r\n            return switchRequest;\r\n        }\r\n\r\n        checkConfig();\r\n\r\n        const mediaInfo = rulesContext.getMediaInfo();\r\n        const mediaType = rulesContext.getMediaType();\r\n        const currentBufferState = dashMetrics.getCurrentBufferState(mediaType);\r\n        const scheduleController = rulesContext.getScheduleController();\r\n        const abrController = rulesContext.getAbrController();\r\n        const streamInfo = rulesContext.getStreamInfo();\r\n        const isDynamic = streamInfo && streamInfo.manifestInfo ? streamInfo.manifestInfo.isDynamic : null;\r\n        const throughputHistory = abrController.getThroughputHistory();\r\n        const throughput = throughputHistory.getSafeAverageThroughput(mediaType, isDynamic);\r\n        const latency = throughputHistory.getAverageLatency(mediaType);\r\n        const useBufferOccupancyABR = rulesContext.useBufferOccupancyABR();\r\n\r\n\r\n        if (isNaN(throughput) || !currentBufferState || useBufferOccupancyABR) {\r\n            return switchRequest;\r\n        }\r\n\r\n        if (abrController.getAbandonmentStateFor(mediaType) !== MetricsConstants.ABANDON_LOAD) {\r\n            if (currentBufferState.state === MetricsConstants.BUFFER_LOADED || isDynamic) {\r\n                switchRequest.quality = abrController.getQualityForBitrate(mediaInfo, throughput, latency);\r\n                scheduleController.setTimeToLoadDelay(0);\r\n                logger.debug('[' + mediaType + '] requesting switch to index: ', switchRequest.quality, 'Average throughput', Math.round(throughput), 'kbps');\r\n                switchRequest.reason = {throughput: throughput, latency: latency};\r\n            }\r\n        }\r\n\r\n        return switchRequest;\r\n    }\r\n\r\n    function reset() {\r\n        // no persistent information to reset\r\n    }\r\n\r\n    instance = {\r\n        getMaxIndex: getMaxIndex,\r\n        reset: reset\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\nThroughputRule.__dashjs_factory_name = 'ThroughputRule';\r\nexport default FactoryMaker.getClassFactory(ThroughputRule);\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n/**\r\n * Authors:\r\n * Abdelhak Bentaleb | National University of Singapore | bentaleb@comp.nus.edu.sg\r\n * Mehmet N. Akcay | Ozyegin University | necmettin.akcay@ozu.edu.tr\r\n * May Lim | National University of Singapore | maylim@comp.nus.edu.sg\r\n */\r\n\r\nimport FactoryMaker from '../../../../core/FactoryMaker';\r\nimport Debug from '../../../../core/Debug';\r\n\r\nconst WEIGHT_SELECTION_MODES = {\r\n    MANUAL: 'manual_weight_selection',\r\n    RANDOM: 'random_weight_selection',\r\n    DYNAMIC: 'dynamic_weight_selection'\r\n};\r\n\r\nfunction LearningAbrController() {\r\n    const context = this.context;\r\n\r\n    let instance,\r\n        logger,\r\n        somBitrateNeurons,\r\n        bitrateNormalizationFactor,\r\n        latencyNormalizationFactor,\r\n        minBitrate,\r\n        minBitrateNeuron,\r\n        weights,\r\n        sortedCenters,\r\n        weightSelectionMode;\r\n\r\n    /**\r\n     * Setup the class\r\n     */\r\n    function _setup() {\r\n        logger = Debug(context).getInstance().getLogger(instance);\r\n        _resetInitialSettings();\r\n    }\r\n\r\n    /**\r\n     * Reset all values\r\n     */\r\n    function reset() {\r\n        _resetInitialSettings();\r\n    }\r\n\r\n    /**\r\n     * Reset to initial settings\r\n     * @private\r\n     */\r\n    function _resetInitialSettings() {\r\n        somBitrateNeurons = null;\r\n        bitrateNormalizationFactor = 1;\r\n        latencyNormalizationFactor = 100;\r\n        minBitrate = 0;\r\n        minBitrateNeuron = null;\r\n        weights = null;\r\n        sortedCenters = null;\r\n        weightSelectionMode = WEIGHT_SELECTION_MODES.DYNAMIC;\r\n    }\r\n\r\n    /**\r\n     * Returns the maximum throughput\r\n     * @return {number}\r\n     * @private\r\n     */\r\n    function _getMaxThroughput() {\r\n        let maxThroughput = 0;\r\n\r\n        if (somBitrateNeurons) {\r\n            for (let i = 0; i < somBitrateNeurons.length; i++) {\r\n                let neuron = somBitrateNeurons[i];\r\n                if (neuron.state.throughput > maxThroughput) {\r\n                    maxThroughput = neuron.state.throughput;\r\n                }\r\n            }\r\n        }\r\n\r\n        return maxThroughput;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {array} w\r\n     * @return {number}\r\n     * @private\r\n     */\r\n    function _getMagnitude(w) {\r\n        const magnitude = w.map((x) => (Math.pow(x, 2))).reduce((sum, now) => sum + now);\r\n\r\n        return Math.sqrt(magnitude);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {array} a\r\n     * @param {array} b\r\n     * @param {array} w\r\n     * @return {number}\r\n     * @private\r\n     */\r\n    function _getDistance(a, b, w) {\r\n        let sum = a\r\n            .map((x, i) => (w[i] * (Math.pow(x - b[i], 2)))) // square the difference*w\r\n            .reduce((sum, now) => sum + now); // sum\r\n        let sign = (sum < 0) ? -1 : 1;\r\n\r\n        return sign * Math.sqrt(Math.abs(sum));\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {object} a\r\n     * @param {object} b\r\n     * @return {number}\r\n     * @private\r\n     */\r\n    function _getNeuronDistance(a, b) {\r\n        let aState = [a.state.throughput, a.state.latency, a.state.rebuffer, a.state.switch];\r\n        let bState = [b.state.throughput, b.state.latency, b.state.rebuffer, b.state.switch];\r\n\r\n        return _getDistance(aState, bState, [1, 1, 1, 1]);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {object} winnerNeuron\r\n     * @param {array} somElements\r\n     * @param {array} x\r\n     * @private\r\n     */\r\n    function _updateNeurons(winnerNeuron, somElements, x) {\r\n        for (let i = 0; i < somElements.length; i++) {\r\n            let somNeuron = somElements[i];\r\n            let sigma = 0.1;\r\n            const neuronDistance = _getNeuronDistance(somNeuron, winnerNeuron);\r\n            let neighbourHood = Math.exp(-1 * Math.pow(neuronDistance, 2) / (2 * Math.pow(sigma, 2)));\r\n            _updateNeuronState(somNeuron, x, neighbourHood);\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {object} neuron\r\n     * @param {array} x\r\n     * @param {object} neighbourHood\r\n     * @private\r\n     */\r\n    function _updateNeuronState(neuron, x, neighbourHood) {\r\n        let state = neuron.state;\r\n        let w = [0.01, 0.01, 0.01, 0.01]; // learning rate\r\n\r\n        state.throughput = state.throughput + (x[0] - state.throughput) * w[0] * neighbourHood;\r\n        state.latency = state.latency + (x[1] - state.latency) * w[1] * neighbourHood;\r\n        state.rebuffer = state.rebuffer + (x[2] - state.rebuffer) * w[2] * neighbourHood;\r\n        state.switch = state.switch + (x[3] - state.switch) * w[3] * neighbourHood;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {object} currentNeuron\r\n     * @param {number} currentThroughput\r\n     * @return {object}\r\n     * @private\r\n     */\r\n    function _getDownShiftNeuron(currentNeuron, currentThroughput) {\r\n        let maxSuitableBitrate = 0;\r\n        let result = currentNeuron;\r\n\r\n        if (somBitrateNeurons) {\r\n            for (let i = 0; i < somBitrateNeurons.length; i++) {\r\n                let n = somBitrateNeurons[i];\r\n                if (n.bitrate < currentNeuron.bitrate && n.bitrate > maxSuitableBitrate && currentThroughput > n.bitrate) {\r\n                    // possible downshiftable neuron\r\n                    maxSuitableBitrate = n.bitrate;\r\n                    result = n;\r\n                }\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {object} mediaInfo\r\n     * @param {number} throughput\r\n     * @param {number} latency\r\n     * @param {number} bufferSize\r\n     * @param {number} playbackRate\r\n     * @param {number} currentQualityIndex\r\n     * @param {object} dynamicWeightsSelector\r\n     * @return {null|*}\r\n     */\r\n    function getNextQuality(mediaInfo, throughput, latency, bufferSize, playbackRate, currentQualityIndex, dynamicWeightsSelector) {\r\n        // For Dynamic Weights Selector\r\n        let currentLatency = latency;\r\n        let currentBuffer = bufferSize;\r\n        let currentThroughput = throughput;\r\n\r\n        let somElements = _getSomBitrateNeurons(mediaInfo);\r\n        // normalize throughput\r\n        let throughputNormalized = throughput / bitrateNormalizationFactor;\r\n        // saturate values higher than 1\r\n        if (throughputNormalized > 1) {\r\n            throughputNormalized = _getMaxThroughput();\r\n        }\r\n        // normalize latency\r\n        latency = latency / latencyNormalizationFactor;\r\n\r\n        const targetLatency = 0;\r\n        const targetRebufferLevel = 0;\r\n        const targetSwitch = 0;\r\n        // 10K + video encoding is the recommended throughput\r\n        const throughputDelta = 10000;\r\n\r\n        logger.debug(`getNextQuality called throughput:${throughputNormalized} latency:${latency} bufferSize:${bufferSize} currentQualityIndex:${currentQualityIndex} playbackRate:${playbackRate}`);\r\n\r\n        let currentNeuron = somElements[currentQualityIndex];\r\n        let downloadTime = (currentNeuron.bitrate * dynamicWeightsSelector.getSegmentDuration()) / currentThroughput;\r\n        let rebuffer = Math.max(0, (downloadTime - currentBuffer));\r\n\r\n        // check buffer for possible stall\r\n        if (currentBuffer - downloadTime < dynamicWeightsSelector.getMinBuffer()) {\r\n            logger.debug(`Buffer is low for bitrate= ${currentNeuron.bitrate} downloadTime=${downloadTime} currentBuffer=${currentBuffer} rebuffer=${rebuffer}`);\r\n            return _getDownShiftNeuron(currentNeuron, currentThroughput).qualityIndex;\r\n        }\r\n\r\n        switch (weightSelectionMode) {\r\n            case WEIGHT_SELECTION_MODES.MANUAL:\r\n                _manualWeightSelection();\r\n                break;\r\n            case WEIGHT_SELECTION_MODES.RANDOM:\r\n                _randomWeightSelection(somElements);\r\n                break;\r\n            case WEIGHT_SELECTION_MODES.DYNAMIC:\r\n                _dynamicWeightSelection(dynamicWeightsSelector, somElements, currentLatency, currentBuffer, rebuffer, currentThroughput, playbackRate);\r\n                break;\r\n            default:\r\n                _dynamicWeightSelection(dynamicWeightsSelector, somElements, currentLatency, currentBuffer, rebuffer, currentThroughput, playbackRate);\r\n\r\n        }\r\n\r\n        let minDistance = null;\r\n        let minIndex = null;\r\n        let winnerNeuron = null;\r\n        let winnerWeights = null;\r\n\r\n        for (let i = 0; i < somElements.length; i++) {\r\n            let somNeuron = somElements[i];\r\n            let somNeuronState = somNeuron.state;\r\n            let somData = [somNeuronState.throughput,\r\n                somNeuronState.latency,\r\n                somNeuronState.rebuffer,\r\n                somNeuronState.switch];\r\n\r\n            let distanceWeights = weights.slice();\r\n            let nextBuffer = dynamicWeightsSelector.getNextBufferWithBitrate(somNeuron.bitrate, currentBuffer, currentThroughput);\r\n            let isBufferLow = nextBuffer < dynamicWeightsSelector.getMinBuffer();\r\n            if (isBufferLow) {\r\n                logger.debug(`Buffer is low for bitrate=${somNeuron.bitrate} downloadTime=${downloadTime} currentBuffer=${currentBuffer} nextBuffer=${nextBuffer}`);\r\n            }\r\n            // special condition downshift immediately\r\n            if (somNeuron.bitrate > throughput - throughputDelta || isBufferLow) {\r\n                if (somNeuron.bitrate !== minBitrate) {\r\n                    // encourage to pick smaller bitrates throughputWeight=100\r\n                    distanceWeights[0] = 100;\r\n                }\r\n            }\r\n\r\n            // calculate the distance with the target\r\n            let distance = _getDistance(somData, [throughputNormalized, targetLatency, targetRebufferLevel, targetSwitch], distanceWeights);\r\n            if (minDistance === null || distance < minDistance) {\r\n                minDistance = distance;\r\n                minIndex = somNeuron.qualityIndex;\r\n                winnerNeuron = somNeuron;\r\n                winnerWeights = distanceWeights;\r\n            }\r\n        }\r\n\r\n        // update current neuron and the neighbourhood with the calculated QoE\r\n        // will punish current if it is not picked\r\n        let bitrateSwitch = Math.abs(currentNeuron.bitrate - winnerNeuron.bitrate) / bitrateNormalizationFactor;\r\n        _updateNeurons(currentNeuron, somElements, [throughputNormalized, latency, rebuffer, bitrateSwitch]);\r\n\r\n        // update bmu and  neighbours with targetQoE=1, targetLatency=0\r\n        _updateNeurons(winnerNeuron, somElements, [throughputNormalized, targetLatency, targetRebufferLevel, bitrateSwitch]);\r\n\r\n        return minIndex;\r\n    }\r\n\r\n    /**\r\n     * Option 1: Manual weights\r\n     * @private\r\n     */\r\n    function _manualWeightSelection() {\r\n        let throughputWeight = 0.4;\r\n        let latencyWeight = 0.4;\r\n        let bufferWeight = 0.4;\r\n        let switchWeight = 0.4;\r\n\r\n        weights = [throughputWeight, latencyWeight, bufferWeight, switchWeight]; // throughput, latency, buffer, switch\r\n    }\r\n\r\n    /**\r\n     * Option 2: Random (Xavier) weights\r\n     * @param {array} somElements\r\n     * @private\r\n     */\r\n    function _randomWeightSelection(somElements) {\r\n        weights = _getXavierWeights(somElements.length, 4);\r\n    }\r\n\r\n    /**\r\n     * Dynamic Weight Selector weights\r\n     * @param {object} dynamicWeightsSelector\r\n     * @param {array} somElements\r\n     * @param {number} currentLatency\r\n     * @param {number} currentBuffer\r\n     * @param {number} rebuffer\r\n     * @param {number} currentThroughput\r\n     * @param {number} playbackRate\r\n     * @private\r\n     */\r\n    function _dynamicWeightSelection(dynamicWeightsSelector, somElements, currentLatency, currentBuffer, rebuffer, currentThroughput, playbackRate) {\r\n        if (!weights) {\r\n            weights = sortedCenters[sortedCenters.length - 1];\r\n        }\r\n        // Dynamic Weights Selector (step 2/2: find weights)\r\n        let weightVector = dynamicWeightsSelector.findWeightVector(somElements, currentLatency, currentBuffer, rebuffer, currentThroughput, playbackRate);\r\n        if (weightVector !== null && weightVector !== -1) {   // null: something went wrong, -1: constraints not met\r\n            weights = weightVector;\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {number }neuronCount\r\n     * @param {number }weightCount\r\n     * @return {array}\r\n     * @private\r\n     */\r\n    function _getXavierWeights(neuronCount, weightCount) {\r\n        let W = [];\r\n        let upperBound = Math.sqrt((2 / neuronCount));\r\n\r\n        for (let i = 0; i < weightCount; i++) {\r\n            W.push(Math.random() * upperBound);\r\n        }\r\n\r\n        weights = W;\r\n\r\n        return weights;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {object} mediaInfo\r\n     * @return {array}\r\n     * @private\r\n     */\r\n    function _getSomBitrateNeurons(mediaInfo) {\r\n        if (!somBitrateNeurons) {\r\n            somBitrateNeurons = [];\r\n            const bitrateList = mediaInfo.bitrateList;\r\n            let bitrateVector = [];\r\n            minBitrate = bitrateList[0].bandwidth;\r\n\r\n            bitrateList.forEach(element => {\r\n                bitrateVector.push(element.bandwidth);\r\n                if (element.bandwidth < minBitrate) {\r\n                    minBitrate = element.bandwidth;\r\n                }\r\n            });\r\n            bitrateNormalizationFactor = _getMagnitude(bitrateVector);\r\n\r\n            for (let i = 0; i < bitrateList.length; i++) {\r\n                let neuron = {\r\n                    qualityIndex: i,\r\n                    bitrate: bitrateList[i].bandwidth,\r\n                    state: {\r\n                        // normalize throughputs\r\n                        throughput: bitrateList[i].bandwidth / bitrateNormalizationFactor,\r\n                        latency: 0,\r\n                        rebuffer: 0,\r\n                        switch: 0\r\n                    }\r\n                };\r\n                somBitrateNeurons.push(neuron);\r\n                if (neuron.bitrate === minBitrate) {\r\n                    minBitrateNeuron = neuron;\r\n                }\r\n            }\r\n\r\n            sortedCenters = _getInitialKmeansPlusPlusCenters(somBitrateNeurons);\r\n        }\r\n\r\n        return somBitrateNeurons;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {number} size\r\n     * @return {array}\r\n     * @private\r\n     */\r\n    function _getRandomData(size) {\r\n        let dataArray = [];\r\n\r\n        for (let i = 0; i < size; i++) {\r\n            let data = [\r\n                Math.random() * _getMaxThroughput(), //throughput\r\n                Math.random(), //latency\r\n                Math.random(), //buffersize\r\n                Math.random() //switch\r\n            ];\r\n            dataArray.push(data);\r\n        }\r\n\r\n        return dataArray;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {array} somElements\r\n     * @return {array}\r\n     * @private\r\n     */\r\n    function _getInitialKmeansPlusPlusCenters(somElements) {\r\n        let centers = [];\r\n        let randomDataSet = _getRandomData(Math.pow(somElements.length, 2));\r\n        centers.push(randomDataSet[0]);\r\n        let distanceWeights = [1, 1, 1, 1];\r\n\r\n        for (let k = 1; k < somElements.length; k++) {\r\n            let nextPoint = null;\r\n            let maxDistance = null;\r\n            for (let i = 0; i < randomDataSet.length; i++) {\r\n                let currentPoint = randomDataSet[i];\r\n                let minDistance = null;\r\n                for (let j = 0; j < centers.length; j++) {\r\n                    let distance = _getDistance(currentPoint, centers[j], distanceWeights);\r\n                    if (minDistance === null || distance < minDistance) {\r\n                        minDistance = distance;\r\n                    }\r\n                }\r\n                if (maxDistance === null || minDistance > maxDistance) {\r\n                    nextPoint = currentPoint;\r\n                    maxDistance = minDistance;\r\n                }\r\n            }\r\n            centers.push(nextPoint);\r\n        }\r\n\r\n        // find the least similar center\r\n        let maxDistance = null;\r\n        let leastSimilarIndex = null;\r\n        for (let i = 0; i < centers.length; i++) {\r\n            let distance = 0;\r\n            for (let j = 0; j < centers.length; j++) {\r\n                if (i === j) continue;\r\n                distance += _getDistance(centers[i], centers[j], distanceWeights);\r\n            }\r\n            if (maxDistance === null || distance > maxDistance) {\r\n                maxDistance = distance;\r\n                leastSimilarIndex = i;\r\n            }\r\n        }\r\n\r\n        // move centers to sortedCenters\r\n        let sortedCenters = [];\r\n        sortedCenters.push(centers[leastSimilarIndex]);\r\n        centers.splice(leastSimilarIndex, 1);\r\n        while (centers.length > 0) {\r\n            let minDistance = null;\r\n            let minIndex = null;\r\n            for (let i = 0; i < centers.length; i++) {\r\n                let distance = _getDistance(sortedCenters[0], centers[i], distanceWeights);\r\n                if (minDistance === null || distance < minDistance) {\r\n                    minDistance = distance;\r\n                    minIndex = i;\r\n                }\r\n            }\r\n            sortedCenters.push(centers[minIndex]);\r\n            centers.splice(minIndex, 1);\r\n        }\r\n\r\n        return sortedCenters;\r\n    }\r\n\r\n    instance = {\r\n        getNextQuality,\r\n        reset\r\n    };\r\n\r\n    _setup();\r\n    return instance;\r\n}\r\n\r\nLearningAbrController.__dashjs_factory_name = 'LearningAbrController';\r\nexport default FactoryMaker.getClassFactory(LearningAbrController);\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n/**\r\n * Authors:\r\n * Abdelhak Bentaleb | National University of Singapore | bentaleb@comp.nus.edu.sg\r\n * Mehmet N. Akcay | Ozyegin University | necmettin.akcay@ozu.edu.tr\r\n * May Lim | National University of Singapore | maylim@comp.nus.edu.sg\r\n */\r\nimport FactoryMaker from '../../../../core/FactoryMaker';\r\nimport QoeInfo from './QoeInfo';\r\n\r\nfunction LoLpQoeEvaluator() {\r\n\r\n    let instance,\r\n        voPerSegmentQoeInfo,\r\n        segmentDuration,\r\n        maxBitrateKbps,\r\n        minBitrateKbps;\r\n\r\n    function _setup() {\r\n        _resetInitialSettings();\r\n    }\r\n\r\n    function _resetInitialSettings() {\r\n        voPerSegmentQoeInfo = null;\r\n        segmentDuration = null;\r\n        maxBitrateKbps = null;\r\n        minBitrateKbps = null;\r\n    }\r\n\r\n    function setupPerSegmentQoe(sDuration, maxBrKbps, minBrKbps) {\r\n        // Set up Per Segment QoeInfo\r\n        voPerSegmentQoeInfo = _createQoeInfo('segment', sDuration, maxBrKbps, minBrKbps);\r\n        segmentDuration = sDuration;\r\n        maxBitrateKbps = maxBrKbps;\r\n        minBitrateKbps = minBrKbps;\r\n    }\r\n\r\n    function _createQoeInfo(fragmentType, fragmentDuration, maxBitrateKbps, minBitrateKbps) {\r\n        /*\r\n         * [Weights][Source: Abdelhak Bentaleb, 2020 (last updated: 30 Mar 2020)]\r\n         * bitrateReward:           segment duration, e.g. 0.5s\r\n         * bitrateSwitchPenalty:    0.02s or 1s if the bitrate switch is too important\r\n         * rebufferPenalty:         max encoding bitrate, e.g. 1000kbps\r\n         * latencyPenalty:          if L ≤ 1.1 seconds then = min encoding bitrate * 0.05, otherwise = max encoding bitrate * 0.1\r\n         * playbackSpeedPenalty:    min encoding bitrate, e.g. 200kbps\r\n         */\r\n\r\n        // Create new QoeInfo object\r\n        let qoeInfo = new QoeInfo();\r\n        qoeInfo.type = fragmentType;\r\n\r\n        // Set weight: bitrateReward\r\n        // set some safe value, else consider throwing error\r\n        if (!fragmentDuration) {\r\n            qoeInfo.weights.bitrateReward = 1;\r\n        }\r\n        else {\r\n            qoeInfo.weights.bitrateReward = fragmentDuration;\r\n        }\r\n\r\n        // Set weight: bitrateSwitchPenalty\r\n        // qoeInfo.weights.bitrateSwitchPenalty = 0.02;\r\n        qoeInfo.weights.bitrateSwitchPenalty = 1;\r\n\r\n        // Set weight: rebufferPenalty\r\n        // set some safe value, else consider throwing error\r\n        if (!maxBitrateKbps) {\r\n            qoeInfo.weights.rebufferPenalty = 1000;\r\n        }\r\n        else {\r\n            qoeInfo.weights.rebufferPenalty = maxBitrateKbps;\r\n        }\r\n\r\n        // Set weight: latencyPenalty\r\n        qoeInfo.weights.latencyPenalty = [];\r\n        qoeInfo.weights.latencyPenalty.push({ threshold: 1.1, penalty: (minBitrateKbps * 0.05) });\r\n        qoeInfo.weights.latencyPenalty.push({ threshold: 100000000, penalty: (maxBitrateKbps * 0.1) });\r\n\r\n        // Set weight: playbackSpeedPenalty\r\n        if (!minBitrateKbps) qoeInfo.weights.playbackSpeedPenalty = 200;   // set some safe value, else consider throwing error\r\n        else qoeInfo.weights.playbackSpeedPenalty = minBitrateKbps;\r\n\r\n        return qoeInfo;\r\n    }\r\n\r\n    function logSegmentMetrics(segmentBitrate, segmentRebufferTime, currentLatency, currentPlaybackSpeed) {\r\n        if (voPerSegmentQoeInfo) {\r\n            _logMetricsInQoeInfo(segmentBitrate, segmentRebufferTime, currentLatency, currentPlaybackSpeed, voPerSegmentQoeInfo);\r\n        }\r\n    }\r\n\r\n    function _logMetricsInQoeInfo(bitrate, rebufferTime, latency, playbackSpeed, qoeInfo) {\r\n        // Update: bitrate Weighted Sum value\r\n        qoeInfo.bitrateWSum += (qoeInfo.weights.bitrateReward * bitrate);\r\n\r\n        // Update: bitrateSwitch Weighted Sum value\r\n        if (qoeInfo.lastBitrate) {\r\n            qoeInfo.bitrateSwitchWSum += (qoeInfo.weights.bitrateSwitchPenalty * Math.abs(bitrate - qoeInfo.lastBitrate));\r\n        }\r\n        qoeInfo.lastBitrate = bitrate;\r\n\r\n        // Update: rebuffer Weighted Sum value\r\n        qoeInfo.rebufferWSum += (qoeInfo.weights.rebufferPenalty * rebufferTime);\r\n\r\n        // Update: latency Weighted Sum value\r\n        for (let i = 0; i < qoeInfo.weights.latencyPenalty.length; i++) {\r\n            let latencyRange = qoeInfo.weights.latencyPenalty[i];\r\n            if (latency <= latencyRange.threshold) {\r\n                qoeInfo.latencyWSum += (latencyRange.penalty * latency);\r\n                break;\r\n            }\r\n        }\r\n\r\n        // Update: playbackSpeed Weighted Sum value\r\n        qoeInfo.playbackSpeedWSum += (qoeInfo.weights.playbackSpeedPenalty * Math.abs(1 - playbackSpeed));\r\n\r\n        // Update: Total Qoe value\r\n        qoeInfo.totalQoe = qoeInfo.bitrateWSum - qoeInfo.bitrateSwitchWSum - qoeInfo.rebufferWSum - qoeInfo.latencyWSum - qoeInfo.playbackSpeedWSum;\r\n    }\r\n\r\n    // Returns current Per Segment QoeInfo\r\n    function getPerSegmentQoe() {\r\n        return voPerSegmentQoeInfo;\r\n    }\r\n\r\n    // For one-time use only\r\n    // Returns totalQoe based on a single set of metrics.\r\n    function calculateSingleUseQoe(segmentBitrate, segmentRebufferTime, currentLatency, currentPlaybackSpeed) {\r\n        let singleUseQoeInfo = null;\r\n\r\n        if (segmentDuration && maxBitrateKbps && minBitrateKbps) {\r\n            singleUseQoeInfo = _createQoeInfo('segment', segmentDuration, maxBitrateKbps, minBitrateKbps);\r\n        }\r\n\r\n        if (singleUseQoeInfo) {\r\n            _logMetricsInQoeInfo(segmentBitrate, segmentRebufferTime, currentLatency, currentPlaybackSpeed, singleUseQoeInfo);\r\n            return singleUseQoeInfo.totalQoe;\r\n        } else {\r\n            // Something went wrong..\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function reset() {\r\n        _resetInitialSettings();\r\n    }\r\n\r\n    instance = {\r\n        setupPerSegmentQoe,\r\n        logSegmentMetrics,\r\n        getPerSegmentQoe,\r\n        calculateSingleUseQoe,\r\n        reset\r\n    };\r\n\r\n    _setup();\r\n\r\n    return instance;\r\n}\r\n\r\nLoLpQoeEvaluator.__dashjs_factory_name = 'LoLpQoeEvaluator';\r\nexport default FactoryMaker.getClassFactory(LoLpQoeEvaluator);\r\n\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n/**\r\n * Authors:\r\n * Abdelhak Bentaleb | National University of Singapore | bentaleb@comp.nus.edu.sg\r\n * Mehmet N. Akcay | Ozyegin University | necmettin.akcay@ozu.edu.tr\r\n * May Lim | National University of Singapore | maylim@comp.nus.edu.sg\r\n */\r\n\r\nimport Debug from '../../../../core/Debug';\r\nimport FactoryMaker from '../../../../core/FactoryMaker';\r\nimport LearningAbrController from './LearningAbrController';\r\nimport LoLpQoeEvaluator from './LoLpQoEEvaluator';\r\nimport SwitchRequest from '../../SwitchRequest';\r\nimport MetricsConstants from '../../../constants/MetricsConstants';\r\nimport LoLpWeightSelector from './LoLpWeightSelector';\r\nimport Constants from '../../../constants/Constants';\r\n\r\nconst DWS_TARGET_LATENCY = 1.5;\r\nconst DWS_BUFFER_MIN = 0.3;\r\n\r\nfunction LoLPRule(config) {\r\n\r\n    config = config || {};\r\n\r\n    let dashMetrics = config.dashMetrics;\r\n    let context = this.context;\r\n\r\n    let logger,\r\n        instance,\r\n        learningController,\r\n        qoeEvaluator;\r\n\r\n    function _setup() {\r\n        logger = Debug(context).getInstance().getLogger(instance);\r\n        learningController = LearningAbrController(context).create();\r\n        qoeEvaluator = LoLpQoeEvaluator(context).create();\r\n    }\r\n\r\n    function getMaxIndex(rulesContext) {\r\n        try {\r\n            let switchRequest = SwitchRequest(context).create();\r\n            let mediaType = rulesContext.getMediaInfo().type;\r\n            let abrController = rulesContext.getAbrController();\r\n            const streamInfo = rulesContext.getStreamInfo();\r\n            let currentQuality = abrController.getQualityFor(mediaType, streamInfo);\r\n            const mediaInfo = rulesContext.getMediaInfo();\r\n            const bufferStateVO = dashMetrics.getCurrentBufferState(mediaType);\r\n            const scheduleController = rulesContext.getScheduleController();\r\n            const currentBufferLevel = dashMetrics.getCurrentBufferLevel(mediaType, true);\r\n            const isDynamic = streamInfo && streamInfo.manifestInfo ? streamInfo.manifestInfo.isDynamic : null;\r\n            const playbackController = scheduleController.getPlaybackController();\r\n            let latency = playbackController.getCurrentLiveLatency();\r\n\r\n            if (!rulesContext.useLoLPABR() || (mediaType === Constants.AUDIO)) {\r\n                return switchRequest;\r\n            }\r\n\r\n            if (!latency) {\r\n                latency = 0;\r\n            }\r\n\r\n            const playbackRate = playbackController.getPlaybackRate();\r\n            const throughputHistory = abrController.getThroughputHistory();\r\n            const throughput = throughputHistory.getSafeAverageThroughput(mediaType, isDynamic);\r\n            logger.debug(`Throughput ${Math.round(throughput)} kbps`);\r\n\r\n            if (isNaN(throughput) || !bufferStateVO) {\r\n                return switchRequest;\r\n            }\r\n\r\n            if (abrController.getAbandonmentStateFor(mediaType) === MetricsConstants.ABANDON_LOAD) {\r\n                return switchRequest;\r\n            }\r\n\r\n            // QoE parameters\r\n            let bitrateList = mediaInfo.bitrateList;  // [{bandwidth: 200000, width: 640, height: 360}, ...]\r\n            let segmentDuration = rulesContext.getRepresentationInfo().fragmentDuration;\r\n            let minBitrateKbps = bitrateList[0].bandwidth / 1000.0;                         // min bitrate level\r\n            let maxBitrateKbps = bitrateList[bitrateList.length - 1].bandwidth / 1000.0;    // max bitrate level\r\n            for (let i = 0; i < bitrateList.length; i++) {  // in case bitrateList is not sorted as expected\r\n                let b = bitrateList[i].bandwidth / 1000.0;\r\n                if (b > maxBitrateKbps)\r\n                    maxBitrateKbps = b;\r\n                else if (b < minBitrateKbps) {\r\n                    minBitrateKbps = b;\r\n                }\r\n            }\r\n\r\n            // Learning rule pre-calculations\r\n            let currentBitrate = bitrateList[currentQuality].bandwidth;\r\n            let currentBitrateKbps = currentBitrate / 1000.0;\r\n            let httpRequest = dashMetrics.getCurrentHttpRequest(mediaType, true);\r\n            let lastFragmentDownloadTime = (httpRequest.tresponse.getTime() - httpRequest.trequest.getTime()) / 1000;\r\n            let segmentRebufferTime = lastFragmentDownloadTime > segmentDuration ? lastFragmentDownloadTime - segmentDuration : 0;\r\n            qoeEvaluator.setupPerSegmentQoe(segmentDuration, maxBitrateKbps, minBitrateKbps);\r\n            qoeEvaluator.logSegmentMetrics(currentBitrateKbps, segmentRebufferTime, latency, playbackRate);\r\n\r\n            /*\r\n            * Dynamic Weights Selector (step 1/2: initialization)\r\n            */\r\n            let dynamicWeightsSelector = LoLpWeightSelector(context).create({\r\n                targetLatency: DWS_TARGET_LATENCY,\r\n                bufferMin: DWS_BUFFER_MIN,\r\n                segmentDuration,\r\n                qoeEvaluator\r\n            });\r\n\r\n            /*\r\n             * Select next quality\r\n             */\r\n            switchRequest.quality = learningController.getNextQuality(mediaInfo, throughput * 1000, latency, currentBufferLevel, playbackRate, currentQuality, dynamicWeightsSelector);\r\n            switchRequest.reason = { throughput: throughput, latency: latency };\r\n            switchRequest.priority = SwitchRequest.PRIORITY.STRONG;\r\n\r\n            scheduleController.setTimeToLoadDelay(0);\r\n\r\n            if (switchRequest.quality !== currentQuality) {\r\n                console.log('[TgcLearningRule][' + mediaType + '] requesting switch to index: ', switchRequest.quality, 'Average throughput', Math.round(throughput), 'kbps');\r\n            }\r\n\r\n            return switchRequest;\r\n        } catch (e) {\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Reset objects to their initial state\r\n     * @private\r\n     */\r\n    function _resetInitialSettings() {\r\n        learningController.reset();\r\n        qoeEvaluator.reset();\r\n    }\r\n\r\n    /**\r\n     * Reset the rule\r\n     */\r\n    function reset() {\r\n        _resetInitialSettings();\r\n    }\r\n\r\n    instance = {\r\n        getMaxIndex,\r\n        reset\r\n    };\r\n\r\n    _setup();\r\n\r\n    return instance;\r\n}\r\n\r\nLoLPRule.__dashjs_factory_name = 'LoLPRule';\r\nexport default FactoryMaker.getClassFactory(LoLPRule);\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n/**\r\n * Authors:\r\n * Abdelhak Bentaleb | National University of Singapore | bentaleb@comp.nus.edu.sg\r\n * Mehmet N. Akcay | Ozyegin University | necmettin.akcay@ozu.edu.tr\r\n * May Lim | National University of Singapore | maylim@comp.nus.edu.sg\r\n */\r\n\r\nimport FactoryMaker from '../../../../core/FactoryMaker';\r\n\r\nfunction LoLpWeightSelector(config) {\r\n    let targetLatency = config.targetLatency;\r\n    let bufferMin = config.bufferMin;\r\n    let segmentDuration = config.segmentDuration;\r\n    let qoeEvaluator = config.qoeEvaluator;\r\n    let instance,\r\n        valueList,\r\n        weightTypeCount,\r\n        weightOptions,\r\n        previousLatency;\r\n\r\n    /**\r\n     *\r\n     * @private\r\n     */\r\n    function _setup() {\r\n        _resetInitialSettings();\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @private\r\n     */\r\n    function _resetInitialSettings() {\r\n        valueList = [0.2, 0.4, 0.6, 0.8, 1];\r\n        weightTypeCount = 4;\r\n        weightOptions = _getPermutations(valueList, weightTypeCount);\r\n        previousLatency = 0;\r\n    }\r\n\r\n    /**\r\n     * Next, at each segment boundary, ABR to input current neurons and target state (only used in Method II) to find the desired weight vector\r\n     * @param {array} neurons\r\n     * @param {number} currentLatency\r\n     * @param {number} currentBuffer\r\n     * @param {number} currentRebuffer\r\n     * @param {number} currentThroughput\r\n     * @param {number} playbackRate\r\n     * @return {null}\r\n     * @private\r\n     */\r\n    function findWeightVector(neurons, currentLatency, currentBuffer, currentRebuffer, currentThroughput, playbackRate) {\r\n        let maxQoE = null;\r\n        let winnerWeights = null;\r\n        let winnerBitrate = null;\r\n        let deltaLatency = Math.abs(currentLatency - previousLatency);\r\n\r\n        // For each neuron, m\r\n        neurons.forEach((neuron) => {\r\n\r\n            // For each possible weight vector, z\r\n            // E.g. For [ throughput, latency, buffer, playbackRate, QoE ]\r\n            //      Possible weightVector = [ 0.2, 0.4, 0.2, 0, 0.2 ]\r\n            weightOptions.forEach((weightVector) => {\r\n\r\n                // Apply weightVector to neuron, compute utility and determine winnerWeights\r\n                // Method I: Utility based on QoE given current state\r\n\r\n                let weightsObj = {\r\n                    throughput: weightVector[0],\r\n                    latency: weightVector[1],\r\n                    buffer: weightVector[2],\r\n                    switch: weightVector[3]\r\n                };\r\n\r\n                let downloadTime = (neuron.bitrate * segmentDuration) / currentThroughput;\r\n                let nextBuffer = getNextBuffer(currentBuffer, downloadTime);\r\n                let rebuffer = Math.max(0.00001, (downloadTime - nextBuffer));\r\n                let wt;\r\n                if (weightsObj.buffer === 0) {\r\n                    wt = 10;\r\n                } else {\r\n                    wt = (1 / weightsObj.buffer);\r\n                }\r\n                let weightedRebuffer = wt * rebuffer;\r\n\r\n                if (weightsObj.latency === 0) {\r\n                    wt = 10;\r\n                } else {\r\n                    wt = (1 / weightsObj.latency); // inverse the weight because wt and latency should have positive relationship, i.e., higher latency = higher wt\r\n                }\r\n                let weightedLatency = wt * neuron.state.latency;\r\n\r\n                let totalQoE = qoeEvaluator.calculateSingleUseQoe(neuron.bitrate, weightedRebuffer, weightedLatency, playbackRate);\r\n                if ((maxQoE === null || totalQoE > maxQoE) && _checkConstraints(currentLatency, nextBuffer, deltaLatency)) {\r\n                    maxQoE = totalQoE;\r\n                    winnerWeights = weightVector;\r\n                    winnerBitrate = neuron.bitrate;\r\n                }\r\n            });\r\n        });\r\n\r\n        // winnerWeights was found, check if constraints are satisfied\r\n        if (winnerWeights === null && winnerBitrate === null) {\r\n            winnerWeights = -1;\r\n        }\r\n\r\n        previousLatency = currentLatency;\r\n        return winnerWeights;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {number} nextLatency\r\n     * @param {number} nextBuffer\r\n     * @param {number} deltaLatency\r\n     * @return {boolean}\r\n     * @private\r\n     */\r\n    function _checkConstraints(nextLatency, nextBuffer, deltaLatency) {\r\n        // A1\r\n        // disabled till we find a better way of estimating latency\r\n        // fails for all with current value\r\n        if (nextLatency > targetLatency + deltaLatency) {\r\n            return false;\r\n        }\r\n\r\n        return nextBuffer >= bufferMin;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {array} list\r\n     * @param {number} length\r\n     * @return {*}\r\n     * @private\r\n     */\r\n    function _getPermutations(list, length) {\r\n        // Copy initial values as arrays\r\n        let perm = list.map(function (val) {\r\n            return [val];\r\n        });\r\n        // Our permutation generator\r\n        let generate = function (perm, length, currLen) {\r\n            // Reached desired length\r\n            if (currLen === length) {\r\n                return perm;\r\n            }\r\n            // For each existing permutation\r\n            let len = perm.length;\r\n            for (let i = 0; i < len; i++) {\r\n                let currPerm = perm.shift();\r\n                // Create new permutation\r\n                for (let k = 0; k < list.length; k++) {\r\n                    perm.push(currPerm.concat(list[k]));\r\n                }\r\n            }\r\n            // Recurse\r\n            return generate(perm, length, currLen + 1);\r\n        };\r\n        // Start with size 1 because of initial values\r\n        return generate(perm, length, 1);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @return {number}\r\n     */\r\n    function getMinBuffer() {\r\n        return bufferMin;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @return {number}\r\n     */\r\n    function getSegmentDuration() {\r\n        return segmentDuration;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {number} bitrateToDownload\r\n     * @param {number} currentBuffer\r\n     * @param {number} currentThroughput\r\n     * @return {number}\r\n     */\r\n    function getNextBufferWithBitrate(bitrateToDownload, currentBuffer, currentThroughput) {\r\n        let downloadTime = (bitrateToDownload * segmentDuration) / currentThroughput;\r\n        return getNextBuffer(currentBuffer, downloadTime);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {number} currentBuffer\r\n     * @param {number} downloadTime\r\n     * @return {number}\r\n     */\r\n    function getNextBuffer(currentBuffer, downloadTime) {\r\n        const segmentDuration = getSegmentDuration();\r\n        let nextBuffer;\r\n        if (downloadTime > segmentDuration) {\r\n            nextBuffer = currentBuffer - segmentDuration;\r\n        } else {\r\n            nextBuffer = currentBuffer + segmentDuration - downloadTime;\r\n        }\r\n        return nextBuffer;\r\n    }\r\n\r\n    instance = {\r\n        getMinBuffer,\r\n        getSegmentDuration,\r\n        getNextBufferWithBitrate,\r\n        getNextBuffer,\r\n        findWeightVector\r\n    };\r\n\r\n    _setup();\r\n\r\n    return instance;\r\n}\r\n\r\nLoLpWeightSelector.__dashjs_factory_name = 'LoLpWeightSelector';\r\nexport default FactoryMaker.getClassFactory(LoLpWeightSelector);\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nclass QoeInfo {\r\n\r\n    constructor() {\r\n        // Type e.g. 'segment'\r\n        this.type = null;\r\n\r\n        // Store lastBitrate for calculation of bitrateSwitchWSum\r\n        this.lastBitrate = null;\r\n\r\n        // Weights for each Qoe factor\r\n        this.weights = {};\r\n        this.weights.bitrateReward = null;\r\n        this.weights.bitrateSwitchPenalty = null;\r\n        this.weights.rebufferPenalty = null;\r\n        this.weights.latencyPenalty = null;\r\n        this.weights.playbackSpeedPenalty = null;\r\n\r\n        // Weighted Sum for each Qoe factor\r\n        this.bitrateWSum = 0;           // kbps\r\n        this.bitrateSwitchWSum = 0;     // kbps\r\n        this.rebufferWSum = 0;          // seconds\r\n        this.latencyWSum = 0;           // seconds\r\n        this.playbackSpeedWSum = 0;     // e.g. 0.95, 1.0, 1.05\r\n\r\n        // Store total Qoe value based on current Weighted Sum values\r\n        this.totalQoe = 0;\r\n    }\r\n}\r\n\r\nexport default QoeInfo;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport Constants from '../../constants/Constants';\r\nimport FactoryMaker from '../../../core/FactoryMaker';\r\nimport MetricsConstants from '../../constants/MetricsConstants';\r\n\r\nfunction BufferLevelRule(config) {\r\n\r\n    config = config || {};\r\n    const dashMetrics = config.dashMetrics;\r\n    const mediaPlayerModel = config.mediaPlayerModel;\r\n    const textController = config.textController;\r\n    const abrController = config.abrController;\r\n    const settings = config.settings;\r\n\r\n    function setup() {\r\n    }\r\n\r\n    function execute(type, representationInfo, hasVideoTrack) {\r\n        if (!type || !representationInfo) {\r\n            return true;\r\n        }\r\n        const bufferLevel = dashMetrics.getCurrentBufferLevel(type);\r\n        return bufferLevel < getBufferTarget(type, representationInfo, hasVideoTrack);\r\n    }\r\n\r\n    function getBufferTarget(type, representationInfo, hasVideoTrack) {\r\n        let bufferTarget = NaN;\r\n\r\n        if (!type || !representationInfo) {\r\n            return bufferTarget;\r\n        }\r\n\r\n        if (type === Constants.FRAGMENTED_TEXT) {\r\n            if (textController.isTextEnabled()) {\r\n                if (isNaN(representationInfo.fragmentDuration)) { //fragmentDuration of representationInfo is not defined,\r\n                    // call metrics function to have data in the latest scheduling info...\r\n                    // if no metric, returns 0. In this case, rule will return false.\r\n                    const schedulingInfo = dashMetrics.getCurrentSchedulingInfo(MetricsConstants.SCHEDULING_INFO);\r\n                    bufferTarget = schedulingInfo ? schedulingInfo.duration : 0;\r\n                } else {\r\n                    bufferTarget = representationInfo.fragmentDuration;\r\n                }\r\n            } else { // text is disabled, rule will return false\r\n                bufferTarget = 0;\r\n            }\r\n        }  else if (type === Constants.AUDIO && hasVideoTrack) {\r\n            const videoBufferLevel = dashMetrics.getCurrentBufferLevel(Constants.VIDEO);\r\n            if (isNaN(representationInfo.fragmentDuration)) {\r\n                bufferTarget = videoBufferLevel;\r\n            } else {\r\n                bufferTarget = Math.max(videoBufferLevel, representationInfo.fragmentDuration);\r\n            }\r\n        } else {\r\n            const streamInfo = representationInfo.mediaInfo.streamInfo;\r\n            if (abrController.isPlayingAtTopQuality(streamInfo)) {\r\n                const isLongFormContent = streamInfo.manifestInfo.duration >= settings.get().streaming.longFormContentDurationThreshold;\r\n                bufferTarget = isLongFormContent ? settings.get().streaming.bufferTimeAtTopQualityLongForm : settings.get().streaming.bufferTimeAtTopQuality;\r\n            } else {\r\n                bufferTarget = mediaPlayerModel.getStableBufferTime();\r\n            }\r\n        }\r\n        return bufferTarget;\r\n    }\r\n\r\n    const instance = {\r\n        execute: execute,\r\n        getBufferTarget: getBufferTarget\r\n    };\r\n\r\n    setup();\r\n    return instance;\r\n}\r\n\r\nBufferLevelRule.__dashjs_factory_name = 'BufferLevelRule';\r\nexport default FactoryMaker.getClassFactory(BufferLevelRule);\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\n\r\nfunction EmbeddedTextHtmlRender() {\r\n\r\n    let captionId = 0;\r\n    let instance;\r\n\r\n    /* HTML Rendering functions */\r\n    function checkIndent(chars) {\r\n        let line = '';\r\n\r\n        for (let c = 0; c < chars.length; ++c) {\r\n            const uc = chars[c];\r\n            line += uc.uchar;\r\n        }\r\n\r\n        const l = line.length;\r\n        const ll = line.replace(/^\\s+/,'').length;\r\n        return l - ll;\r\n    }\r\n\r\n    function getRegionProperties(region) {\r\n        return 'left: ' + (region.x * 3.125) + '%; top: ' + (region.y1 * 6.66) + '%; width: ' + (100 - (region.x * 3.125)) + '%; height: ' + (Math.max((region.y2 - 1) - region.y1, 1) * 6.66) + '%; align-items: flex-start; overflow: visible; -webkit-writing-mode: horizontal-tb;';\r\n    }\r\n\r\n    function createRGB(color) {\r\n        if (color === 'red') {\r\n            return 'rgb(255, 0, 0)';\r\n        } else if (color === 'green') {\r\n            return 'rgb(0, 255, 0)';\r\n        } else if (color === 'blue') {\r\n            return 'rgb(0, 0, 255)';\r\n        } else if (color === 'cyan') {\r\n            return 'rgb(0, 255, 255)';\r\n        } else if (color === 'magenta') {\r\n            return 'rgb(255, 0, 255)';\r\n        } else if (color === 'yellow') {\r\n            return 'rgb(255, 255, 0)';\r\n        } else if (color === 'white') {\r\n            return 'rgb(255, 255, 255)';\r\n        } else if (color === 'black') {\r\n            return 'rgb(0, 0, 0)';\r\n        }\r\n        return color;\r\n    }\r\n\r\n    function getStyle(videoElement, style) {\r\n        const fontSize = videoElement.videoHeight / 15.0;\r\n        if (style) {\r\n            return 'font-size: ' + fontSize + 'px; font-family: Menlo, Consolas, \\'Cutive Mono\\', monospace; color: ' + ((style.foreground) ? createRGB(style.foreground) : 'rgb(255, 255, 255)') + '; font-style: ' + (style.italics ? 'italic' : 'normal') + '; text-decoration: ' + (style.underline ? 'underline' : 'none') + '; white-space: pre; background-color: ' + ((style.background) ? createRGB(style.background) : 'transparent') + ';';\r\n        } else {\r\n            return 'font-size: ' + fontSize + 'px; font-family: Menlo, Consolas, \\'Cutive Mono\\', monospace; justify-content: flex-start; text-align: left; color: rgb(255, 255, 255); font-style: normal; white-space: pre; line-height: normal; font-weight: normal; text-decoration: none; width: 100%; display: flex;';\r\n        }\r\n    }\r\n\r\n    function ltrim(s) {\r\n        return s.replace(/^\\s+/g, '');\r\n    }\r\n\r\n    function rtrim(s) {\r\n        return s.replace(/\\s+$/g, '');\r\n    }\r\n\r\n    function createHTMLCaptionsFromScreen(videoElement, startTime, endTime, captionScreen) {\r\n        let currRegion = null;\r\n        let existingRegion = null;\r\n        let lastRowHasText = false;\r\n        let lastRowIndentL = -1;\r\n        let currP = {start: startTime, end: endTime, spans: []};\r\n        let currentStyle = 'style_cea608_white_black';\r\n        const seenRegions = {};\r\n        const styleStates = {};\r\n        const regions = [];\r\n        let r, s;\r\n\r\n        for (r = 0; r < 15; ++r) {\r\n            const row = captionScreen.rows[r];\r\n            let line = '';\r\n            let prevPenState = null;\r\n\r\n            if (false === row.isEmpty()) {\r\n                /* Row is not empty */\r\n\r\n                /* Get indentation of this row */\r\n                const rowIndent = checkIndent(row.chars);\r\n\r\n                /* Create a new region is there is none */\r\n                if (currRegion === null) {\r\n                    currRegion = { x: rowIndent, y1: r, y2: (r + 1), p: [] };\r\n                }\r\n\r\n                /* Check if indentation has changed and we had text of last row */\r\n                if ((rowIndent !== lastRowIndentL) && lastRowHasText) {\r\n                    currRegion.p.push(currP);\r\n                    currP = { start: startTime, end: endTime, spans: [] };\r\n                    currRegion.y2 = r;\r\n                    currRegion.name = 'region_' + currRegion.x + '_' + currRegion.y1 + '_' + currRegion.y2;\r\n                    if (false === seenRegions.hasOwnProperty(currRegion.name)) {\r\n                        regions.push(currRegion);\r\n                        seenRegions[currRegion.name] = currRegion;\r\n                    } else {\r\n                        existingRegion = seenRegions[currRegion.name];\r\n                        existingRegion.p.contat(currRegion.p);\r\n                    }\r\n\r\n                    currRegion = { x: rowIndent, y1: r, y2: (r + 1), p: [] };\r\n                }\r\n\r\n                for (let c = 0; c < row.chars.length; ++c) {\r\n                    const uc = row.chars[c];\r\n                    const currPenState = uc.penState;\r\n                    if ((prevPenState === null) || (!currPenState.equals(prevPenState))) {\r\n                        if (line.trim().length > 0) {\r\n                            currP.spans.push({ name: currentStyle, line: line, row: r });\r\n                            line = '';\r\n                        }\r\n\r\n                        let currPenStateString = 'style_cea608_' + currPenState.foreground + '_' + currPenState.background;\r\n                        if (currPenState.underline) {\r\n                            currPenStateString += '_underline';\r\n                        }\r\n                        if (currPenState.italics) {\r\n                            currPenStateString += '_italics';\r\n                        }\r\n\r\n                        if (!styleStates.hasOwnProperty(currPenStateString)) {\r\n                            styleStates[currPenStateString] = JSON.parse(JSON.stringify(currPenState));\r\n                        }\r\n\r\n                        prevPenState = currPenState;\r\n\r\n                        currentStyle = currPenStateString;\r\n                    }\r\n\r\n                    line += uc.uchar;\r\n                }\r\n\r\n                if (line.trim().length > 0) {\r\n                    currP.spans.push({ name: currentStyle, line: line, row: r });\r\n                }\r\n\r\n                lastRowHasText = true;\r\n                lastRowIndentL = rowIndent;\r\n            } else {\r\n                /* Row is empty */\r\n                lastRowHasText = false;\r\n                lastRowIndentL = -1;\r\n\r\n                if (currRegion) {\r\n                    currRegion.p.push(currP);\r\n                    currP = { start: startTime, end: endTime, spans: [] };\r\n                    currRegion.y2 = r;\r\n                    currRegion.name = 'region_' + currRegion.x + '_' + currRegion.y1 + '_' + currRegion.y2;\r\n                    if (false === seenRegions.hasOwnProperty(currRegion.name)) {\r\n                        regions.push(currRegion);\r\n                        seenRegions[currRegion.name] = currRegion;\r\n                    } else {\r\n                        existingRegion = seenRegions[currRegion.name];\r\n                        existingRegion.p.contat(currRegion.p);\r\n                    }\r\n\r\n                    currRegion = null;\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        if (currRegion) {\r\n            currRegion.p.push(currP);\r\n            currRegion.y2 = r + 1;\r\n            currRegion.name = 'region_' + currRegion.x + '_' + currRegion.y1 + '_' + currRegion.y2;\r\n            if (false === seenRegions.hasOwnProperty(currRegion.name)) {\r\n                regions.push(currRegion);\r\n                seenRegions[currRegion.name] = currRegion;\r\n            } else {\r\n                existingRegion = seenRegions[currRegion.name];\r\n                existingRegion.p.contat(currRegion.p);\r\n            }\r\n\r\n            currRegion = null;\r\n        }\r\n\r\n        const captionsArray = [];\r\n\r\n        /* Loop thru regions */\r\n        for (r = 0; r < regions.length; ++r) {\r\n            const region = regions[r];\r\n\r\n            const cueID = 'sub_cea608_' + (captionId++);\r\n            const finalDiv = document.createElement('div');\r\n            finalDiv.id = cueID;\r\n            const cueRegionProperties = getRegionProperties(region);\r\n            finalDiv.style.cssText = 'position: absolute; margin: 0; display: flex; box-sizing: border-box; pointer-events: none;' + cueRegionProperties;\r\n\r\n            const bodyDiv = document.createElement('div');\r\n            bodyDiv.className = 'paragraph bodyStyle';\r\n            bodyDiv.style.cssText = getStyle(videoElement);\r\n\r\n            const cueUniWrapper = document.createElement('div');\r\n            cueUniWrapper.className = 'cueUniWrapper';\r\n            cueUniWrapper.style.cssText = 'unicode-bidi: normal; direction: ltr;';\r\n\r\n            for (let p = 0; p < region.p.length; ++p) {\r\n                const ptag = region.p[p];\r\n                let lastSpanRow = 0;\r\n                for (s = 0; s < ptag.spans.length; ++s) {\r\n                    let span = ptag.spans[s];\r\n                    if (span.line.length > 0) {\r\n                        if ((s !== 0) && lastSpanRow != span.row) {\r\n                            const brElement = document.createElement('br');\r\n                            brElement.className = 'lineBreak';\r\n                            cueUniWrapper.appendChild(brElement);\r\n                        }\r\n                        let sameRow = false;\r\n                        if (lastSpanRow === span.row) {\r\n                            sameRow = true;\r\n                        }\r\n                        lastSpanRow = span.row;\r\n                        const spanStyle = styleStates[span.name];\r\n                        const spanElement = document.createElement('span');\r\n                        spanElement.className = 'spanPadding ' + span.name + ' customSpanColor';\r\n                        spanElement.style.cssText = getStyle(videoElement, spanStyle);\r\n                        /* If this is not the first span, and it's on the same\r\n                         * row as the last one */\r\n                        if ((s !== 0) && sameRow) {\r\n                            /* and it's the last span on this row */\r\n                            if (s === ptag.spans.length - 1) {\r\n                                /* trim only the right side */\r\n                                spanElement.textContent = rtrim(span.line);\r\n                            } else {\r\n                                /* don't trim at all */\r\n                                spanElement.textContent = span.line;\r\n                            }\r\n                        } else {\r\n                            /* if there is more than 1 span and this isn't the last span */\r\n                            if (ptag.spans.length > 1 && s < (ptag.spans.length - 1)) {\r\n                                /* Check if next text is on same row */\r\n                                if (span.row === ptag.spans[s + 1].row) {\r\n                                    /* Next element on same row, trim start */\r\n                                    spanElement.textContent = ltrim(span.line);\r\n                                } else {\r\n                                    /* Different rows, trim both */\r\n                                    spanElement.textContent = span.line.trim();\r\n                                }\r\n                            } else {\r\n                                spanElement.textContent = span.line.trim();\r\n                            }\r\n                        }\r\n                        cueUniWrapper.appendChild(spanElement);\r\n                    }\r\n                }\r\n            }\r\n\r\n            bodyDiv.appendChild(cueUniWrapper);\r\n            finalDiv.appendChild(bodyDiv);\r\n\r\n            const fontSize = { 'bodyStyle': ['%', 90] };\r\n            for (const s in styleStates) {\r\n                if (styleStates.hasOwnProperty(s)) {\r\n                    fontSize[s] = ['%', 90];\r\n                }\r\n            }\r\n\r\n            captionsArray.push({ type: 'html',\r\n                                start: startTime,\r\n                                end: endTime,\r\n                                cueHTMLElement: finalDiv,\r\n                                cueID: cueID,\r\n                                cellResolution: [32, 15],\r\n                                isFromCEA608: true,\r\n                                fontSize: fontSize,\r\n                                lineHeight: {},\r\n                                linePadding: {}\r\n                               });\r\n        }\r\n        return captionsArray;\r\n    }\r\n\r\n    instance = {\r\n        createHTMLCaptionsFromScreen: createHTMLCaptionsFromScreen\r\n    };\r\n    return instance;\r\n}\r\n\r\nEmbeddedTextHtmlRender.__dashjs_factory_name = 'EmbeddedTextHtmlRender';\r\nexport default FactoryMaker.getSingletonFactory(EmbeddedTextHtmlRender);\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport Constants from '../constants/Constants';\r\nimport EventBus from '../../core/EventBus';\r\nimport Events from '../../core/events/Events';\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\nimport InitCache from '../utils/InitCache';\r\nimport SourceBufferSink from '../SourceBufferSink';\r\nimport TextController from '../../streaming/text/TextController';\r\nimport DashJSError from '../../streaming/vo/DashJSError';\r\nimport Errors from '../../core/errors/Errors';\r\n\r\nconst BUFFER_CONTROLLER_TYPE = 'NotFragmentedTextBufferController';\r\nfunction NotFragmentedTextBufferController(config) {\r\n\r\n    config = config || {};\r\n    const context = this.context;\r\n    const eventBus = EventBus(context).getInstance();\r\n    const textController = TextController(context).getInstance();\r\n\r\n    const errHandler = config.errHandler;\r\n    const streamInfo = config.streamInfo;\r\n    const type = config.type;\r\n    const mimeType = config.mimeType;\r\n    const fragmentModel = config.fragmentModel;\r\n\r\n    let instance,\r\n        isBufferingCompleted,\r\n        initialized,\r\n        mediaSource,\r\n        buffer,\r\n        initCache;\r\n\r\n    function setup() {\r\n        initialized = false;\r\n        mediaSource = null;\r\n        isBufferingCompleted = false;\r\n\r\n        eventBus.on(Events.DATA_UPDATE_COMPLETED, onDataUpdateCompleted, instance);\r\n        eventBus.on(Events.INIT_FRAGMENT_LOADED, onInitFragmentLoaded, instance);\r\n    }\r\n\r\n    function getBufferControllerType() {\r\n        return BUFFER_CONTROLLER_TYPE;\r\n    }\r\n\r\n    function initialize(source) {\r\n        setMediaSource(source);\r\n        initCache = InitCache(context).getInstance();\r\n    }\r\n\r\n    function createBuffer(mediaInfoArr) {\r\n        const mediaInfo = mediaInfoArr[0];\r\n        try {\r\n            buffer = SourceBufferSink(context).create(mediaSource, mediaInfo);\r\n            if (!initialized) {\r\n                const textBuffer = buffer.getBuffer();\r\n                if (textBuffer.hasOwnProperty(Constants.INITIALIZE)) {\r\n                    textBuffer.initialize(mimeType, streamInfo, mediaInfoArr, fragmentModel);\r\n                }\r\n                initialized = true;\r\n            }\r\n            return buffer;\r\n        } catch (e) {\r\n            if (mediaInfo && ((mediaInfo.isText) || (mediaInfo.codec.indexOf('codecs=\"stpp') !== -1) || (mediaInfo.codec.indexOf('codecs=\"wvtt') !== -1))) {\r\n                try {\r\n                    buffer = textController.getTextSourceBuffer();\r\n                } catch (e) {\r\n                    errHandler.error(new DashJSError(Errors.MEDIASOURCE_TYPE_UNSUPPORTED_CODE, Errors.MEDIASOURCE_TYPE_UNSUPPORTED_MESSAGE + type + ' : ' + e.message));\r\n                }\r\n            } else {\r\n                errHandler.error(new DashJSError(Errors.MEDIASOURCE_TYPE_UNSUPPORTED_CODE, Errors.MEDIASOURCE_TYPE_UNSUPPORTED_MESSAGE + type));\r\n            }\r\n        }\r\n    }\r\n\r\n    function getStreamId() {\r\n        return streamInfo.id;\r\n    }\r\n\r\n    function getType() {\r\n        return type;\r\n    }\r\n\r\n    function getBuffer() {\r\n        return buffer;\r\n    }\r\n\r\n    function setMediaSource(value) {\r\n        mediaSource = value;\r\n    }\r\n\r\n    function getMediaSource() {\r\n        return mediaSource;\r\n    }\r\n\r\n    function getIsPruningInProgress() {\r\n        return false;\r\n    }\r\n\r\n    function dischargePreBuffer() {\r\n    }\r\n\r\n    function getBufferLevel() {\r\n        return 0;\r\n    }\r\n\r\n    function getIsBufferingCompleted() {\r\n        return isBufferingCompleted;\r\n    }\r\n\r\n    function reset(errored) {\r\n        eventBus.off(Events.DATA_UPDATE_COMPLETED, onDataUpdateCompleted, instance);\r\n        eventBus.off(Events.INIT_FRAGMENT_LOADED, onInitFragmentLoaded, instance);\r\n\r\n        if (!errored && buffer) {\r\n            buffer.abort();\r\n            buffer.reset();\r\n            buffer = null;\r\n        }\r\n    }\r\n\r\n    function onDataUpdateCompleted(e) {\r\n        if (initCache.extract(streamInfo.id, e.currentRepresentation.id) !== null) {\r\n            return;\r\n        }\r\n\r\n        // Representation has changed, clear buffer\r\n        isBufferingCompleted = false;\r\n\r\n        // // Text data file is contained in initialization segment\r\n        eventBus.trigger(Events.INIT_FRAGMENT_NEEDED,\r\n            { representationId: e.currentRepresentation.id, sender: instance },\r\n            { streamId: streamInfo.id, mediaType: type }\r\n        );\r\n    }\r\n\r\n    function appendInitSegment(representationId) {\r\n        // If text data file already in cache then no need to append it again\r\n        return initCache.extract(streamInfo.id, representationId) !== null;\r\n    }\r\n\r\n    function onInitFragmentLoaded(e) {\r\n        if (!e.chunk.bytes) return;\r\n\r\n        initCache.save(e.chunk);\r\n        buffer.append(e.chunk);\r\n\r\n        isBufferingCompleted = true;\r\n\r\n        eventBus.trigger(Events.STREAM_COMPLETED,\r\n            { request: e.request },\r\n            { streamId: streamInfo.id, mediaType: type }\r\n        );\r\n    }\r\n\r\n    function getRangeAt() {\r\n        return null;\r\n    }\r\n\r\n    function updateTimestampOffset(MSETimeOffset) {\r\n        if (buffer.timestampOffset !== MSETimeOffset && !isNaN(MSETimeOffset)) {\r\n            buffer.timestampOffset = MSETimeOffset;\r\n        }\r\n    }\r\n\r\n    instance = {\r\n        getBufferControllerType: getBufferControllerType,\r\n        initialize: initialize,\r\n        createBuffer: createBuffer,\r\n        getStreamId: getStreamId,\r\n        getType: getType,\r\n        getBuffer: getBuffer,\r\n        getBufferLevel: getBufferLevel,\r\n        setMediaSource: setMediaSource,\r\n        getMediaSource: getMediaSource,\r\n        getIsBufferingCompleted: getIsBufferingCompleted,\r\n        getIsPruningInProgress: getIsPruningInProgress,\r\n        dischargePreBuffer: dischargePreBuffer,\r\n        appendInitSegment: appendInitSegment,\r\n        getRangeAt: getRangeAt,\r\n        reset: reset,\r\n        updateTimestampOffset: updateTimestampOffset\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\nNotFragmentedTextBufferController.__dashjs_factory_name = BUFFER_CONTROLLER_TYPE;\r\nexport default FactoryMaker.getClassFactory(NotFragmentedTextBufferController);\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport Constants from '../constants/Constants';\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\nimport BufferController from './../controllers/BufferController';\r\nimport NotFragmentedTextBufferController from './NotFragmentedTextBufferController';\r\n\r\nfunction TextBufferController(config) {\r\n\r\n    config = config || {};\r\n    let context = this.context;\r\n\r\n    let _BufferControllerImpl,\r\n        instance;\r\n\r\n    function setup() {\r\n\r\n        // according to text type, we create corresponding buffer controller\r\n        if (config.type === Constants.FRAGMENTED_TEXT) {\r\n\r\n            // in this case, internal buffer ocntroller is a classical BufferController object\r\n            _BufferControllerImpl = BufferController(context).create({\r\n                streamInfo: config.streamInfo,\r\n                type: config.type,\r\n                mediaPlayerModel: config.mediaPlayerModel,\r\n                manifestModel: config.manifestModel,\r\n                fragmentModel: config.fragmentModel,\r\n                errHandler: config.errHandler,\r\n                mediaController: config.mediaController,\r\n                representationController: config.representationController,\r\n                adapter: config.adapter,\r\n                textController: config.textController,\r\n                abrController: config.abrController,\r\n                playbackController: config.playbackController,\r\n                settings: config.settings\r\n            });\r\n        } else {\r\n\r\n            // in this case, internal buffer controller is a not fragmented text controller object\r\n            _BufferControllerImpl = NotFragmentedTextBufferController(context).create({\r\n                streamInfo: config.streamInfo,\r\n                type: config.type,\r\n                mimeType: config.mimeType,\r\n                fragmentModel: config.fragmentModel,\r\n                errHandler: config.errHandler\r\n            });\r\n        }\r\n    }\r\n\r\n    function getBufferControllerType() {\r\n        return _BufferControllerImpl.getBufferControllerType();\r\n    }\r\n\r\n    function initialize(source, StreamProcessor) {\r\n        return _BufferControllerImpl.initialize(source, StreamProcessor);\r\n    }\r\n\r\n    function createBuffer(mediaInfoArr, previousBuffers) {\r\n        return _BufferControllerImpl.createBuffer(mediaInfoArr, previousBuffers);\r\n    }\r\n\r\n    function getType() {\r\n        return _BufferControllerImpl.getType();\r\n    }\r\n\r\n    function getBuffer() {\r\n        return _BufferControllerImpl.getBuffer();\r\n    }\r\n\r\n    function setBuffer(value) {\r\n        _BufferControllerImpl.setBuffer(value);\r\n    }\r\n\r\n    function getMediaSource() {\r\n        return _BufferControllerImpl.getMediaSource();\r\n    }\r\n\r\n    function setMediaSource(value) {\r\n        _BufferControllerImpl.setMediaSource(value);\r\n    }\r\n\r\n    function getBufferLevel() {\r\n        return _BufferControllerImpl.getBufferLevel();\r\n    }\r\n\r\n    function reset(errored) {\r\n        _BufferControllerImpl.reset(errored);\r\n    }\r\n\r\n    function getIsBufferingCompleted() {\r\n        return _BufferControllerImpl.getIsBufferingCompleted();\r\n    }\r\n\r\n    function appendInitSegment(representationId) {\r\n        _BufferControllerImpl.appendInitSegment(representationId);\r\n    }\r\n\r\n    function getIsPruningInProgress() {\r\n        return _BufferControllerImpl.getIsPruningInProgress();\r\n    }\r\n\r\n    function dischargePreBuffer() {\r\n        return _BufferControllerImpl.dischargePreBuffer();\r\n    }\r\n\r\n    function getRangeAt(time) {\r\n        return _BufferControllerImpl.getRangeAt(time);\r\n    }\r\n\r\n    function updateTimestampOffset(MSETimeOffset) {\r\n        const buffer = getBuffer();\r\n        if (buffer.timestampOffset !== MSETimeOffset && !isNaN(MSETimeOffset)) {\r\n            buffer.timestampOffset = MSETimeOffset;\r\n        }\r\n    }\r\n\r\n    function updateAppendWindow() {\r\n        _BufferControllerImpl.updateAppendWindow();\r\n    }\r\n\r\n    instance = {\r\n        getBufferControllerType: getBufferControllerType,\r\n        initialize: initialize,\r\n        createBuffer: createBuffer,\r\n        getType: getType,\r\n        getBuffer: getBuffer,\r\n        setBuffer: setBuffer,\r\n        getBufferLevel: getBufferLevel,\r\n        setMediaSource: setMediaSource,\r\n        getMediaSource: getMediaSource,\r\n        getIsBufferingCompleted: getIsBufferingCompleted,\r\n        getIsPruningInProgress: getIsPruningInProgress,\r\n        dischargePreBuffer: dischargePreBuffer,\r\n        appendInitSegment: appendInitSegment,\r\n        getRangeAt: getRangeAt,\r\n        reset: reset,\r\n        updateTimestampOffset: updateTimestampOffset,\r\n        updateAppendWindow\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\nTextBufferController.__dashjs_factory_name = 'TextBufferController';\r\nexport default FactoryMaker.getClassFactory(TextBufferController);\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport Constants from '../constants/Constants';\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\nimport TextSourceBuffer from './TextSourceBuffer';\r\nimport TextTracks from './TextTracks';\r\nimport VTTParser from '../utils/VTTParser';\r\nimport TTMLParser from '../utils/TTMLParser';\r\nimport EventBus from '../../core/EventBus';\r\nimport Events from '../../core/events/Events';\r\nimport { checkParameterType } from '../utils/SupervisorTools';\r\n\r\nfunction TextController() {\r\n\r\n    let context = this.context;\r\n\r\n    let instance,\r\n        textSourceBuffer,\r\n        errHandler,\r\n        adapter,\r\n        manifestModel,\r\n        mediaController,\r\n        videoModel,\r\n        streamController,\r\n        textTracks,\r\n        vttParser,\r\n        ttmlParser,\r\n        eventBus,\r\n        defaultSettings,\r\n        initialSettingsSet,\r\n        lastEnabledIndex,\r\n        textDefaultEnabled, // this is used for default settings (each time a file is loaded, we check value of this settings )\r\n        allTracksAreDisabled, // this is used for one session (when a file has been loaded, we use this settings to enable/disable text)\r\n        forceTextStreaming,\r\n        textTracksAdded,\r\n        disableTextBeforeTextTracksAdded,\r\n        previousPeriodSelectedTrack;\r\n\r\n    function setup() {\r\n\r\n        defaultSettings = null;\r\n        lastEnabledIndex = -1;\r\n        forceTextStreaming = false;\r\n        textTracksAdded = false;\r\n        initialSettingsSet = false;\r\n        disableTextBeforeTextTracksAdded = false;\r\n        textTracks = TextTracks(context).getInstance();\r\n        vttParser = VTTParser(context).getInstance();\r\n        ttmlParser = TTMLParser(context).getInstance();\r\n        textSourceBuffer = TextSourceBuffer(context).getInstance();\r\n        eventBus = EventBus(context).getInstance();\r\n\r\n        textTracks.initialize();\r\n        eventBus.on(Events.TEXT_TRACKS_QUEUE_INITIALIZED, onTextTracksAdded, instance);\r\n        eventBus.on(Events.CURRENT_TRACK_CHANGED, onCurrentTrackChanged, instance);\r\n\r\n        /*\r\n        * register those event callbacks in order to detect switch of periods and set\r\n        * correctly the selected track index in the new period.\r\n        * there is different cases :\r\n        *   - switch occurs after a seek command from the user\r\n        *   - switch occurs but codecs in streams are different\r\n        *   - switch occurs and codecs in streams are not different\r\n        */\r\n        eventBus.on(Events.PERIOD_SWITCH_STARTED, onPeriodSwitchStarted, instance);\r\n        eventBus.on(Events.STREAM_COMPLETED, onStreamCompleted, instance);\r\n        eventBus.on(Events.PERIOD_SWITCH_COMPLETED, onPeriodSwitchCompleted, instance);\r\n\r\n        resetInitialSettings();\r\n    }\r\n\r\n    function onPeriodSwitchStarted(e) {\r\n        if (previousPeriodSelectedTrack === undefined && e.fromStreamInfo !== null /* test if this is the first period */) {\r\n            previousPeriodSelectedTrack = this.getCurrentTrackIdx();\r\n        }\r\n    }\r\n\r\n    function onStreamCompleted() {\r\n        if (previousPeriodSelectedTrack === undefined) {\r\n            previousPeriodSelectedTrack = this.getCurrentTrackIdx();\r\n        }\r\n    }\r\n\r\n    function onPeriodSwitchCompleted() {\r\n        if (previousPeriodSelectedTrack !== undefined) {\r\n            this.setTextTrack(previousPeriodSelectedTrack);\r\n            previousPeriodSelectedTrack = undefined;\r\n        }\r\n    }\r\n\r\n    function setConfig(config) {\r\n        if (!config) {\r\n            return;\r\n        }\r\n        if (config.errHandler) {\r\n            errHandler = config.errHandler;\r\n        }\r\n        if (config.adapter) {\r\n            adapter = config.adapter;\r\n        }\r\n        if (config.manifestModel) {\r\n            manifestModel = config.manifestModel;\r\n        }\r\n        if (config.mediaController) {\r\n            mediaController = config.mediaController;\r\n        }\r\n        if (config.videoModel) {\r\n            videoModel = config.videoModel;\r\n        }\r\n        if (config.streamController) {\r\n            streamController = config.streamController;\r\n        }\r\n        if (config.textTracks) {\r\n            textTracks = config.textTracks;\r\n        }\r\n        if (config.vttParser) {\r\n            vttParser = config.vttParser;\r\n        }\r\n        if (config.ttmlParser) {\r\n            ttmlParser = config.ttmlParser;\r\n        }\r\n\r\n        // create config for source buffer\r\n        textSourceBuffer.setConfig({\r\n            errHandler: errHandler,\r\n            adapter: adapter,\r\n            manifestModel: manifestModel,\r\n            mediaController: mediaController,\r\n            videoModel: videoModel,\r\n            streamController: streamController,\r\n            textTracks: textTracks,\r\n            vttParser: vttParser,\r\n            ttmlParser: ttmlParser\r\n        });\r\n    }\r\n\r\n    function getTextSourceBuffer() {\r\n        return textSourceBuffer;\r\n    }\r\n\r\n    function getAllTracksAreDisabled() {\r\n        return allTracksAreDisabled;\r\n    }\r\n\r\n    function addEmbeddedTrack(mediaInfo) {\r\n        textSourceBuffer.addEmbeddedTrack(mediaInfo);\r\n    }\r\n\r\n    function setTextDefaultLanguage(lang) {\r\n        checkParameterType(lang, 'string');\r\n        if (!defaultSettings) {\r\n            defaultSettings = {};\r\n        }\r\n        defaultSettings.lang = lang;\r\n        initialSettingsSet = true;\r\n    }\r\n\r\n    function setInitialSettings(settings) {\r\n        defaultSettings = settings;\r\n        initialSettingsSet = true;\r\n    }\r\n\r\n    function getTextDefaultLanguage() {\r\n        return defaultSettings && defaultSettings.lang || '';\r\n    }\r\n\r\n    function onTextTracksAdded(e) {\r\n        let tracks = e.tracks;\r\n        let index = e.index;\r\n\r\n        if (defaultSettings) {\r\n            tracks.some((item, idx) => {\r\n                // matchSettings is compatible with setTextDefaultLanguage and setInitialSettings\r\n                if (mediaController.matchSettings(defaultSettings, item)) {\r\n                    this.setTextTrack(idx);\r\n                    index = idx;\r\n                    return true;\r\n                }\r\n            });\r\n        }\r\n\r\n        if (textDefaultEnabled === false || ( textDefaultEnabled === undefined && !defaultSettings ) || disableTextBeforeTextTracksAdded) {\r\n            // disable text at startup if explicitely configured with setTextDefaultEnabled(false) or if there is no defaultSettings (configuration or from domStorage)\r\n            this.setTextTrack(-1);\r\n        }\r\n\r\n        lastEnabledIndex = index;\r\n        eventBus.trigger(Events.TEXT_TRACKS_ADDED, {\r\n            enabled: isTextEnabled(),\r\n            index: index,\r\n            tracks: tracks\r\n        });\r\n        textTracksAdded = true;\r\n    }\r\n\r\n    function onCurrentTrackChanged(event) {\r\n        if (!initialSettingsSet && event && event.newMediaInfo) {\r\n            let mediaInfo = event.newMediaInfo;\r\n            if (mediaInfo.type === Constants.FRAGMENTED_TEXT) {\r\n                defaultSettings = {\r\n                    lang: mediaInfo.lang,\r\n                    role: mediaInfo.roles[0],\r\n                    accessibility: mediaInfo.accessibility[0]\r\n                };\r\n            }\r\n        }\r\n    }\r\n\r\n    function setTextDefaultEnabled(enable) {\r\n        checkParameterType(enable,'boolean');\r\n        textDefaultEnabled = enable;\r\n\r\n        if (!textDefaultEnabled) {\r\n            // disable text at startup\r\n            this.setTextTrack(-1);\r\n        } else {\r\n            allTracksAreDisabled = false;\r\n        }\r\n    }\r\n\r\n    function getTextDefaultEnabled() {\r\n        return textDefaultEnabled === undefined ? false : textDefaultEnabled;\r\n    }\r\n\r\n    function enableText(enable) {\r\n        checkParameterType(enable,'boolean');\r\n        if (!textDefaultEnabled && enable) {\r\n            textDefaultEnabled = true;\r\n        }\r\n        if (isTextEnabled() !== enable) {\r\n            // change track selection\r\n            if (enable) {\r\n                // apply last enabled track\r\n                this.setTextTrack(lastEnabledIndex);\r\n            }\r\n\r\n            if (!enable) {\r\n                // keep last index and disable text track\r\n                lastEnabledIndex = this.getCurrentTrackIdx();\r\n                if (!textTracksAdded) {\r\n                    disableTextBeforeTextTracksAdded = true;\r\n                } else {\r\n                    this.setTextTrack(-1);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function isTextEnabled() {\r\n        let enabled = true;\r\n        if (allTracksAreDisabled && !forceTextStreaming) {\r\n            enabled = false;\r\n        }\r\n        return enabled;\r\n    }\r\n\r\n    // when set to true ScheduleController will allow schedule of chunks even if tracks are all disabled. Allowing streaming to hidden track for external players to work with.\r\n    function enableForcedTextStreaming(enable) {\r\n        checkParameterType(enable,'boolean');\r\n        forceTextStreaming = enable;\r\n    }\r\n\r\n    function setTextTrack(idx) {\r\n        //For external time text file, the only action needed to change a track is marking the track mode to showing.\r\n        // Fragmented text tracks need the additional step of calling TextController.setTextTrack();\r\n        let config = textSourceBuffer.getConfig();\r\n        let fragmentModel = config.fragmentModel;\r\n        let fragmentedTracks = config.fragmentedTracks;\r\n        let videoModel = config.videoModel;\r\n        let mediaInfosArr,\r\n            streamProcessor;\r\n\r\n        allTracksAreDisabled = idx === -1 ? true : false;\r\n\r\n        let oldTrackIdx = textTracks.getCurrentTrackIdx();\r\n        if (oldTrackIdx !== idx) {\r\n            if (allTracksAreDisabled && mediaController) {\r\n                mediaController.saveTextSettingsDisabled();\r\n            }\r\n            textTracks.setModeForTrackIdx(oldTrackIdx, Constants.TEXT_HIDDEN);\r\n            textTracks.setCurrentTrackIdx(idx);\r\n            textTracks.setModeForTrackIdx(idx, Constants.TEXT_SHOWING);\r\n\r\n            let currentTrackInfo = textTracks.getCurrentTrackInfo();\r\n\r\n            if (currentTrackInfo && currentTrackInfo.isFragmented && !currentTrackInfo.isEmbedded) {\r\n                for (let i = 0; i < fragmentedTracks.length; i++) {\r\n                    let mediaInfo = fragmentedTracks[i];\r\n                    if (currentTrackInfo.lang === mediaInfo.lang && currentTrackInfo.index === mediaInfo.index &&\r\n                        (mediaInfo.id ? currentTrackInfo.id === mediaInfo.id : currentTrackInfo.id === mediaInfo.index)) {\r\n                        let currentFragTrack = mediaController.getCurrentTrackFor(Constants.FRAGMENTED_TEXT, streamController.getActiveStreamInfo());\r\n                        if (mediaInfo !== currentFragTrack) {\r\n                            fragmentModel.abortRequests();\r\n                            fragmentModel.removeExecutedRequestsBeforeTime();\r\n                            textSourceBuffer.remove();\r\n                            textTracks.deleteCuesFromTrackIdx(oldTrackIdx);\r\n                            mediaController.setTrack(mediaInfo);\r\n                            textSourceBuffer.setCurrentFragmentedTrackIdx(i);\r\n                        } else if (oldTrackIdx === -1) {\r\n                            //in fragmented use case, if the user selects the older track (the one selected before disabled text track)\r\n                            //no CURRENT_TRACK_CHANGED event will be trigger, so dashHandler current time has to be updated and the scheduleController\r\n                            //has to be restarted.\r\n                            const streamProcessors = streamController.getActiveStreamProcessors();\r\n                            for (let i = 0; i < streamProcessors.length; i++) {\r\n                                if (streamProcessors[i].getType() === Constants.FRAGMENTED_TEXT) {\r\n                                    streamProcessor = streamProcessors[i];\r\n                                    break;\r\n                                }\r\n                            }\r\n                            streamProcessor.setBufferingTime(videoModel.getTime());\r\n                            streamProcessor.getScheduleController().start();\r\n                        }\r\n                    }\r\n                }\r\n            } else if (currentTrackInfo && !currentTrackInfo.isFragmented) {\r\n                const streamProcessors = streamController.getActiveStreamProcessors();\r\n                for (let i = 0; i < streamProcessors.length; i++) {\r\n                    if (streamProcessors[i].getType() === Constants.TEXT) {\r\n                        streamProcessor = streamProcessors[i];\r\n                        mediaInfosArr = streamProcessor.getMediaInfoArr();\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                if (streamProcessor && mediaInfosArr) {\r\n                    for (let i = 0; i < mediaInfosArr.length; i++) {\r\n                        if (mediaInfosArr[i].index === currentTrackInfo.index && mediaInfosArr[i].lang === currentTrackInfo.lang) {\r\n                            streamProcessor.selectMediaInfo(mediaInfosArr[i]);\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function getCurrentTrackIdx() {\r\n        return textTracks.getCurrentTrackIdx();\r\n    }\r\n\r\n    function resetInitialSettings() {\r\n        allTracksAreDisabled = true;\r\n        textTracksAdded = false;\r\n        disableTextBeforeTextTracksAdded = false;\r\n    }\r\n\r\n    function reset() {\r\n        resetInitialSettings();\r\n        textSourceBuffer.resetEmbedded();\r\n        textSourceBuffer.reset();\r\n    }\r\n\r\n    instance = {\r\n        setConfig: setConfig,\r\n        getTextSourceBuffer: getTextSourceBuffer,\r\n        getAllTracksAreDisabled: getAllTracksAreDisabled,\r\n        addEmbeddedTrack: addEmbeddedTrack,\r\n        getTextDefaultLanguage: getTextDefaultLanguage,\r\n        setTextDefaultLanguage: setTextDefaultLanguage,\r\n        setTextDefaultEnabled: setTextDefaultEnabled,\r\n        getTextDefaultEnabled: getTextDefaultEnabled,\r\n        setInitialSettings: setInitialSettings,\r\n        enableText: enableText,\r\n        isTextEnabled: isTextEnabled,\r\n        setTextTrack: setTextTrack,\r\n        getCurrentTrackIdx: getCurrentTrackIdx,\r\n        enableForcedTextStreaming: enableForcedTextStreaming,\r\n        reset: reset\r\n    };\r\n    setup();\r\n    return instance;\r\n}\r\n\r\nTextController.__dashjs_factory_name = 'TextController';\r\nexport default FactoryMaker.getSingletonFactory(TextController);\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport Constants from '../constants/Constants';\r\nimport { HTTPRequest } from '../vo/metrics/HTTPRequest';\r\nimport TextTrackInfo from '../vo/TextTrackInfo';\r\nimport BoxParser from '../utils/BoxParser';\r\nimport CustomTimeRanges from '../utils/CustomTimeRanges';\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\nimport Debug from '../../core/Debug';\r\nimport TextTracks from './TextTracks';\r\nimport EmbeddedTextHtmlRender from './EmbeddedTextHtmlRender';\r\nimport ISOBoxer from 'codem-isoboxer';\r\nimport cea608parser from '../../../externals/cea608-parser';\r\nimport EventBus from '../../core/EventBus';\r\nimport Events from '../../core/events/Events';\r\nimport DashJSError from '../vo/DashJSError';\r\nimport Errors from '../../core/errors/Errors';\r\n\r\nfunction TextSourceBuffer() {\r\n\r\n    const context = this.context;\r\n    const eventBus = EventBus(context).getInstance();\r\n    let embeddedInitialized = false;\r\n\r\n    let instance,\r\n        logger,\r\n        boxParser,\r\n        errHandler,\r\n        adapter,\r\n        manifestModel,\r\n        mediaController,\r\n        parser,\r\n        vttParser,\r\n        ttmlParser,\r\n        mediaInfos,\r\n        textTracks,\r\n        fragmentedFragmentModel,\r\n        initializationSegmentReceived,\r\n        timescale,\r\n        fragmentedTracks,\r\n        videoModel,\r\n        streamController,\r\n        firstFragmentedSubtitleStart,\r\n        currFragmentedTrackIdx,\r\n        embeddedTracks,\r\n        embeddedTimescale,\r\n        embeddedLastSequenceNumber,\r\n        embeddedCea608FieldParsers,\r\n        embeddedTextHtmlRender,\r\n        mseTimeOffset;\r\n\r\n    function setup() {\r\n        logger = Debug(context).getInstance().getLogger(instance);\r\n\r\n        resetInitialSettings();\r\n    }\r\n\r\n    function resetFragmented () {\r\n        fragmentedFragmentModel = null;\r\n        timescale = NaN;\r\n        fragmentedTracks = [];\r\n        firstFragmentedSubtitleStart = null;\r\n        initializationSegmentReceived = false;\r\n    }\r\n\r\n    function resetInitialSettings() {\r\n        resetFragmented();\r\n\r\n        mediaInfos = [];\r\n        parser = null;\r\n    }\r\n\r\n    function initialize(mimeType, streamInfo, mediaInfoArr, fragmentModel) {\r\n        if (!embeddedInitialized) {\r\n            initEmbedded();\r\n        }\r\n\r\n        textTracks.setConfig({\r\n            videoModel: videoModel\r\n        });\r\n        textTracks.initialize();\r\n\r\n        if (!boxParser) {\r\n            boxParser = BoxParser(context).getInstance();\r\n        }\r\n\r\n        addMediaInfos(mimeType, streamInfo, mediaInfoArr, fragmentModel);\r\n    }\r\n\r\n    function addMediaInfos(mimeType, streamInfo, mediaInfoArr, fragmentModel) {\r\n        const isFragmented = !adapter.getIsTextTrack(mimeType);\r\n\r\n        mediaInfos = mediaInfos.concat(mediaInfoArr);\r\n\r\n        if (isFragmented) {\r\n            fragmentedFragmentModel = fragmentModel;\r\n            instance.buffered = CustomTimeRanges(context).create();\r\n            fragmentedTracks = mediaController.getTracksFor(Constants.FRAGMENTED_TEXT, streamInfo);\r\n            const currFragTrack = mediaController.getCurrentTrackFor(Constants.FRAGMENTED_TEXT, streamInfo);\r\n            for (let i = 0; i < fragmentedTracks.length; i++) {\r\n                if (fragmentedTracks[i] === currFragTrack) {\r\n                    setCurrentFragmentedTrackIdx(i);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < mediaInfos.length; i++) {\r\n            createTextTrackFromMediaInfo(null, mediaInfos[i]);\r\n        }\r\n    }\r\n\r\n    function abort() {\r\n        textTracks.deleteAllTextTracks();\r\n        resetFragmented();\r\n        boxParser = null;\r\n        mediaInfos = [];\r\n    }\r\n\r\n    function reset() {\r\n        resetInitialSettings();\r\n\r\n        streamController = null;\r\n        videoModel = null;\r\n        textTracks = null;\r\n    }\r\n\r\n    function onVideoChunkReceived(e) {\r\n        const chunk = e.chunk;\r\n\r\n        if (chunk.mediaInfo.embeddedCaptions) {\r\n            append(chunk.bytes, chunk);\r\n        }\r\n    }\r\n\r\n    function initEmbedded() {\r\n        embeddedTracks = [];\r\n        textTracks = TextTracks(context).getInstance();\r\n        textTracks.setConfig({\r\n            videoModel: videoModel\r\n        });\r\n        textTracks.initialize();\r\n        boxParser = BoxParser(context).getInstance();\r\n        currFragmentedTrackIdx = null;\r\n        embeddedTimescale = 0;\r\n        embeddedCea608FieldParsers = [];\r\n        embeddedLastSequenceNumber = null;\r\n        embeddedInitialized = true;\r\n        embeddedTextHtmlRender = EmbeddedTextHtmlRender(context).getInstance();\r\n\r\n        const streamProcessors = streamController.getActiveStreamProcessors();\r\n        for (const i in streamProcessors) {\r\n            if (streamProcessors[i].getType() === 'video') {\r\n                mseTimeOffset = streamProcessors[i].getRepresentationInfo().MSETimeOffset;\r\n                break;\r\n            }\r\n        }\r\n\r\n        eventBus.on(Events.VIDEO_CHUNK_RECEIVED, onVideoChunkReceived, this);\r\n        eventBus.on(Events.BUFFER_CLEARED, onVideoBufferCleared, this);\r\n    }\r\n\r\n    function resetEmbedded() {\r\n        eventBus.off(Events.VIDEO_CHUNK_RECEIVED, onVideoChunkReceived, this);\r\n        eventBus.off(Events.BUFFER_CLEARED, onVideoBufferCleared, this);\r\n        if (textTracks) {\r\n            textTracks.deleteAllTextTracks();\r\n        }\r\n        embeddedInitialized = false;\r\n        embeddedTracks = [];\r\n        embeddedCea608FieldParsers = [null, null];\r\n        embeddedLastSequenceNumber = null;\r\n    }\r\n\r\n    function addEmbeddedTrack(mediaInfo) {\r\n        if (!embeddedInitialized) {\r\n            initEmbedded();\r\n        }\r\n        if (mediaInfo) {\r\n            if (mediaInfo.id === Constants.CC1 || mediaInfo.id === Constants.CC3) {\r\n                for (let i = 0; i < embeddedTracks.length; i++) {\r\n                    if (embeddedTracks[i].id === mediaInfo.id) {\r\n                        return;\r\n                    }\r\n                }\r\n                embeddedTracks.push(mediaInfo);\r\n            } else {\r\n                logger.warn('Embedded track ' + mediaInfo.id + ' not supported!');\r\n            }\r\n        }\r\n    }\r\n\r\n    function setConfig(config) {\r\n        if (!config) {\r\n            return;\r\n        }\r\n        if (config.errHandler) {\r\n            errHandler = config.errHandler;\r\n        }\r\n        if (config.adapter) {\r\n            adapter = config.adapter;\r\n        }\r\n        if (config.manifestModel) {\r\n            manifestModel = config.manifestModel;\r\n        }\r\n        if (config.mediaController) {\r\n            mediaController = config.mediaController;\r\n        }\r\n        if (config.videoModel) {\r\n            videoModel = config.videoModel;\r\n        }\r\n        if (config.streamController) {\r\n            streamController = config.streamController;\r\n        }\r\n        if (config.textTracks) {\r\n            textTracks = config.textTracks;\r\n        }\r\n        if (config.vttParser) {\r\n            vttParser = config.vttParser;\r\n        }\r\n        if (config.ttmlParser) {\r\n            ttmlParser = config.ttmlParser;\r\n        }\r\n    }\r\n\r\n    function getConfig() {\r\n        const config = {\r\n            fragmentModel: fragmentedFragmentModel,\r\n            fragmentedTracks: fragmentedTracks,\r\n            videoModel: videoModel\r\n        };\r\n\r\n        return config;\r\n    }\r\n\r\n    function setCurrentFragmentedTrackIdx(idx) {\r\n        currFragmentedTrackIdx = idx;\r\n    }\r\n\r\n    function createTextTrackFromMediaInfo(captionData, mediaInfo) {\r\n        const textTrackInfo = new TextTrackInfo();\r\n        const trackKindMap = { subtitle: 'subtitles', caption: 'captions' }; //Dash Spec has no \"s\" on end of KIND but HTML needs plural.\r\n        const getKind = function () {\r\n            let kind = (mediaInfo.roles.length > 0) ? trackKindMap[mediaInfo.roles[0]] : trackKindMap.caption;\r\n            kind = (kind === trackKindMap.caption || kind === trackKindMap.subtitle) ? kind : trackKindMap.caption;\r\n            return kind;\r\n        };\r\n\r\n        const checkTTML = function () {\r\n            let ttml = false;\r\n            if (mediaInfo.codec && mediaInfo.codec.search(Constants.STPP) >= 0) {\r\n                ttml = true;\r\n            }\r\n            if (mediaInfo.mimeType && mediaInfo.mimeType.search(Constants.TTML) >= 0) {\r\n                ttml = true;\r\n            }\r\n            return ttml;\r\n        };\r\n\r\n        textTrackInfo.captionData = captionData;\r\n        textTrackInfo.lang = mediaInfo.lang;\r\n        textTrackInfo.labels = mediaInfo.labels;\r\n        textTrackInfo.id = mediaInfo.id ? mediaInfo.id : mediaInfo.index; // AdaptationSet id (an unsigned int) as it's optional parameter, use mediaInfo.index\r\n        textTrackInfo.index = mediaInfo.index; // AdaptationSet index in manifest\r\n        textTrackInfo.isTTML = checkTTML();\r\n        textTrackInfo.defaultTrack = getIsDefault(mediaInfo);\r\n        textTrackInfo.isFragmented = !adapter.getIsTextTrack(mediaInfo.mimeType);\r\n        textTrackInfo.isEmbedded = mediaInfo.isEmbedded ? true : false;\r\n        textTrackInfo.kind = getKind();\r\n        textTrackInfo.roles = mediaInfo.roles;\r\n        textTrackInfo.accessibility = mediaInfo.accessibility;\r\n        const totalNrTracks = (mediaInfos ? mediaInfos.length : 0) + embeddedTracks.length;\r\n        textTracks.addTextTrack(textTrackInfo, totalNrTracks);\r\n    }\r\n\r\n    function append(bytes, chunk) {\r\n        let result,\r\n            sampleList,\r\n            i, j, k,\r\n            samplesInfo,\r\n            ccContent;\r\n        const mediaInfo = chunk.mediaInfo;\r\n        const mediaType = mediaInfo.type;\r\n        const mimeType = mediaInfo.mimeType;\r\n        const codecType = mediaInfo.codec || mimeType;\r\n        if (!codecType) {\r\n            logger.error('No text type defined');\r\n            return;\r\n        }\r\n\r\n        if (mediaType === Constants.FRAGMENTED_TEXT) {\r\n            if (!initializationSegmentReceived && chunk.segmentType === 'InitializationSegment') {\r\n                initializationSegmentReceived = true;\r\n                timescale = boxParser.getMediaTimescaleFromMoov(bytes);\r\n            } else {\r\n                if (!initializationSegmentReceived) {\r\n                    return;\r\n                }\r\n                samplesInfo = boxParser.getSamplesInfo(bytes);\r\n                sampleList = samplesInfo.sampleList;\r\n                if (firstFragmentedSubtitleStart === null && sampleList.length > 0) {\r\n                    firstFragmentedSubtitleStart = sampleList[0].cts - chunk.start * timescale;\r\n                }\r\n                if (codecType.search(Constants.STPP) >= 0) {\r\n                    parser = parser !== null ? parser : getParser(codecType);\r\n                    for (i = 0; i < sampleList.length; i++) {\r\n                        const sample = sampleList[i];\r\n                        const sampleStart = sample.cts;\r\n                        const sampleRelStart = sampleStart - firstFragmentedSubtitleStart;\r\n                        this.buffered.add(sampleRelStart / timescale, (sampleRelStart + sample.duration) / timescale);\r\n                        const dataView = new DataView(bytes, sample.offset, sample.subSizes[0]);\r\n                        ccContent = ISOBoxer.Utils.dataViewToString(dataView, Constants.UTF8);\r\n                        const images = [];\r\n                        let subOffset = sample.offset + sample.subSizes[0];\r\n                        for (j = 1; j < sample.subSizes.length; j++) {\r\n                            const inData = new Uint8Array(bytes, subOffset, sample.subSizes[j]);\r\n                            const raw = String.fromCharCode.apply(null, inData);\r\n                            images.push(raw);\r\n                            subOffset += sample.subSizes[j];\r\n                        }\r\n                        try {\r\n                            // Only used for Miscrosoft Smooth Streaming support - caption time is relative to sample time. In this case, we apply an offset.\r\n                            const manifest = manifestModel.getValue();\r\n                            const offsetTime = manifest.ttmlTimeIsRelative ? sampleStart / timescale : 0;\r\n                            result = parser.parse(ccContent, offsetTime, sampleStart / timescale, (sampleStart + sample.duration) / timescale, images);\r\n                            textTracks.addCaptions(currFragmentedTrackIdx, firstFragmentedSubtitleStart / timescale, result);\r\n                        } catch (e) {\r\n                            fragmentedFragmentModel.removeExecutedRequestsBeforeTime();\r\n                            this.remove();\r\n                            logger.error('TTML parser error: ' + e.message);\r\n                        }\r\n                    }\r\n                } else {\r\n                    // WebVTT case\r\n                    const captionArray = [];\r\n                    for (i = 0 ; i < sampleList.length; i++) {\r\n                        const sample = sampleList[i];\r\n                        sample.cts -= firstFragmentedSubtitleStart;\r\n                        this.buffered.add(sample.cts / timescale, (sample.cts + sample.duration) / timescale);\r\n                        const sampleData = bytes.slice(sample.offset, sample.offset + sample.size);\r\n                        // There are boxes inside the sampleData, so we need a ISOBoxer to get at it.\r\n                        const sampleBoxes = ISOBoxer.parseBuffer(sampleData);\r\n\r\n                        for (j = 0 ; j < sampleBoxes.boxes.length; j++) {\r\n                            const box1 = sampleBoxes.boxes[j];\r\n                            logger.debug('VTT box1: ' + box1.type);\r\n                            if (box1.type === 'vtte') {\r\n                                continue; //Empty box\r\n                            }\r\n                            if (box1.type === 'vttc') {\r\n                                logger.debug('VTT vttc boxes.length = ' + box1.boxes.length);\r\n                                for (k = 0 ; k < box1.boxes.length; k++) {\r\n                                    const box2 = box1.boxes[k];\r\n                                    logger.debug('VTT box2: ' + box2.type);\r\n                                    if (box2.type === 'payl') {\r\n                                        const cue_text = box2.cue_text;\r\n                                        logger.debug('VTT cue_text = ' + cue_text);\r\n                                        const start_time = sample.cts / timescale;\r\n                                        const end_time = (sample.cts + sample.duration) / timescale;\r\n                                        captionArray.push({\r\n                                            start: start_time,\r\n                                            end: end_time,\r\n                                            data: cue_text,\r\n                                            styles: {}\r\n                                        });\r\n                                        logger.debug('VTT ' + start_time + '-' + end_time + ' : ' + cue_text);\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    if (captionArray.length > 0) {\r\n                        textTracks.addCaptions(currFragmentedTrackIdx, 0, captionArray);\r\n                    }\r\n                }\r\n            }\r\n        } else if (mediaType === Constants.TEXT) {\r\n            const dataView = new DataView(bytes, 0, bytes.byteLength);\r\n            ccContent = ISOBoxer.Utils.dataViewToString(dataView, Constants.UTF8);\r\n\r\n            try {\r\n                result = getParser(codecType).parse(ccContent, 0);\r\n                textTracks.addCaptions(textTracks.getCurrentTrackIdx(), 0, result);\r\n            } catch (e) {\r\n                errHandler.error(new DashJSError(Errors.TIMED_TEXT_ERROR_ID_PARSE_CODE, Errors.TIMED_TEXT_ERROR_MESSAGE_PARSE + e.message, ccContent));\r\n            }\r\n        } else if (mediaType === Constants.VIDEO) { //embedded text\r\n            if (chunk.segmentType === HTTPRequest.INIT_SEGMENT_TYPE) {\r\n                if (embeddedTimescale === 0) {\r\n                    embeddedTimescale = boxParser.getMediaTimescaleFromMoov(bytes);\r\n                    for (i = 0; i < embeddedTracks.length; i++) {\r\n                        createTextTrackFromMediaInfo(null, embeddedTracks[i]);\r\n                    }\r\n                }\r\n            } else { // MediaSegment\r\n                if (embeddedTimescale === 0) {\r\n                    logger.warn('CEA-608: No timescale for embeddedTextTrack yet');\r\n                    return;\r\n                }\r\n                const makeCueAdderForIndex = function (self, trackIndex) {\r\n                    function newCue(startTime, endTime, captionScreen) {\r\n                        let captionsArray = null;\r\n                        if (videoModel.getTTMLRenderingDiv()) {\r\n                            captionsArray = embeddedTextHtmlRender.createHTMLCaptionsFromScreen(videoModel.getElement(), startTime, endTime, captionScreen);\r\n                        } else {\r\n                            const text = captionScreen.getDisplayText();\r\n                            captionsArray = [{\r\n                                start: startTime,\r\n                                end: endTime,\r\n                                data: text,\r\n                                styles: {}\r\n                            }];\r\n                        }\r\n                        if (captionsArray) {\r\n                            textTracks.addCaptions(trackIndex, 0, captionsArray);\r\n                        }\r\n                    }\r\n                    return newCue;\r\n                };\r\n\r\n                samplesInfo = boxParser.getSamplesInfo(bytes);\r\n\r\n                const sequenceNumber = samplesInfo.lastSequenceNumber;\r\n\r\n                if (!embeddedCea608FieldParsers[0] && !embeddedCea608FieldParsers[1]) {\r\n                    // Time to setup the CEA-608 parsing\r\n                    let field, handler, trackIdx;\r\n                    for (i = 0; i < embeddedTracks.length; i++) {\r\n                        if (embeddedTracks[i].id === Constants.CC1) {\r\n                            field = 0;\r\n                            trackIdx = textTracks.getTrackIdxForId(Constants.CC1);\r\n                        } else if (embeddedTracks[i].id === Constants.CC3) {\r\n                            field = 1;\r\n                            trackIdx = textTracks.getTrackIdxForId(Constants.CC3);\r\n                        }\r\n                        if (trackIdx === -1) {\r\n                            logger.warn('CEA-608: data before track is ready.');\r\n                            return;\r\n                        }\r\n                        handler = makeCueAdderForIndex(this, trackIdx);\r\n                        embeddedCea608FieldParsers[i] = new cea608parser.Cea608Parser(i + 1, {\r\n                            'newCue': handler\r\n                        }, null);\r\n                    }\r\n                }\r\n\r\n                if (embeddedTimescale) {\r\n                    if (embeddedLastSequenceNumber !== null && sequenceNumber !== embeddedLastSequenceNumber + samplesInfo.numSequences) {\r\n                        for (i = 0; i < embeddedCea608FieldParsers.length; i++) {\r\n                            if (embeddedCea608FieldParsers[i]) {\r\n                                embeddedCea608FieldParsers[i].reset();\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    const allCcData = extractCea608Data(bytes, samplesInfo.sampleList);\r\n\r\n                    for (let fieldNr = 0; fieldNr < embeddedCea608FieldParsers.length; fieldNr++) {\r\n                        const ccData = allCcData.fields[fieldNr];\r\n                        const fieldParser = embeddedCea608FieldParsers[fieldNr];\r\n                        if (fieldParser) {\r\n                            for (i = 0; i < ccData.length; i++) {\r\n                                fieldParser.addData(ccData[i][0] / embeddedTimescale, ccData[i][1]);\r\n                            }\r\n                        }\r\n                    }\r\n                    embeddedLastSequenceNumber = sequenceNumber;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Extract CEA-608 data from a buffer of data.\r\n     * @param {ArrayBuffer} data\r\n     * @param {Array} samples cue information\r\n     * @returns {Object|null} ccData corresponding to one segment.\r\n     */\r\n    function extractCea608Data(data, samples) {\r\n        if (samples.length === 0) {\r\n            return null;\r\n        }\r\n\r\n        const allCcData = {\r\n            splits: [],\r\n            fields: [[], []]\r\n        };\r\n        const raw = new DataView(data);\r\n        for (let i = 0; i < samples.length; i++) {\r\n            const sample = samples[i];\r\n            const cea608Ranges = cea608parser.findCea608Nalus(raw, sample.offset, sample.size);\r\n            let lastSampleTime = null;\r\n            let idx = 0;\r\n            for (let j = 0; j < cea608Ranges.length; j++) {\r\n                const ccData = cea608parser.extractCea608DataFromRange(raw, cea608Ranges[j]);\r\n                for (let k = 0; k < 2; k++) {\r\n                    if (ccData[k].length > 0) {\r\n                        if (sample.cts !== lastSampleTime) {\r\n                            idx = 0;\r\n                        } else {\r\n                            idx += 1;\r\n                        }\r\n                        allCcData.fields[k].push([sample.cts + (mseTimeOffset * embeddedTimescale), ccData[k], idx]);\r\n                        lastSampleTime = sample.cts;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Sort by sampleTime ascending order\r\n        // If two packets have the same sampleTime, use them in the order\r\n        // they were received\r\n        allCcData.fields.forEach(function sortField(field) {\r\n            field.sort(function (a, b) {\r\n                if (a[0] === b[0]) {\r\n                    return a[2] - b[2];\r\n                }\r\n                return a[0] - b[0];\r\n            });\r\n        });\r\n\r\n        return allCcData;\r\n    }\r\n\r\n    function getIsDefault(mediaInfo) {\r\n        //TODO How to tag default. currently same order as listed in manifest.\r\n        // Is there a way to mark a text adaptation set as the default one? DASHIF meeting talk about using role which is being used for track KIND\r\n        // Eg subtitles etc. You can have multiple role tags per adaptation Not defined in the spec yet.\r\n        let isDefault = false;\r\n        if (embeddedTracks.length > 1 && mediaInfo.isEmbedded) {\r\n            isDefault = (mediaInfo.id && mediaInfo.id === Constants.CC1); // CC1 if both CC1 and CC3 exist\r\n        } else if (embeddedTracks.length === 1) {\r\n            if (mediaInfo.id && typeof mediaInfo.id === 'string' && mediaInfo.id.substring(0, 2) === 'CC') { // Either CC1 or CC3\r\n                isDefault = true;\r\n            }\r\n        } else if (embeddedTracks.length === 0) {\r\n            isDefault = (mediaInfo.index === mediaInfos[0].index);\r\n        }\r\n        return isDefault;\r\n    }\r\n\r\n    function getParser(codecType) {\r\n        let parser;\r\n        if (codecType.search(Constants.VTT) >= 0) {\r\n            parser = vttParser;\r\n        } else if (codecType.search(Constants.TTML) >= 0 || codecType.search(Constants.STPP) >= 0) {\r\n            parser = ttmlParser;\r\n        }\r\n        return parser;\r\n    }\r\n\r\n    function remove(start, end) {\r\n        //if start and end are not defined, remove all\r\n        if ((start === undefined) && (start === end)) {\r\n            start = this.buffered.start(0);\r\n            end = this.buffered.end(this.buffered.length - 1);\r\n        }\r\n        this.buffered.remove(start, end);\r\n    }\r\n\r\n    function onVideoBufferCleared(e) {\r\n        embeddedTracks.forEach(function (track) {\r\n            const trackIdx = textTracks.getTrackIdxForId(track.id);\r\n            if (trackIdx >= 0) {\r\n                textTracks.deleteCuesFromTrackIdx(trackIdx, e.from, e.to);\r\n            }\r\n        });\r\n    }\r\n\r\n    instance = {\r\n        initialize: initialize,\r\n        append: append,\r\n        abort: abort,\r\n        addEmbeddedTrack: addEmbeddedTrack,\r\n        resetEmbedded: resetEmbedded,\r\n        setConfig: setConfig,\r\n        getConfig: getConfig,\r\n        setCurrentFragmentedTrackIdx: setCurrentFragmentedTrackIdx,\r\n        remove: remove,\r\n        reset: reset\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\nTextSourceBuffer.__dashjs_factory_name = 'TextSourceBuffer';\r\nexport default FactoryMaker.getSingletonFactory(TextSourceBuffer);\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport Constants from '../constants/Constants';\r\nimport EventBus from '../../core/EventBus';\r\nimport Events from '../../core/events/Events';\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\nimport Debug from '../../core/Debug';\r\nimport { renderHTML } from 'imsc';\r\nimport { checkParameterType } from '../utils/SupervisorTools';\r\n\r\nfunction TextTracks() {\r\n\r\n    const context = this.context;\r\n    const eventBus = EventBus(context).getInstance();\r\n\r\n    let instance,\r\n        logger,\r\n        Cue,\r\n        videoModel,\r\n        textTrackQueue,\r\n        trackElementArr,\r\n        currentTrackIdx,\r\n        actualVideoLeft,\r\n        actualVideoTop,\r\n        actualVideoWidth,\r\n        actualVideoHeight,\r\n        captionContainer,\r\n        videoSizeCheckInterval,\r\n        fullscreenAttribute,\r\n        displayCCOnTop,\r\n        previousISDState,\r\n        topZIndex,\r\n        resizeObserver;\r\n\r\n    function setup() {\r\n        logger = Debug(context).getInstance().getLogger(instance);\r\n    }\r\n\r\n    function initialize() {\r\n        if (typeof window === 'undefined' || typeof navigator === 'undefined') {\r\n            return;\r\n        }\r\n\r\n        Cue = window.VTTCue || window.TextTrackCue;\r\n        textTrackQueue = [];\r\n        trackElementArr = [];\r\n        currentTrackIdx = -1;\r\n        actualVideoLeft = 0;\r\n        actualVideoTop = 0;\r\n        actualVideoWidth = 0;\r\n        actualVideoHeight = 0;\r\n        captionContainer = null;\r\n        videoSizeCheckInterval = null;\r\n        displayCCOnTop = false;\r\n        topZIndex = 2147483647;\r\n        previousISDState = null;\r\n\r\n        if (document.fullscreenElement !== undefined) {\r\n            fullscreenAttribute = 'fullscreenElement'; // Standard and Edge\r\n        } else if (document.webkitIsFullScreen !== undefined) {\r\n            fullscreenAttribute = 'webkitIsFullScreen'; // Chrome and Safari (and Edge)\r\n        } else if (document.msFullscreenElement) { // IE11\r\n            fullscreenAttribute = 'msFullscreenElement';\r\n        } else if (document.mozFullScreen) { // Firefox\r\n            fullscreenAttribute = 'mozFullScreen';\r\n        }\r\n    }\r\n\r\n    function createTrackForUserAgent (i) {\r\n        const kind = textTrackQueue[i].kind;\r\n        const label = textTrackQueue[i].id !== undefined ? textTrackQueue[i].id : textTrackQueue[i].lang;\r\n        const lang = textTrackQueue[i].lang;\r\n        const isTTML = textTrackQueue[i].isTTML;\r\n        const isEmbedded = textTrackQueue[i].isEmbedded;\r\n        const track = videoModel.addTextTrack(kind, label, lang, isTTML, isEmbedded);\r\n        return track;\r\n    }\r\n\r\n    function setDisplayCConTop(value) {\r\n        checkParameterType(value, 'boolean');\r\n        displayCCOnTop = value;\r\n        if (!captionContainer || document[fullscreenAttribute]) {\r\n            return;\r\n        }\r\n        captionContainer.style.zIndex = value ? topZIndex : null;\r\n    }\r\n\r\n    function addTextTrack(textTrackInfoVO, totalTextTracks) {\r\n        if (textTrackQueue.length === totalTextTracks) {\r\n            logger.error('Trying to add too many tracks.');\r\n            return;\r\n        }\r\n\r\n        textTrackQueue.push(textTrackInfoVO);\r\n\r\n        if (textTrackQueue.length === totalTextTracks) {\r\n            textTrackQueue.sort(function (a, b) { //Sort in same order as in manifest\r\n                return a.index - b.index;\r\n            });\r\n            captionContainer = videoModel.getTTMLRenderingDiv();\r\n            let defaultIndex = -1;\r\n            for (let i = 0 ; i < textTrackQueue.length; i++) {\r\n                const track = createTrackForUserAgent.call(this, i);\r\n                trackElementArr.push(track); //used to remove tracks from video element when added manually\r\n\r\n                if (textTrackQueue[i].defaultTrack) {\r\n                    // track.default is an object property identifier that is a reserved word\r\n                    // The following jshint directive is used to suppressed the warning \"Expected an identifier and instead saw 'default' (a reserved word)\"\r\n                    /*jshint -W024 */\r\n                    track.default = true;\r\n                    defaultIndex = i;\r\n                }\r\n\r\n                const textTrack = getTrackByIdx(i);\r\n                if (textTrack) {\r\n                    //each time a track is created, its mode should be showing by default\r\n                    //sometime, it's not on Chrome\r\n                    textTrack.mode = Constants.TEXT_SHOWING;\r\n                    if (captionContainer && (textTrackQueue[i].isTTML || textTrackQueue[i].isEmbedded)) {\r\n                        textTrack.renderingType = 'html';\r\n                    } else {\r\n                        textTrack.renderingType = 'default';\r\n                    }\r\n                }\r\n                this.addCaptions(i, 0, textTrackQueue[i].captionData);\r\n                eventBus.trigger(Events.TEXT_TRACK_ADDED);\r\n            }\r\n\r\n            //set current track index in textTrackQueue array\r\n            setCurrentTrackIdx.call(this, defaultIndex);\r\n\r\n            if (defaultIndex >= 0) {\r\n\r\n                let onMetadataLoaded = function () {\r\n                    const track = getTrackByIdx(defaultIndex);\r\n                    if (track) {\r\n                        checkVideoSize.call(this, track, true);\r\n                    }\r\n                    eventBus.off(Events.PLAYBACK_METADATA_LOADED, onMetadataLoaded, this);\r\n                };\r\n\r\n                eventBus.on(Events.PLAYBACK_METADATA_LOADED, onMetadataLoaded, this);\r\n\r\n                for (let idx = 0; idx < textTrackQueue.length; idx++) {\r\n                    const videoTextTrack = getTrackByIdx(idx);\r\n                    if (videoTextTrack) {\r\n                        videoTextTrack.mode = (idx === defaultIndex) ? Constants.TEXT_SHOWING : Constants.TEXT_HIDDEN;\r\n                    }\r\n                }\r\n            }\r\n\r\n            eventBus.trigger(Events.TEXT_TRACKS_QUEUE_INITIALIZED, {\r\n                index: currentTrackIdx,\r\n                tracks: textTrackQueue\r\n            }); //send default idx.\r\n        }\r\n    }\r\n\r\n    function getVideoVisibleVideoSize(viewWidth, viewHeight, videoWidth, videoHeight, aspectRatio, use80Percent) {\r\n        const viewAspectRatio = viewWidth / viewHeight;\r\n        const videoAspectRatio = videoWidth / videoHeight;\r\n\r\n        let videoPictureWidth = 0;\r\n        let videoPictureHeight = 0;\r\n\r\n        if (viewAspectRatio > videoAspectRatio) {\r\n            videoPictureHeight = viewHeight;\r\n            videoPictureWidth = (videoPictureHeight / videoHeight) * videoWidth;\r\n        } else {\r\n            videoPictureWidth = viewWidth;\r\n            videoPictureHeight = (videoPictureWidth / videoWidth) * videoHeight;\r\n        }\r\n\r\n        let videoPictureXAspect = 0;\r\n        let videoPictureYAspect = 0;\r\n        let videoPictureWidthAspect = 0;\r\n        let videoPictureHeightAspect = 0;\r\n        const videoPictureAspect = videoPictureWidth / videoPictureHeight;\r\n\r\n        if (videoPictureAspect > aspectRatio) {\r\n            videoPictureHeightAspect = videoPictureHeight;\r\n            videoPictureWidthAspect = videoPictureHeight * aspectRatio;\r\n        } else {\r\n            videoPictureWidthAspect = videoPictureWidth;\r\n            videoPictureHeightAspect = videoPictureWidth / aspectRatio;\r\n        }\r\n        videoPictureXAspect = (viewWidth - videoPictureWidthAspect) / 2;\r\n        videoPictureYAspect = (viewHeight - videoPictureHeightAspect) / 2;\r\n\r\n        if (use80Percent) {\r\n            return {\r\n                x: videoPictureXAspect + (videoPictureWidthAspect * 0.1),\r\n                y: videoPictureYAspect + (videoPictureHeightAspect * 0.1),\r\n                w: videoPictureWidthAspect * 0.8,\r\n                h: videoPictureHeightAspect * 0.8\r\n            }; /* Maximal picture size in videos aspect ratio */\r\n        } else {\r\n            return {\r\n                x: videoPictureXAspect,\r\n                y: videoPictureYAspect,\r\n                w: videoPictureWidthAspect,\r\n                h: videoPictureHeightAspect\r\n            }; /* Maximal picture size in videos aspect ratio */\r\n        }\r\n    }\r\n\r\n    function checkVideoSize(track, forceDrawing) {\r\n        const clientWidth = videoModel.getClientWidth();\r\n        const clientHeight = videoModel.getClientHeight();\r\n        const videoWidth = videoModel.getVideoWidth();\r\n        const videoHeight = videoModel.getVideoHeight();\r\n        const videoOffsetTop = videoModel.getVideoRelativeOffsetTop();\r\n        const videoOffsetLeft = videoModel.getVideoRelativeOffsetLeft();\r\n\r\n        if (videoWidth !== 0 && videoHeight !== 0) {\r\n\r\n            let aspectRatio =  videoWidth / videoHeight;\r\n            let use80Percent = false;\r\n            if (track.isFromCEA608) {\r\n                // If this is CEA608 then use predefined aspect ratio\r\n                aspectRatio = 3.5 / 3.0;\r\n                use80Percent = true;\r\n            }\r\n\r\n            const realVideoSize = getVideoVisibleVideoSize.call(this, clientWidth, clientHeight, videoWidth, videoHeight, aspectRatio, use80Percent);\r\n\r\n            const newVideoWidth = realVideoSize.w;\r\n            const newVideoHeight = realVideoSize.h;\r\n            const newVideoLeft = realVideoSize.x;\r\n            const newVideoTop = realVideoSize.y;\r\n\r\n            if (newVideoWidth != actualVideoWidth || newVideoHeight != actualVideoHeight || newVideoLeft != actualVideoLeft || newVideoTop != actualVideoTop || forceDrawing) {\r\n                actualVideoLeft = newVideoLeft + videoOffsetLeft;\r\n                actualVideoTop = newVideoTop + videoOffsetTop;\r\n                actualVideoWidth = newVideoWidth;\r\n                actualVideoHeight = newVideoHeight;\r\n\r\n                if (captionContainer) {\r\n                    const containerStyle = captionContainer.style;\r\n                    if (containerStyle) {\r\n                        containerStyle.left = actualVideoLeft + 'px';\r\n                        containerStyle.top = actualVideoTop + 'px';\r\n                        containerStyle.width = actualVideoWidth + 'px';\r\n                        containerStyle.height = actualVideoHeight + 'px';\r\n                        containerStyle.zIndex = (fullscreenAttribute && document[fullscreenAttribute]) || displayCCOnTop ? topZIndex : null;\r\n                        eventBus.trigger(Events.CAPTION_CONTAINER_RESIZE);\r\n                    }\r\n                }\r\n\r\n                // Video view has changed size, so resize any active cues\r\n                const activeCues = track.activeCues;\r\n                if (activeCues) {\r\n                    const len = activeCues.length;\r\n                    for (let i = 0; i < len; ++i) {\r\n                        const cue = activeCues[i];\r\n                        cue.scaleCue(cue);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function scaleCue(activeCue) {\r\n        const videoWidth = actualVideoWidth;\r\n        const videoHeight = actualVideoHeight;\r\n        let key,\r\n            replaceValue,\r\n            valueFontSize,\r\n            valueLineHeight,\r\n            elements;\r\n\r\n        if (activeCue.cellResolution) {\r\n            const cellUnit = [videoWidth / activeCue.cellResolution[0], videoHeight / activeCue.cellResolution[1]];\r\n            if (activeCue.linePadding) {\r\n                for (key in activeCue.linePadding) {\r\n                    if (activeCue.linePadding.hasOwnProperty(key)) {\r\n                        const valueLinePadding = activeCue.linePadding[key];\r\n                        replaceValue = (valueLinePadding * cellUnit[0]).toString();\r\n                        // Compute the CellResolution unit in order to process properties using sizing (fontSize, linePadding, etc).\r\n                        const elementsSpan = document.getElementsByClassName('spanPadding');\r\n                        for (let i = 0; i < elementsSpan.length; i++) {\r\n                            elementsSpan[i].style.cssText = elementsSpan[i].style.cssText.replace(/(padding-left\\s*:\\s*)[\\d.,]+(?=\\s*px)/gi, '$1' + replaceValue);\r\n                            elementsSpan[i].style.cssText = elementsSpan[i].style.cssText.replace(/(padding-right\\s*:\\s*)[\\d.,]+(?=\\s*px)/gi, '$1' + replaceValue);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (activeCue.fontSize) {\r\n                for (key in activeCue.fontSize) {\r\n                    if (activeCue.fontSize.hasOwnProperty(key)) {\r\n                        if (activeCue.fontSize[key][0] === '%') {\r\n                            valueFontSize = activeCue.fontSize[key][1] / 100;\r\n                        } else if (activeCue.fontSize[key][0] === 'c') {\r\n                            valueFontSize = activeCue.fontSize[key][1];\r\n                        }\r\n\r\n                        replaceValue = (valueFontSize * cellUnit[1]).toString();\r\n\r\n                        if (key !== 'defaultFontSize') {\r\n                            elements = document.getElementsByClassName(key);\r\n                        } else {\r\n                            elements = document.getElementsByClassName('paragraph');\r\n                        }\r\n\r\n                        for (let j = 0; j < elements.length; j++) {\r\n                            elements[j].style.cssText = elements[j].style.cssText.replace(/(font-size\\s*:\\s*)[\\d.,]+(?=\\s*px)/gi, '$1' + replaceValue);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (activeCue.lineHeight) {\r\n                    for (key in activeCue.lineHeight) {\r\n                        if (activeCue.lineHeight.hasOwnProperty(key)) {\r\n                            if (activeCue.lineHeight[key][0] === '%') {\r\n                                valueLineHeight = activeCue.lineHeight[key][1] / 100;\r\n                            } else if (activeCue.fontSize[key][0] === 'c') {\r\n                                valueLineHeight = activeCue.lineHeight[key][1];\r\n                            }\r\n\r\n                            replaceValue = (valueLineHeight * cellUnit[1]).toString();\r\n                            elements = document.getElementsByClassName(key);\r\n                            for (let k = 0; k < elements.length; k++) {\r\n                                elements[k].style.cssText = elements[k].style.cssText.replace(/(line-height\\s*:\\s*)[\\d.,]+(?=\\s*px)/gi, '$1' + replaceValue);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (activeCue.isd) {\r\n            let htmlCaptionDiv = document.getElementById(activeCue.cueID);\r\n            if (htmlCaptionDiv) {\r\n                captionContainer.removeChild(htmlCaptionDiv);\r\n            }\r\n            renderCaption(activeCue);\r\n        }\r\n    }\r\n\r\n    function renderCaption(cue) {\r\n        if (captionContainer) {\r\n            const finalCue = document.createElement('div');\r\n            captionContainer.appendChild(finalCue);\r\n            previousISDState = renderHTML(cue.isd, finalCue, function (uri) {\r\n                const imsc1ImgUrnTester = /^(urn:)(mpeg:[a-z0-9][a-z0-9-]{0,31}:)(subs:)([0-9]+)$/;\r\n                const smpteImgUrnTester = /^#(.*)$/;\r\n                if (imsc1ImgUrnTester.test(uri)) {\r\n                    const match = imsc1ImgUrnTester.exec(uri);\r\n                    const imageId = parseInt(match[4], 10) - 1;\r\n                    const imageData = btoa(cue.images[imageId]);\r\n                    const dataUrl = 'data:image/png;base64,' + imageData;\r\n                    return dataUrl;\r\n                } else if (smpteImgUrnTester.test(uri)) {\r\n                    const match = smpteImgUrnTester.exec(uri);\r\n                    const imageId = match[1];\r\n                    const dataUrl = 'data:image/png;base64,' + cue.embeddedImages[imageId];\r\n                    return dataUrl;\r\n                } else {\r\n                    return null;\r\n                }\r\n            }, captionContainer.clientHeight, captionContainer.clientWidth, false/*displayForcedOnlyMode*/, function (err) {\r\n                logger.info('renderCaption :', err);\r\n                //TODO add ErrorHandler management\r\n            }, previousISDState, true /*enableRollUp*/);\r\n            finalCue.id = cue.cueID;\r\n            eventBus.trigger(Events.CAPTION_RENDERED, { captionDiv: finalCue, currentTrackIdx });\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Add captions to track, store for later adding, or add captions added before\r\n     */\r\n    function addCaptions(trackIdx, timeOffset, captionData) {\r\n        const track = getTrackByIdx(trackIdx);\r\n        const self = this;\r\n\r\n        if (!track) {\r\n            return;\r\n        }\r\n\r\n        if (!Array.isArray(captionData) || captionData.length === 0) {\r\n            return;\r\n        }\r\n\r\n        for (let item = 0; item < captionData.length; item++) {\r\n            let cue;\r\n            const currentItem = captionData[item];\r\n\r\n            track.cellResolution = currentItem.cellResolution;\r\n            track.isFromCEA608 = currentItem.isFromCEA608;\r\n\r\n            if (currentItem.type === 'html' && captionContainer) {\r\n                cue = new Cue(currentItem.start - timeOffset, currentItem.end - timeOffset, '');\r\n                cue.cueHTMLElement = currentItem.cueHTMLElement;\r\n                cue.isd = currentItem.isd;\r\n                cue.images = currentItem.images;\r\n                cue.embeddedImages = currentItem.embeddedImages;\r\n                cue.cueID = currentItem.cueID;\r\n                cue.scaleCue = scaleCue.bind(self);\r\n                //useful parameters for cea608 subtitles, not for TTML one.\r\n                cue.cellResolution = currentItem.cellResolution;\r\n                cue.lineHeight = currentItem.lineHeight;\r\n                cue.linePadding = currentItem.linePadding;\r\n                cue.fontSize = currentItem.fontSize;\r\n\r\n                captionContainer.style.left = actualVideoLeft + 'px';\r\n                captionContainer.style.top = actualVideoTop + 'px';\r\n                captionContainer.style.width = actualVideoWidth + 'px';\r\n                captionContainer.style.height = actualVideoHeight + 'px';\r\n\r\n                cue.onenter = function () {\r\n                    if (track.mode === Constants.TEXT_SHOWING) {\r\n                        if (this.isd) {\r\n                            renderCaption(this);\r\n                            logger.debug('Cue enter id:' + this.cueID);\r\n                        } else {\r\n                            captionContainer.appendChild(this.cueHTMLElement);\r\n                            scaleCue.call(self, this);\r\n                            eventBus.trigger(Events.CAPTION_RENDERED, { captionDiv: this.cueHTMLElement, currentTrackIdx });\r\n                        }\r\n                    }\r\n                };\r\n\r\n                cue.onexit = function () {\r\n                    if (captionContainer) {\r\n                        const divs = captionContainer.childNodes;\r\n                        for (let i = 0; i < divs.length; ++i) {\r\n                            if (divs[i].id === this.cueID) {\r\n                                logger.debug('Cue exit id:' + divs[i].id);\r\n                                captionContainer.removeChild(divs[i]);\r\n                                --i;\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            } else {\r\n                if (currentItem.data) {\r\n                    cue = new Cue(currentItem.start - timeOffset, currentItem.end - timeOffset, currentItem.data);\r\n                    if (currentItem.styles) {\r\n                        if (currentItem.styles.align !== undefined && 'align' in cue) {\r\n                            cue.align = currentItem.styles.align;\r\n                        }\r\n                        if (currentItem.styles.line !== undefined && 'line' in cue) {\r\n                            cue.line = currentItem.styles.line;\r\n                        }\r\n                        if (currentItem.styles.position !== undefined && 'position' in cue) {\r\n                            cue.position = currentItem.styles.position;\r\n                        }\r\n                        if (currentItem.styles.size !== undefined && 'size' in cue) {\r\n                            cue.size = currentItem.styles.size;\r\n                        }\r\n                    }\r\n                    cue.onenter = function () {\r\n                        if (track.mode === Constants.TEXT_SHOWING) {\r\n                            eventBus.trigger(Events.CAPTION_RENDERED, { currentTrackIdx });\r\n                        }\r\n                    };\r\n                }\r\n            }\r\n            try {\r\n                if (cue) {\r\n                    track.addCue(cue);\r\n                } else {\r\n                    logger.error('impossible to display subtitles.');\r\n                }\r\n            } catch (e) {\r\n                // Edge crash, delete everything and start adding again\r\n                // @see https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/11979877/\r\n                deleteTrackCues(track);\r\n                track.addCue(cue);\r\n                throw e;\r\n            }\r\n        }\r\n    }\r\n\r\n    function getTrackByIdx(idx) {\r\n        return idx >= 0 && textTrackQueue[idx] ?\r\n            videoModel.getTextTrack(textTrackQueue[idx].kind, textTrackQueue[idx].id, textTrackQueue[idx].lang, textTrackQueue[idx].isTTML, textTrackQueue[idx].isEmbedded) : null;\r\n    }\r\n\r\n    function getCurrentTrackIdx() {\r\n        return currentTrackIdx;\r\n    }\r\n\r\n    function getTrackIdxForId(trackId) {\r\n        let idx = -1;\r\n        for (let i = 0; i < textTrackQueue.length; i++) {\r\n            if (textTrackQueue[i].id === trackId) {\r\n                idx = i;\r\n                break;\r\n            }\r\n        }\r\n\r\n        return idx;\r\n    }\r\n\r\n    function setCurrentTrackIdx(idx) {\r\n        if (idx === currentTrackIdx) {\r\n            return;\r\n        }\r\n        currentTrackIdx = idx;\r\n        const track = getTrackByIdx(currentTrackIdx);\r\n        setCueStyleOnTrack.call(this, track);\r\n\r\n        if (videoSizeCheckInterval) {\r\n            clearInterval(videoSizeCheckInterval);\r\n            videoSizeCheckInterval = null;\r\n        }\r\n\r\n        if (track && track.renderingType === 'html') {\r\n            checkVideoSize.call(this, track, true);\r\n            if (window.ResizeObserver) {\r\n                resizeObserver = new window.ResizeObserver(() => {\r\n                    checkVideoSize.call(this, track, true);\r\n                });\r\n                resizeObserver.observe(videoModel.getElement());\r\n            } else {\r\n                videoSizeCheckInterval = setInterval(checkVideoSize.bind(this, track), 500);\r\n            }\r\n        }\r\n    }\r\n\r\n    function setCueStyleOnTrack(track) {\r\n        clearCaptionContainer.call(this);\r\n        if (track) {\r\n            if (track.renderingType === 'html') {\r\n                setNativeCueStyle.call(this);\r\n            } else {\r\n                removeNativeCueStyle.call(this);\r\n            }\r\n        } else {\r\n            removeNativeCueStyle.call(this);\r\n        }\r\n    }\r\n\r\n    function cueInRange(cue, start, end) {\r\n        return (isNaN(start) || cue.startTime >= start) && (isNaN(end) || cue.endTime <= end);\r\n    }\r\n\r\n    function deleteTrackCues(track, start, end) {\r\n        if (track.cues) {\r\n            const cues = track.cues;\r\n            const lastIdx = cues.length - 1;\r\n\r\n            for (let r = lastIdx; r >= 0 ; r--) {\r\n                if (cueInRange(cues[r], start, end)) {\r\n                    track.removeCue(cues[r]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function deleteCuesFromTrackIdx(trackIdx, start, end) {\r\n        const track = getTrackByIdx(trackIdx);\r\n        if (track) {\r\n            deleteTrackCues(track, start, end);\r\n        }\r\n    }\r\n\r\n    function deleteAllTextTracks() {\r\n        const ln = trackElementArr ? trackElementArr.length : 0;\r\n        for (let i = 0; i < ln; i++) {\r\n            const track = getTrackByIdx(i);\r\n            if (track) {\r\n                deleteTrackCues.call(this, track);\r\n                track.mode = 'disabled';\r\n            }\r\n        }\r\n        trackElementArr = [];\r\n        textTrackQueue = [];\r\n        if (videoSizeCheckInterval) {\r\n            clearInterval(videoSizeCheckInterval);\r\n            videoSizeCheckInterval = null;\r\n        }\r\n        if (resizeObserver && videoModel) {\r\n            resizeObserver.unobserve(videoModel.getElement());\r\n            resizeObserver = null;\r\n        }\r\n        currentTrackIdx = -1;\r\n        clearCaptionContainer.call(this);\r\n    }\r\n\r\n    function deleteTextTrack(idx) {\r\n        videoModel.removeChild(trackElementArr[idx]);\r\n        trackElementArr.splice(idx, 1);\r\n    }\r\n\r\n    /* Set native cue style to transparent background to avoid it being displayed. */\r\n    function setNativeCueStyle() {\r\n        let styleElement = document.getElementById('native-cue-style');\r\n        if (styleElement) {\r\n            return; //Already set\r\n        }\r\n\r\n        styleElement = document.createElement('style');\r\n        styleElement.id = 'native-cue-style';\r\n        document.head.appendChild(styleElement);\r\n        const stylesheet = styleElement.sheet;\r\n        const video = videoModel.getElement();\r\n        try {\r\n            if (video) {\r\n                if (video.id) {\r\n                    stylesheet.insertRule('#' + video.id + '::cue {background: transparent}', 0);\r\n                } else if (video.classList.length !== 0) {\r\n                    stylesheet.insertRule('.' + video.className + '::cue {background: transparent}', 0);\r\n                } else {\r\n                    stylesheet.insertRule('video::cue {background: transparent}', 0);\r\n                }\r\n            }\r\n        } catch (e) {\r\n            logger.info('' + e.message);\r\n        }\r\n    }\r\n\r\n    /* Remove the extra cue style with transparent background for native cues. */\r\n    function removeNativeCueStyle() {\r\n        const styleElement = document.getElementById('native-cue-style');\r\n        if (styleElement) {\r\n            document.head.removeChild(styleElement);\r\n        }\r\n    }\r\n\r\n    function clearCaptionContainer() {\r\n        if (captionContainer) {\r\n            while (captionContainer.firstChild) {\r\n                captionContainer.removeChild(captionContainer.firstChild);\r\n            }\r\n        }\r\n    }\r\n\r\n    function setConfig(config) {\r\n        if (!config) {\r\n            return;\r\n        }\r\n        if (config.videoModel) {\r\n            videoModel = config.videoModel;\r\n        }\r\n    }\r\n\r\n    function setModeForTrackIdx(idx, mode) {\r\n        const track = getTrackByIdx(idx);\r\n        if (track && track.mode !== mode) {\r\n            track.mode = mode;\r\n        }\r\n    }\r\n\r\n    function getCurrentTrackInfo() {\r\n        return textTrackQueue[currentTrackIdx];\r\n    }\r\n\r\n    instance = {\r\n        initialize: initialize,\r\n        setDisplayCConTop: setDisplayCConTop,\r\n        addTextTrack: addTextTrack,\r\n        addCaptions: addCaptions,\r\n        getCurrentTrackIdx: getCurrentTrackIdx,\r\n        setCurrentTrackIdx: setCurrentTrackIdx,\r\n        getTrackIdxForId: getTrackIdxForId,\r\n        getCurrentTrackInfo: getCurrentTrackInfo,\r\n        setModeForTrackIdx: setModeForTrackIdx,\r\n        deleteCuesFromTrackIdx: deleteCuesFromTrackIdx,\r\n        deleteAllTextTracks: deleteAllTextTracks,\r\n        deleteTextTrack: deleteTextTrack,\r\n        setConfig: setConfig\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\nTextTracks.__dashjs_factory_name = 'TextTracks';\r\nexport default FactoryMaker.getSingletonFactory(TextTracks);\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\nimport Constants from '../constants/Constants';\r\nimport Thumbnail from '../vo/Thumbnail';\r\nimport ThumbnailTracks from './ThumbnailTracks';\r\nimport BitrateInfo from '../vo/BitrateInfo';\r\nimport { replaceTokenForTemplate, unescapeDollarsInTemplate } from '../../dash/utils/SegmentsUtils';\r\n\r\nfunction ThumbnailController(config) {\r\n\r\n    const context = this.context;\r\n    const streamInfo = config.streamInfo;\r\n\r\n    let instance,\r\n        thumbnailTracks;\r\n\r\n    function setup() {\r\n        reset();\r\n        thumbnailTracks = ThumbnailTracks(context).create({\r\n            streamInfo: streamInfo,\r\n            adapter: config.adapter,\r\n            baseURLController: config.baseURLController,\r\n            timelineConverter: config.timelineConverter,\r\n            debug: config.debug,\r\n            eventBus: config.eventBus,\r\n            events: config.events,\r\n            dashConstants: config.dashConstants\r\n        });\r\n    }\r\n\r\n    function getStreamId() {\r\n        return streamInfo.id;\r\n    }\r\n\r\n    function provideThumbnail(time, callback) {\r\n\r\n        if (typeof callback !== 'function') {\r\n            return;\r\n        }\r\n        const track = thumbnailTracks.getCurrentTrack();\r\n        let offset,\r\n            request;\r\n        if (!track || track.segmentDuration <= 0 || time === undefined || time === null) {\r\n            callback(null);\r\n            return;\r\n        }\r\n\r\n        // Calculate index of the sprite given a time\r\n        if (isNaN(track.segmentDuration)) {\r\n            request = thumbnailTracks.getThumbnailRequestForTime(time);\r\n            if (request) {\r\n                track.segmentDuration = request.duration;\r\n            }\r\n        }\r\n\r\n        offset = time % track.segmentDuration;\r\n\r\n        const thumbIndex = Math.floor((offset * track.tilesHor * track.tilesVert) / track.segmentDuration);\r\n        // Create and return the thumbnail\r\n        const thumbnail = new Thumbnail();\r\n\r\n        thumbnail.width = Math.floor(track.widthPerTile);\r\n        thumbnail.height = Math.floor(track.heightPerTile);\r\n        thumbnail.x = Math.floor(thumbIndex % track.tilesHor) * track.widthPerTile;\r\n        thumbnail.y = Math.floor(thumbIndex / track.tilesHor) * track.heightPerTile;\r\n\r\n        if ('readThumbnail' in track) {\r\n            return track.readThumbnail(time, (url) => {\r\n                thumbnail.url = url;\r\n                callback(thumbnail);\r\n            });\r\n        } else {\r\n            if (!request) {\r\n                const seq = Math.floor(time / track.segmentDuration);\r\n                thumbnail.url = buildUrlFromTemplate(track, seq);\r\n            } else {\r\n                thumbnail.url = request.url;\r\n                track.segmentDuration = NaN;\r\n            }\r\n            callback(thumbnail);\r\n        }\r\n    }\r\n\r\n    function buildUrlFromTemplate(track, seq) {\r\n        const seqIdx = seq + track.startNumber;\r\n        let url = replaceTokenForTemplate(track.templateUrl, 'Number', seqIdx);\r\n        url = replaceTokenForTemplate(url, 'Time', (seqIdx - 1) * track.segmentDuration);\r\n        url = replaceTokenForTemplate(url, 'Bandwidth', track.bandwidth);\r\n        return unescapeDollarsInTemplate(url);\r\n    }\r\n\r\n    function setTrackByIndex(index) {\r\n        thumbnailTracks.setTrackByIndex(index);\r\n    }\r\n\r\n    function getCurrentTrackIndex() {\r\n        return thumbnailTracks.getCurrentTrackIndex();\r\n    }\r\n\r\n    function getBitrateList() {\r\n        const tracks = thumbnailTracks.getTracks();\r\n        let i = 0;\r\n\r\n        return tracks.map((t) => {\r\n            const bitrateInfo = new BitrateInfo();\r\n            bitrateInfo.mediaType = Constants.IMAGE;\r\n            bitrateInfo.qualityIndex = i++;\r\n            bitrateInfo.bitrate = t.bitrate;\r\n            bitrateInfo.width = t.width;\r\n            bitrateInfo.height = t.height;\r\n            return bitrateInfo;\r\n        });\r\n    }\r\n\r\n    function reset() {\r\n        if (thumbnailTracks) {\r\n            thumbnailTracks.reset();\r\n        }\r\n    }\r\n\r\n    instance = {\r\n        getStreamId: getStreamId,\r\n        provide: provideThumbnail,\r\n        setTrackByIndex: setTrackByIndex,\r\n        getCurrentTrackIndex: getCurrentTrackIndex,\r\n        getBitrateList: getBitrateList,\r\n        reset: reset\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\nThumbnailController.__dashjs_factory_name = 'ThumbnailController';\r\nexport default FactoryMaker.getClassFactory(ThumbnailController);\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport Constants from '../constants/Constants';\r\nimport DashConstants from '../../dash/constants/DashConstants';\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\nimport ThumbnailTrackInfo from '../vo/ThumbnailTrackInfo';\r\nimport URLUtils from '../../streaming/utils/URLUtils';\r\nimport { replaceIDForTemplate, getTimeBasedSegment } from '../../dash/utils/SegmentsUtils';\r\nimport Events from '../../core/events/Events';\r\nimport BoxParser from '../../streaming/utils/BoxParser';\r\nimport XHRLoader from '../../streaming/net/XHRLoader';\r\nimport DashHandler from '../../dash/DashHandler';\r\n\r\nexport const THUMBNAILS_SCHEME_ID_URIS = ['http://dashif.org/thumbnail_tile',\r\n                                   'http://dashif.org/guidelines/thumbnail_tile'];\r\n\r\nfunction ThumbnailTracks(config) {\r\n    const context = this.context;\r\n    const adapter = config.adapter;\r\n    const baseURLController = config.baseURLController;\r\n    const streamInfo = config.streamInfo;\r\n    const timelineConverter = config.timelineConverter;\r\n    const debug = config.debug;\r\n    const eventBus = config.eventBus;\r\n    const events = config.events;\r\n    const dashConstants = config.dashConstants;\r\n\r\n    const urlUtils = URLUtils(context).getInstance();\r\n\r\n    let instance,\r\n        tracks,\r\n        indexHandler,\r\n        currentTrackIndex,\r\n        mediaInfo,\r\n        loader,\r\n        boxParser;\r\n\r\n    function initialize() {\r\n        reset();\r\n        loader = XHRLoader(context).create({});\r\n        boxParser = BoxParser(context).getInstance();\r\n\r\n        indexHandler = DashHandler(context).create({\r\n            streamInfo: streamInfo,\r\n            timelineConverter: timelineConverter,\r\n            baseURLController: baseURLController,\r\n            debug: debug,\r\n            eventBus: eventBus,\r\n            events: events,\r\n            dashConstants: dashConstants,\r\n            urlUtils: urlUtils\r\n        });\r\n\r\n        // initialize controllers\r\n        indexHandler.initialize(adapter ? adapter.getIsDynamic() : false);\r\n\r\n        // parse representation and create tracks\r\n        addTracks();\r\n    }\r\n\r\n    function normalizeSegments(fragments, representation) {\r\n        const segments = [];\r\n        let count = 0;\r\n\r\n        let i,\r\n            len,\r\n            s,\r\n            seg;\r\n\r\n        for (i = 0, len = fragments.length; i < len; i++) {\r\n            s = fragments[i];\r\n\r\n            seg = getTimeBasedSegment(\r\n                timelineConverter,\r\n                adapter.getIsDynamic(),\r\n                representation,\r\n                s.startTime,\r\n                s.duration,\r\n                s.timescale,\r\n                s.media,\r\n                s.mediaRange,\r\n                count);\r\n\r\n            if (seg) {\r\n                segments.push(seg);\r\n                seg = null;\r\n                count++;\r\n            }\r\n        }\r\n        return segments;\r\n    }\r\n\r\n    function addTracks() {\r\n        if (!streamInfo || !adapter) {\r\n            return;\r\n        }\r\n\r\n        // Extract thumbnail tracks\r\n        mediaInfo = adapter.getMediaInfoForType(streamInfo, Constants.IMAGE);\r\n        if (!mediaInfo) {\r\n            return;\r\n        }\r\n\r\n        const voReps = adapter.getVoRepresentations(mediaInfo);\r\n\r\n        if (voReps && voReps.length > 0) {\r\n            voReps.forEach((rep) => {\r\n                if ((rep.segmentInfoType === DashConstants.SEGMENT_TEMPLATE && rep.segmentDuration > 0 && rep.media) ||\r\n                     rep.segmentInfoType === DashConstants.SEGMENT_TIMELINE) {\r\n                    createTrack(rep);\r\n                }\r\n                if (rep.segmentInfoType === DashConstants.SEGMENT_BASE) {\r\n                    createTrack(rep, true);\r\n                }\r\n            });\r\n        }\r\n\r\n        if (tracks.length > 0) {\r\n            // Sort bitrates and select the lowest bitrate rendition\r\n            tracks.sort((a, b) => a.bitrate - b.bitrate);\r\n            currentTrackIndex = tracks.length - 1;\r\n        }\r\n    }\r\n\r\n    function createTrack(representation, useSegmentBase) {\r\n        const track = new ThumbnailTrackInfo();\r\n        track.id = representation.id;\r\n        track.bitrate = representation.bandwidth;\r\n        track.width = representation.width;\r\n        track.height = representation.height;\r\n        track.tilesHor = 1;\r\n        track.tilesVert = 1;\r\n\r\n        if (representation.essentialProperties) {\r\n            representation.essentialProperties.forEach((p) => {\r\n                if (THUMBNAILS_SCHEME_ID_URIS.indexOf(p.schemeIdUri) >= 0 && p.value) {\r\n                    const vars = p.value.split('x');\r\n                    if (vars.length === 2 && !isNaN(vars[0]) && !isNaN(vars[1])) {\r\n                        track.tilesHor = parseInt(vars[0], 10);\r\n                        track.tilesVert = parseInt(vars[1], 10);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n        if (useSegmentBase) {\r\n            eventBus.trigger(Events.SEGMENTBASE_SEGMENTSLIST_REQUEST_NEEDED, {\r\n                streamId: streamInfo.id,\r\n                mediaType: Constants.IMAGE,\r\n                mimeType: mediaInfo.mimeType,\r\n                representation: representation,\r\n                callback: function (streamId, mediaType, segments, representation) {\r\n                    let cache = [];\r\n                    segments = normalizeSegments(segments, representation);\r\n                    track.segmentDuration = segments[0].duration; //assume all segments have the same duration\r\n                    track.readThumbnail = function (time, callback) {\r\n\r\n                        let cached = null;\r\n                        cache.some(el => {\r\n                            if (el.start <= time && el.end > time) {\r\n                                cached = el.url;\r\n                                return true;\r\n                            }\r\n                        });\r\n                        if (cached) {\r\n                            callback(cached);\r\n                        } else {\r\n                            segments.some((ss) => {\r\n                                if (ss.mediaStartTime <= time && ss.mediaStartTime + ss.duration > time) {\r\n                                    const baseURL = baseURLController.resolve(representation.path);\r\n                                    loader.load({\r\n                                        method: 'get',\r\n                                        url: baseURL.url,\r\n                                        request: {\r\n                                            range: ss.mediaRange,\r\n                                            responseType: 'arraybuffer'\r\n                                        },\r\n                                        onload: function (e) {\r\n                                            let info = boxParser.getSamplesInfo(e.target.response);\r\n                                            let blob = new Blob( [ e.target.response.slice(info.sampleList[0].offset, info.sampleList[0].offset + info.sampleList[0].size) ], { type: 'image/jpeg' } );\r\n                                            let imageUrl = window.URL.createObjectURL( blob );\r\n                                            cache.push({\r\n                                                start: ss.mediaStartTime,\r\n                                                end: ss.mediaStartTime + ss.duration,\r\n                                                url: imageUrl\r\n                                            });\r\n                                            if (callback)\r\n                                                callback(imageUrl);\r\n                                        }\r\n                                    });\r\n                                    return true;\r\n                                }\r\n                            });\r\n                        }\r\n                    };\r\n                }\r\n            });\r\n        } else {\r\n            track.startNumber = representation.startNumber;\r\n            track.segmentDuration = representation.segmentDuration;\r\n            track.timescale = representation.timescale;\r\n            track.templateUrl = buildTemplateUrl(representation);\r\n        }\r\n\r\n        if (track.tilesHor > 0 && track.tilesVert > 0) {\r\n            // Precalculate width and heigth per tile for perf reasons\r\n            track.widthPerTile = track.width / track.tilesHor;\r\n            track.heightPerTile = track.height / track.tilesVert;\r\n            tracks.push(track);\r\n        }\r\n    }\r\n\r\n    function buildTemplateUrl(representation) {\r\n        const templateUrl = urlUtils.isRelative(representation.media) ?\r\n            urlUtils.resolve(representation.media, baseURLController.resolve(representation.path).url) : representation.media;\r\n\r\n        if (!templateUrl) {\r\n            return '';\r\n        }\r\n\r\n        return replaceIDForTemplate(templateUrl, representation.id);\r\n    }\r\n\r\n    function getTracks() {\r\n        return tracks;\r\n    }\r\n\r\n    function getCurrentTrackIndex() {\r\n        return currentTrackIndex;\r\n    }\r\n\r\n    function getCurrentTrack() {\r\n        if (currentTrackIndex < 0) {\r\n            return null;\r\n        }\r\n        return tracks[currentTrackIndex];\r\n    }\r\n\r\n    function setTrackByIndex(index) {\r\n        if (!tracks || tracks.length === 0) {\r\n            return;\r\n        }\r\n        // select highest bitrate in case selected index is higher than bitrate list length\r\n        if (index >= tracks.length) {\r\n            index = tracks.length - 1;\r\n        }\r\n        currentTrackIndex = index;\r\n    }\r\n\r\n    function getThumbnailRequestForTime(time) {\r\n        let currentVoRep;\r\n        const voReps = adapter.getVoRepresentations(mediaInfo);\r\n        for (let i = 0; i < voReps.length; i++) {\r\n            if (tracks[currentTrackIndex].id === voReps[i].id) {\r\n                currentVoRep = voReps[i];\r\n                break;\r\n            }\r\n        }\r\n\r\n        return indexHandler.getSegmentRequestForTime(mediaInfo, currentVoRep, time);\r\n    }\r\n\r\n    function reset() {\r\n        tracks = [];\r\n        currentTrackIndex = -1;\r\n        mediaInfo = null;\r\n    }\r\n\r\n    instance = {\r\n        initialize: initialize,\r\n        getTracks: getTracks,\r\n        reset: reset,\r\n        setTrackByIndex: setTrackByIndex,\r\n        getCurrentTrack: getCurrentTrack,\r\n        getCurrentTrackIndex: getCurrentTrackIndex,\r\n        getThumbnailRequestForTime: getThumbnailRequestForTime\r\n    };\r\n\r\n    initialize();\r\n\r\n    return instance;\r\n}\r\n\r\nThumbnailTracks.__dashjs_factory_name = 'ThumbnailTracks';\r\nexport default FactoryMaker.getClassFactory(ThumbnailTracks);\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport Errors from '../../core/errors/Errors';\r\nimport EventBus from '../../core/EventBus';\r\nimport Events from '../../core/events/Events';\r\nimport BlacklistController from '../controllers/BlacklistController';\r\nimport DVBSelector from './baseUrlResolution/DVBSelector';\r\nimport BasicSelector from './baseUrlResolution/BasicSelector';\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\nimport DashJSError from '../vo/DashJSError';\r\nimport { checkParameterType } from '../utils/SupervisorTools';\r\n\r\nfunction BaseURLSelector() {\r\n\r\n    const context = this.context;\r\n    const eventBus = EventBus(context).getInstance();\r\n\r\n    let instance,\r\n        serviceLocationBlacklistController,\r\n        basicSelector,\r\n        dvbSelector,\r\n        selector;\r\n\r\n    function setup() {\r\n        serviceLocationBlacklistController = BlacklistController(context).create({\r\n            updateEventName:        Events.SERVICE_LOCATION_BLACKLIST_CHANGED,\r\n            addBlacklistEventName:    Events.SERVICE_LOCATION_BLACKLIST_ADD\r\n        });\r\n\r\n        basicSelector = BasicSelector(context).create({\r\n            blacklistController: serviceLocationBlacklistController\r\n        });\r\n\r\n        dvbSelector = DVBSelector(context).create({\r\n            blacklistController: serviceLocationBlacklistController\r\n        });\r\n\r\n        selector = basicSelector;\r\n    }\r\n\r\n    function setConfig(config) {\r\n        if (config.selector) {\r\n            selector = config.selector;\r\n        }\r\n    }\r\n\r\n    function chooseSelector(isDVB) {\r\n        checkParameterType(isDVB, 'boolean');\r\n        selector = isDVB ? dvbSelector : basicSelector;\r\n    }\r\n\r\n    function select(data) {\r\n        if (!data) {\r\n            return;\r\n        }\r\n        const baseUrls = data.baseUrls;\r\n        const selectedIdx = data.selectedIdx;\r\n\r\n        // Once a random selection has been carried out amongst a group of BaseURLs with the same\r\n        // @priority attribute value, then that choice should be re-used if the selection needs to be made again\r\n        // unless the blacklist has been modified or the available BaseURLs have changed.\r\n        if (!isNaN(selectedIdx)) {\r\n            return baseUrls[selectedIdx];\r\n        }\r\n\r\n        let selectedBaseUrl = selector.select(baseUrls);\r\n\r\n        if (!selectedBaseUrl) {\r\n            eventBus.trigger(Events.URL_RESOLUTION_FAILED, {\r\n                error: new DashJSError(\r\n                    Errors.URL_RESOLUTION_FAILED_GENERIC_ERROR_CODE,\r\n                    Errors.URL_RESOLUTION_FAILED_GENERIC_ERROR_MESSAGE\r\n                )\r\n            });\r\n            if (selector === basicSelector) {\r\n                reset();\r\n            }\r\n            return;\r\n        }\r\n\r\n        data.selectedIdx = baseUrls.indexOf(selectedBaseUrl);\r\n\r\n        return selectedBaseUrl;\r\n    }\r\n\r\n    function reset() {\r\n        serviceLocationBlacklistController.reset();\r\n    }\r\n\r\n    instance = {\r\n        chooseSelector: chooseSelector,\r\n        select: select,\r\n        reset: reset,\r\n        setConfig: setConfig\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\nBaseURLSelector.__dashjs_factory_name = 'BaseURLSelector';\r\nexport default FactoryMaker.getClassFactory(BaseURLSelector);\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport Debug from '../../core/Debug';\r\nimport IsoFile from './IsoFile';\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\nimport ISOBoxer from 'codem-isoboxer';\r\n\r\nimport IsoBoxSearchInfo from '../vo/IsoBoxSearchInfo';\r\n\r\nfunction BoxParser(/*config*/) {\r\n\r\n    let logger,\r\n        instance;\r\n    let context = this.context;\r\n\r\n    function setup() {\r\n        logger = Debug(context).getInstance().getLogger(instance);\r\n    }\r\n\r\n    /**\r\n     * @param {ArrayBuffer} data\r\n     * @returns {IsoFile|null}\r\n     * @memberof BoxParser#\r\n     */\r\n    function parse(data) {\r\n        if (!data) return null;\r\n\r\n        if (data.fileStart === undefined) {\r\n            data.fileStart = 0;\r\n        }\r\n\r\n        let parsedFile = ISOBoxer.parseBuffer(data);\r\n        let dashIsoFile = IsoFile(context).create();\r\n\r\n        dashIsoFile.setData(parsedFile);\r\n\r\n        return dashIsoFile;\r\n    }\r\n\r\n    /**\r\n     * From the list of type boxes to look for, returns the latest one that is fully completed (header + payload). This\r\n     * method only looks into the list of top boxes and doesn't analyze nested boxes.\r\n     * @param {string[]} types\r\n     * @param {ArrayBuffer|uint8Array} buffer\r\n     * @param {number} offset\r\n     * @returns {IsoBoxSearchInfo}\r\n     * @memberof BoxParser#\r\n     */\r\n    function findLastTopIsoBoxCompleted(types, buffer, offset) {\r\n        if (offset === undefined) {\r\n            offset = 0;\r\n        }\r\n\r\n        // 8 = size (uint32) + type (4 characters)\r\n        if (!buffer || offset + 8 >= buffer.byteLength) {\r\n            return new IsoBoxSearchInfo(0, false);\r\n        }\r\n\r\n        const data = (buffer instanceof ArrayBuffer) ? new Uint8Array(buffer) : buffer;\r\n        let boxInfo;\r\n        let lastCompletedOffset = 0;\r\n        while (offset < data.byteLength) {\r\n            const boxSize = parseUint32(data, offset);\r\n            const boxType = parseIsoBoxType(data, offset + 4);\r\n\r\n            if (boxSize === 0) {\r\n                break;\r\n            }\r\n\r\n            if (offset + boxSize <= data.byteLength) {\r\n                if (types.indexOf(boxType) >= 0) {\r\n                    boxInfo = new IsoBoxSearchInfo(offset, true, boxSize);\r\n                } else {\r\n                    lastCompletedOffset = offset + boxSize;\r\n                }\r\n            }\r\n\r\n            offset += boxSize;\r\n        }\r\n\r\n        if (!boxInfo) {\r\n            return new IsoBoxSearchInfo(lastCompletedOffset, false);\r\n        }\r\n\r\n        return boxInfo;\r\n    }\r\n\r\n    function getSamplesInfo(ab) {\r\n        if (!ab || ab.byteLength === 0) {\r\n            return {sampleList: [], lastSequenceNumber: NaN, totalDuration: NaN, numSequences: NaN};\r\n        }\r\n        let isoFile = parse(ab);\r\n        // zero or more moofs\r\n        let moofBoxes = isoFile.getBoxes('moof');\r\n        // exactly one mfhd per moof\r\n        let mfhdBoxes = isoFile.getBoxes('mfhd');\r\n\r\n        let sampleDuration,\r\n            sampleCompositionTimeOffset,\r\n            sampleCount,\r\n            sampleSize,\r\n            sampleDts,\r\n            sampleList,\r\n            sample,\r\n            i, j, k, l, m, n,\r\n            dataOffset,\r\n            lastSequenceNumber,\r\n            numSequences,\r\n            totalDuration;\r\n\r\n        numSequences = isoFile.getBoxes('moof').length;\r\n        lastSequenceNumber = mfhdBoxes[mfhdBoxes.length - 1].sequence_number;\r\n        sampleCount = 0;\r\n\r\n        sampleList = [];\r\n        let subsIndex = -1;\r\n        let nextSubsSample = -1;\r\n        for (l = 0; l < moofBoxes.length; l++) {\r\n            let moofBox = moofBoxes[l];\r\n            // zero or more trafs per moof\r\n            let trafBoxes = moofBox.getChildBoxes('traf');\r\n            for (j = 0; j < trafBoxes.length; j++) {\r\n                let trafBox = trafBoxes[j];\r\n                // exactly one tfhd per traf\r\n                let tfhdBox = trafBox.getChildBox('tfhd');\r\n                // zero or one tfdt per traf\r\n                let tfdtBox = trafBox.getChildBox('tfdt');\r\n                sampleDts = tfdtBox.baseMediaDecodeTime;\r\n                // zero or more truns per traf\r\n                let trunBoxes = trafBox.getChildBoxes('trun');\r\n                // zero or more subs per traf\r\n                let subsBoxes = trafBox.getChildBoxes('subs');\r\n                for (k = 0; k < trunBoxes.length; k++) {\r\n                    let trunBox = trunBoxes[k];\r\n                    sampleCount = trunBox.sample_count;\r\n                    dataOffset = (tfhdBox.base_data_offset || 0) + (trunBox.data_offset || 0);\r\n\r\n                    for (i = 0; i < sampleCount; i++) {\r\n                        sample = trunBox.samples[i];\r\n                        sampleDuration = (sample.sample_duration !== undefined) ? sample.sample_duration : tfhdBox.default_sample_duration;\r\n                        sampleSize = (sample.sample_size !== undefined) ? sample.sample_size : tfhdBox.default_sample_size;\r\n                        sampleCompositionTimeOffset = (sample.sample_composition_time_offset !== undefined) ? sample.sample_composition_time_offset : 0;\r\n                        let sampleData = {\r\n                            'dts': sampleDts,\r\n                            'cts': (sampleDts + sampleCompositionTimeOffset),\r\n                            'duration': sampleDuration,\r\n                            'offset': moofBox.offset + dataOffset,\r\n                            'size': sampleSize,\r\n                            'subSizes': [sampleSize]\r\n                        };\r\n                        if (subsBoxes) {\r\n                            for (m = 0; m < subsBoxes.length; m++) {\r\n                                let subsBox = subsBoxes[m];\r\n                                if (subsIndex < (subsBox.entry_count - 1) && i > nextSubsSample) {\r\n                                    subsIndex++;\r\n                                    nextSubsSample += subsBox.entries[subsIndex].sample_delta;\r\n                                }\r\n                                if (i == nextSubsSample) {\r\n                                    sampleData.subSizes = [];\r\n                                    let entry = subsBox.entries[subsIndex];\r\n                                    for (n = 0; n < entry.subsample_count; n++) {\r\n                                        sampleData.subSizes.push(entry.subsamples[n].subsample_size);\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        sampleList.push(sampleData);\r\n                        dataOffset += sampleSize;\r\n                        sampleDts += sampleDuration;\r\n                    }\r\n                }\r\n                totalDuration = sampleDts - tfdtBox.baseMediaDecodeTime;\r\n            }\r\n        }\r\n        return {sampleList: sampleList, lastSequenceNumber: lastSequenceNumber, totalDuration: totalDuration, numSequences: numSequences};\r\n    }\r\n\r\n    function getMediaTimescaleFromMoov(ab) {\r\n        let isoFile = parse(ab);\r\n        let mdhdBox = isoFile ? isoFile.getBox('mdhd') : undefined;\r\n\r\n        return mdhdBox ? mdhdBox.timescale : NaN;\r\n    }\r\n\r\n    function parseUint32(data, offset) {\r\n        return data[offset + 3] >>> 0 |\r\n            (data[offset + 2] << 8) >>> 0 |\r\n            (data[offset + 1] << 16) >>> 0 |\r\n            (data[offset] << 24) >>> 0;\r\n    }\r\n\r\n    function parseIsoBoxType(data, offset) {\r\n        return String.fromCharCode(data[offset++]) +\r\n            String.fromCharCode(data[offset++]) +\r\n            String.fromCharCode(data[offset++]) +\r\n            String.fromCharCode(data[offset]);\r\n    }\r\n\r\n    function findInitRange(data) {\r\n        let initRange = null;\r\n        let start,\r\n            end;\r\n\r\n        const isoFile = parse(data);\r\n\r\n        if (!isoFile) {\r\n            return initRange;\r\n        }\r\n\r\n        const ftyp = isoFile.getBox('ftyp');\r\n        const moov = isoFile.getBox('moov');\r\n\r\n        logger.debug('Searching for initialization.');\r\n\r\n        if (moov && moov.isComplete) {\r\n            start = ftyp ? ftyp.offset : moov.offset;\r\n            end = moov.offset + moov.size - 1;\r\n            initRange = start + '-' + end;\r\n\r\n            logger.debug('Found the initialization.  Range: ' + initRange);\r\n        }\r\n\r\n        return initRange;\r\n    }\r\n\r\n    /**\r\n     * Real-time parsing (whenever data is loaded in the buffer payload) of the payload to capture the moof of a chunk\r\n     * @param {array} types\r\n     * @param {ArrayBuffer} buffer\r\n     * @param {number} offset\r\n     * @return {IsoBoxSearchInfo}\r\n     */\r\n    function parsePayload(types, buffer, offset) {\r\n        if (offset === undefined) {\r\n            offset = 0;\r\n        }\r\n\r\n        if (!buffer || offset + 8 >= buffer.byteLength) {\r\n            return new IsoBoxSearchInfo(0, false);\r\n        }\r\n\r\n        const data = (buffer instanceof ArrayBuffer) ? new Uint8Array(buffer) : buffer;\r\n        let boxInfo;\r\n        let lastCompletedOffset = 0;\r\n        while (offset < data.byteLength) {\r\n            const boxSize = parseUint32(data, offset);\r\n            const boxType = parseIsoBoxType(data, offset + 4);\r\n\r\n            if (boxSize === 0) {\r\n                break;\r\n            }\r\n\r\n            if (offset + boxSize <= data.byteLength) {\r\n                if (types.indexOf(boxType) >= 0) {\r\n                    boxInfo = new IsoBoxSearchInfo(offset, true, boxSize, boxType);\r\n                } else {\r\n                    lastCompletedOffset = offset + boxSize;\r\n                }\r\n            }\r\n\r\n            offset += boxSize;\r\n        }\r\n\r\n        if (!boxInfo) {\r\n            return new IsoBoxSearchInfo(lastCompletedOffset, false);\r\n        }\r\n\r\n        return boxInfo;\r\n    }\r\n\r\n    instance = {\r\n        parse: parse,\r\n        findLastTopIsoBoxCompleted: findLastTopIsoBoxCompleted,\r\n        getMediaTimescaleFromMoov: getMediaTimescaleFromMoov,\r\n        getSamplesInfo: getSamplesInfo,\r\n        findInitRange: findInitRange,\r\n        parsePayload: parsePayload\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\nBoxParser.__dashjs_factory_name = 'BoxParser';\r\nexport default FactoryMaker.getSingletonFactory(BoxParser);\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\n\r\nfunction Capabilities() {\r\n\r\n    let instance,\r\n        encryptedMediaSupported;\r\n\r\n    function setup() {\r\n        encryptedMediaSupported = false;\r\n    }\r\n\r\n    function supportsMediaSource() {\r\n        let hasWebKit = ('WebKitMediaSource' in window);\r\n        let hasMediaSource = ('MediaSource' in window);\r\n\r\n        return (hasWebKit || hasMediaSource);\r\n    }\r\n\r\n    /**\r\n     * Returns whether Encrypted Media Extensions are supported on this\r\n     * user agent\r\n     *\r\n     * @return {boolean} true if EME is supported, false otherwise\r\n     */\r\n    function supportsEncryptedMedia() {\r\n        return encryptedMediaSupported;\r\n    }\r\n\r\n    function setEncryptedMediaSupported(value) {\r\n        encryptedMediaSupported = value;\r\n    }\r\n\r\n    function supportsCodec(codec) {\r\n        if ('MediaSource' in window && MediaSource.isTypeSupported(codec)) {\r\n            return true;\r\n        }\r\n\r\n        if ('WebKitMediaSource' in window && WebKitMediaSource.isTypeSupported(codec)) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    instance = {\r\n        supportsMediaSource: supportsMediaSource,\r\n        supportsEncryptedMedia: supportsEncryptedMedia,\r\n        supportsCodec: supportsCodec,\r\n        setEncryptedMediaSupported: setEncryptedMediaSupported\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\nCapabilities.__dashjs_factory_name = 'Capabilities';\r\nexport default FactoryMaker.getSingletonFactory(Capabilities);","/**\r\n* The copyright in this software is being made available under the BSD License,\r\n* included below. This software may be subject to other third party and contributor\r\n* rights, including patent rights, and no such rights are granted under this license.\r\n*\r\n* Copyright (c) 2013, Dash Industry Forum.\r\n* All rights reserved.\r\n*\r\n* Redistribution and use in source and binary forms, with or without modification,\r\n* are permitted provided that the following conditions are met:\r\n*  * Redistributions of source code must retain the above copyright notice, this\r\n*  list of conditions and the following disclaimer.\r\n*  * Redistributions in binary form must reproduce the above copyright notice,\r\n*  this list of conditions and the following disclaimer in the documentation and/or\r\n*  other materials provided with the distribution.\r\n*  * Neither the name of Dash Industry Forum nor the names of its\r\n*  contributors may be used to endorse or promote products derived from this software\r\n*  without specific prior written permission.\r\n*\r\n*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n*  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n*  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n*  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n*  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n*  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n*  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n*  POSSIBILITY OF SUCH DAMAGE.\r\n*/\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\nimport { checkInteger } from '../utils/SupervisorTools';\r\n\r\nfunction CustomTimeRanges(/*config*/) {\r\n    let customTimeRangeArray = [];\r\n    let length = 0;\r\n\r\n    function add(start, end) {\r\n        let i = 0;\r\n\r\n        for (i = 0; (i < this.customTimeRangeArray.length) && (start > this.customTimeRangeArray[i].start); i++);\r\n\r\n        this.customTimeRangeArray.splice(i, 0, {start: start,end: end});\r\n\r\n        for (i = 0; i < this.customTimeRangeArray.length - 1; i++) {\r\n            if (this.mergeRanges(i,i + 1)) {\r\n                i--;\r\n            }\r\n        }\r\n        this.length = this.customTimeRangeArray.length;\r\n    }\r\n\r\n    function clear() {\r\n        this.customTimeRangeArray = [];\r\n        this.length = 0;\r\n    }\r\n\r\n    function remove(start, end) {\r\n        for (let i = 0; i < this.customTimeRangeArray.length; i++) {\r\n            if (start <= this.customTimeRangeArray[i].start && end >= this.customTimeRangeArray[i].end) {\r\n                //      |--------------Range i-------|\r\n                //|---------------Range to remove ---------------|\r\n                //    or\r\n                //|--------------Range i-------|\r\n                //|--------------Range to remove ---------------|\r\n                //    or\r\n                //                 |--------------Range i-------|\r\n                //|--------------Range to remove ---------------|\r\n                this.customTimeRangeArray.splice(i,1);\r\n                i--;\r\n\r\n            } else if (start > this.customTimeRangeArray[i].start && end < this.customTimeRangeArray[i].end) {\r\n                //|-----------------Range i----------------|\r\n                //        |-------Range to remove -----|\r\n                this.customTimeRangeArray.splice(i + 1, 0, {start: end,end: this.customTimeRangeArray[i].end});\r\n                this.customTimeRangeArray[i].end = start;\r\n                break;\r\n            } else if ( start > this.customTimeRangeArray[i].start && start < this.customTimeRangeArray[i].end) {\r\n                //|-----------Range i----------|\r\n                //                    |---------Range to remove --------|\r\n                //    or\r\n                //|-----------------Range i----------------|\r\n                //            |-------Range to remove -----|\r\n                this.customTimeRangeArray[i].end = start;\r\n            } else if ( end > this.customTimeRangeArray[i].start && end < this.customTimeRangeArray[i].end) {\r\n                //                     |-----------Range i----------|\r\n                //|---------Range to remove --------|\r\n                //            or\r\n                //|-----------------Range i----------------|\r\n                //|-------Range to remove -----|\r\n                this.customTimeRangeArray[i].start = end;\r\n            }\r\n        }\r\n\r\n        this.length = this.customTimeRangeArray.length;\r\n    }\r\n\r\n    function mergeRanges(rangeIndex1, rangeIndex2) {\r\n        let range1 = this.customTimeRangeArray[rangeIndex1];\r\n        let range2 = this.customTimeRangeArray[rangeIndex2];\r\n\r\n        if (range1.start <=  range2.start && range2.start <= range1.end && range1.end <= range2.end) {\r\n            //|-----------Range1----------|\r\n            //                    |-----------Range2----------|\r\n            range1.end = range2.end;\r\n            this.customTimeRangeArray.splice(rangeIndex2,1);\r\n            return true;\r\n\r\n        } else if (range2.start <= range1.start && range1.start <= range2.end && range2.end <= range1.end) {\r\n            //                |-----------Range1----------|\r\n            //|-----------Range2----------|\r\n            range1.start = range2.start;\r\n            this.customTimeRangeArray.splice(rangeIndex2,1);\r\n            return true;\r\n        } else if (range2.start <= range1.start && range1.start <= range2.end && range1.end <= range2.end) {\r\n            //      |--------Range1-------|\r\n            //|---------------Range2--------------|\r\n            this.customTimeRangeArray.splice(rangeIndex1,1);\r\n            return true;\r\n        } else if (range1.start <= range2.start && range2.start <= range1.end && range2.end <= range1.end) {\r\n            //|-----------------Range1--------------|\r\n            //        |-----------Range2----------|\r\n            this.customTimeRangeArray.splice(rangeIndex2,1);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function start(index) {\r\n        checkInteger(index);\r\n\r\n        if (index >= this.customTimeRangeArray.length || index < 0) {\r\n            return NaN;\r\n        }\r\n\r\n        return this.customTimeRangeArray[index].start;\r\n    }\r\n\r\n    function end(index) {\r\n        checkInteger(index);\r\n\r\n        if (index >= this.customTimeRangeArray.length || index < 0) {\r\n            return NaN;\r\n        }\r\n\r\n        return this.customTimeRangeArray[index].end;\r\n    }\r\n\r\n    return {\r\n        customTimeRangeArray: customTimeRangeArray,\r\n        length: length,\r\n        add: add,\r\n        clear: clear,\r\n        remove: remove,\r\n        mergeRanges: mergeRanges,\r\n        start: start,\r\n        end: end\r\n    };\r\n}\r\nCustomTimeRanges.__dashjs_factory_name = 'CustomTimeRanges';\r\nexport default FactoryMaker.getClassFactory(CustomTimeRanges);\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\nimport Debug from '../../core/Debug';\r\nimport Constants from '../constants/Constants';\r\n\r\nconst legacyKeysAndReplacements = [\r\n    { oldKey: 'dashjs_vbitrate',  newKey: 'dashjs_video_bitrate' },\r\n    { oldKey: 'dashjs_abitrate',  newKey: 'dashjs_audio_bitrate' },\r\n    { oldKey: 'dashjs_vsettings', newKey: 'dashjs_video_settings' },\r\n    { oldKey: 'dashjs_asettings', newKey: 'dashjs_audio_settings' }\r\n];\r\n\r\nconst LOCAL_STORAGE_BITRATE_KEY_TEMPLATE = 'dashjs_?_bitrate';\r\nconst LOCAL_STORAGE_SETTINGS_KEY_TEMPLATE = 'dashjs_?_settings';\r\n\r\nconst STORAGE_TYPE_LOCAL = 'localStorage';\r\nconst STORAGE_TYPE_SESSION = 'sessionStorage';\r\nconst LAST_BITRATE = 'lastBitrate';\r\nconst LAST_MEDIA_SETTINGS = 'lastMediaSettings';\r\n\r\nfunction DOMStorage(config) {\r\n\r\n    config = config || {};\r\n    const context = this.context;\r\n    const settings = config.settings;\r\n\r\n    let instance,\r\n        logger,\r\n        supported;\r\n\r\n    function setup() {\r\n        logger = Debug(context).getInstance().getLogger(instance);\r\n        translateLegacyKeys();\r\n    }\r\n\r\n    //type can be local, session\r\n    function isSupported(type) {\r\n        if (supported !== undefined) return supported;\r\n\r\n        supported = false;\r\n\r\n        const testKey = '1';\r\n        const testValue = '1';\r\n        let storage;\r\n\r\n        try {\r\n            if (typeof window !== 'undefined') {\r\n                storage = window[type];\r\n            }\r\n        } catch (error) {\r\n            logger.warn('DOMStorage access denied: ' + error.message);\r\n            return supported;\r\n        }\r\n\r\n        if (!storage || (type !== STORAGE_TYPE_LOCAL && type !== STORAGE_TYPE_SESSION)) {\r\n            return supported;\r\n        }\r\n\r\n        /* When Safari (OS X or iOS) is in private browsing mode, it appears as though localStorage is available, but trying to call setItem throws an exception.\r\n         http://stackoverflow.com/questions/14555347/html5-localstorage-error-with-safari-quota-exceeded-err-dom-exception-22-an\r\n\r\n         Check if the storage can be used\r\n         */\r\n        try {\r\n            storage.setItem(testKey, testValue);\r\n            storage.removeItem(testKey);\r\n            supported = true;\r\n        } catch (error) {\r\n            logger.warn('DOMStorage is supported, but cannot be used: ' + error.message);\r\n        }\r\n\r\n        return supported;\r\n    }\r\n\r\n    function translateLegacyKeys() {\r\n        if (isSupported(STORAGE_TYPE_LOCAL)) {\r\n            legacyKeysAndReplacements.forEach(entry => {\r\n                const value = localStorage.getItem(entry.oldKey);\r\n\r\n                if (value) {\r\n                    localStorage.removeItem(entry.oldKey);\r\n\r\n                    try {\r\n                        localStorage.setItem(entry.newKey, value);\r\n                    } catch (e) {\r\n                        logger.error(e.message);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    // Return current epoch time, ms, rounded to the nearest 10m to avoid fingerprinting user\r\n    function getTimestamp() {\r\n        const ten_minutes_ms = 60 * 1000 * 10;\r\n        return Math.round(new Date().getTime() / ten_minutes_ms) * ten_minutes_ms;\r\n    }\r\n\r\n    function canStore(storageType, key) {\r\n        return isSupported(storageType) && settings.get().streaming[key + 'CachingInfo'].enabled;\r\n    }\r\n\r\n    function checkConfig() {\r\n        if (!settings) {\r\n            throw new Error(Constants.MISSING_CONFIG_ERROR);\r\n        }\r\n    }\r\n\r\n    function getSavedMediaSettings(type) {\r\n        let mediaSettings = null;\r\n\r\n        checkConfig();\r\n        //Checks local storage to see if there is valid, non-expired media settings\r\n        if (canStore(STORAGE_TYPE_LOCAL, LAST_MEDIA_SETTINGS)) {\r\n            const key = LOCAL_STORAGE_SETTINGS_KEY_TEMPLATE.replace(/\\?/, type);\r\n            try {\r\n                const obj = JSON.parse(localStorage.getItem(key)) || {};\r\n                const isExpired = (new Date().getTime() - parseInt(obj.timestamp, 10)) >= settings.get().streaming.lastMediaSettingsCachingInfo.ttl || false;\r\n                mediaSettings = obj.settings;\r\n\r\n                if (isExpired) {\r\n                    localStorage.removeItem(key);\r\n                    mediaSettings = null;\r\n                }\r\n            } catch (e) {\r\n                return null;\r\n            }\r\n        }\r\n        return mediaSettings;\r\n    }\r\n\r\n    function getSavedBitrateSettings(type) {\r\n        let savedBitrate = NaN;\r\n\r\n        checkConfig();\r\n\r\n        //Checks local storage to see if there is valid, non-expired bit rate\r\n        //hinting from the last play session to use as a starting bit rate.\r\n        if (canStore(STORAGE_TYPE_LOCAL, LAST_BITRATE)) {\r\n            const key = LOCAL_STORAGE_BITRATE_KEY_TEMPLATE.replace(/\\?/, type);\r\n            try {\r\n                const obj = JSON.parse(localStorage.getItem(key)) || {};\r\n                const isExpired = (new Date().getTime() - parseInt(obj.timestamp, 10)) >= settings.get().streaming.lastBitrateCachingInfo.ttl || false;\r\n                const bitrate = parseFloat(obj.bitrate);\r\n\r\n                if (!isNaN(bitrate) && !isExpired) {\r\n                    savedBitrate = bitrate;\r\n                    logger.debug('Last saved bitrate for ' + type + ' was ' + bitrate);\r\n                } else if (isExpired) {\r\n                    localStorage.removeItem(key);\r\n                }\r\n            } catch (e) {\r\n                return null;\r\n            }\r\n        }\r\n        return savedBitrate;\r\n    }\r\n\r\n    function setSavedMediaSettings(type, value) {\r\n        if (canStore(STORAGE_TYPE_LOCAL, LAST_MEDIA_SETTINGS)) {\r\n            const key = LOCAL_STORAGE_SETTINGS_KEY_TEMPLATE.replace(/\\?/, type);\r\n            try {\r\n                localStorage.setItem(key, JSON.stringify({settings: value, timestamp: getTimestamp()}));\r\n            } catch (e) {\r\n                logger.error(e.message);\r\n            }\r\n        }\r\n    }\r\n\r\n    function setSavedBitrateSettings(type, bitrate) {\r\n        if (canStore(STORAGE_TYPE_LOCAL, LAST_BITRATE) && bitrate) {\r\n            const key = LOCAL_STORAGE_BITRATE_KEY_TEMPLATE.replace(/\\?/, type);\r\n            try {\r\n                localStorage.setItem(key, JSON.stringify({bitrate: bitrate.toFixed(3), timestamp: getTimestamp()}));\r\n            } catch (e) {\r\n                logger.error(e.message);\r\n            }\r\n        }\r\n    }\r\n\r\n    instance = {\r\n        getSavedBitrateSettings: getSavedBitrateSettings,\r\n        setSavedBitrateSettings: setSavedBitrateSettings,\r\n        getSavedMediaSettings: getSavedMediaSettings,\r\n        setSavedMediaSettings: setSavedMediaSettings\r\n    };\r\n\r\n    setup();\r\n    return instance;\r\n}\r\n\r\nDOMStorage.__dashjs_factory_name = 'DOMStorage';\r\nconst factory = FactoryMaker.getSingletonFactory(DOMStorage);\r\nexport default factory;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\n\r\n/**\r\n * @module DefaultURLUtils\r\n * @description Provides utility functions for operating on URLs.\r\n * Initially this is simply a method to determine the Base URL of a URL, but\r\n * should probably include other things provided all over the place such as\r\n * determining whether a URL is relative/absolute, resolving two paths etc.\r\n * @ignore\r\n */\r\nfunction DefaultURLUtils() {\r\n\r\n    let resolveFunction;\r\n\r\n    const schemeRegex = /^[a-z][a-z0-9+\\-_.]*:/i;\r\n    const httpUrlRegex = /^https?:\\/\\//i;\r\n    const httpsUrlRegex = /^https:\\/\\//i;\r\n    const originRegex = /^([a-z][a-z0-9+\\-_.]*:\\/\\/[^\\/]+)\\/?/i;\r\n\r\n    /**\r\n     * Resolves a url given an optional base url\r\n     * Uses window.URL to do the resolution.\r\n     *\r\n     * @param {string} url\r\n     * @param {string} [baseUrl]\r\n     * @return {string}\r\n     * @memberof module:DefaultURLUtils\r\n     * @instance\r\n     * @private\r\n     */\r\n    const nativeURLResolver = (url, baseUrl) => {\r\n        try {\r\n            return new window.URL(url, baseUrl).toString();\r\n        } catch (e) {\r\n            return url;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Resolves a url given an optional base url\r\n     * Does not resolve ./, ../ etc but will do enough to construct something\r\n     * which will satisfy XHR etc when window.URL is not available ie\r\n     * IE11/node etc.\r\n     *\r\n     * @param {string} url\r\n     * @param {string} [baseUrl]\r\n     * @return {string}\r\n     * @memberof module:DefaultURLUtils\r\n     * @instance\r\n     * @private\r\n     */\r\n    const dumbURLResolver = (url, baseUrl) => {\r\n        let baseUrlParseFunc = parseBaseUrl;\r\n\r\n        if (!baseUrl) {\r\n            return url;\r\n        }\r\n\r\n        if (!isRelative(url)) {\r\n            return url;\r\n        }\r\n\r\n        if (isPathAbsolute(url)) {\r\n            baseUrlParseFunc = parseOrigin;\r\n        }\r\n\r\n        if (isSchemeRelative(url)) {\r\n            baseUrlParseFunc = parseScheme;\r\n        }\r\n\r\n        const base = baseUrlParseFunc(baseUrl);\r\n        const joinChar =\r\n              base.charAt(base.length - 1) !== '/' &&\r\n              url.charAt(0) !== '/' ?\r\n              '/' : '';\r\n\r\n        return [base, url].join(joinChar);\r\n    };\r\n\r\n    function setup() {\r\n        try {\r\n            const u = new window.URL('x', 'http://y'); //jshint ignore:line\r\n            resolveFunction = nativeURLResolver;\r\n        } catch (e) {\r\n            // must be IE11/Node etc\r\n        } finally {\r\n            resolveFunction = resolveFunction || dumbURLResolver;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns a string that contains the Base URL of a URL, if determinable.\r\n     * @param {string} url - full url\r\n     * @return {string}\r\n     * @memberof module:DefaultURLUtils\r\n     * @instance\r\n     */\r\n    function parseBaseUrl(url) {\r\n        const slashIndex = url.indexOf('/');\r\n        const lastSlashIndex = url.lastIndexOf('/');\r\n\r\n        if (slashIndex !== -1) {\r\n            // if there is only '//'\r\n            if (lastSlashIndex === slashIndex + 1) {\r\n                return url;\r\n            }\r\n\r\n            if (url.indexOf('?') !== -1) {\r\n                url = url.substring(0, url.indexOf('?'));\r\n            }\r\n\r\n            return url.substring(0, lastSlashIndex + 1);\r\n        }\r\n\r\n        return '';\r\n    }\r\n\r\n    /**\r\n     * Returns a string that contains the scheme and origin of a URL,\r\n     * if determinable.\r\n     * @param {string} url - full url\r\n     * @return {string}\r\n     * @memberof module:DefaultURLUtils\r\n     * @instance\r\n     */\r\n    function parseOrigin(url) {\r\n        const matches = url.match(originRegex);\r\n\r\n        if (matches) {\r\n            return matches[1];\r\n        }\r\n\r\n        return '';\r\n    }\r\n\r\n    /**\r\n     * Returns a string that contains the fragment of a URL without scheme,\r\n     * if determinable.\r\n     * @param {string} url - full url\r\n     * @return {string}\r\n     * @memberof module:DefaultURLUtils\r\n     * @instance\r\n     */\r\n    function removeHostname(url) {\r\n        let urlParts = /^(?:\\w+\\:\\/\\/)?([^\\/]+)(.*)$/.exec(url); //[1] = host / [2] = path\r\n        return urlParts[2].substring(1);\r\n    }\r\n\r\n    /**\r\n     * Returns a string that contains the scheme of a URL, if determinable.\r\n     * @param {string} url - full url\r\n     * @return {string}\r\n     * @memberof module:DefaultURLUtils\r\n     * @instance\r\n     */\r\n    function parseScheme(url) {\r\n        const matches = url.match(schemeRegex);\r\n\r\n        if (matches) {\r\n            return matches[0];\r\n        }\r\n\r\n        return '';\r\n    }\r\n\r\n    /**\r\n     * Determines whether the url is relative.\r\n     * @return {boolean}\r\n     * @param {string} url\r\n     * @memberof module:DefaultURLUtils\r\n     * @instance\r\n     */\r\n    function isRelative(url) {\r\n        return !schemeRegex.test(url);\r\n    }\r\n\r\n    /**\r\n     * Determines whether the url is path-absolute.\r\n     * @return {bool}\r\n     * @param {string} url\r\n     * @memberof module:DefaultURLUtils\r\n     * @instance\r\n     */\r\n    function isPathAbsolute(url) {\r\n        return isRelative(url) && url.charAt(0) === '/';\r\n    }\r\n\r\n    /**\r\n     * Determines whether the url is scheme-relative.\r\n     * @return {bool}\r\n     * @param {string} url\r\n     * @memberof module:DefaultURLUtils\r\n     * @instance\r\n     */\r\n    function isSchemeRelative(url) {\r\n        return url.indexOf('//') === 0;\r\n    }\r\n\r\n    /**\r\n     * Determines whether the url is an HTTP-URL as defined in ISO/IEC\r\n     * 23009-1:2014 3.1.15. ie URL with a fixed scheme of http or https\r\n     * @return {bool}\r\n     * @param {string} url\r\n     * @memberof module:DefaultURLUtils\r\n     * @instance\r\n     */\r\n    function isHTTPURL(url) {\r\n        return httpUrlRegex.test(url);\r\n    }\r\n\r\n    /**\r\n     * Determines whether the supplied url has https scheme\r\n     * @return {bool}\r\n     * @param {string} url\r\n     * @memberof module:DefaultURLUtils\r\n     * @instance\r\n     */\r\n    function isHTTPS(url) {\r\n        return httpsUrlRegex.test(url);\r\n    }\r\n\r\n    /**\r\n     * Resolves a url given an optional base url\r\n     * @return {string}\r\n     * @param {string} url\r\n     * @param {string} [baseUrl]\r\n     * @memberof module:DefaultURLUtils\r\n     * @instance\r\n     */\r\n    function resolve(url, baseUrl) {\r\n        return resolveFunction(url, baseUrl);\r\n    }\r\n\r\n    setup();\r\n\r\n    const instance = {\r\n        parseBaseUrl:       parseBaseUrl,\r\n        parseOrigin:        parseOrigin,\r\n        parseScheme:        parseScheme,\r\n        isRelative:         isRelative,\r\n        isPathAbsolute:     isPathAbsolute,\r\n        isSchemeRelative:   isSchemeRelative,\r\n        isHTTPURL:          isHTTPURL,\r\n        isHTTPS:            isHTTPS,\r\n        removeHostname:     removeHostname,\r\n        resolve:            resolve\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nDefaultURLUtils.__dashjs_factory_name = 'DefaultURLUtils';\r\nexport default FactoryMaker.getSingletonFactory(DefaultURLUtils);\r\n","import FactoryMaker from '../../core/FactoryMaker';\r\n\r\n/**\r\n * Creates an instance of an EBMLParser class which implements a large subset\r\n * of the functionality required to parse Matroska EBML\r\n *\r\n * @param {Object} config object with data member which is the buffer to parse\r\n * @ignore\r\n */\r\nfunction EBMLParser(config) {\r\n\r\n    config = config || {};\r\n    let instance;\r\n\r\n    let data = new DataView(config.data);\r\n    let pos = 0;\r\n\r\n    function getPos() {\r\n        return pos;\r\n    }\r\n\r\n    function setPos(value) {\r\n        pos = value;\r\n    }\r\n\r\n    /**\r\n     * Consumes an EBML tag from the data stream.\r\n     *\r\n     * @param {Object} tag to parse, A tag is an object with at least a {number} tag and\r\n     * {boolean} required flag.\r\n     * @param {boolean} test whether or not the function should throw if a required\r\n     * tag is not found\r\n     * @return {boolean} whether or not the tag was found\r\n     * @throws will throw an exception if a required tag is not found and test\r\n     * param is false or undefined, or if the stream is malformed.\r\n     * @memberof EBMLParser\r\n     */\r\n    function consumeTag(tag, test) {\r\n        let found = true;\r\n        let bytesConsumed = 0;\r\n        let p1,\r\n            p2;\r\n\r\n        if (test === undefined) {\r\n            test = false;\r\n        }\r\n\r\n        if (tag.tag > 0xFFFFFF) {\r\n            if (data.getUint32(pos) !== tag.tag) {\r\n                found = false;\r\n            }\r\n            bytesConsumed = 4;\r\n        } else if (tag.tag > 0xFFFF) {\r\n            // 3 bytes\r\n            p1 = data.getUint16(pos);\r\n            p2 = data.getUint8(pos + 2);\r\n\r\n            // shift p1 over a byte and add p2\r\n            if (p1 * 256 + p2 !== tag.tag) {\r\n                found = false;\r\n            }\r\n            bytesConsumed = 3;\r\n        } else if (tag.tag > 0xFF) {\r\n            if (data.getUint16(pos) !== tag.tag) {\r\n                found = false;\r\n            }\r\n            bytesConsumed = 2;\r\n        } else {\r\n            if (data.getUint8(pos) !== tag.tag) {\r\n                found = false;\r\n            }\r\n            bytesConsumed = 1;\r\n        }\r\n\r\n        if (!found && tag.required && !test) {\r\n            throw new Error('required tag not found');\r\n        }\r\n\r\n        if (found) {\r\n            pos += bytesConsumed;\r\n        }\r\n\r\n        return found;\r\n    }\r\n\r\n    /**\r\n     * Consumes an EBML tag from the data stream.   If the tag is found then this\r\n     * function will also remove the size field which follows the tag from the\r\n     * data stream.\r\n     *\r\n     * @param {Object} tag to parse, A tag is an object with at least a {number} tag and\r\n     * {boolean} required flag.\r\n     * @param {boolean} test whether or not the function should throw if a required\r\n     * tag is not found\r\n     * @return {boolean} whether or not the tag was found\r\n     * @throws will throw an exception if a required tag is not found and test\r\n     * param is false or undefined, or if the stream is malformedata.\r\n     * @memberof EBMLParser\r\n     */\r\n    function consumeTagAndSize(tag, test) {\r\n        let found = consumeTag(tag, test);\r\n\r\n        if (found) {\r\n            getMatroskaCodedNum();\r\n        }\r\n\r\n        return found;\r\n    }\r\n\r\n    /**\r\n     * Consumes an EBML tag from the data stream.   If the tag is found then this\r\n     * function will also remove the size field which follows the tag from the\r\n     * data stream.  It will use the value of the size field to parse a binary\r\n     * field, using a parser defined in the tag itself\r\n     *\r\n     * @param {Object} tag to parse, A tag is an object with at least a {number} tag,\r\n     * {boolean} required flag, and a parse function which takes a size parameter\r\n     * @return {boolean} whether or not the tag was found\r\n     * @throws will throw an exception if a required tag is not found,\r\n     * or if the stream is malformed\r\n     * @memberof EBMLParser\r\n     */\r\n    function parseTag(tag) {\r\n        let size;\r\n\r\n        consumeTag(tag);\r\n        size = getMatroskaCodedNum();\r\n        return instance[tag.parse](size);\r\n    }\r\n\r\n    /**\r\n     * Consumes an EBML tag from the data stream.   If the tag is found then this\r\n     * function will also remove the size field which follows the tag from the\r\n     * data stream.  It will use the value of the size field to skip over the\r\n     * entire section of EBML encapsulated by the tag.\r\n     *\r\n     * @param {Object} tag to parse, A tag is an object with at least a {number} tag, and\r\n     * {boolean} required flag\r\n     * @param {boolean} test a flag to indicate if an exception should be thrown\r\n     * if a required tag is not found\r\n     * @return {boolean} whether or not the tag was found\r\n     * @throws will throw an exception if a required tag is not found and test is\r\n     * false or undefined or if the stream is malformed\r\n     * @memberof EBMLParser\r\n     */\r\n    function skipOverElement(tag, test) {\r\n        let found = consumeTag(tag, test);\r\n        let headerSize;\r\n\r\n        if (found) {\r\n            headerSize = getMatroskaCodedNum();\r\n            pos += headerSize;\r\n        }\r\n\r\n        return found;\r\n    }\r\n\r\n    /**\r\n     * Returns and consumes a number encoded according to the Matroska EBML\r\n     * specification from the bitstream.\r\n     *\r\n     * @param {boolean} retainMSB whether or not to retain the Most Significant Bit (the\r\n     * first 1). this is usually true when reading Tag IDs.\r\n     * @return {number} the decoded number\r\n     * @throws will throw an exception if the bit stream is malformed or there is\r\n     * not enough data\r\n     * @memberof EBMLParser\r\n     */\r\n    function getMatroskaCodedNum(retainMSB) {\r\n        let bytesUsed = 1;\r\n        let mask = 0x80;\r\n        let maxBytes = 8;\r\n        let extraBytes = -1;\r\n        let num = 0;\r\n        let ch = data.getUint8(pos);\r\n        let i = 0;\r\n\r\n        for (i = 0; i < maxBytes; i += 1) {\r\n            if ((ch & mask) === mask) {\r\n                num = (retainMSB === undefined) ? ch & ~mask : ch;\r\n                extraBytes = i;\r\n                break;\r\n            }\r\n            mask >>= 1;\r\n        }\r\n\r\n        for (i = 0; i < extraBytes; i += 1, bytesUsed += 1) {\r\n            num = (num << 8) | (0xff & data.getUint8(pos + bytesUsed));\r\n        }\r\n\r\n        pos += bytesUsed;\r\n\r\n        return num;\r\n    }\r\n\r\n    /**\r\n     * Returns and consumes a float from the bitstream.\r\n     *\r\n     * @param {number} size 4 or 8 byte floats are supported\r\n     * @return {number} the decoded number\r\n     * @throws will throw an exception if the bit stream is malformed or there is\r\n     * not enough data\r\n     * @memberof EBMLParser\r\n     */\r\n    function getMatroskaFloat(size) {\r\n        let outFloat;\r\n\r\n        switch (size) {\r\n        case 4:\r\n            outFloat = data.getFloat32(pos);\r\n            pos += 4;\r\n            break;\r\n        case 8:\r\n            outFloat = data.getFloat64(pos);\r\n            pos += 8;\r\n            break;\r\n        }\r\n        return outFloat;\r\n    }\r\n\r\n    /**\r\n     * Consumes and returns an unsigned int from the bitstream.\r\n     *\r\n     * @param {number} size 1 to 8 bytes\r\n     * @return {number} the decoded number\r\n     * @throws will throw an exception if the bit stream is malformed or there is\r\n     * not enough data\r\n     * @memberof EBMLParser\r\n     */\r\n    function getMatroskaUint(size) {\r\n        let val = 0;\r\n\r\n        for (let i = 0; i < size; i += 1) {\r\n            val <<= 8;\r\n            val |= data.getUint8(pos + i) & 0xff;\r\n        }\r\n\r\n        pos += size;\r\n        return val;\r\n    }\r\n\r\n    /**\r\n     * Tests whether there is more data in the bitstream for parsing\r\n     *\r\n     * @return {boolean} whether there is more data to parse\r\n     * @memberof EBMLParser\r\n     */\r\n    function moreData() {\r\n        return pos < data.byteLength;\r\n    }\r\n\r\n    instance = {\r\n        getPos: getPos,\r\n        setPos: setPos,\r\n        consumeTag: consumeTag,\r\n        consumeTagAndSize: consumeTagAndSize,\r\n        parseTag: parseTag,\r\n        skipOverElement: skipOverElement,\r\n        getMatroskaCodedNum: getMatroskaCodedNum,\r\n        getMatroskaFloat: getMatroskaFloat,\r\n        getMatroskaUint: getMatroskaUint,\r\n        moreData: moreData\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nEBMLParser.__dashjs_factory_name = 'EBMLParser';\r\nexport default FactoryMaker.getClassFactory(EBMLParser);","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport EventBus from '../../core/EventBus';\r\nimport Events from '../../core/events/Events';\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\n\r\n/**\r\n * @module ErrorHandler\r\n * @ignore\r\n */\r\nfunction ErrorHandler() {\r\n\r\n    let instance;\r\n    const context = this.context;\r\n    const eventBus = EventBus(context).getInstance();\r\n\r\n    /**\r\n     * @param {object} err DashJSError with code, message and data attributes\r\n     * @memberof module:ErrorHandler\r\n     */\r\n    function error(err) {\r\n        eventBus.trigger(Events.ERROR, { error: err });\r\n    }\r\n    instance = {\r\n        error: error\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nErrorHandler.__dashjs_factory_name = 'ErrorHandler';\r\nexport default FactoryMaker.getSingletonFactory(ErrorHandler);\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n/**\r\n * Represents data structure to keep and drive {DataChunk}\r\n */\r\n\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\n\r\nfunction InitCache() {\r\n\r\n    let data = {};\r\n\r\n    function save (chunk) {\r\n        const id = chunk.streamId;\r\n        const representationId = chunk.representationId;\r\n\r\n        data[id] = data[id] || {};\r\n        data[id][representationId] = chunk;\r\n    }\r\n\r\n    function extract (streamId, representationId) {\r\n        if (data && data[streamId] && data[streamId][representationId]) {\r\n            return data[streamId][representationId];\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n\r\n    function reset () {\r\n        data = {};\r\n    }\r\n\r\n    const instance = {\r\n        save: save,\r\n        extract: extract,\r\n        reset: reset\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nInitCache.__dashjs_factory_name = 'InitCache';\r\nexport default FactoryMaker.getSingletonFactory(InitCache);\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport IsoBox from '../vo/IsoBox';\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\n\r\nfunction IsoFile() {\r\n\r\n    let instance,\r\n        parsedIsoFile;\r\n\r\n    /**\r\n    * @param {string} type\r\n    * @returns {IsoBox|null}\r\n    * @memberof IsoFile#\r\n    */\r\n    function getBox(type) {\r\n        if (!type || !parsedIsoFile || !parsedIsoFile.boxes || (parsedIsoFile.boxes.length === 0) || typeof parsedIsoFile.fetch !== 'function') return null;\r\n\r\n        return convertToDashIsoBox(parsedIsoFile.fetch(type));\r\n    }\r\n\r\n    /**\r\n    * @param {string} type\r\n    * @returns {Array|null} array of {@link IsoBox}\r\n    * @memberof IsoFile#\r\n    */\r\n    function getBoxes(type) {\r\n        let boxes = [];\r\n\r\n        if (!type || !parsedIsoFile || typeof parsedIsoFile.fetchAll !== 'function') {\r\n            return boxes;\r\n        }\r\n\r\n        let boxData = parsedIsoFile.fetchAll(type);\r\n        let box;\r\n\r\n        for (let i = 0, ln = boxData.length; i < ln; i++) {\r\n            box = convertToDashIsoBox(boxData[i]);\r\n\r\n            if (box) {\r\n                boxes.push(box);\r\n            }\r\n        }\r\n\r\n        return boxes;\r\n    }\r\n\r\n    /**\r\n    * @param {string} value\r\n    * @memberof IsoFile#\r\n    */\r\n    function setData(value) {\r\n        parsedIsoFile = value;\r\n    }\r\n\r\n    /**\r\n    * @returns {IsoBox|null}\r\n    * @memberof IsoFile#\r\n    */\r\n    function getLastBox() {\r\n        if (!parsedIsoFile || !parsedIsoFile.boxes || !parsedIsoFile.boxes.length) return null;\r\n\r\n        let type = parsedIsoFile.boxes[parsedIsoFile.boxes.length - 1].type;\r\n        let boxes = getBoxes(type);\r\n\r\n        return boxes.length > 0 ? boxes[boxes.length - 1] : null;\r\n    }\r\n\r\n    function convertToDashIsoBox(boxData) {\r\n        if (!boxData) return null;\r\n\r\n        let box = new IsoBox(boxData);\r\n\r\n        if (boxData.hasOwnProperty('_incomplete')) {\r\n            box.isComplete = !boxData._incomplete;\r\n        }\r\n\r\n        return box;\r\n    }\r\n\r\n    instance = {\r\n        getBox: getBox,\r\n        getBoxes: getBoxes,\r\n        setData: setData,\r\n        getLastBox: getLastBox\r\n    };\r\n\r\n    return instance;\r\n}\r\nIsoFile.__dashjs_factory_name = 'IsoFile';\r\nexport default FactoryMaker.getClassFactory(IsoFile);\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\nimport Constants from '../constants/Constants';\r\n\r\n/**\r\n * @param {Object} config\r\n * @returns {{initialize: initialize, getLiveEdge: getLiveEdge, reset: reset}|*}\r\n * @constructor\r\n * @ignore\r\n */\r\nfunction LiveEdgeFinder(config) {\r\n\r\n    config = config || {};\r\n    let instance;\r\n    let timelineConverter = config.timelineConverter;\r\n\r\n    function checkConfig() {\r\n        if (!timelineConverter || !timelineConverter.hasOwnProperty('getExpectedLiveEdge')) {\r\n            throw new Error(Constants.MISSING_CONFIG_ERROR);\r\n        }\r\n    }\r\n\r\n    function getLiveEdge(representationInfo) {\r\n        checkConfig();\r\n        return representationInfo.DVRWindow ? representationInfo.DVRWindow.end : 0;\r\n    }\r\n\r\n    function reset() {\r\n        timelineConverter = null;\r\n    }\r\n\r\n    instance = {\r\n        getLiveEdge: getLiveEdge,\r\n        reset: reset\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nLiveEdgeFinder.__dashjs_factory_name = 'LiveEdgeFinder';\r\nexport default FactoryMaker.getClassFactory(LiveEdgeFinder);\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\nimport deepEqual from 'fast-deep-equal';\r\n\r\n/**\r\n * @module ObjectUtils\r\n * @ignore\r\n * @description Provides utility functions for objects\r\n */\r\nfunction ObjectUtils() {\r\n\r\n    let instance;\r\n\r\n    /**\r\n     * Returns true if objects are equal\r\n     * @return {boolean}\r\n     * @param {object} obj1\r\n     * @param {object} obj2\r\n     * @memberof module:ObjectUtils\r\n     * @instance\r\n     */\r\n    function areEqual(obj1, obj2) {\r\n        return deepEqual(obj1, obj2);\r\n    }\r\n\r\n    instance = {\r\n        areEqual: areEqual\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nObjectUtils.__dashjs_factory_name = 'ObjectUtils';\r\nexport default FactoryMaker.getSingletonFactory(ObjectUtils);\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\n\r\nfunction RequestModifier() {\r\n\r\n    let instance;\r\n\r\n    function modifyRequestURL(url) {\r\n        return url;\r\n    }\r\n\r\n    function modifyRequestHeader(request) {\r\n        return request;\r\n    }\r\n\r\n    instance = {\r\n        modifyRequestURL: modifyRequestURL,\r\n        modifyRequestHeader: modifyRequestHeader\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nRequestModifier.__dashjs_factory_name = 'RequestModifier';\r\nexport default FactoryMaker.getSingletonFactory(RequestModifier);\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport Constants from '../constants/Constants';\r\n\r\nexport function checkParameterType(parameter, type) {\r\n    if (typeof parameter !== type) {\r\n        throw Constants.BAD_ARGUMENT_ERROR;\r\n    }\r\n}\r\n\r\nexport function checkInteger(parameter) {\r\n    const isInt = parameter !== null && !isNaN(parameter) && (parameter % 1 === 0);\r\n\r\n    if (!isInt) {\r\n        throw Constants.BAD_ARGUMENT_ERROR + ' : argument is not an integer';\r\n    }\r\n}\r\n\r\nexport function checkRange(parameter, min, max) {\r\n    if (parameter < min || parameter > max) {\r\n        throw Constants.BAD_ARGUMENT_ERROR + ' : argument out of range';\r\n    }\r\n}\r\n\r\nexport function checkIsVideoOrAudioType(type) {\r\n    if (typeof type !== 'string' || (type !== Constants.AUDIO && type !== Constants.VIDEO)) {\r\n        throw Constants.BAD_ARGUMENT_ERROR;\r\n    }\r\n}","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\nimport Debug from '../../core/Debug';\r\nimport EventBus from '../../core/EventBus';\r\nimport Events from '../../core/events/Events';\r\nimport { fromXML, generateISD } from 'imsc';\r\n\r\nfunction TTMLParser() {\r\n\r\n    const context = this.context;\r\n    const eventBus = EventBus(context).getInstance();\r\n\r\n    /*\r\n     * This TTML parser follows \"EBU-TT-D SUBTITLING DISTRIBUTION FORMAT - tech3380\" spec - https://tech.ebu.ch/docs/tech/tech3380.pdf.\r\n     * */\r\n    let instance,\r\n        logger;\r\n\r\n    let cueCounter = 0; // Used to give every cue a unique ID.\r\n\r\n    function setup() {\r\n        logger = Debug(context).getInstance().getLogger(instance);\r\n    }\r\n\r\n    function getCueID() {\r\n        const id = 'cue_TTML_' + cueCounter;\r\n        cueCounter++;\r\n        return id;\r\n    }\r\n\r\n    /**\r\n     * Parse the raw data and process it to return the HTML element representing the cue.\r\n     * Return the region to be processed and controlled (hide/show) by the caption controller.\r\n     * @param {string} data - raw data received from the TextSourceBuffer\r\n     * @param {number} offsetTime - offset time to apply to cue time\r\n     * @param {integer} startTimeSegment - startTime for the current segment\r\n     * @param {integer} endTimeSegment - endTime for the current segment\r\n     * @param {Array} images - images array referenced by subs MP4 box\r\n     */\r\n    function parse(data, offsetTime, startTimeSegment, endTimeSegment, images) {\r\n        let errorMsg = '';\r\n        const captionArray = [];\r\n        let startTime,\r\n            endTime,\r\n            i;\r\n\r\n        const content = {};\r\n\r\n        const embeddedImages = {};\r\n        let currentImageId = '';\r\n        let accumulated_image_data = '';\r\n        let metadataHandler = {\r\n\r\n            onOpenTag: function (ns, name, attrs) {\r\n                // cope with existing non-compliant content\r\n                if (attrs[' imagetype'] && !attrs[' imageType']) {\r\n                    attrs[' imageType'] = attrs[' imagetype'];\r\n                }\r\n\r\n                if (name === 'image' &&\r\n                (ns === 'http://www.smpte-ra.org/schemas/2052-1/2010/smpte-tt' ||\r\n                 ns === 'http://www.smpte-ra.org/schemas/2052-1/2013/smpte-tt')) {\r\n                    if (!attrs[' imageType'] || attrs[' imageType'].value !== 'PNG') {\r\n                        logger.warn('smpte-tt imageType != PNG. Discarded');\r\n                        return;\r\n                    }\r\n                    currentImageId = attrs['http://www.w3.org/XML/1998/namespace id'].value;\r\n                }\r\n            },\r\n\r\n            onCloseTag: function () {\r\n                if (currentImageId) {\r\n                    embeddedImages[currentImageId] = accumulated_image_data.trim();\r\n                }\r\n                accumulated_image_data = '';\r\n                currentImageId = '';\r\n            },\r\n\r\n            onText: function (contents) {\r\n                if (currentImageId) {\r\n                    accumulated_image_data = accumulated_image_data + contents;\r\n                }\r\n            }\r\n        };\r\n\r\n        if (!data) {\r\n            errorMsg = 'no ttml data to parse';\r\n            throw new Error(errorMsg);\r\n        }\r\n\r\n        content.data = data;\r\n\r\n        eventBus.trigger(Events.TTML_TO_PARSE, content);\r\n\r\n        const imsc1doc = fromXML(content.data, function (msg) {\r\n            errorMsg = msg;\r\n        }, metadataHandler);\r\n\r\n        eventBus.trigger(Events.TTML_PARSED, { ttmlString: content.data, ttmlDoc: imsc1doc });\r\n\r\n        const mediaTimeEvents = imsc1doc.getMediaTimeEvents();\r\n\r\n        for (i = 0; i < mediaTimeEvents.length; i++) {\r\n            let isd = generateISD(imsc1doc, mediaTimeEvents[i], function (error) {\r\n                errorMsg = error;\r\n            });\r\n\r\n            if (isd.contents.some(topLevelContents => topLevelContents.contents.length)) {\r\n                //be sure that mediaTimeEvents values are in the mp4 segment time ranges.\r\n                startTime = (mediaTimeEvents[i] + offsetTime) < startTimeSegment ? startTimeSegment : (mediaTimeEvents[i] + offsetTime);\r\n                endTime = (mediaTimeEvents[i + 1] + offsetTime) > endTimeSegment ? endTimeSegment : (mediaTimeEvents[i + 1] + offsetTime);\r\n\r\n                if (startTime < endTime) {\r\n                    captionArray.push({\r\n                        start: startTime,\r\n                        end: endTime,\r\n                        type: 'html',\r\n                        cueID: getCueID(),\r\n                        isd: isd,\r\n                        images: images,\r\n                        embeddedImages: embeddedImages\r\n                    });\r\n                }\r\n            }\r\n        }\r\n\r\n        if (errorMsg !== '') {\r\n            logger.error(errorMsg);\r\n            throw new Error(errorMsg);\r\n        }\r\n\r\n        return captionArray;\r\n    }\r\n\r\n    instance = {\r\n        parse: parse\r\n    };\r\n\r\n    setup();\r\n    return instance;\r\n}\r\nTTMLParser.__dashjs_factory_name = 'TTMLParser';\r\nexport default FactoryMaker.getSingletonFactory(TTMLParser);\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\nimport DefaultURLUtils from './DefaultURLUtils';\r\n\r\n/**\r\n * @module URLUtils\r\n * @ignore\r\n * @description Provides utility functions for operating on URLs.\r\n * Initially this is simply a method to determine the Base URL of a URL, but\r\n * should probably include other things provided all over the place such as\r\n * determining whether a URL is relative/absolute, resolving two paths etc.\r\n */\r\nfunction URLUtils() {\r\n\r\n    let instance;\r\n    let defaultURLUtils;\r\n    let regexUtils = [];\r\n    const context = this.context;\r\n\r\n    function getUtils(url) {\r\n        let i;\r\n        for (i = 0; i < regexUtils.length; i++) {\r\n            let regex = regexUtils[i].regex;\r\n            if (regex.test(url)) {\r\n                return regexUtils[i].utils;\r\n            }\r\n        }\r\n        return defaultURLUtils;\r\n    }\r\n\r\n    function setup() {\r\n        defaultURLUtils = DefaultURLUtils(context).getInstance();\r\n    }\r\n\r\n    /**\r\n     * Register a module to handle specific url.\r\n     * @param {regex} regex - url regex\r\n     * @param {object} utils - object that handles the regex\r\n     * @memberof module:URLUtils\r\n     * @instance\r\n     */\r\n    function registerUrlRegex(regex, utils) {\r\n        regexUtils.push({regex: regex, utils: utils});\r\n    }\r\n\r\n    function internalCall(functionName, url, baseUrl) {\r\n        let utils = getUtils(baseUrl || url);\r\n        return utils && typeof (utils[functionName]) === 'function' ? utils[functionName](url, baseUrl) : defaultURLUtils[functionName](url, baseUrl);\r\n    }\r\n\r\n    /**\r\n     * Returns a string that contains the Base URL of a URL, if determinable.\r\n     * @param {string} url - full url\r\n     * @return {string}\r\n     * @memberof module:URLUtils\r\n     * @instance\r\n     */\r\n    function parseBaseUrl(url) {\r\n        return internalCall('parseBaseUrl', url);\r\n    }\r\n\r\n    /**\r\n     * Returns a string that contains the scheme and origin of a URL,\r\n     * if determinable.\r\n     * @param {string} url - full url\r\n     * @return {string}\r\n     * @memberof module:URLUtils\r\n     * @instance\r\n     */\r\n    function parseOrigin(url) {\r\n        return internalCall('parseOrigin', url);\r\n    }\r\n\r\n    /**\r\n     * Returns a string that contains the fragment of a URL without scheme,\r\n     * if determinable.\r\n     * @param {string} url - full url\r\n     * @return {string}\r\n     * @memberof module:URLUtils\r\n     * @instance\r\n     */\r\n    function removeHostname(url) {\r\n        return internalCall('removeHostname', url);\r\n    }\r\n\r\n    /**\r\n     * Returns a string that contains the scheme of a URL, if determinable.\r\n     * @param {string} url - full url\r\n     * @return {string}\r\n     * @memberof module:URLUtils\r\n     * @instance\r\n     */\r\n    function parseScheme(url) {\r\n        return internalCall('parseScheme', url);\r\n    }\r\n\r\n    /**\r\n     * Determines whether the url is relative.\r\n     * @return {boolean}\r\n     * @param {string} url\r\n     * @memberof module:URLUtils\r\n     * @instance\r\n     */\r\n    function isRelative(url) {\r\n        return internalCall('isRelative', url);\r\n    }\r\n\r\n    /**\r\n     * Determines whether the url is path-absolute.\r\n     * @return {bool}\r\n     * @param {string} url\r\n     * @memberof module:URLUtils\r\n     * @instance\r\n     */\r\n    function isPathAbsolute(url) {\r\n        return internalCall('isPathAbsolute', url);\r\n    }\r\n\r\n    /**\r\n     * Determines whether the url is scheme-relative.\r\n     * @return {bool}\r\n     * @param {string} url\r\n     * @memberof module:URLUtils\r\n     * @instance\r\n     */\r\n    function isSchemeRelative(url) {\r\n        return internalCall('isSchemeRelative', url);\r\n    }\r\n\r\n    /**\r\n     * Determines whether the url is an HTTP-URL as defined in ISO/IEC\r\n     * 23009-1:2014 3.1.15. ie URL with a fixed scheme of http or https\r\n     * @return {bool}\r\n     * @param {string} url\r\n     * @memberof module:URLUtils\r\n     * @instance\r\n     */\r\n    function isHTTPURL(url) {\r\n        return internalCall('isHTTPURL', url);\r\n    }\r\n\r\n    /**\r\n     * Determines whether the supplied url has https scheme\r\n     * @return {bool}\r\n     * @param {string} url\r\n     * @memberof module:URLUtils\r\n     * @instance\r\n     */\r\n    function isHTTPS(url) {\r\n        return internalCall('isHTTPS', url);\r\n    }\r\n\r\n    /**\r\n     * Resolves a url given an optional base url\r\n     * @return {string}\r\n     * @param {string} url\r\n     * @param {string} [baseUrl]\r\n     * @memberof module:URLUtils\r\n     * @instance\r\n     */\r\n    function resolve(url, baseUrl) {\r\n        return internalCall('resolve', url, baseUrl);\r\n    }\r\n\r\n    setup();\r\n    instance = {\r\n        registerUrlRegex:   registerUrlRegex,\r\n        parseBaseUrl:       parseBaseUrl,\r\n        parseOrigin:        parseOrigin,\r\n        parseScheme:        parseScheme,\r\n        isRelative:         isRelative,\r\n        isPathAbsolute:     isPathAbsolute,\r\n        isSchemeRelative:   isSchemeRelative,\r\n        isHTTPURL:          isHTTPURL,\r\n        isHTTPS:            isHTTPS,\r\n        removeHostname:     removeHostname,\r\n        resolve:            resolve\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nURLUtils.__dashjs_factory_name = 'URLUtils';\r\nconst factory = FactoryMaker.getSingletonFactory(URLUtils);\r\nexport default factory;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\nimport Debug from '../../core/Debug';\r\n\r\nconst WEBVTT = 'WEBVTT';\r\n\r\nfunction VTTParser() {\r\n    const context = this.context;\r\n\r\n    let instance,\r\n        logger,\r\n        regExNewLine,\r\n        regExToken,\r\n        regExWhiteSpace,\r\n        regExWhiteSpaceWordBoundary;\r\n\r\n    function setup() {\r\n        logger = Debug(context).getInstance().getLogger(instance);\r\n        regExNewLine = /(?:\\r\\n|\\r|\\n)/gm;\r\n        regExToken = /-->/;\r\n        regExWhiteSpace = /(^[\\s]+|[\\s]+$)/g;\r\n        regExWhiteSpaceWordBoundary = /\\s\\b/g;\r\n    }\r\n\r\n    function parse(data) {\r\n        const captionArray = [];\r\n        let len,\r\n            lastStartTime;\r\n\r\n        if (!data) {\r\n            return captionArray;\r\n        }\r\n\r\n        data = data.split( regExNewLine );\r\n        len = data.length;\r\n        lastStartTime = -1;\r\n\r\n        for (let i = 0 ; i < len; i++) {\r\n            let item = data[i];\r\n\r\n            if (item.length > 0 && item !== WEBVTT) {\r\n                if (item.match(regExToken)) {\r\n                    const attributes = parseItemAttributes(item);\r\n                    const cuePoints = attributes.cuePoints;\r\n                    const styles = attributes.styles;\r\n                    const text = getSublines(data, i + 1);\r\n                    const startTime = convertCuePointTimes(cuePoints[0].replace(regExWhiteSpace, ''));\r\n                    const endTime = convertCuePointTimes(cuePoints[1].replace(regExWhiteSpace, ''));\r\n\r\n                    if ((!isNaN(startTime) && !isNaN(endTime)) && startTime >= lastStartTime && endTime > startTime) {\r\n                        if (text !== '') {\r\n                            lastStartTime = startTime;\r\n                            //TODO Make VO external so other parsers can use.\r\n                            captionArray.push({\r\n                                start: startTime,\r\n                                end: endTime,\r\n                                data: text,\r\n                                styles: styles\r\n                            });\r\n                        }\r\n                        else {\r\n                            logger.error('Skipping cue due to empty/malformed cue text');\r\n                        }\r\n                    }\r\n                    else {\r\n                        logger.error('Skipping cue due to incorrect cue timing');\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return captionArray;\r\n    }\r\n\r\n    function convertCuePointTimes(time) {\r\n        const timeArray = time.split(':');\r\n        const len = timeArray.length - 1;\r\n\r\n        time = parseInt( timeArray[len - 1], 10 ) * 60 + parseFloat( timeArray[len]);\r\n\r\n        if ( len === 2 ) {\r\n            time += parseInt( timeArray[0], 10 ) * 3600;\r\n        }\r\n\r\n        return time;\r\n    }\r\n\r\n    function parseItemAttributes(data) {\r\n        const vttCuePoints = data.split(regExToken);\r\n        const arr = vttCuePoints[1].split(regExWhiteSpaceWordBoundary);\r\n        arr.shift(); //remove first array index it is empty...\r\n        vttCuePoints[1] = arr[0];\r\n        arr.shift();\r\n        return {cuePoints: vttCuePoints, styles: getCaptionStyles(arr)};\r\n    }\r\n\r\n    function getCaptionStyles(arr) {\r\n        const styleObject = {};\r\n        arr.forEach(function (element) {\r\n            if (element.split(/:/).length > 1) {\r\n                let val = element.split(/:/)[1];\r\n                if (val && val.search(/%/) != -1) {\r\n                    val = parseInt(val.replace(/%/, ''), 10);\r\n                }\r\n                if (element.match(/align/) || element.match(/A/)) {\r\n                    styleObject.align = val;\r\n                }\r\n                if (element.match(/line/) || element.match(/L/) ) {\r\n                    styleObject.line = val;\r\n                }\r\n                if (element.match(/position/) || element.match(/P/) ) {\r\n                    styleObject.position = val;\r\n                }\r\n                if (element.match(/size/) || element.match(/S/)) {\r\n                    styleObject.size = val;\r\n                }\r\n            }\r\n        });\r\n\r\n        return styleObject;\r\n    }\r\n\r\n    /*\r\n    * VTT can have multiple lines to display per cuepoint.\r\n    */\r\n    function getSublines(data, idx) {\r\n        let i = idx;\r\n\r\n        let subline = '';\r\n        let lineData = '';\r\n        let lineCount;\r\n\r\n        while (data[i] !== '' && i < data.length) {\r\n            i++;\r\n        }\r\n\r\n        lineCount = i - idx;\r\n        if (lineCount > 1) {\r\n            for (let j = 0; j < lineCount; j++) {\r\n                lineData = data[(idx + j)];\r\n                if (!lineData.match(regExToken)) {\r\n                    subline += lineData;\r\n                    if (j !== lineCount - 1) {\r\n                        subline += '\\n';\r\n                    }\r\n                }\r\n                else {\r\n                    // caption text should not have '-->' in it\r\n                    subline = '';\r\n                    break;\r\n                }\r\n            }\r\n        } else {\r\n            lineData = data[idx];\r\n            if (!lineData.match(regExToken))\r\n                subline = lineData;\r\n        }\r\n        return subline;\r\n    }\r\n\r\n    instance = {\r\n        parse: parse\r\n    };\r\n\r\n    setup();\r\n    return instance;\r\n}\r\nVTTParser.__dashjs_factory_name = 'VTTParser';\r\nexport default FactoryMaker.getSingletonFactory(VTTParser);\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport FactoryMaker from '../../../core/FactoryMaker';\r\n\r\nfunction BasicSelector(config) {\r\n\r\n    config = config || {};\r\n    let instance;\r\n\r\n    const blacklistController = config.blacklistController;\r\n\r\n    function select(baseUrls) {\r\n        let index = 0;\r\n        let selectedBaseUrl;\r\n\r\n        if (baseUrls && baseUrls.some((baseUrl, idx) => {\r\n            index = idx;\r\n\r\n            return (!blacklistController.contains(baseUrl.serviceLocation));\r\n        })) {\r\n            selectedBaseUrl = baseUrls[index];\r\n        }\r\n\r\n        return selectedBaseUrl;\r\n    }\r\n\r\n    instance = {\r\n        select: select\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nBasicSelector.__dashjs_factory_name = 'BasicSelector';\r\nexport default FactoryMaker.getClassFactory(BasicSelector);\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport FactoryMaker from '../../../core/FactoryMaker';\r\n\r\nfunction DVBSelector(config) {\r\n\r\n    config = config || {};\r\n    let instance;\r\n\r\n    const blacklistController = config.blacklistController;\r\n\r\n    function getNonBlacklistedBaseUrls(urls) {\r\n        let removedPriorities = [];\r\n\r\n        const samePrioritiesFilter = function (el) {\r\n            if (removedPriorities.length) {\r\n                if ((el.dvb_priority) &&\r\n                        (removedPriorities.indexOf(el.dvb_priority) !== -1)) {\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            return true;\r\n        };\r\n\r\n        const serviceLocationFilter = function (baseUrl) {\r\n            if (blacklistController.contains(baseUrl.serviceLocation)) {\r\n                // whenever a BaseURL is removed from the available list of\r\n                // BaseURLs, any other BaseURL with the same @priority\r\n                // value as the BaseURL being removed shall also be removed\r\n                if (baseUrl.dvb_priority) {\r\n                    removedPriorities.push(baseUrl.dvb_priority);\r\n                }\r\n\r\n                // all URLs in the list which have a @serviceLocation\r\n                // attribute matching an entry in the blacklist shall be\r\n                // removed from the available list of BaseURLs\r\n                return false;\r\n            }\r\n\r\n            return true;\r\n        };\r\n\r\n        return urls.filter(serviceLocationFilter).filter(samePrioritiesFilter);\r\n    }\r\n\r\n    function selectByWeight(availableUrls) {\r\n        const prioritySorter = function (a, b) {\r\n            let diff = a.dvb_priority - b.dvb_priority;\r\n            return isNaN(diff) ? 0 : diff;\r\n        };\r\n\r\n        const topPriorityFilter = function (baseUrl, idx, arr) {\r\n            return !idx || (\r\n                (arr[0].dvb_priority && baseUrl.dvb_priority) &&\r\n                (arr[0].dvb_priority === baseUrl.dvb_priority)\r\n            );\r\n        };\r\n\r\n        let totalWeight = 0;\r\n        let cumulWeights = [];\r\n        let idx = 0;\r\n        let rn,\r\n            urls;\r\n\r\n        // It shall begin by taking the set of resolved BaseURLs present or inherited at the current\r\n        // position in the MPD, resolved and filtered as described in 10.8.2.1, that have the lowest\r\n        // @priority attribute value.\r\n        urls = availableUrls.sort(prioritySorter).filter(topPriorityFilter);\r\n\r\n        if (urls.length) {\r\n            if (urls.length > 1) {\r\n                // If there is more than one BaseURL with this lowest @priority attribute value then the Player\r\n                // shall select one of them at random such that the probability of each BaseURL being chosen\r\n                // is proportional to the value of its @weight attribute. The method described in RFC 2782\r\n                // [26] or picking from a number of weighted entries is suitable for this, but there may be other\r\n                // algorithms which achieve the same effect.\r\n\r\n                // add all the weights together, storing the accumulated weight per entry\r\n                urls.forEach(baseUrl => {\r\n                    totalWeight += baseUrl.dvb_weight;\r\n                    cumulWeights.push(totalWeight);\r\n                });\r\n\r\n                // pick a random number between zero and totalWeight\r\n                rn = Math.floor(Math.random() * (totalWeight - 1));\r\n\r\n                // select the index for the range rn falls within\r\n                cumulWeights.every((limit, index) => {\r\n                    idx = index;\r\n\r\n                    if (rn < limit) {\r\n                        return false;\r\n                    }\r\n\r\n                    return true;\r\n                });\r\n            }\r\n\r\n            return urls[idx];\r\n        }\r\n    }\r\n\r\n    function select(baseUrls) {\r\n        return baseUrls && selectByWeight(\r\n            getNonBlacklistedBaseUrls(\r\n                baseUrls\r\n            )\r\n        );\r\n    }\r\n\r\n    instance = {\r\n        select: select\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nDVBSelector.__dashjs_factory_name = 'DVBSelector';\r\nexport default FactoryMaker.getClassFactory(DVBSelector);\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @class\r\n * @ignore\r\n */\r\nclass BitrateInfo {\r\n    constructor() {\r\n        this.mediaType = null;\r\n        this.bitrate = null;\r\n        this.width = null;\r\n        this.height = null;\r\n        this.scanType = null;\r\n        this.qualityIndex = NaN;\r\n    }\r\n}\r\n\r\nexport default BitrateInfo;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @class\r\n * @ignore\r\n */\r\nclass DashJSError {\r\n    constructor(code, message, data) {\r\n        this.code = code || null;\r\n        this.message = message || null;\r\n        this.data = data || null;\r\n    }\r\n}\r\n\r\nexport default DashJSError;","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n/**\r\n * @class\r\n * @ignore\r\n */\r\nclass DataChunk {\r\n    //Represents a data structure that keep all the necessary info about a single init/media segment\r\n    constructor() {\r\n        this.streamId = null;\r\n        this.mediaInfo = null;\r\n        this.segmentType = null;\r\n        this.quality = NaN;\r\n        this.index = NaN;\r\n        this.bytes = null;\r\n        this.start = NaN;\r\n        this.end = NaN;\r\n        this.duration = NaN;\r\n        this.representationId = null;\r\n        this.endFragment = null;\r\n    }\r\n}\r\n\r\nexport default DataChunk;","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport { HTTPRequest } from '../vo/metrics/HTTPRequest';\r\n\r\n/**\r\n * @class\r\n * @ignore\r\n */\r\nclass FragmentRequest {\r\n    constructor(url) {\r\n        this.action = FragmentRequest.ACTION_DOWNLOAD;\r\n        this.startTime = NaN;\r\n        this.mediaStartTime = NaN;\r\n        this.mediaType = null;\r\n        this.mediaInfo = null;\r\n        this.type = null;\r\n        this.duration = NaN;\r\n        this.timescale = NaN;\r\n        this.range = null;\r\n        this.url = url || null;\r\n        this.serviceLocation = null;\r\n        this.requestStartDate = null;\r\n        this.firstByteDate = null;\r\n        this.requestEndDate = null;\r\n        this.quality = NaN;\r\n        this.index = NaN;\r\n        this.availabilityStartTime = null;\r\n        this.availabilityEndTime = null;\r\n        this.wallStartTime = null;\r\n        this.bytesLoaded = NaN;\r\n        this.bytesTotal = NaN;\r\n        this.delayLoadingTime = NaN;\r\n        this.responseType = 'arraybuffer';\r\n        this.representationId = null;\r\n    }\r\n\r\n    isInitializationRequest() {\r\n        return (this.type && this.type === HTTPRequest.INIT_SEGMENT_TYPE);\r\n    }\r\n\r\n    setInfo(info) {\r\n        this.type = info && info.init ? HTTPRequest.INIT_SEGMENT_TYPE : HTTPRequest.MEDIA_SEGMENT_TYPE;\r\n        this.url = info && info.url ? info.url : null;\r\n        this.range = info && info.range ? info.range.start + '-' + info.range.end : null;\r\n        this.mediaType = info && info.mediaType ? info.mediaType : null;\r\n    }\r\n}\r\n\r\nFragmentRequest.ACTION_DOWNLOAD = 'download';\r\nFragmentRequest.ACTION_COMPLETE = 'complete';\r\n\r\nexport default FragmentRequest;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @class\r\n * @ignore\r\n */\r\nimport FragmentRequest from './FragmentRequest';\r\n\r\nclass HeadRequest extends FragmentRequest {\r\n    constructor(url) {\r\n        super(url);\r\n        this.checkForExistenceOnly = true;\r\n    }\r\n}\r\n\r\nexport default HeadRequest;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @class\r\n * @ignore\r\n */\r\nclass IsoBox {\r\n    constructor(boxData) {\r\n        this.offset = boxData._offset;\r\n        this.type = boxData.type;\r\n        this.size = boxData.size;\r\n        this.boxes = [];\r\n        if (boxData.boxes) {\r\n            for (let i = 0; i < boxData.boxes.length; i++) {\r\n                this.boxes.push(new IsoBox(boxData.boxes[i]));\r\n            }\r\n        }\r\n        this.isComplete = true;\r\n\r\n        switch (boxData.type) {\r\n            case 'sidx':\r\n                this.timescale = boxData.timescale;\r\n                this.earliest_presentation_time = boxData.earliest_presentation_time;\r\n                this.first_offset = boxData.first_offset;\r\n                this.references = boxData.references;\r\n                if (boxData.references) {\r\n                    this.references = [];\r\n                    for (let i = 0; i < boxData.references.length; i++) {\r\n                        let reference = {\r\n                            reference_type: boxData.references[i].reference_type,\r\n                            referenced_size: boxData.references[i].referenced_size,\r\n                            subsegment_duration: boxData.references[i].subsegment_duration\r\n                        };\r\n                        this.references.push(reference);\r\n                    }\r\n                }\r\n                break;\r\n            case 'emsg':\r\n                this.id = boxData.id;\r\n                this.version = boxData.version === 1 ? 1 : 0;\r\n                this.value = boxData.value;\r\n                this.timescale = boxData.timescale;\r\n                this.scheme_id_uri = boxData.scheme_id_uri;\r\n                this.presentation_time_delta = boxData.version === 1 ? boxData.presentation_time : boxData.presentation_time_delta;\r\n                this.event_duration = boxData.event_duration;\r\n                this.message_data = boxData.message_data;\r\n                break;\r\n            case 'mdhd':\r\n                this.timescale = boxData.timescale;\r\n                break;\r\n            case 'mfhd':\r\n                this.sequence_number = boxData.sequence_number;\r\n                break;\r\n            case 'subs':\r\n                this.entry_count = boxData.entry_count;\r\n                this.entries = boxData.entries;\r\n                break;\r\n            case 'tfhd':\r\n                this.base_data_offset = boxData.base_data_offset;\r\n                this.sample_description_index = boxData.sample_description_index;\r\n                this.default_sample_duration = boxData.default_sample_duration;\r\n                this.default_sample_size = boxData.default_sample_size;\r\n                this.default_sample_flags = boxData.default_sample_flags;\r\n                this.flags = boxData.flags;\r\n                break;\r\n            case 'tfdt':\r\n                this.version = boxData.version;\r\n                this.baseMediaDecodeTime = boxData.baseMediaDecodeTime;\r\n                this.flags = boxData.flags;\r\n                break;\r\n            case 'trun':\r\n                this.sample_count = boxData.sample_count;\r\n                this.first_sample_flags = boxData.first_sample_flags;\r\n                this.data_offset = boxData.data_offset;\r\n                this.flags = boxData.flags;\r\n                this.samples = boxData.samples;\r\n                if (boxData.samples) {\r\n                    this.samples = [];\r\n                    for (let i = 0, ln = boxData.samples.length; i < ln; i++) {\r\n                        let sample = {\r\n                            sample_size: boxData.samples[i].sample_size,\r\n                            sample_duration: boxData.samples[i].sample_duration,\r\n                            sample_composition_time_offset: boxData.samples[i].sample_composition_time_offset\r\n                        };\r\n                        this.samples.push(sample);\r\n                    }\r\n                }\r\n                break;\r\n        }\r\n\r\n    }\r\n\r\n    getChildBox(type) {\r\n        for (let i = 0; i < this.boxes.length; i++) {\r\n            if (this.boxes[i].type === type) {\r\n                return this.boxes[i];\r\n            }\r\n        }\r\n    }\r\n\r\n    getChildBoxes(type) {\r\n        let boxes = [];\r\n        for (let i = 0; i < this.boxes.length; i++) {\r\n            if (this.boxes[i].type === type) {\r\n                boxes.push(this.boxes[i]);\r\n            }\r\n        }\r\n        return boxes;\r\n    }\r\n\r\n}\r\n\r\nexport default IsoBox;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @class\r\n * @ignore\r\n */\r\nclass IsoBoxSearchInfo {\r\n    constructor(lastCompletedOffset, found, size) {\r\n        this.lastCompletedOffset = lastCompletedOffset;\r\n        this.found = found;\r\n        this.size = size;\r\n    }\r\n}\r\n\r\nexport default IsoBoxSearchInfo;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @class\r\n * @ignore\r\n */\r\nclass MetricsList {\r\n    constructor() {\r\n        this.TcpList = [];\r\n        this.HttpList = [];\r\n        this.RepSwitchList = [];\r\n        this.BufferLevel = [];\r\n        this.BufferState = [];\r\n        this.PlayList = [];\r\n        this.DroppedFrames = [];\r\n        this.SchedulingInfo = [];\r\n        this.DVRInfo = [];\r\n        this.ManifestUpdate = [];\r\n        this.RequestsQueue = null;\r\n        this.DVBErrors = [];\r\n    }\r\n}\r\n\r\nexport default MetricsList;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @class\r\n * @ignore\r\n */\r\nimport Constants from '../constants/Constants';\r\nimport FragmentRequest from './FragmentRequest';\r\n\r\nclass TextRequest extends FragmentRequest {\r\n    constructor(url, type) {\r\n        super();\r\n        this.url = url || null;\r\n        this.type = type || null;\r\n        this.mediaType = Constants.STREAM;\r\n        this.responseType = ''; //'text' value returns a bad encoding response in Firefox\r\n    }\r\n}\r\n\r\nexport default TextRequest;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @class\r\n * @ignore\r\n */\r\nclass TextTrackInfo {\r\n    constructor() {\r\n        this.captionData = null;\r\n        this.label = null;\r\n        this.lang = null;\r\n        this.defaultTrack = false;\r\n        this.kind = null;\r\n        this.isFragmented = false;\r\n        this.isEmbedded = false;\r\n    }\r\n}\r\n\r\nexport default TextTrackInfo;","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @class\r\n * @ignore\r\n */\r\nclass Thumbnail {\r\n    constructor() {\r\n        this.url = null;\r\n        this.width = null;\r\n        this.height = null;\r\n        this.x = null;\r\n        this.y = null;\r\n    }\r\n}\r\n\r\nexport default Thumbnail;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @class\r\n * @ignore\r\n */\r\nclass ThumbnailTrackInfo {\r\n    constructor() {\r\n        this.bitrate = 0;\r\n        this.width = 0;\r\n        this.height = 0;\r\n        this.tilesHor = 0;\r\n        this.tilesVert = 0;\r\n        this.widthPerTile = 0;\r\n        this.heightPerTile = 0;\r\n        this.startNumber = 0;\r\n        this.segmentDuration = 0;\r\n        this.timescale = 0;\r\n        this.templateUrl = '';\r\n        this.id = '';\r\n    }\r\n}\r\n\r\nexport default ThumbnailTrackInfo;","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @class\r\n * @ignore\r\n */\r\nclass URIFragmentData {\r\n    constructor() {\r\n        this.t = null;\r\n        this.xywh = null;\r\n        this.track = null;\r\n        this.id = null;\r\n        this.s = null;\r\n        this.r = null;\r\n    }\r\n}\r\n\r\nexport default URIFragmentData;\r\n\r\n/*\r\n    From Spec http://www.w3.org/TR/media-frags/\r\n\r\n    temporal (t)     - This dimension denotes a specific time range in the original media, such as \"starting at second 10, continuing until second 20\";\r\n    spatial  (xywh)  - this dimension denotes a specific range of pixels in the original media, such as \"a rectangle with size (100,100) with its top-left at coordinate (10,10)\";\r\n                       Media fragments support also addressing the media along two additional dimensions (in the advanced version defined in Media Fragments 1.0 URI (advanced)):\r\n    track    (track) - this dimension denotes one or more tracks in the original media, such as \"the english audio and the video track\";\r\n    id       (id)    - this dimension denotes a named temporal fragment within the original media, such as \"chapter 2\", and can be seen as a convenient way of specifying a temporal fragment.\r\n\r\n\r\n    ## Note\r\n    Akamai is purposing to add #s=X to the ISO standard.\r\n        - (X) Value would be a start time to seek to at startup instead of starting at 0 or live edge\r\n        - Allows for seeking back before the start time unlike a temporal clipping.\r\n*/","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n/**\r\n * @class\r\n * @ignore\r\n */\r\nclass BufferLevel {\r\n    /**\r\n     * @description This Object holds reference to the current buffer level and the time it was recorded.\r\n     */\r\n    constructor() {\r\n        /**\r\n         * Real-Time | Time of the measurement of the buffer level.\r\n         * @public\r\n         */\r\n        this.t = null;\r\n        /**\r\n         * Level of the buffer in milliseconds. Indicates the playout duration for which\r\n         * media data of all active media components is available starting from the\r\n         * current playout time.\r\n         * @public\r\n         */\r\n        this.level = null;\r\n    }\r\n}\r\n\r\nexport default BufferLevel;","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport MetricsConstants from '../../constants/MetricsConstants';\r\n\r\n/**\r\n * @class\r\n * @ignore\r\n */\r\nclass BufferState {\r\n    /**\r\n     * @description This Object holds reference to the current buffer state of the video element.\r\n     */\r\n    constructor() {\r\n        /**\r\n         * The Buffer Level Target determined by the BufferLevelRule.\r\n         * @public\r\n         */\r\n        this.target = null;\r\n        /**\r\n         * Current buffer state. Will be MetricsConstants.BUFFER_EMPTY or MetricsConstants.BUFFER_LOADED.\r\n         * @public\r\n         */\r\n        this.state = MetricsConstants.BUFFER_EMPTY;\r\n    }\r\n}\r\n\r\nexport default BufferState;","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n/**\r\n * @class\r\n * @ignore\r\n */\r\nclass DVRInfo {\r\n    /**\r\n     * @description This Object holds reference to DVR availability window information.\r\n     */\r\n    constructor() {\r\n\r\n        /**\r\n         * The current time of the video element when this was created.\r\n         * @public\r\n         */\r\n        this.time = null;\r\n        /**\r\n         * The current Segment Availability Range as an object with start and end properties.\r\n         * It's delta defined by the timeShiftBufferDepth MPD attribute.\r\n         * @public\r\n         */\r\n        this.range = null;\r\n        /**\r\n         * Reference to the internal ManifestInfo.js VO.\r\n         * @public\r\n         */\r\n        this.manifestInfo = null;\r\n    }\r\n}\r\n\r\nexport default DVRInfo;","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @class\r\n * @ignore\r\n */\r\nclass DroppedFrames {\r\n    /**\r\n     * @description This Object holds reference to DroppedFrames count and the time it was recorded.\r\n     */\r\n    constructor()\r\n    {\r\n        /**\r\n         * Real-Time | Time of the measurement of the dropped frames.\r\n         * @public\r\n         */\r\n        this.time = null;\r\n        /**\r\n         * Number of dropped frames\r\n         * @public\r\n         */\r\n        this.droppedFrames = null;\r\n    }\r\n}\r\n\r\nexport default DroppedFrames;","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @classdesc This Object holds reference to the HTTPRequest for manifest, fragment and xlink loading.\r\n * Members which are not defined in ISO23009-1 Annex D should be prefixed by a _ so that they are ignored\r\n * by Metrics Reporting code.\r\n * @ignore\r\n */\r\nclass HTTPRequest {\r\n    /**\r\n     * @class\r\n     */\r\n    constructor() {\r\n        /**\r\n         * Identifier of the TCP connection on which the HTTP request was sent.\r\n         * @public\r\n         */\r\n        this.tcpid = null;\r\n        /**\r\n         * This is an optional parameter and should not be included in HTTP request/response transactions for progressive download.\r\n         * The type of the request:\r\n         * - MPD\r\n         * - XLink expansion\r\n         * - Initialization Fragment\r\n         * - Index Fragment\r\n         * - Media Fragment\r\n         * - Bitstream Switching Fragment\r\n         * - other\r\n         * @public\r\n         */\r\n        this.type = null;\r\n        /**\r\n         * The original URL (before any redirects or failures)\r\n         * @public\r\n         */\r\n        this.url = null;\r\n        /**\r\n         * The actual URL requested, if different from above\r\n         * @public\r\n         */\r\n        this.actualurl = null;\r\n        /**\r\n         * The contents of the byte-range-spec part of the HTTP Range header.\r\n         * @public\r\n         */\r\n        this.range = null;\r\n        /**\r\n         * Real-Time | The real time at which the request was sent.\r\n         * @public\r\n         */\r\n        this.trequest = null;\r\n        /**\r\n         * Real-Time | The real time at which the first byte of the response was received.\r\n         * @public\r\n         */\r\n        this.tresponse = null;\r\n        /**\r\n         * The HTTP response code.\r\n         * @public\r\n         */\r\n        this.responsecode = null;\r\n        /**\r\n         * The duration of the throughput trace intervals (ms), for successful requests only.\r\n         * @public\r\n         */\r\n        this.interval = null;\r\n        /**\r\n         * Throughput traces, for successful requests only.\r\n         * @public\r\n         */\r\n        this.trace = [];\r\n\r\n        /**\r\n         * Type of stream (\"audio\" | \"video\" etc..)\r\n         * @public\r\n         */\r\n        this._stream = null;\r\n        /**\r\n         * Real-Time | The real time at which the request finished.\r\n         * @public\r\n         */\r\n        this._tfinish = null;\r\n        /**\r\n         * The duration of the media requests, if available, in milliseconds.\r\n         * @public\r\n         */\r\n        this._mediaduration = null;\r\n        /**\r\n         * The media segment quality\r\n         * @public\r\n         */\r\n        this._quality = null;\r\n        /**\r\n         * all the response headers from request.\r\n         * @public\r\n         */\r\n        this._responseHeaders = null;\r\n        /**\r\n         * The selected service location for the request. string.\r\n         * @public\r\n         */\r\n        this._serviceLocation = null;\r\n    }\r\n}\r\n\r\n/**\r\n * @classdesc This Object holds reference to the progress of the HTTPRequest.\r\n * @ignore\r\n */\r\nclass HTTPRequestTrace {\r\n    /**\r\n    * @class\r\n    */\r\n    constructor() {\r\n        /**\r\n         * Real-Time | Measurement stream start.\r\n         * @public\r\n         */\r\n        this.s = null;\r\n        /**\r\n         * Measurement stream duration (ms).\r\n         * @public\r\n         */\r\n        this.d = null;\r\n        /**\r\n         * List of integers counting the bytes received in each trace interval within the measurement stream.\r\n         * @public\r\n         */\r\n        this.b = [];\r\n    }\r\n}\r\n\r\nHTTPRequest.GET = 'GET';\r\nHTTPRequest.HEAD = 'HEAD';\r\nHTTPRequest.MPD_TYPE = 'MPD';\r\nHTTPRequest.XLINK_EXPANSION_TYPE = 'XLinkExpansion';\r\nHTTPRequest.INIT_SEGMENT_TYPE = 'InitializationSegment';\r\nHTTPRequest.INDEX_SEGMENT_TYPE = 'IndexSegment';\r\nHTTPRequest.MEDIA_SEGMENT_TYPE = 'MediaSegment';\r\nHTTPRequest.BITSTREAM_SWITCHING_SEGMENT_TYPE = 'BitstreamSwitchingSegment';\r\nHTTPRequest.OTHER_TYPE = 'other';\r\n\r\nexport { HTTPRequest, HTTPRequestTrace };\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @classdesc This Object holds reference to the manifest update information.\r\n * @ignore\r\n */\r\nclass ManifestUpdate {\r\n    /**\r\n     * @class\r\n     */\r\n    constructor() {\r\n\r\n        /**\r\n         * Media Type Video | Audio | FragmentedText\r\n         * @public\r\n         */\r\n        this.mediaType = null;\r\n        /**\r\n         * MPD Type static | dynamic\r\n         * @public\r\n         */\r\n        this.type = null;\r\n        /**\r\n         * When this manifest update was requested\r\n         * @public\r\n         */\r\n        this.requestTime = null;\r\n        /**\r\n         * When this manifest update was received\r\n         * @public\r\n         */\r\n        this.fetchTime = null;\r\n        /**\r\n         * Calculated Availability Start time of the stream.\r\n         * @public\r\n         */\r\n        this.availabilityStartTime = null;\r\n        /**\r\n         * the seek point (liveEdge for dynamic, Stream[0].startTime for static)\r\n         * @public\r\n         */\r\n        this.presentationStartTime = 0;\r\n        /**\r\n         * The calculated difference between the server and client wall clock time\r\n         * @public\r\n         */\r\n        this.clientTimeOffset = 0;\r\n        /**\r\n         * Actual element.currentTime\r\n         * @public\r\n         */\r\n        this.currentTime = null;\r\n        /**\r\n         * Actual element.ranges\r\n         * @public\r\n         */\r\n        this.buffered = null;\r\n        /**\r\n         * Static is fixed value of zero. dynamic should be ((Now-@availabilityStartTime) - elementCurrentTime)\r\n         * @public\r\n         */\r\n        this.latency = 0;\r\n        /**\r\n         * Array holding list of StreamInfo VO Objects\r\n         * @public\r\n         */\r\n        this.streamInfo = [];\r\n        /**\r\n         * Array holding list of RepresentationInfo VO Objects\r\n         * @public\r\n         */\r\n        this.representationInfo = [];\r\n\r\n    }\r\n}\r\n\r\n/**\r\n * @classdesc This Object holds reference to the current period's stream information when the manifest was updated.\r\n * @ignore\r\n */\r\nclass ManifestUpdateStreamInfo {\r\n    /**\r\n     * @class\r\n     */\r\n    constructor() {\r\n        /**\r\n         * Stream@id\r\n         * @public\r\n         */\r\n        this.id = null;\r\n        /**\r\n         * Period Index\r\n         * @public\r\n         */\r\n        this.index = null;\r\n        /**\r\n         * Stream@start\r\n         * @public\r\n         */\r\n        this.start = null;\r\n        /**\r\n         * Stream@duration\r\n         * @public\r\n         */\r\n        this.duration = null;\r\n    }\r\n}\r\n\r\n/**\r\n * @classdesc This Object holds reference to the current representation's info when the manifest was updated.\r\n * @ignore\r\n */\r\nclass ManifestUpdateRepresentationInfo {\r\n    /**\r\n     * @class\r\n     */\r\n    constructor() {\r\n        /**\r\n         * Track@id\r\n         * @public\r\n         */\r\n        this.id = null;\r\n        /**\r\n         * Representation Index\r\n         * @public\r\n         */\r\n        this.index = null;\r\n        /**\r\n         * Media Type Video | Audio | FragmentedText\r\n         * @public\r\n         */\r\n        this.mediaType = null;\r\n        /**\r\n         * Which representation\r\n         * @public\r\n         */\r\n        this.streamIndex = null;\r\n        /**\r\n         * Holds reference to @presentationTimeOffset\r\n         * @public\r\n         */\r\n        this.presentationTimeOffset = null;\r\n        /**\r\n         * Holds reference to @startNumber\r\n         * @public\r\n         */\r\n        this.startNumber = null;\r\n        /**\r\n         * list|template|timeline\r\n         * @public\r\n         */\r\n        this.fragmentInfoType = null;\r\n    }\r\n}\r\n\r\nexport { ManifestUpdate, ManifestUpdateStreamInfo, ManifestUpdateRepresentationInfo };\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @classdesc a PlayList from ISO23009-1 Annex D, this Object holds reference to the playback session information\r\n * @ignore\r\n */\r\nclass PlayList {\r\n    /**\r\n     * @class\r\n     */\r\n    constructor() {\r\n\r\n        /**\r\n         * Timestamp of the user action that starts the playback stream...\r\n         * @public\r\n         */\r\n        this.start = null;\r\n        /**\r\n         * Presentation time at which playout was requested by the user...\r\n         * @public\r\n         */\r\n        this.mstart = null;\r\n        /**\r\n         * Type of user action which triggered playout\r\n         * - New playout request (e.g. initial playout or seeking)\r\n         * - Resume from pause\r\n         * - Other user request (e.g. user-requested quality change)\r\n         * - Start of a metrics collection stream (hence earlier entries in the play list not collected)\r\n         * @public\r\n         */\r\n        this.starttype = null;\r\n\r\n        /**\r\n         * List of streams of continuous rendering of decoded samples.\r\n         * @public\r\n         */\r\n        this.trace = [];\r\n    }\r\n}\r\n\r\n/* Public Static Constants */\r\nPlayList.INITIAL_PLAYOUT_START_REASON = 'initial_playout';\r\nPlayList.SEEK_START_REASON = 'seek';\r\nPlayList.RESUME_FROM_PAUSE_START_REASON = 'resume';\r\nPlayList.METRICS_COLLECTION_START_REASON = 'metrics_collection_start';\r\n\r\n/**\r\n * @classdesc a PlayList.Trace from ISO23009-1 Annex D\r\n * @ignore\r\n */\r\nclass PlayListTrace {\r\n    /**\r\n     * @class\r\n     */\r\n    constructor() {\r\n        /**\r\n         * The value of the Representation@id of the Representation from which the samples were taken.\r\n         * @type {string}\r\n         * @public\r\n         */\r\n        this.representationid = null;\r\n        /**\r\n         * If not present, this metrics concerns the Representation as a whole.\r\n         * If present, subreplevel indicates the greatest value of any\r\n         * Subrepresentation@level being rendered.\r\n         * @type {number}\r\n         * @public\r\n         */\r\n        this.subreplevel = null;\r\n        /**\r\n         * The time at which the first sample was rendered\r\n         * @type {number}\r\n         * @public\r\n         */\r\n        this.start = null;\r\n        /**\r\n         * The presentation time of the first sample rendered.\r\n         * @type {number}\r\n         * @public\r\n         */\r\n        this.mstart = null;\r\n        /**\r\n         * The duration of the continuously presented samples (which is the same in real time and media time). \"Continuously presented\" means that the media clock continued to advance at the playout speed throughout the interval. NOTE: the spec does not call out the units, but all other durations etc are in ms, and we use ms too.\r\n         * @type {number}\r\n         * @public\r\n         */\r\n        this.duration = null;\r\n        /**\r\n         * The playback speed relative to normal playback speed (i.e.normal forward playback speed is 1.0).\r\n         * @type {number}\r\n         * @public\r\n         */\r\n        this.playbackspeed = null;\r\n        /**\r\n         * The reason why continuous presentation of this Representation was stopped.\r\n         * representation switch\r\n         * rebuffering\r\n         * user request\r\n         * end of Period\r\n         * end of Stream\r\n         * end of content\r\n         * end of a metrics collection period\r\n         *\r\n         * @type {string}\r\n         * @public\r\n         */\r\n        this.stopreason = null;\r\n    }\r\n}\r\n\r\nPlayListTrace.REPRESENTATION_SWITCH_STOP_REASON = 'representation_switch';\r\nPlayListTrace.REBUFFERING_REASON = 'rebuffering';\r\nPlayListTrace.USER_REQUEST_STOP_REASON = 'user_request';\r\nPlayListTrace.END_OF_PERIOD_STOP_REASON = 'end_of_period';\r\nPlayListTrace.END_OF_CONTENT_STOP_REASON = 'end_of_content';\r\nPlayListTrace.METRICS_COLLECTION_STOP_REASON = 'metrics_collection_end';\r\nPlayListTrace.FAILURE_STOP_REASON = 'failure';\r\n\r\nexport { PlayList, PlayListTrace };\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @class\r\n * @ignore\r\n */\r\nclass RepresentationSwitch {\r\n    /**\r\n     * @description This Object holds reference to the info at quality switch between two representations.\r\n     */\r\n    constructor() {\r\n\r\n        /**\r\n         * Time of the switch event.\r\n         * @public\r\n         */\r\n        this.t = null;\r\n        /**\r\n         * The media presentation time of the earliest access unit\r\n         * (out of all media content components) played out from\r\n         * the Representation.\r\n         *\r\n         * @public\r\n         */\r\n        this.mt = null;\r\n        /**\r\n         * Value of Representation@id identifying the switch-to Representation.\r\n         * @public\r\n         */\r\n        this.to = null;\r\n        /**\r\n         * If not present, this metrics concerns the Representation as a whole.\r\n         * If present, lto indicates the value of SubRepresentation@level within\r\n         * Representation identifying the switch-to level of the Representation.\r\n         *\r\n         * @public\r\n         */\r\n        this.lto = null;\r\n\r\n    }\r\n}\r\n\r\nexport default RepresentationSwitch;","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @class\r\n * @ignore\r\n */\r\nclass RequestsQueue {\r\n    /**\r\n     * @description This Object holds reference to Fragment Model's request queues\r\n     */\r\n    constructor() {\r\n\r\n        /**\r\n         * Array of all of the requests that have begun to load\r\n         * This request may not make it into the executed queue if it is abandon due to ABR rules for example.\r\n         * @public\r\n         */\r\n        this.loadingRequests = [];\r\n        /**\r\n         * Array of the The requests that have completed\r\n         * @public\r\n         */\r\n        this.executedRequests = [];\r\n    }\r\n}\r\n\r\nexport default RequestsQueue;","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @class\r\n * @ignore\r\n */\r\nclass SchedulingInfo {\r\n    /**\r\n     * @description This Object holds reference to the index handling of the current fragment being loaded or executed.\r\n     */\r\n    constructor() {\r\n\r\n        /**\r\n         * Type of stream Audio | Video | FragmentedText\r\n         * @public\r\n         */\r\n        this.mediaType = null;\r\n        /**\r\n         * Time of the scheduling event.\r\n         * @public\r\n         */\r\n        this.t = null;\r\n\r\n        /**\r\n         * Type of fragment (initialization | media)\r\n         * @public\r\n         */\r\n        this.type = null;\r\n        /**\r\n         * Presentation start time of fragment\r\n         * @public\r\n         */\r\n        this.startTime = null;\r\n        /**\r\n         * Availability start time of fragment\r\n         * @public\r\n         */\r\n        this.availabilityStartTime = null;\r\n        /**\r\n         * Duration of fragment\r\n         * @public\r\n         */\r\n        this.duration = null;\r\n        /**\r\n         * Bit Rate Quality of fragment\r\n         * @public\r\n         */\r\n        this.quality = null;\r\n        /**\r\n         * Range of fragment\r\n         * @public\r\n         */\r\n        this.range = null;\r\n\r\n        /**\r\n         * Current state of fragment\r\n         * @public\r\n         */\r\n        this.state = null;\r\n    }\r\n}\r\n\r\nexport default SchedulingInfo;"]}